#!/usr/bin/env node
// Generated by js_of_ocaml 4.0.0
(function(a){typeof
globalThis!=="object"&&(this?b():(a.defineProperty(a.prototype,"_T_",{configurable:true,get:b}),_T_));function
b(){var
b=this||self;b.globalThis=b;delete
a.prototype._T_}}(Object));(function(A){"use strict";var
Zb=typeof
module==="object"&&module.exports||A,eZ=214,ts="Invalid_argument",t$="i64",eY="Map.bal",hl="@[",cp=192,z=123,tr=249,fy="add",r6="import",fj=152,tq="%ni",h2="abs",tp="extadd_pairwise_i",t_=395720131,r5="offset",fi=159,d0="load",cm="_u",sK="lt_s",r4=233,hE=183,ir=163,eX=173,hk=239,fh=139,bH=0xff,t9="block",r1=242,r2="mismatching label",r3=309,t8="extmul_low_i",dZ="result",hD="neg",hC=191,t7="ceil",dY=122,hj=167,fg=145,h1="elem segment",aL="0",r0="nop",iq=181,Y=128,rZ="Sys_blocked_io",sJ="fd ",M=248,ip=146,ff="eq",to="popcnt",io=153,t6=1027,rY=-16,cT=0xFF,fe="mul",hi=193,sI=205556449,dM=246,im="data segment",rW=-808010220,rX="%u",sH="%.*g",tn="i32",rV=298,tm="f64x2",t5="nth",fd=108,cX="table",t4="_bigarray",Z=127,tl="v128",dR=1024,hh="@{",rU="f32",h0=133,cW=-49,il="e",rT=" : flags Open_rdonly and Open_wronly are not compatible",tk="syntax error",eW=240,bG="-",sG="gt",hB=": Not a directory",eU=216,eV="store",rS=" : file already exists",tj="extend_high_i",rR="extmul_high_i",fq=184,rQ="extend_low_i",bq=0xffffff,ti="integer too large",th="externref",t3=-43,sF="Out_of_memory",eT=190,t2="inf",hA="index out of bounds",ae=-58,eS="select",hz="_bigarr02",hg=168,hV=244,ik=111,sE=66447547,hU=2147483647,tg=208,rP="le_s",dX="type",rO=-47,tf=", characters ",bg=0xffff,t1="global $",hy=222,rN=12520,tZ=229,t0="module",fc=143,S=-91,tY="infinity",dL=1000,D=126,hx=142,hf=236,s="",sD="i64x2",a$=224,hT="type ",fx="sub",tX="then",rM="^",tW="\\t",te=223,cS=0x3f,tV="shl",aK=124,tU=-872313182,sC=1031864215,fa=150,fb=169,sB=282,fw=112,rL="Match_failure",hS=140,aJ=16777215,e$=135,co=-10,ac=252,sA="export",fp="malformed UTF-8 encoding",sz=696517344,bf=".",td=1021133848,cR="+",e_=147,sy=0xf0,rK="param",e9=171,b_=110,dP=116,rJ="%li",tT="declare",rI="le_u",sw=213,sx="max",bF=237,dd=-237,sv=294,rH="wrong number of lane literals",hR=65536,fv=-32,cQ="text/arrange.ml",hQ=138,tc=")",fo="nan",ij=241,rG="nan:0x",rF=0xe0,su="%.12g",st=221,ii=117,tb=0xdfff,rE="div",bp="/",tS="Assert_failure",ta="gt_s",tR="nearest",s$=836501035,hP="ENOTDIR",bE=225,cl=250,ih=185,tQ=219,he=115,s_=206,eR="ne",e8='"',sq=-840203068,hw=170,sr=231,ss="trunc",hd=1255,hO="function",hv=196,so="(",sp=0x800,a_=255,rD=Infinity,sn="item",hb=245,hc="jsError",be=0x8000,rC="memory.fill",tP="return",e7=182,b5=256,s9="unreachable",sm="loop",s8="End_of_file",hu=156,hN="Failure",ha=129,e6=209,dQ="local",rB="\n",ht=131,hs=204,hM=218,ig="ENOENT",hL=247,sl="([^/]+)",ie=200,b9=194,s7="shr_s",hr=0xf,rA="ge_s",dO="of_string",bo=-48,s6=0xdc00,rz="and",E=125,sk="f64",tO="ENOTEMPTY",sj="constant out of range",ar="camlinternalFormat.ml",si="Division_by_zero",tN=162,ry=203,g$=148,s5="Sys_error",id=172,sh="if",fn=130,hq="32",tM="xor",rx="EEXIST",s4=1836278016,dW="%d",s3="Printexc.handle_uncaught_exception",f5=-160,d$=118,eQ=121,bJ="_s",tL="Cygwin",dK="global",hp=119,bI="int_of_string",tK=1114112,rw="\\n",e5=104,rv="memory.grow",tJ="le",b3=120,ru="illegal opcode ",as=103,rt="ge_u",cU=102,rs=512,eP="64x2",de=257,ic=113,rr=0x7ff0,sg="ref.null",s2="or",dN=101,sf="min",eO=177,g9=144,g_=228,fm=132,cP="0x",rq="\n",cn=254,hK="binary/encode.ml",br=100,rp="lt_u",fu="%Lx",se=" : flags Open_text and Open_binary are not compatible",cV="memory",s1="%Li",g8=105,b4=65535,ib=230,tI="else",e4=164,m=-33,sd="\\\\",tH=440380662,f4=-144,s0="f32x4",tG="low_",b2="32x4",sZ=205,ho=188,g7=158,hn=160,ia=107,tF=2048,ft=161,dJ=157,sY="lexing: empty token",h$="Unix.Unix_error",tD="narrow_i",tE="gt_u",e3=109,dV="16x8",h_="64",g6="mkdir",sc="convert_",sb="length out of bounds",tC=-440679759,hJ=136,tB="Stack_overflow",eN=": No such file or directory",tA="/static/",ea=-94,dU=253,fl=137,tz="Not_found",ro=-92,sX=227,ty=235,g5=151,sW="floor",g4=220,e2=195,sV="i8x16",ck="func",sU=", ",h9=174,rm="memory.size",rn="win32",sT=199,hI=-65,tx=243,sa="extern",sS=837731904,h8="rmdir",tw="lt",e1=141,sR="ref.is_null",r$="integer representation too long",sQ="i32x4",h7=149,tv=1026,rl="funcref",h6=202,hm=232,rj=-34,rk="i16x8",sP="shr_u",hH="8x16",rh="Pervasives.do_at_exit",ri="utf8",hG=251,fs=106,e0=155,ad=" ",fr=186,tu="Fatal error: exception ",bh=0x80,sN="drop",sO="Undefined_recursive_module",rg="memory.copy",r_=":",h5=234,g3="exec/ixx.ml",r9=215,r8=201,rf=217,fk="Set.bal",dT="%lx",tt="_",hF=189,h4="compare: functional value",p=-128,g2=134,sL="ge",sM="%i",re="sqrt",h3=-17,dS=114,r7="mut";function
Yl(d,b,e,c,f){if(c<=b)for(var
a=1;a<=f;a++)e[c+a]=d[b+a];else
for(var
a=f;a>=1;a--)e[c+a]=d[b+a];return 0}function
fJ(c,b,a){var
d=String.fromCharCode;if(b==0&&a<=4096&&a==c.length)return d.apply(null,c);var
e=s;for(;0<a;b+=dR,a-=dR)e+=d.apply(null,c.slice(b,b+Math.min(a,dR)));return e}function
fz(b){if(A.Uint8Array)var
c=new(A.Uint8Array)(b.l);else
var
c=new
Array(b.l);var
e=b.c,d=e.length,a=0;for(;a<d;a++)c[a]=e.charCodeAt(a);for(d=b.l;a<d;a++)c[a]=0;b.c=c;b.t=4;return c}function
b7(d,e,b,f,c){if(c==0)return 0;if(f==0&&(c>=b.l||b.t==2&&c>=b.c.length)){b.c=d.t==4?fJ(d.c,e,c):e==0&&d.c.length==c?d.c:d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else
if(b.t==2&&f==b.c.length){b.c+=d.t==4?fJ(d.c,e,c):e==0&&d.c.length==c?d.c:d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else{if(b.t!=4)fz(b);var
g=d.c,h=b.c;if(d.t==4)if(f<=e)for(var
a=0;a<c;a++)h[f+a]=g[e+a];else
for(var
a=c-1;a>=0;a--)h[f+a]=g[e+a];else{var
i=Math.min(c,g.length-e);for(var
a=0;a<i;a++)h[f+a]=g.charCodeAt(e+a);for(;a<c;a++)h[f+a]=0}}return 0}function
bL(a){return a}function
bK(a,b,c,d,e){b7(bL(a),b,c,d,e);return 0}function
g(a,b){switch(a.t&6){default:if(b>=a.c.length)return 0;case
0:return a.c.charCodeAt(b);case
4:return a.c[b]}}function
Y3(b,a){throw[0,b,a]}function
c7(b,a){if(b==0)return s;if(a.repeat)return a.repeat(b);var
d=s,c=0;for(;;){if(b&1)d+=a;b>>=1;if(b==0)return d;a+=a;c++;if(c==9)a.slice(0,1)}}function
c0(a){if(a.t==2)a.c+=c7(a.l-a.c.length,"\0");else
a.c=fJ(a.c,0,a.c.length);a.t=0}function
uH(a){if(a.length<24){for(var
b=0;b<a.length;b++)if(a.charCodeAt(b)>Z)return false;return true}else
return!/[^\x00-\x7f]/.test(a)}function
iG(e){for(var
j=s,c=s,g,f,h,a,b=0,i=e.length;b<i;b++){f=e.charCodeAt(b);if(f<bh){for(var
d=b+1;d<i&&(f=e.charCodeAt(d))<bh;d++);if(d-b>rs){c.substr(0,1);j+=c;c=s;j+=e.slice(b,d)}else
c+=e.slice(b,d);if(d==i)break;b=d}a=1;if(++b<i&&((h=e.charCodeAt(b))&-64)==Y){g=h+(f<<6);if(f<rF){a=g-0x3080;if(a<bh)a=1}else{a=2;if(++b<i&&((h=e.charCodeAt(b))&-64)==Y){g=h+(g<<6);if(f<sy){a=g-0xe2080;if(a<sp||a>=0xd7ff&&a<0xe000)a=2}else{a=3;if(++b<i&&((h=e.charCodeAt(b))&-64)==Y&&f<0xf5){a=h-0x3c82080+(g<<6);if(a<0x10000||a>0x10ffff)a=3}}}}}if(a<4){b-=a;c+="\ufffd"}else
if(a>bg)c+=String.fromCharCode(0xd7c0+(a>>10),s6+(a&0x3FF));else
c+=String.fromCharCode(a);if(c.length>dR){c.substr(0,1);j+=c;c=s}}return j+c}function
bs(c,a,b){this.t=c;this.c=a;this.l=b}bs.prototype.toString=function(){switch(this.t){case
9:return this.c;default:c0(this);case
0:if(uH(this.c)){this.t=9;return this.c}this.t=8;case
8:return this.c}};bs.prototype.toUtf16=function(){var
a=this.toString();if(this.t==9)return a;return iG(a)};bs.prototype.slice=function(){var
a=this.t==4?this.c.slice():this.c;return new
bs(this.t,a,this.l)};function
uk(a){return new
bs(0,a,a.length)}function
a(a){return uk(a)}function
iE(c,b){Y3(c,a(b))}var
ag=[0];function
at(a){iE(ag.Invalid_argument,a)}function
cq(){at(hA)}function
uj(b,a){if(a>>>0>=b.l-3)cq();var
c=g(b,a),d=g(b,a+1),e=g(b,a+2),f=g(b,a+3);return f<<24|e<<16|d<<8|c}var
uu=Math.pow(2,-24);function
uB(a){throw a}function
fH(){uB(ag.Division_by_zero)}function
x(b,c,a){this.lo=b&bq;this.mi=c&bq;this.hi=a&bg}x.prototype.caml_custom="_j";x.prototype.copy=function(){return new
x(this.lo,this.mi,this.hi)};x.prototype.ucompare=function(a){if(this.hi>a.hi)return 1;if(this.hi<a.hi)return-1;if(this.mi>a.mi)return 1;if(this.mi<a.mi)return-1;if(this.lo>a.lo)return 1;if(this.lo<a.lo)return-1;return 0};x.prototype.compare=function(a){var
b=this.hi<<16,c=a.hi<<16;if(b>c)return 1;if(b<c)return-1;if(this.mi>a.mi)return 1;if(this.mi<a.mi)return-1;if(this.lo>a.lo)return 1;if(this.lo<a.lo)return-1;return 0};x.prototype.neg=function(){var
a=-this.lo,b=-this.mi+(a>>24),c=-this.hi+(b>>24);return new
x(a,b,c)};x.prototype.add=function(a){var
b=this.lo+a.lo,c=this.mi+a.mi+(b>>24),d=this.hi+a.hi+(c>>24);return new
x(b,c,d)};x.prototype.sub=function(a){var
b=this.lo-a.lo,c=this.mi-a.mi+(b>>24),d=this.hi-a.hi+(c>>24);return new
x(b,c,d)};x.prototype.mul=function(a){var
b=this.lo*a.lo,c=(b*uu|0)+this.mi*a.lo+this.lo*a.mi,d=(c*uu|0)+this.hi*a.lo+this.mi*a.mi+this.lo*a.hi;return new
x(b,c,d)};x.prototype.isZero=function(){return(this.lo|this.mi|this.hi)==0};x.prototype.isNeg=function(){return this.hi<<16<0};x.prototype.and=function(a){return new
x(this.lo&a.lo,this.mi&a.mi,this.hi&a.hi)};x.prototype.or=function(a){return new
x(this.lo|a.lo,this.mi|a.mi,this.hi|a.hi)};x.prototype.xor=function(a){return new
x(this.lo^a.lo,this.mi^a.mi,this.hi^a.hi)};x.prototype.shift_left=function(a){a=a&63;if(a==0)return this;if(a<24)return new
x(this.lo<<a,this.mi<<a|this.lo>>24-a,this.hi<<a|this.mi>>24-a);if(a<48)return new
x(0,this.lo<<a-24,this.mi<<a-24|this.lo>>48-a);return new
x(0,0,this.lo<<a-48)};x.prototype.shift_right_unsigned=function(a){a=a&63;if(a==0)return this;if(a<24)return new
x(this.lo>>a|this.mi<<24-a,this.mi>>a|this.hi<<24-a,this.hi>>a);if(a<48)return new
x(this.mi>>a-24|this.hi<<48-a,this.hi>>a-24,0);return new
x(this.hi>>a-48,0,0)};x.prototype.shift_right=function(a){a=a&63;if(a==0)return this;var
c=this.hi<<16>>16;if(a<24)return new
x(this.lo>>a|this.mi<<24-a,this.mi>>a|c<<24-a,this.hi<<16>>a>>>16);var
b=this.hi<<16>>31;if(a<48)return new
x(this.mi>>a-24|this.hi<<48-a,this.hi<<16>>a-24>>16,b&bg);return new
x(this.hi<<16>>a-32,b,b)};x.prototype.lsl1=function(){this.hi=this.hi<<1|this.mi>>23;this.mi=(this.mi<<1|this.lo>>23)&bq;this.lo=this.lo<<1&bq};x.prototype.lsr1=function(){this.lo=(this.lo>>>1|this.mi<<23)&bq;this.mi=(this.mi>>>1|this.hi<<23)&bq;this.hi=this.hi>>>1};x.prototype.udivmod=function(e){var
c=0,b=this.copy(),a=e.copy(),d=new
x(0,0,0);while(b.ucompare(a)>0){c++;a.lsl1()}while(c>=0){c--;d.lsl1();if(b.ucompare(a)>=0){d.lo++;b=b.sub(a)}a.lsr1()}return{quotient:d,modulus:b}};x.prototype.div=function(a){var
b=this;if(a.isZero())fH();var
d=b.hi^a.hi;if(b.hi&be)b=b.neg();if(a.hi&be)a=a.neg();var
c=b.udivmod(a).quotient;if(d&be)c=c.neg();return c};x.prototype.mod=function(b){var
a=this;if(b.isZero())fH();var
d=a.hi;if(a.hi&be)a=a.neg();if(b.hi&be)b=b.neg();var
c=a.udivmod(b).modulus;if(d&be)c=c.neg();return c};x.prototype.toInt=function(){return this.lo|this.mi<<24};x.prototype.toFloat=function(){return(this.hi<<16)*Math.pow(2,32)+this.mi*Math.pow(2,24)+this.lo};x.prototype.toArray=function(){return[this.hi>>8,this.hi&bH,this.mi>>16,this.mi>>8&bH,this.mi&bH,this.lo>>16,this.lo>>8&bH,this.lo&bH]};x.prototype.lo32=function(){return this.lo|(this.mi&bH)<<24};x.prototype.hi32=function(){return this.mi>>>8&bg|this.hi<<16};function
c3(a){return new
x(a[7]<<0|a[6]<<8|a[5]<<16,a[4]<<0|a[3]<<8|a[2]<<16,a[1]<<0|a[0]<<8)}function
Ys(d,c){if(c>>>0>=d.l-7)cq();var
b=new
Array(8);for(var
a=0;a<8;a++)b[7-a]=g(d,c+a);return c3(b)}function
U(a,c,b){b&=bH;if(a.t!=4){if(c==a.c.length){a.c+=String.fromCharCode(b);if(c+1==a.l)a.t=0;return 0}fz(a)}a.c[c]=b;return 0}function
bM(b,a,c){if(a>>>0>=b.l)cq();return U(b,a,c)}function
Yv(b,a,c){if(a>>>0>=b.l-1)cq();var
e=cT&c>>8,d=cT&c;U(b,a+0,d);U(b,a+1,e);return 0}function
hW(b,a,c){if(a>>>0>=b.l-3)cq();var
g=cT&c>>24,f=cT&c>>16,e=cT&c>>8,d=cT&c;U(b,a+0,d);U(b,a+1,e);U(b,a+2,f);U(b,a+3,g);return 0}function
c5(a){return a.toArray()}function
iM(c,b,e){if(b>>>0>=c.l-7)cq();var
d=c5(e);for(var
a=0;a<8;a++)U(c,b+7-a,d[a]);return 0}function
bN(c,a){if(c.fun)return bN(c.fun,a);if(typeof
c!=="function")return c;var
b=c.length|0;if(b===0)return c.apply(null,a);var
e=a.length|0,d=b-e|0;if(d==0)return c.apply(null,a);else
if(d<0)return bN(c.apply(null,a.slice(0,b)),a.slice(b));else
return function(){var
e=arguments.length==0?1:arguments.length,d=new
Array(a.length+e);for(var
b=0;b<a.length;b++)d[b]=a[b];for(var
b=0;b<arguments.length;b++)d[a.length+b]=arguments[b];return bN(c,d)}}function
d1(){at(hA)}function
bi(a,b){if(b>>>0>=a.length-1)d1();return a}function
Yw(a){if(isFinite(a)){if(Math.abs(a)>=2.2250738585072014e-308)return 0;if(a!=0)return 1;return 2}return isNaN(a)?4:3}function
Yx(){return[0]}function
af(a){if(a<0)at("Bytes.create");return new
bs(a?2:9,s,a)}function
c1(b,a){if(a==0)fH();return b/a|0}function
bu(a){a.t&6&&c0(a);return a.c}var
Zd=Math.log2&&Math.log2(1.1235582092889474E+307)==1020;function
Zc(a){if(Zd)return Math.floor(Math.log2(a));var
b=0;if(a==0)return-Infinity;if(a>=1)while(a>=2){a/=2;b++}else
while(a<1){a*=2;b--}return b}function
fA(c){var
a=new(A.Float32Array)(1);a[0]=c;var
b=new(A.Int32Array)(a.buffer);return b[0]|0}function
O(b,c,a){return new
x(b,c,a)}function
cr(a){if(!isFinite(a)){if(isNaN(a))return O(1,0,rr);return a>0?O(0,0,rr):O(0,0,0xfff0)}var
f=a==0&&1/a==-Infinity?be:a>=0?0:be;if(f)a=-a;var
b=Zc(a)+1023;if(b<=0){b=0;a/=Math.pow(2,-tv)}else{a/=Math.pow(2,b-t6);if(a<16){a*=2;b-=1}if(b==0)a/=2}var
d=Math.pow(2,24),c=a|0;a=(a-c)*d;var
e=a|0;a=(a-e)*d;var
g=a|0;c=c&hr|f|b<<4;return O(g,e,c)}function
uh(c,b,g){c.write(32,b.dims.length);c.write(32,b.kind|b.layout<<8);if(b.caml_custom==hz)for(var
a=0;a<b.dims.length;a++)if(b.dims[a]<bg)c.write(16,b.dims[a]);else{c.write(16,bg);c.write(32,0);c.write(32,b.dims[a])}else
for(var
a=0;a<b.dims.length;a++)c.write(32,b.dims[a]);switch(b.kind){case
2:case
3:case
12:for(var
a=0;a<b.data.length;a++)c.write(8,b.data[a]);break;case
4:case
5:for(var
a=0;a<b.data.length;a++)c.write(16,b.data[a]);break;case
6:for(var
a=0;a<b.data.length;a++)c.write(32,b.data[a]);break;case
8:case
9:c.write(8,0);for(var
a=0;a<b.data.length;a++)c.write(32,b.data[a]);break;case
7:for(var
a=0;a<b.data.length/2;a++){var
e=c5(b.get(a));for(var
d=0;d<8;d++)c.write(8,e[d])}break;case
1:for(var
a=0;a<b.data.length;a++){var
e=c5(cr(b.get(a)));for(var
d=0;d<8;d++)c.write(8,e[d])}break;case
0:for(var
a=0;a<b.data.length;a++){var
e=fA(b.get(a));c.write(32,e)}break;case
10:for(var
a=0;a<b.data.length/2;a++){var
d=b.get(a);c.write(32,fA(d[1]));c.write(32,fA(d[2]))}break;case
11:for(var
a=0;a<b.data.length/2;a++){var
f=b.get(a),e=c5(cr(f[1]));for(var
d=0;d<8;d++)c.write(8,e[d]);var
e=c5(cr(f[2]));for(var
d=0;d<8;d++)c.write(8,e[d])}break}g[0]=(4+b.dims.length)*4;g[1]=(4+b.dims.length)*8}function
uf(a){switch(a){case
7:case
10:case
11:return 2;default:return 1}}function
Yo(c,e){var
b=A,a;switch(c){case
0:a=b.Float32Array;break;case
1:a=b.Float64Array;break;case
2:a=b.Int8Array;break;case
3:a=b.Uint8Array;break;case
4:a=b.Int16Array;break;case
5:a=b.Uint16Array;break;case
6:a=b.Int32Array;break;case
7:a=b.Int32Array;break;case
8:a=b.Int32Array;break;case
9:a=b.Int32Array;break;case
10:a=b.Float32Array;break;case
11:a=b.Float64Array;break;case
12:a=b.Uint8Array;break}if(!a)at("Bigarray.create: unsupported kind");var
d=new
a(e*uf(c));return d}function
fB(c){var
a=new(A.Int32Array)(1);a[0]=c;var
b=new(A.Float32Array)(a.buffer);return b[0]}function
cs(d){var
f=d.lo,g=d.mi,b=d.hi,c=(b&0x7fff)>>4;if(c==2047)return(f|g|b&hr)==0?b&be?-Infinity:Infinity:NaN;var
e=Math.pow(2,-24),a=(f*e+g)*e+(b&hr);if(c>0){a+=16;a*=Math.pow(2,c-t6)}else
a*=Math.pow(2,-tv);if(b&be)a=-a;return a}function
is(b){var
d=b.length,c=1;for(var
a=0;a<d;a++){if(b[a]<0)at("Bigarray.create: negative dimension");c=c*b[a]}return c}function
YI(b,a){return new
x(b&bq,b>>>24&bH|(a&bg)<<8,a>>>16&bg)}function
iw(a){return a.hi32()}function
ix(a){return a.lo32()}var
Yp=t4;function
b6(c,d,b,a){this.kind=c;this.layout=d;this.dims=b;this.data=a}b6.prototype.caml_custom=Yp;b6.prototype.offset=function(b){var
c=0;if(typeof
b==="number")b=[b];if(!(b
instanceof
Array))at("bigarray.js: invalid offset");if(this.dims.length!=b.length)at("Bigarray.get/set: bad number of dimensions");if(this.layout==0)for(var
a=0;a<this.dims.length;a++){if(b[a]<0||b[a]>=this.dims[a])d1();c=c*this.dims[a]+b[a]}else
for(var
a=this.dims.length-1;a>=0;a--){if(b[a]<1||b[a]>this.dims[a])d1();c=c*this.dims[a]+(b[a]-1)}return c};b6.prototype.get=function(a){switch(this.kind){case
7:var
d=this.data[a*2+0],b=this.data[a*2+1];return YI(d,b);case
10:case
11:var
e=this.data[a*2+0],c=this.data[a*2+1];return[cn,e,c];default:return this.data[a]}};b6.prototype.set=function(a,b){switch(this.kind){case
7:this.data[a*2+0]=ix(b);this.data[a*2+1]=iw(b);break;case
10:case
11:this.data[a*2+0]=b[1];this.data[a*2+1]=b[2];break;default:this.data[a]=b;break}return 0};b6.prototype.fill=function(b){switch(this.kind){case
7:var
c=ix(b),e=iw(b);if(c==e)this.data.fill(c);else
for(var
a=0;a<this.data.length;a++)this.data[a]=a%2==0?c:e;break;case
10:case
11:var
d=b[1],f=b[2];if(d==f)this.data.fill(d);else
for(var
a=0;a<this.data.length;a++)this.data[a]=a%2==0?d:f;break;default:this.data.fill(b);break}};b6.prototype.compare=function(b,g){if(this.layout!=b.layout||this.kind!=b.kind){var
e=this.kind|this.layout<<8,f=b.kind|b.layout<<8;return f-e}if(this.dims.length!=b.dims.length)return b.dims.length-this.dims.length;for(var
a=0;a<this.dims.length;a++)if(this.dims[a]!=b.dims[a])return this.dims[a]<b.dims[a]?-1:1;switch(this.kind){case
0:case
1:case
10:case
11:var
c,d;for(var
a=0;a<this.data.length;a++){c=this.data[a];d=b.data[a];if(c<d)return-1;if(c>d)return 1;if(c!=d){if(!g)return NaN;if(c==c)return 1;if(d==d)return-1}}break;case
7:for(var
a=0;a<this.data.length;a+=2){if(this.data[a+1]<b.data[a+1])return-1;if(this.data[a+1]>b.data[a+1])return 1;if(this.data[a]>>>0<b.data[a]>>>0)return-1;if(this.data[a]>>>0>b.data[a]>>>0)return 1}break;case
2:case
3:case
4:case
5:case
6:case
8:case
9:case
12:for(var
a=0;a<this.data.length;a++){if(this.data[a]<b.data[a])return-1;if(this.data[a]>b.data[a])return 1}break}return 0};function
cY(c,d,b,a){this.kind=c;this.layout=d;this.dims=b;this.data=a}cY.prototype=new
b6();cY.prototype.offset=function(a){if(typeof
a!=="number")if(a
instanceof
Array&&a.length==1)a=a[0];else
at("Ml_Bigarray_c_1_1.offset");if(a<0||a>=this.dims[0])d1();return a};cY.prototype.get=function(a){return this.data[a]};cY.prototype.set=function(a,b){this.data[a]=b;return 0};cY.prototype.fill=function(a){this.data.fill(a);return 0};function
ud(c,d,a,b){var
e=uf(c);if(is(a)*e!=b.length)at("length doesn't match dims");if(d==0&&a.length==1&&e==1)return new
cY(c,d,a,b);return new
b6(c,d,a,b)}function
aG(b){if(!ag.Failure)ag.Failure=[M,a(hN),-3];iE(ag.Failure,b)}function
ue(b,v,r){var
i=b.read32s();if(i<0||i>16)aG("input_value: wrong number of bigarray dimensions");var
p=b.read32s(),j=p&bH,o=p>>8&1,h=[];if(r==hz)for(var
a=0;a<i;a++){var
n=b.read16u();if(n==bg){var
t=b.read32u(),u=b.read32u();if(t!=0)aG("input_value: bigarray dimension overflow in 32bit");n=u}h.push(n)}else
for(var
a=0;a<i;a++)h.push(b.read32u());var
d=is(h),f=Yo(j,d),g=ud(j,o,h,f);switch(j){case
2:for(var
a=0;a<d;a++)f[a]=b.read8s();break;case
3:case
12:for(var
a=0;a<d;a++)f[a]=b.read8u();break;case
4:for(var
a=0;a<d;a++)f[a]=b.read16s();break;case
5:for(var
a=0;a<d;a++)f[a]=b.read16u();break;case
6:for(var
a=0;a<d;a++)f[a]=b.read32s();break;case
8:case
9:var
s=b.read8u();if(s)aG("input_value: cannot read bigarray with 64-bit OCaml ints");for(var
a=0;a<d;a++)f[a]=b.read32s();break;case
7:var
e=new
Array(8);for(var
a=0;a<d;a++){for(var
c=0;c<8;c++)e[c]=b.read8u();var
q=c3(e);g.set(a,q)}break;case
1:var
e=new
Array(8);for(var
a=0;a<d;a++){for(var
c=0;c<8;c++)e[c]=b.read8u();var
k=cs(c3(e));g.set(a,k)}break;case
0:for(var
a=0;a<d;a++){var
k=fB(b.read32s());g.set(a,k)}break;case
10:for(var
a=0;a<d;a++){var
m=fB(b.read32s()),l=fB(b.read32s());g.set(a,[cn,m,l])}break;case
11:var
e=new
Array(8);for(var
a=0;a<d;a++){for(var
c=0;c<8;c++)e[c]=b.read8u();var
m=cs(c3(e));for(var
c=0;c<8;c++)e[c]=b.read8u();var
l=cs(c3(e));g.set(a,[cn,m,l])}break}v[0]=(4+i)*4;return ud(j,o,h,f)}function
uc(a,b,c){return a.compare(b,c)}function
cw(a,b){return Math.imul(a,b)}function
bP(b,a){a=cw(a,0xcc9e2d51|0);a=a<<15|a>>>32-15;a=cw(a,0x1b873593);b^=a;b=b<<13|b>>>32-13;return(b+(b<<2)|0)+(0xe6546b64|0)|0}function
YE(a,b){a=bP(a,ix(b));a=bP(a,iw(b));return a}function
ur(a,b){return YE(a,cr(b))}function
ug(c){var
b=is(c.dims),d=0;switch(c.kind){case
2:case
3:case
12:if(b>b5)b=b5;var
e=0,a=0;for(a=0;a+4<=c.data.length;a+=4){e=c.data[a+0]|c.data[a+1]<<8|c.data[a+2]<<16|c.data[a+3]<<24;d=bP(d,e)}e=0;switch(b&3){case
3:e=c.data[a+2]<<16;case
2:e|=c.data[a+1]<<8;case
1:e|=c.data[a+0];d=bP(d,e)}break;case
4:case
5:if(b>Y)b=Y;var
e=0,a=0;for(a=0;a+2<=c.data.length;a+=2){e=c.data[a+0]|c.data[a+1]<<16;d=bP(d,e)}if((b&1)!=0)d=bP(d,c.data[a]);break;case
6:if(b>64)b=64;for(var
a=0;a<b;a++)d=bP(d,c.data[a]);break;case
8:case
9:if(b>64)b=64;for(var
a=0;a<b;a++)d=bP(d,c.data[a]);break;case
7:if(b>32)b=32;b*=2;for(var
a=0;a<b;a++)d=bP(d,c.data[a]);break;case
10:b*=2;case
0:if(b>64)b=64;for(var
a=0;a<b;a++)d=ur(d,c.data[a]);break;case
11:b*=2;case
1:if(b>32)b=32;for(var
a=0;a<b;a++)d=ur(d,c.data[a]);break}return d}function
YG(a,b){b[0]=4;return a.read32s()}function
YW(a,b){switch(a.read8u()){case
1:b[0]=4;return a.read32s();case
2:aG("input_value: native integer value too large");default:aG("input_value: ill-formed native integer")}}function
YQ(c,d){var
b=new
Array(8);for(var
a=0;a<8;a++)b[a]=c.read8u();d[0]=8;return c3(b)}function
YM(e,d,b){var
c=c5(d);for(var
a=0;a<8;a++)e.write(8,c[a]);b[0]=8;b[1]=8}function
YH(a,b,c){return a.compare(b)}function
YJ(a){return a.lo32()^a.hi32()}var
un={"_j":{deserialize:YQ,serialize:YM,fixed_length:8,compare:YH,hash:YJ},"_i":{deserialize:YG,fixed_length:4},"_n":{deserialize:YW,fixed_length:4},"_bigarray":{deserialize:function(a,b){return ue(a,b,t4)},serialize:uh,compare:uc,hash:ug},"_bigarr02":{deserialize:function(a,b){return ue(a,b,hz)},serialize:uh,compare:uc,hash:ug}};function
it(a){return un[a.caml_custom]&&un[a.caml_custom].compare}function
ul(f,c,d,e){var
b=it(c);if(b){var
a=d>0?b(c,f,e):b(f,c,e);if(e&&a!=a)return d;if(+a!=+a)return+a;if((a|0)!=0)return a|0}return d}function
fE(a){return a
instanceof
bs}function
iC(a){return fE(a)}function
um(a){if(typeof
a==="number")return dL;else
if(fE(a))return ac;else
if(iC(a))return 1252;else
if(a
instanceof
Array&&a[0]===a[0]>>>0&&a[0]<=a_){var
b=a[0]|0;return b==cn?0:b}else
if(a
instanceof
String)return rN;else
if(typeof
a=="string")return rN;else
if(a
instanceof
Number)return dL;else
if(a&&a.caml_custom)return hd;else
if(a&&a.compare)return 1256;else
if(typeof
a=="function")return 1247;else
if(typeof
a=="symbol")return 1251;return 1001}function
iB(a,b){if(a<b)return-1;if(a==b)return 0;return 1}function
ui(a,b){a.t&6&&c0(a);b.t&6&&c0(b);return a.c<b.c?-1:a.c>b.c?1:0}function
r(a,b){return ui(a,b)}function
cZ(a,b,d){var
e=[];for(;;){if(!(d&&a===b)){var
f=um(a);if(f==cl){a=a[1];continue}var
g=um(b);if(g==cl){b=b[1];continue}if(f!==g){if(f==dL){if(g==hd)return ul(a,b,-1,d);return-1}if(g==dL){if(f==hd)return ul(b,a,1,d);return 1}return f<g?-1:1}switch(f){case
247:at(h4);break;case
248:var
c=iB(a[2],b[2]);if(c!=0)return c|0;break;case
249:at(h4);break;case
250:at("equal: got Forward_tag, should not happen");break;case
251:at("equal: abstract value");break;case
252:if(a!==b){var
c=ui(a,b);if(c!=0)return c|0}break;case
253:at("equal: got Double_tag, should not happen");break;case
254:at("equal: got Double_array_tag, should not happen");break;case
255:at("equal: got Custom_tag, should not happen");break;case
1247:at(h4);break;case
1255:var
i=it(a);if(i!=it(b))return a.caml_custom<b.caml_custom?-1:1;if(!i)at("compare: abstract value");var
c=i(a,b,d);if(c!=c)return d?-1:c;if(c!==(c|0))return-1;if(c!=0)return c|0;break;case
1256:var
c=a.compare(b,d);if(c!=c)return d?-1:c;if(c!==(c|0))return-1;if(c!=0)return c|0;break;case
1000:a=+a;b=+b;if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!d)return NaN;if(a==a)return 1;if(b==b)return-1}break;case
1001:if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!d)return NaN;if(a==a)return 1;if(b==b)return-1}break;case
1251:if(a!==b){if(!d)return NaN;return 1}break;case
1252:var
a=bu(a),b=bu(b);if(a!==b){if(a<b)return-1;if(a>b)return 1}break;case
12520:var
a=a.toString(),b=b.toString();if(a!==b){if(a<b)return-1;if(a>b)return 1}break;case
246:case
254:default:if(a.length!=b.length)return a.length<b.length?-1:1;if(a.length>1)e.push(a,b,1);break}}if(e.length==0)return 0;var
h=e.pop();b=e.pop();a=e.pop();if(h+1<a.length)e.push(a,b,h+1);a=a[h];b=b[h]}}function
N(a,b){return+(cZ(a,b,false)==0)}function
Yz(a,c,b,d){if(b>0)if(c==0&&(b>=a.l||a.t==2&&b>=a.c.length))if(d==0){a.c=s;a.t=2}else{a.c=c7(b,String.fromCharCode(d));a.t=b==a.l?0:2}else{if(a.t!=4)fz(a);for(b+=c;c<b;c++)a.c[c]=d}return 0}function
YA(a){var
b;a=bu(a);b=+a;if(a.length>0&&b===b)return b;a=a.replace(/_/g,s);b=+a;if(a.length>0&&b===b||/^[+-]?nan$/i.test(a))return b;var
c=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(a);if(c){var
d=c[3].replace(/0+$/,s),f=parseInt(c[1]+c[2]+d,16),e=(c[5]|0)-4*d.length;b=f*Math.pow(2,e);return b}if(/^\+?inf(inity)?$/i.test(a))return Infinity;if(/^-inf(inity)?$/i.test(a))return-Infinity;aG("float_of_string")}function
iD(d){d=bu(d);var
e=d.length;if(e>31)at("format_int: format too long");var
a={justify:cR,signstyle:bG,filler:ad,alternate:false,base:0,signedconv:false,width:0,uppercase:false,sign:1,prec:-1,conv:"f"};for(var
c=0;c<e;c++){var
b=d.charAt(c);switch(b){case"-":a.justify=bG;break;case"+":case" ":a.signstyle=b;break;case"0":a.filler=aL;break;case"#":a.alternate=true;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":a.width=0;while(b=d.charCodeAt(c)-48,b>=0&&b<=9){a.width=a.width*10+b;c++}c--;break;case".":a.prec=0;c++;while(b=d.charCodeAt(c)-48,b>=0&&b<=9){a.prec=a.prec*10+b;c++}c--;case"d":case"i":a.signedconv=true;case"u":a.base=10;break;case"x":a.base=16;break;case"X":a.base=16;a.uppercase=true;break;case"o":a.base=8;break;case"e":case"f":case"g":a.signedconv=true;a.conv=b;break;case"E":case"F":case"G":a.signedconv=true;a.uppercase=true;a.conv=b.toLowerCase();break}}return a}function
iu(b,f){if(b.uppercase)f=f.toUpperCase();var
e=f.length;if(b.signedconv&&(b.sign<0||b.signstyle!=bG))e++;if(b.alternate){if(b.base==8)e+=1;if(b.base==16)e+=2}var
c=s;if(b.justify==cR&&b.filler==ad)for(var
d=e;d<b.width;d++)c+=ad;if(b.signedconv)if(b.sign<0)c+=bG;else
if(b.signstyle!=bG)c+=b.signstyle;if(b.alternate&&b.base==8)c+=aL;if(b.alternate&&b.base==16)c+=cP;if(b.justify==cR&&b.filler==aL)for(var
d=e;d<b.width;d++)c+=aL;c+=f;if(b.justify==bG)for(var
d=e;d<b.width;d++)c+=ad;return a(c)}function
up(i,c){function
j(a,b){if(Math.abs(a)<1.0)return a.toFixed(b);else{var
c=parseInt(a.toString().split(cR)[1]);if(c>20){c-=20;a/=Math.pow(10,c);a+=new
Array(c+1).join(aL);if(b>0)a=a+bf+new
Array(b+1).join(aL);return a}else
return a.toFixed(b)}}var
a,e=iD(i),d=e.prec<0?6:e.prec;if(c<0||c==0&&1/c==-Infinity){e.sign=-1;c=-c}if(isNaN(c)){a=fo;e.filler=ad}else
if(!isFinite(c)){a=t2;e.filler=ad}else
switch(e.conv){case"e":var
a=c.toExponential(d),b=a.length;if(a.charAt(b-3)==il)a=a.slice(0,b-1)+aL+a.slice(b-1);break;case"f":a=j(c,d);break;case"g":d=d?d:1;a=c.toExponential(d-1);var
h=a.indexOf(il),g=+a.slice(h+1);if(g<-4||c>=1e21||c.toFixed(0).length>d){var
b=h-1;while(a.charAt(b)==aL)b--;if(a.charAt(b)==bf)b--;a=a.slice(0,b+1)+a.slice(h);b=a.length;if(a.charAt(b-3)==il)a=a.slice(0,b-1)+aL+a.slice(b-1);break}else{var
f=d;if(g<0){f-=g+1;a=c.toFixed(f)}else
while(a=c.toFixed(f),a.length>d+1)f--;if(f){var
b=a.length-1;while(a.charAt(b)==aL)b--;if(a.charAt(b)==bf)b--;a=a.slice(0,b+1)}}break}return iu(e,a)}function
d3(e,c){if(bu(e)==dW)return a(s+c);var
b=iD(e);if(c<0)if(b.signedconv){b.sign=-1;c=-c}else
c>>>=0;var
d=c.toString(b.base);if(b.prec>=0){b.filler=ad;var
f=b.prec-d.length;if(f>0)d=c7(f,aL)+d}return iu(b,d)}var
YZ=0;function
aY(){return YZ++}function
fF(a){return a.toUtf16()}function
d5(){return typeof
A.process!=="undefined"&&typeof
A.process.versions!=="undefined"&&typeof
A.process.versions.node!=="undefined"}function
Ze(){function
a(a){if(a.charAt(0)===bp)return[s,a.substring(1)];return}function
b(c){var
g=/^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,a=g.exec(c),b=a[1]||s,e=Boolean(b&&b.charAt(1)!==r_);if(Boolean(a[2]||e)){var
d=a[1]||s,f=a[2]||s;return[d,c.substring(d.length+f.length)]}return}return d5()&&A.process&&A.process.platform?A.process.platform===rn?b:a:a}var
iH=Ze();function
uF(a){return a.slice(-1)!==bp?a+bp:a}if(d5()&&A.process&&A.process.cwd)var
d2=A.process.cwd().replace(/\\/g,bp);else
var
d2="/static";d2=uF(d2);function
YS(a){a=fF(a);if(!iH(a))a=d2+a;var
e=iH(a),d=e[1].split(bp),b=[];for(var
c=0;c<d.length;c++)switch(d[c]){case"..":if(b.length>1)b.pop();break;case".":break;default:b.push(d[c]);break}b.unshift(e[0]);b.orig=a;return b}function
Y_(e){for(var
f=s,b=f,a,h,c=0,g=e.length;c<g;c++){a=e.charCodeAt(c);if(a<bh){for(var
d=c+1;d<g&&(a=e.charCodeAt(d))<bh;d++);if(d-c>rs){b.substr(0,1);f+=b;b=s;f+=e.slice(c,d)}else
b+=e.slice(c,d);if(d==g)break;c=d}if(a<sp){b+=String.fromCharCode(0xc0|a>>6);b+=String.fromCharCode(bh|a&cS)}else
if(a<0xd800||a>=tb)b+=String.fromCharCode(rF|a>>12,bh|a>>6&cS,bh|a&cS);else
if(a>=0xdbff||c+1==g||(h=e.charCodeAt(c+1))<s6||h>tb)b+="\xef\xbf\xbd";else{c++;a=(a<<10)+h-0x35fdc00;b+=String.fromCharCode(sy|a>>18,bh|a>>12&cS,bh|a>>6&cS,bh|a&cS)}if(b.length>dR){b.substr(0,1);f+=b;b=s}}return f+b}function
Yu(a){var
b=9;if(!uH(a))b=8,a=Y_(a);return new
bs(b,a,a.length)}function
aN(a){return Yu(a)}var
Zg=["E2BIG","EACCES","EAGAIN","EBADF","EBUSY","ECHILD","EDEADLK","EDOM",rx,"EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENAMETOOLONG","ENFILE","ENODEV",ig,"ENOEXEC","ENOLCK","ENOMEM","ENOSPC","ENOSYS",hP,tO,"ENOTTY","ENXIO","EPERM","EPIPE","ERANGE","EROFS","ESPIPE","ESRCH","EXDEV","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EOPNOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","EHOSTDOWN","EHOSTUNREACH","ELOOP","EOVERFLOW"];function
cz(d,f,e,a){var
b=Zg.indexOf(d);if(b<0){if(a==null)a=-9999;b=[0,a]}var
c=[b,aN(f||s),aN(e||s)];return c}var
uz={};function
cx(a){return uz[a]}function
cy(b,a){throw[0,b].concat(a)}function
Yt(a){return new
bs(4,a,a.length)}function
V(a){iE(ag.Sys_error,a)}function
Y1(a){V(a+eN)}function
Yr(b,a){if(a>>>0>=b.l)cq();return g(b,a)}function
a5(a){return a.l}function
ua(){}function
ay(a){this.data=a}ay.prototype=new
ua();ay.prototype.truncate=function(a){var
b=this.data;this.data=af(a|0);b7(b,0,this.data,0,a)};ay.prototype.length=function(){return a5(this.data)};ay.prototype.write=function(b,d,g,a){var
c=this.length();if(b+a>=c){var
e=af(b+a),f=this.data;this.data=e;b7(f,0,this.data,0,c)}bK(d,g,this.data,b,a);return 0};ay.prototype.read=function(c,a,d,b){var
e=this.length();b7(this.data,c,a,d,b);return 0};ay.prototype.read_one=function(a){return Yr(this.data,a)};ay.prototype.close=function(){};ay.prototype.constructor=ay;function
aM(b,a){this.content={};this.root=b;this.lookupFun=a}aM.prototype.nm=function(a){return this.root+a};aM.prototype.create_dir_if_needed=function(d){var
c=d.split(bp),b=s;for(var
a=0;a<c.length-1;a++){b+=c[a]+bp;if(this.content[b])continue;this.content[b]=Symbol("directory")}};aM.prototype.slash=function(a){return/\/$/.test(a)?a:a+bp};aM.prototype.lookup=function(b){if(!this.content[b]&&this.lookupFun){var
c=this.lookupFun(a(this.root),a(b));if(c!==0){this.create_dir_if_needed(b);this.content[b]=new
ay(bL(c[1]))}}};aM.prototype.exists=function(a){if(a==s)return 1;var
b=this.slash(a);if(this.content[b])return 1;this.lookup(a);return this.content[a]?1:0};aM.prototype.mkdir=function(c,e,d){var
b=d&&cx(h$);if(this.exists(c))if(b)cy(b,cz(rx,g6,this.nm(c)));else
V(c+": File exists");var
a=/^(.*)\/[^/]+/.exec(c);a=a&&a[1]||s;if(!this.exists(a))if(b)cy(b,cz(ig,g6,this.nm(a)));else
V(a+eN);if(!this.is_dir(a))if(b)cy(b,cz(hP,g6,this.nm(a)));else
V(a+hB);this.create_dir_if_needed(this.slash(c))};aM.prototype.rmdir=function(a,f){var
b=f&&cx(h$),c=a==s?s:this.slash(a),e=new
RegExp(rM+c+sl);if(!this.exists(a))if(b)cy(b,cz(ig,h8,this.nm(a)));else
V(a+eN);if(!this.is_dir(a))if(b)cy(b,cz(hP,h8,this.nm(a)));else
V(a+hB);for(var
d
in
this.content)if(d.match(e))if(b)cy(b,cz(tO,h8,this.nm(a)));else
V(this.nm(a)+": Directory not empty");delete
this.content[c]};aM.prototype.readdir=function(a){var
f=a==s?s:this.slash(a);if(!this.exists(a))V(a+eN);if(!this.is_dir(a))V(a+hB);var
g=new
RegExp(rM+f+sl),d={},c=[];for(var
e
in
this.content){var
b=e.match(g);if(b&&!d[b[1]]){d[b[1]]=true;c.push(b[1])}}return c};aM.prototype.is_dir=function(a){if(a==s)return true;var
b=this.slash(a);return this.content[b]?1:0};aM.prototype.unlink=function(a){var
b=this.content[a]?true:false;delete
this.content[a];return b};aM.prototype.open=function(a,b){if(b.rdonly&&b.wronly)V(this.nm(a)+rT);if(b.text&&b.binary)V(this.nm(a)+se);this.lookup(a);if(this.content[a]){if(this.is_dir(a))V(this.nm(a)+" : is a directory");if(b.create&&b.excl)V(this.nm(a)+rS);var
c=this.content[a];if(b.truncate)c.truncate();return c}else
if(b.create){this.create_dir_if_needed(a);this.content[a]=new
ay(af(0));return this.content[a]}else
Y1(this.nm(a))};aM.prototype.register=function(c,a){var
b;if(this.content[c])V(this.nm(c)+rS);if(fE(a))b=new
ay(a);if(iC(a))b=new
ay(bL(a));else
if(a
instanceof
Array)b=new
ay(Yt(a));else
if(typeof
a==="string")b=new
ay(uk(a));else
if(a.toString){var
d=bL(aN(a.toString()));b=new
ay(d)}if(b){this.create_dir_if_needed(c);this.content[c]=b}else
V(this.nm(c)+" : registering file with invalid content type")};aM.prototype.constructor=aM;function
u(a){return a5(a)}function
aO(b,a){return g(b,a)}function
Yn(d){var
c=u(d),b=new
Array(c),a=0;for(;a<c;a++)b[a]=aO(d,a);return b}function
Ym(a){if(a.t!=4)fz(a);return a.c}function
bt(a){this.fs=require("fs");this.fd=a}bt.prototype=new
ua();bt.prototype.truncate=function(a){try{this.fs.ftruncateSync(this.fd,a|0)}catch(a){V(a.toString())}};bt.prototype.length=function(){try{return this.fs.fstatSync(this.fd).size}catch(a){V(a.toString())}};bt.prototype.write=function(f,b,c,e){var
a=Yn(b);if(!(a
instanceof
A.Uint8Array))a=new(A.Uint8Array)(a);var
d=A.Buffer.from(a);try{this.fs.writeSync(this.fd,d,c,e,f)}catch(a){V(a.toString())}return 0};bt.prototype.read=function(g,d,c,f){var
a=Ym(d);if(!(a
instanceof
A.Uint8Array))a=new(A.Uint8Array)(a);var
e=A.Buffer.from(a);try{this.fs.readSync(this.fd,e,c,f,g)}catch(a){V(a.toString())}for(var
b=0;b<f;b++)bM(d,c+b,e[c+b]);return 0};bt.prototype.read_one=function(c){var
b=new(A.Uint8Array)(1),a=A.Buffer.from(b);try{this.fs.readSync(this.fd,a,0,1,c)}catch(a){V(a.toString())}return a[0]};bt.prototype.close=function(){try{this.fs.closeSync(this.fd)}catch(a){V(a.toString())}};bt.prototype.constructor=bt;function
az(a){this.fs=require("fs");this.root=a}az.prototype.nm=function(a){return this.root+a};az.prototype.exists=function(a){try{return this.fs.existsSync(this.nm(a))?1:0}catch(a){return 0}};az.prototype.mkdir=function(b,a,c){try{this.fs.mkdirSync(this.nm(b),{mode:a});return 0}catch(a){this.raise_nodejs_error(a,c)}};az.prototype.rmdir=function(a,b){try{this.fs.rmdirSync(this.nm(a));return 0}catch(a){this.raise_nodejs_error(a,b)}};az.prototype.readdir=function(a,b){try{return this.fs.readdirSync(this.nm(a))}catch(a){this.raise_nodejs_error(a,b)}};az.prototype.is_dir=function(a){try{return this.fs.statSync(this.nm(a)).isDirectory()?1:0}catch(a){V(a.toString())}};az.prototype.unlink=function(a,c){try{var
b=this.fs.existsSync(this.nm(a))?1:0;this.fs.unlinkSync(this.nm(a));return b}catch(a){this.raise_nodejs_error(a,c)}};az.prototype.open=function(f,c,g){var
a=require("constants"),b=0;for(var
e
in
c)switch(e){case"rdonly":b|=a.O_RDONLY;break;case"wronly":b|=a.O_WRONLY;break;case"append":b|=a.O_WRONLY|a.O_APPEND;break;case"create":b|=a.O_CREAT;break;case"truncate":b|=a.O_TRUNC;break;case"excl":b|=a.O_EXCL;break;case"binary":b|=a.O_BINARY;break;case"text":b|=a.O_TEXT;break;case"nonblock":b|=a.O_NONBLOCK;break}try{var
d=this.fs.openSync(this.nm(f),b);return new
bt(d)}catch(a){this.raise_nodejs_error(a,g)}};az.prototype.rename=function(b,a,c){try{this.fs.renameSync(this.nm(b),this.nm(a))}catch(a){this.raise_nodejs_error(a,c)}};az.prototype.stat=function(b,c){try{var
a=this.fs.statSync(this.nm(b));return this.stats_from_js(a)}catch(a){this.raise_nodejs_error(a,c)}};az.prototype.lstat=function(b,c){try{var
a=this.fs.lstatSync(this.nm(b));return this.stats_from_js(a)}catch(a){this.raise_nodejs_error(a,c)}};az.prototype.symlink=function(d,c,a,b){try{this.fs.symlinkSync(this.nm(c),this.nm(a),d?"dir":"file");return 0}catch(a){this.raise_nodejs_error(a,b)}};az.prototype.readlink=function(b,c){try{var
a=this.fs.readlinkSync(this.nm(b),ri);return aN(a)}catch(a){this.raise_nodejs_error(a,c)}};az.prototype.raise_nodejs_error=function(a,d){var
b=cx(h$);if(d&&b){var
c=cz(a.code,a.syscall,a.path,a.errno);cy(b,c)}else
V(a.toString())};az.prototype.stats_from_js=function(a){var
b;if(a.isFile())b=0;else
if(a.isDirectory())b=1;else
if(a.isCharacterDevice())b=2;else
if(a.isBlockDevice())b=3;else
if(a.isSymbolicLink())b=4;else
if(a.isFIFO())b=5;else
if(a.isSocket())b=6;return[0,a.dev,a.ino,b,a.mode,a.nlink,a.uid,a.gid,a.rdev,a.size,a.atimeMs,a.mtimeMs,a.ctimeMs]};az.prototype.constructor=az;function
uq(b){var
a=iH(b);if(!a)return;return a[0]+bp}var
fI=uq(d2)||aG("unable to compute caml_root"),c8=[];if(d5())c8.push({path:fI,device:new
az(fI)});else
c8.push({path:fI,device:new
aM(fI)});c8.push({path:tA,device:new
aM(tA)});function
uI(b){var
g=YS(b),b=g.join(bp),f=uF(b),c;for(var
e=0;e<c8.length;e++){var
a=c8[e];if(f.search(a.path)==0&&(!c||c.path.length<a.path.length))c={path:a.path,device:a.device,rest:b.substring(a.path.length,b.length)}}if(!c&&d5()){var
d=uq(b);if(d&&d.match(/^[a-zA-Z]:\/$/)){var
a={path:d,device:new
az(d)};c8.push(a);c={path:a.path,device:a.device,rest:b.substring(a.path.length,b.length)}}}if(c)return c;V("no device found for "+f)}function
Yy(c,b){var
a=uI(c);if(!a.device.register)aG("cannot register file");a.device.register(a.rest,b);return 0}function
uG(c,b){var
c=a(c),b=a(b);return Yy(c,b)}function
YC(){var
b=A.caml_fs_tmp;if(b)for(var
a=0;a<b.length;a++)uG(b[a].name,b[a].content);A.jsoo_create_file=uG;A.caml_fs_tmp=[];return 0}function
YD(){return[0]}function
bO(a,b){return+(cZ(a,b,false)>=0)}function
iv(a,b){return+(cZ(a,b,false)>0)}function
YF(a,c,k){if(!isFinite(a)){if(isNaN(a))return aN(fo);return aN(a>0?tY:"-infinity")}var
i=a==0&&1/a==-Infinity?1:a>=0?0:1;if(i)a=-a;var
d=0;if(a==0);else
if(a<1)while(a<1&&d>-1022){a*=2;d--}else
while(a>=2){a/=2;d++}var
j=d<0?s:cR,e=s;if(i)e=bG;else
switch(k){case
43:e=cR;break;case
32:e=ad;break;default:break}if(c>=0&&c<13){var
g=Math.pow(2,c*4);a=Math.round(a*g)/g}var
b=a.toString(16);if(c>=0){var
h=b.indexOf(bf);if(h<0)b+=bf+c7(c,aL);else{var
f=h+1+c;if(b.length<f)b+=c7(f-b.length,aL);else
b=b.substr(0,f)}}return aN(e+cP+b+"p"+j+d.toString(10))}function
c2(a,b){return a.add(b)}function
a4(a,b){return a.and(b)}function
us(a,b){return a.div(b)}function
YL(a){return+a.isZero()}function
aH(a){return new
x(a&bq,a>>24&bq,a>>31&bg)}function
aZ(a){return a.toInt()}function
YK(a){return+a.isNeg()}function
fC(a){return a.neg()}function
ut(g,c){var
a=iD(g);if(a.signedconv&&YK(c)){a.sign=-1;c=fC(c)}var
b=s,h=aH(a.base),f="0123456789abcdef";do{var
e=c.udivmod(h);c=e.quotient;b=f.charAt(aZ(e.modulus))+b}while(!YL(c));if(a.prec>=0){a.filler=ad;var
d=a.prec-b.length;if(d>0)b=c7(d,aL)+b}return iu(a,b)}function
YN(a,b){return a.mod(b)}function
iy(a,b){return a.mul(b)}function
iA(a,b){return a.ucompare(b)<0}function
uA(c){var
a=0,e=u(c),b=10,d=1;if(e>0)switch(aO(c,a)){case
45:a++;d=-1;break;case
43:a++;d=1;break}if(a+1<e&&aO(c,a)==48)switch(aO(c,a+1)){case
120:case
88:b=16;a+=2;break;case
111:case
79:b=8;a+=2;break;case
98:case
66:b=2;a+=2;break;case
117:case
85:a+=2;break}return[a,d,b]}function
fG(a){if(a>=48&&a<=57)return a-48;if(a>=65&&a<=90)return a-55;if(a>=97&&a<=dY)return a-87;return-1}function
YO(f){var
g=uA(f),e=g[0],i=g[1],c=g[2],h=aH(c),j=new
x(bq,0xfffffff,bg).udivmod(h).quotient,d=aO(f,e),a=fG(d);if(a<0||a>=c)aG(bI);var
b=aH(a);for(;;){e++;d=aO(f,e);if(d==95)continue;a=fG(d);if(a<0||a>=c)break;if(iA(j,b))aG(bI);a=aH(a);b=c2(iy(h,b),a);if(iA(b,a))aG(bI)}if(e!=u(f))aG(bI);if(c==10&&iA(new
x(0,0,be),b))aG(bI);if(i<0)b=fC(b);return b}function
ct(a,b){return a.or(b)}function
b8(b,a){return b.shift_left(a)}function
c4(b,a){return b.shift_right(a)}function
iz(b,a){return b.shift_right_unsigned(a)}function
YP(a,b){return a.sub(b)}function
fD(a,b){return a.xor(b)}function
f6(f){var
h=uA(f),c=h[0],i=h[1],d=h[2],g=u(f),j=-1>>>0,e=c<g?aO(f,c):0,b=fG(e);if(b<0||b>=d)aG(bI);var
a=b;for(c++;c<g;c++){e=aO(f,c);if(e==95)continue;b=fG(e);if(b<0||b>=d)break;a=d*a+b;if(a>j)aG(bI)}if(c!=g)aG(bI);a=i*a;if(d==10&&(a|0)!=a)aG(bI);return a|0}function
uv(d){return function(){var
c=arguments.length,b=new
Array(c+1);b[0]=this;for(var
a=0;a<c;a++)b[a+1]=arguments[a];return bN(d,b)}}function
cu(a,b){return+(cZ(a,b,false)<=0)}function
j(a,b){return+(cZ(a,b,false)<0)}function
b$(a,d){if(a<0)d1();var
a=a+1|0,b=new
Array(a);b[0]=0;for(var
c=1;c<a;c++)b[c]=d;return b}var
bv=new
Array();function
d4(c){var
a=bv[c];if(!a.opened)V("Cannot flush a closed channel");if(!a.buffer||a.buffer==s)return 0;if(a.fd&&ag.fds[a.fd]&&ag.fds[a.fd].output){var
b=ag.fds[a.fd].output;switch(b.length){case
2:b(c,a.buffer);break;default:b(a.buffer)}}a.buffer=s;return 0}function
uD(e,f){var
b=bv[e],d=a(f),c=u(d);b.file.write(b.offset,d,0,c);b.offset+=c;return 0}function
Y$(a){var
a=iG(a),b=A;if(b.process&&b.process.stdout&&b.process.stdout.write)b.process.stderr.write(a);else{if(a.charCodeAt(a.length-1)==10)a=a.substr(0,a.length-1);var
c=b.console;c&&c.error&&c.error(a)}}function
Za(a){var
a=iG(a),b=A;if(b.process&&b.process.stdout&&b.process.stdout.write)b.process.stdout.write(a);else{if(a.charCodeAt(a.length-1)==10)a=a.substr(0,a.length-1);var
c=b.console;c&&c.log&&c.log(a)}}function
fK(c,e,d,a){if(ag.fds===undefined)ag.fds=new
Array();a=a?a:{};var
b={};b.file=d;b.offset=a.append?d.length():0;b.flags=a;b.output=e;ag.fds[c]=b;if(!ag.fd_last_idx||c>ag.fd_last_idx)ag.fd_last_idx=c;return c}function
Zh(c,b,g){var
a={};while(b){switch(b[1]){case
0:a.rdonly=1;break;case
1:a.wronly=1;break;case
2:a.append=1;break;case
3:a.create=1;break;case
4:a.truncate=1;break;case
5:a.excl=1;break;case
6:a.binary=1;break;case
7:a.text=1;break;case
8:a.nonblock=1;break}b=b[2]}if(a.rdonly&&a.wronly)V(bu(c)+rT);if(a.text&&a.binary)V(bu(c)+se);var
d=uI(c),e=d.device.open(d.rest,a),f=ag.fd_last_idx?ag.fd_last_idx:0;return fK(f+1,uD,e,a)}fK(0,uD,new
ay(af(0)));fK(1,Za,new
ay(af(0)));fK(2,Y$,new
ay(af(0)));function
YT(a){var
c=ag.fds[a];if(c.flags.wronly)V(sJ+a+" is writeonly");var
d=null;if(a==0&&d5()){var
e=require("fs");d=function(){return aN(e.readFileSync(0,ri))}}var
b={file:c.file,offset:c.offset,fd:a,opened:true,out:false,refill:d};bv[b.fd]=b;return b.fd}function
uw(c){var
b=ag.fds[c];if(b.flags.rdonly)V(sJ+c+" is readonly");var
a={file:b.file,offset:b.offset,fd:c,opened:true,out:true,buffer:s};bv[a.fd]=a;return a.fd}function
YU(){var
b=0;for(var
a=0;a<bv.length;a++)if(bv[a]&&bv[a].opened&&bv[a].out)b=[0,bv[a].fd,b];return b}function
aD(a){return a}function
YV(g,d,h,f){var
b=bv[g];if(!b.opened)V("Cannot output to a closed channel");var
a;if(h==0&&a5(d)==f)a=d;else{a=af(f);b7(d,h,a,0,f)}var
i=aD(a),c=bu(i),e=c.lastIndexOf(rB);if(e<0)b.buffer+=c;else{b.buffer+=c.substr(0,e+1);d4(g);b.buffer+=c.substr(e+1)}return 0}function
ux(b,a,d,c){return YV(b,bL(a),d,c)}function
uy(c,b){var
d=a(String.fromCharCode(b));ux(c,d,0,1);return 0}function
cv(b,a){if(a==0)fH();return b%a}function
e(a,b){return+(cZ(a,b,false)!=0)}function
YX(d,c){var
b=new
Array(c+1);b[0]=d;for(var
a=1;a<=c;a++)b[a]=0;return b}function
YY(b,a){b[0]=a;return 0}function
c6(a){if(a
instanceof
Array&&a[0]==a[0]>>>0)return a[0];else
if(fE(a))return ac;else
if(iC(a))return ac;else
if(a
instanceof
Function||typeof
a=="function")return hL;else
if(a&&a.caml_custom)return a_;else
return dL}function
bQ(b){b=bu(b);var
d=b.length/2,c=new
Array(d);for(var
a=0;a<d;a++)c[a]=(b.charCodeAt(2*a)|b.charCodeAt(2*a+1)<<8)<<16>>16;return c}function
Y0(b,a,h,l){var
v=b5,u=6,$=7,O=8,P=9,D=10,I=0,r=1,G=2,H=3,F=4,E=5,o=1,C=2,B=3,p=4,z=5,L=6,f=7,t=8,N=9,M=10,w=11,J=12,K=13,y=14,A=15,x=16,_=2,Z=3,V=4,U=5,R=6,S=7,X=8,W=9,T=10,q=11,Y=12,Q=13;if(!b.dgoto){b.defred=bQ(b[R]);b.sindex=bQ(b[X]);b.check=bQ(b[Q]);b.rindex=bQ(b[W]);b.table=bQ(b[Y]);b.len=bQ(b[U]);b.lhs=bQ(b[V]);b.gindex=bQ(b[T]);b.dgoto=bQ(b[S])}var
k=0,j,e,d,n,c=a[y],g=a[A],i=a[x];exit:for(;;)switch(h){case
0:g=0;i=0;case
6:j=b.defred[g];if(j!=0){h=D;break}if(a[f]>=0){h=$;break}k=I;break exit;case
1:if(l
instanceof
Array){a[f]=b[Z][l[0]+1];a[t]=l[1]}else{a[f]=b[_][l+1];a[t]=0}case
7:e=b.sindex[g];d=e+a[f];if(e!=0&&d>=0&&d<=b[q]&&b.check[d]==a[f]){h=O;break}e=b.rindex[g];d=e+a[f];if(e!=0&&d>=0&&d<=b[q]&&b.check[d]==a[f]){j=b.table[d];h=D;break}if(i<=0){k=E;break exit}case
5:if(i<3){i=3;for(;;){n=a[o][c+1];e=b.sindex[n];d=e+v;if(e!=0&&d>=0&&d<=b[q]&&b.check[d]==v){h=P;break}else{if(c<=a[L])return r;c--}}}else{if(a[f]==0)return r;a[f]=-1;h=u;break}case
8:a[f]=-1;if(i>0)i--;case
9:g=b.table[d];c++;if(c>=a[z]){k=G;break exit}case
2:a[o][c+1]=g;a[C][c+1]=a[t];a[B][c+1]=a[N];a[p][c+1]=a[M];h=u;break;case
10:var
m=b.len[j];a[w]=c;a[K]=j;a[J]=m;c=c-m+1;m=b.lhs[j];n=a[o][c];e=b.gindex[m];d=e+n;if(e!=0&&d>=0&&d<=b[q]&&b.check[d]==n)g=b.table[d];else
g=b.dgoto[m];if(c>=a[z]){k=H;break exit}case
3:k=F;break exit;case
4:a[o][c+1]=g;a[C][c+1]=l;var
s=a[w];a[p][c+1]=a[p][s+1];if(c>s)a[B][c+1]=a[p][s+1];h=u;break;default:return r}a[y]=c;a[A]=g;a[x]=i;return k}function
ba(b,c,a){if(a&&A.toplevelReloc)b=A.toplevelReloc(a);ag[b+1]=c;if(a)ag[a]=c}function
iF(a,b){uz[bu(a)]=b;return 0}function
Yq(a,b){if(a===b)return 1;a.t&6&&c0(a);b.t&6&&c0(b);return a.c==b.c?1:0}function
ca(a,b){return Yq(a,b)}function
Y5(){at(hA)}function
C(b,a){if(a>>>0>=u(b))Y5();return aO(b,a)}function
c(a,b){return 1-ca(a,b)}function
Y6(b){return a(fJ(b,0,b.length))}function
Y7(){return 0x7FFFFFFF/4|0}var
ub=function(){var
a=A,f="a.out",b=[];if(a.process&&a.process.argv&&a.process.argv.length>1){var
e=a.process.argv;f=e[1];b=e.slice(2)}var
g=aN(f),d=[0,g];for(var
c=0;c<b.length;c++)d.push(aN(b[c]));return d}();function
Y8(a){return[0,ub[1],ub]}var
Zf=A.process&&A.process.platform&&A.process.platform==rn?tL:"Unix";function
Y9(){return[0,a(Zf),32,0]}function
Y2(){uB(ag.Not_found)}function
uE(c){var
a=A,b=fF(c);if(a.process&&a.process.env&&a.process.env[b]!=undefined)return aN(a.process.env[b]);if(A.jsoo_static_env&&A.jsoo_static_env[b])return aN(A.jsoo_static_env[b]);Y2()}function
am(a){var
b=1;while(a&&a.joo_tramp){a=a.joo_tramp.apply(null,a.joo_args);b++}return a}function
v(b,a){return{joo_tramp:b,joo_args:a}}function
uC(a){return a}function
ap(a){if(a
instanceof
Array)return a;if(A.RangeError&&a
instanceof
A.RangeError&&a.message&&a.message.match(/maximum call stack/i))return uC(ag.Stack_overflow);if(A.InternalError&&a
instanceof
A.InternalError&&a.message&&a.message.match(/too much recursion/i))return uC(ag.Stack_overflow);if(a
instanceof
A.Error&&cx(hc))return[0,cx(hc),a];return[0,ag.Failure,aN(String(a))]}function
YR(a){switch(a[2]){case-8:case-11:case-12:return 1;default:return 0}}function
YB(b){var
a=s;if(b[0]==0){a+=b[1][1];if(b.length==3&&b[2][0]==0&&YR(b[1]))var
e=b[2],f=1;else
var
f=2,e=b;a+=so;for(var
d=f;d<e.length;d++){if(d>f)a+=sU;var
c=e[d];if(typeof
c=="number")a+=c.toString();else
if(c
instanceof
bs)a+=e8+c.toString()+e8;else
if(typeof
c=="string")a+=e8+c.toString()+e8;else
a+=tt}a+=tc}else
if(b[0]==M)a+=b[1];return a}function
uo(a){if(a
instanceof
Array&&(a[0]==0||a[0]==M)){var
c=cx(s3);if(c)c(a,false);else{var
d=YB(a),b=cx(rh);if(b)b(0);A.console.error(tu+d+rB)}}else
throw a}function
Y4(){var
a=A;if(a.process&&a.process.on)a.process.on("uncaughtException",function(b,c){uo(b);a.process.exit(2)});else
if(a.addEventListener)a.addEventListener("error",function(a){if(a.error)uo(a.error)})}Y4();function
d(a,b){return a.length==1?a(b):bN(a,[b])}function
f(a,b,c){return a.length==2?a(b,c):bN(a,[b,c])}function
I(a,b,c,d){return a.length==3?a(b,c,d):bN(a,[b,c,d])}function
g1(a,b,c,d,e,f){return a.length==5?a(b,c,d,e,f):bN(a,[b,c,d,e,f])}function
Yj(a,b,c,d,e,f,g){return a.length==6?a(b,c,d,e,f,g):bN(a,[b,c,d,e,f,g])}YC();var
fL=[M,a(sF),-1],iJ=[M,a(s5),-2],aU=[M,a(hN),-3],f7=[M,a(ts),-4],aE=[M,a(tz),-7],d6=[M,a(rL),-8],iI=[M,a(tB),-9],F=[M,a(tS),-11],iK=[M,a(sO),-12],i0=O(0,0,0),i1=O(1,0,0),fW=O(aJ,aJ,b4),i2=O(0,0,32768),i3=O(aJ,aJ,32767),bx=[0,a(s),0,0,-1],i5=[0,a(s),1,0,0],Yi=[4,0,0,0,0],ga=[0,[11,a('File "'),[2,0,[11,a('", line '),[4,0,0,0,[11,a(tf),[4,0,0,0,[12,45,[4,0,0,0,[11,a(": "),[2,0,0]]]]]]]]]],a('File "%s", line %d, characters %d-%d: %s')],jB=[0,a(s),0,0],bA=[0,0,0,0,0,0,0,0,0,0,0],kl=[35,[0,0]],km=[35,[0,1]],kn=[35,[0,2]],ko=[35,[1,0]],kp=[35,[1,1]],kq=[35,[1,2]],kr=[35,[2,0]],ks=[35,[2,1]],kt=[35,[2,6]],ku=[35,[2,2]],kv=[35,[2,3]],kw=[35,[2,4]],kx=[35,[2,5]],ky=[35,[3,0]],kz=[35,[3,1]],kA=[35,[3,6]],kB=[35,[3,2]],kC=[35,[3,3]],kD=[35,[3,4]],kE=[35,[3,5]],kF=[36,[0,0]],kG=[36,[0,1]],kH=[36,[0,2]],kI=[36,[0,3]],kJ=[36,[0,4]],kK=[36,[0,5]],kL=[36,[0,6]],kM=[36,[0,7]],kN=[36,[0,8]],kO=[36,[0,9]],kP=[36,[0,10]],kQ=[36,[0,11]],kR=[36,[0,12]],kS=[36,[0,13]],kT=[36,[0,14]],kU=[36,[1,0]],kV=[36,[1,1]],kW=[36,[1,2]],kX=[36,[1,3]],kY=[36,[1,4]],kZ=[36,[1,5]],k0=[36,[1,6]],k1=[36,[1,7]],k2=[36,[1,8]],k3=[36,[1,9]],k4=[36,[1,10]],k5=[36,[1,11]],k6=[36,[1,12]],k7=[36,[1,13]],k8=[36,[1,14]],k9=[36,[2,0]],k_=[36,[2,1]],k$=[36,[2,2]],la=[36,[2,3]],lb=[36,[2,4]],lc=[36,[2,5]],ld=[36,[2,6]],le=[36,[3,0]],lf=[36,[3,1]],lg=[36,[3,2]],lh=[36,[3,3]],li=[36,[3,4]],lj=[36,[3,5]],lk=[36,[3,6]],ll=[33,[0,0]],lm=[33,[1,0]],ln=[34,[0,0]],lo=[34,[0,1]],lp=[34,[0,2]],lq=[34,[0,3]],lr=[34,[0,6]],ls=[34,[0,7]],lt=[34,[0,4]],lu=[34,[0,5]],lv=[34,[0,8]],lw=[34,[0,9]],lx=[34,[1,0]],ly=[34,[1,1]],lz=[34,[1,2]],lA=[34,[1,3]],lB=[34,[1,6]],lC=[34,[1,7]],lD=[34,[1,4]],lE=[34,[1,5]],lF=[34,[1,8]],lG=[34,[1,9]],lH=[34,[2,0]],lI=[34,[2,1]],lJ=[34,[2,2]],lK=[34,[2,4]],lL=[34,[2,3]],lM=[34,[2,5]],lN=[34,[3,0]],lO=[34,[3,1]],lP=[34,[3,2]],lQ=[34,[3,4]],lR=[34,[3,3]],lS=[34,[3,5]],lT=[35,[0,[0,0]]],lU=[35,[0,[0,1]]],lV=[35,[1,[0,0]]],lW=[35,[1,[0,1]]],lX=[35,[1,[0,2]]],lY=[37,[0,2]],lZ=[37,[0,3]],l0=[37,[0,4]],l1=[37,[0,5]],l2=[37,[0,6]],l3=[37,[0,7]],l4=[37,[0,8]],l5=[37,[0,9]],l6=[37,[0,10]],l7=[37,[1,0]],l8=[37,[1,1]],l9=[37,[1,3]],l_=[37,[1,4]],l$=[37,[1,5]],ma=[37,[1,6]],mb=[37,[2,0]],mc=[37,[2,1]],md=[37,[2,2]],me=[37,[2,3]],mf=[37,[1,7]],mg=[37,[1,8]],mh=[37,[1,9]],mi=[37,[1,10]],mj=[37,[2,5]],mk=[37,[3,0]],ml=[37,[3,1]],mm=[37,[3,2]],mn=[37,[3,3]],mo=[37,[3,4]],mp=[37,[0,11]],mq=[37,[1,11]],mr=[37,[2,6]],ms=[37,[3,6]],mP=[47,[0,0]],mQ=[48,[0,0]],mR=[48,[0,3]],mS=[48,[0,1]],mT=[48,[0,2]],mU=[49,[0,0]],mV=[46,[0,0]],mW=[42,[0,[0,18]]],mY=[50,[0,[0,0]]],m2=[40,[0,[0,0]]],m3=[40,[0,[0,1]]],m4=[40,[0,[0,2]]],m5=[40,[0,[0,3]]],m6=[40,[0,[0,4]]],m7=[40,[0,[0,5]]],m8=[40,[0,[0,6]]],m9=[40,[0,[0,7]]],m_=[40,[0,[0,8]]],m$=[40,[0,[0,9]]],na=[41,[0,[0,1]]],nb=[45,[0,[0,0]]],nc=[39,[0,[0,0]]],nd=[42,[0,[0,19]]],ne=[42,[0,[0,20]]],nf=[43,[0,[1,0]]],ng=[43,[0,[1,2]]],nh=[43,[0,[1,1]]],ni=[43,[0,[1,3]]],nj=[44,[0,[0,0]]],nk=[44,[0,[0,1]]],nl=[44,[0,[0,2]]],nm=[42,[0,[0,0]]],nn=[42,[0,[0,8]]],no=[42,[0,[0,9]]],np=[42,[0,[0,1]]],nq=[42,[0,[0,10]]],nr=[42,[0,[0,11]]],ns=[41,[0,[0,0]]],nt=[41,[0,[0,2]]],nu=[42,[0,[0,3]]],nv=[42,[0,[0,4]]],nw=[42,[0,[0,5]]],nx=[42,[0,[0,6]]],ny=[42,[0,[0,7]]],nz=[50,[0,[1,0]]],nD=[40,[0,[1,0]]],nE=[40,[0,[1,1]]],nF=[40,[0,[1,2]]],nG=[40,[0,[1,3]]],nH=[40,[0,[1,4]]],nI=[40,[0,[1,5]]],nJ=[40,[0,[1,6]]],nK=[40,[0,[1,7]]],nL=[40,[0,[1,8]]],nM=[40,[0,[1,9]]],nN=[41,[0,[1,1]]],nO=[45,[0,[1,0]]],nP=[39,[0,[1,0]]],nQ=[42,[0,[1,19]]],nR=[42,[0,[1,20]]],nS=[44,[0,[1,0]]],nT=[44,[0,[1,1]]],nU=[44,[0,[1,2]]],nV=[42,[0,[1,0]]],nW=[42,[0,[1,8]]],nX=[42,[0,[1,9]]],nY=[42,[0,[1,1]]],nZ=[42,[0,[1,10]]],n0=[42,[0,[1,11]]],n1=[42,[0,[1,2]]],n2=[41,[0,[1,0]]],n3=[42,[0,[1,3]]],n4=[42,[0,[1,4]]],n5=[42,[0,[1,5]]],n6=[42,[0,[1,6]]],n7=[42,[0,[1,7]]],n8=[42,[0,[1,14]]],n9=[42,[0,[1,15]]],n_=[42,[0,[1,16]]],n$=[42,[0,[1,17]]],oa=[42,[0,[1,13]]],ob=[43,[0,[1,4]]],oc=[43,[0,[1,5]]],od=[50,[0,[2,0]]],og=[40,[0,[2,0]]],oh=[40,[0,[2,1]]],oi=[40,[0,[2,2]]],oj=[40,[0,[2,3]]],ok=[40,[0,[2,4]]],ol=[40,[0,[2,5]]],om=[40,[0,[2,6]]],on=[40,[0,[2,7]]],oo=[40,[0,[2,8]]],op=[40,[0,[2,9]]],oq=[41,[0,[2,0]]],or=[41,[0,[2,1]]],os=[45,[0,[2,0]]],ot=[39,[0,[2,0]]],ou=[43,[0,[2,0]]],ov=[43,[0,[2,2]]],ow=[43,[0,[2,1]]],ox=[43,[0,[2,3]]],oy=[44,[0,[2,0]]],oz=[44,[0,[2,1]]],oA=[44,[0,[2,2]]],oB=[42,[0,[2,0]]],oC=[42,[0,[2,1]]],oD=[42,[0,[2,3]]],oE=[42,[0,[2,4]]],oF=[42,[0,[2,5]]],oG=[42,[0,[2,6]]],oH=[42,[0,[2,2]]],oI=[42,[0,[2,12]]],oJ=[43,[0,[2,6]]],oK=[43,[0,[2,7]]],oL=[43,[0,[2,8]]],oM=[43,[0,[2,9]]],oN=[42,[0,[2,14]]],oO=[42,[0,[2,15]]],oP=[42,[0,[2,16]]],oQ=[42,[0,[2,17]]],oR=[43,[0,[2,4]]],oS=[43,[0,[2,5]]],oT=[50,[0,[3,0]]],oW=[43,[0,[3,0]]],oX=[43,[0,[3,2]]],oY=[43,[0,[3,1]]],oZ=[43,[0,[3,3]]],o0=[40,[0,[3,0]]],o1=[40,[0,[3,1]]],o2=[40,[0,[3,2]]],o3=[40,[0,[3,4]]],o4=[40,[0,[3,6]]],o5=[40,[0,[3,8]]],o6=[41,[0,[3,0]]],o7=[41,[0,[3,1]]],o8=[45,[0,[3,0]]],o9=[39,[0,[3,0]]],o_=[42,[0,[3,0]]],o$=[42,[0,[3,1]]],pa=[42,[0,[3,2]]],pb=[44,[0,[3,0]]],pc=[44,[0,[3,1]]],pd=[44,[0,[3,2]]],pe=[42,[0,[3,14]]],pf=[42,[0,[3,15]]],pg=[42,[0,[3,16]]],ph=[42,[0,[3,17]]],pi=[50,[0,[4,0]]],pl=[40,[0,[4,0]]],pm=[40,[0,[4,1]]],pn=[40,[0,[4,2]]],po=[40,[0,[4,3]]],pp=[40,[0,[4,4]]],pq=[40,[0,[4,5]]],pr=[41,[0,[4,0]]],ps=[41,[0,[4,1]]],pt=[41,[0,[4,2]]],pu=[41,[0,[4,3]]],pv=[41,[0,[4,4]]],pw=[41,[0,[4,5]]],px=[41,[0,[4,6]]],py=[42,[0,[4,0]]],pz=[42,[0,[4,1]]],pA=[42,[0,[4,2]]],pB=[42,[0,[4,3]]],pC=[42,[0,[4,4]]],pD=[42,[0,[4,5]]],pE=[42,[0,[4,6]]],pF=[42,[0,[4,7]]],pG=[43,[0,[4,0]]],pH=[43,[0,[4,2]]],pI=[43,[0,[4,3]]],pJ=[50,[0,[5,0]]],pM=[40,[0,[5,0]]],pN=[40,[0,[5,1]]],pO=[40,[0,[5,2]]],pP=[40,[0,[5,3]]],pQ=[40,[0,[5,4]]],pR=[40,[0,[5,5]]],pS=[41,[0,[5,1]]],pT=[41,[0,[5,2]]],pU=[41,[0,[5,3]]],pV=[41,[0,[5,4]]],pW=[41,[0,[5,5]]],pX=[41,[0,[5,6]]],pY=[42,[0,[5,0]]],pZ=[42,[0,[5,1]]],p0=[42,[0,[5,2]]],p1=[42,[0,[5,3]]],p2=[42,[0,[5,4]]],p3=[42,[0,[5,5]]],p4=[41,[0,[5,0]]],p5=[42,[0,[5,6]]],p6=[42,[0,[5,7]]],p7=[43,[0,[5,1]]],p8=[43,[0,[5,2]]],p9=[43,[0,[5,3]]];ba(11,iK,sO);ba(10,F,tS);ba(9,[M,a(rZ),co],rZ);ba(8,iI,tB);ba(7,d6,rL);ba(6,aE,tz);ba(5,[M,a(si),-6],si);ba(4,[M,a(s8),-5],s8);ba(3,f7,ts);ba(2,aU,hN);ba(1,iJ,s5);ba(0,fL,sF);var
uO=a(su),uN=a(bf),uL=a("true"),uM=a("false"),uQ=a(sd),uR=a("\\'"),uS=a("\\b"),uT=a(tW),uU=a(rw),uV=a("\\r"),uP=a("Char.chr"),u0=a("List.map2"),u1=[0,0,0],u2=[0,a("list.ml"),sB,11],uZ=a("List.init"),uX=a(t5),uY=a("List.nth"),uW=a("hd"),u5=a("String.blit / Bytes.blit_string"),u4=a("Bytes.blit"),u3=a("String.sub / Bytes.sub"),u_=a("String.contains_from / Bytes.contains_from"),u8=a("String.index_from / Bytes.index_from"),u7=a(s),u6=a("String.concat"),va=a("Array.blit"),vb=a(dW),vg=a(dW),vf=O(aJ,aJ,b4),ve=O(0,0,0),vk=a(tk),vh=a("Stdlib.Parsing.YYexit"),vi=a("Stdlib.Parsing.Parse_error"),vp=a("Set.remove_min_elt"),vq=[0,0,0,0],vr=[0,0,0],vs=[0,a("set.ml"),547,18],vl=a(fk),vm=a(fk),vn=a(fk),vo=a(fk),vy=a("Map.remove_min_elt"),vz=[0,0,0,0],vA=[0,a("map.ml"),398,10],vB=[0,0,0],vu=a(eY),vv=a(eY),vw=a(eY),vx=a(eY),vD=a("CamlinternalLazy.Undefined"),vI=a("Buffer.add_substring/add_subbytes"),vH=a("Buffer.add: cannot grow buffer"),vR=a("%c"),vS=a("%s"),vT=a(sM),vU=a(rJ),vV=a(tq),vW=a(s1),vX=a("%f"),vY=a("%B"),vZ=a("%{"),v0=a("%}"),v1=a("%("),v2=a("%)"),v3=a("%a"),v4=a("%t"),v5=a("%?"),v6=a("%r"),v7=a("%_r"),v8=[0,a(ar),847,23],wh=[0,a(ar),811,21],v$=[0,a(ar),812,21],wi=[0,a(ar),815,21],wa=[0,a(ar),816,21],wj=[0,a(ar),819,19],wb=[0,a(ar),820,19],wk=[0,a(ar),823,22],wc=[0,a(ar),824,22],wl=[0,a(ar),828,30],wd=[0,a(ar),829,30],wf=[0,a(ar),833,26],v9=[0,a(ar),834,26],wg=[0,a(ar),843,28],v_=[0,a(ar),844,28],we=[0,a(ar),848,23],xo=a(rX),xm=[0,a(ar),1556,4],xn=a("Printf: bad conversion %["),xp=[0,a(ar),1624,39],xq=[0,a(ar),1647,31],xr=[0,a(ar),1648,31],xs=a("Printf: bad conversion %_"),xt=a(hh),xu=a(hl),xv=a(hh),xw=a(hl),xx=a(hh),xy=a(hl),xj=a(fo),xk=a(bf),xh=a("neg_infinity"),xi=a(tY),xc=a(su),w2=a("%+nd"),w3=a("% nd"),w5=a("%+ni"),w6=a("% ni"),w7=a("%nx"),w8=a("%#nx"),w9=a("%nX"),w_=a("%#nX"),w$=a("%no"),xa=a("%#no"),w1=a("%nd"),w4=a(tq),xb=a("%nu"),wP=a("%+ld"),wQ=a("% ld"),wS=a("%+li"),wT=a("% li"),wU=a(dT),wV=a("%#lx"),wW=a("%lX"),wX=a("%#lX"),wY=a("%lo"),wZ=a("%#lo"),wO=a("%ld"),wR=a(rJ),w0=a("%lu"),wC=a("%+Ld"),wD=a("% Ld"),wF=a("%+Li"),wG=a("% Li"),wH=a(fu),wI=a("%#Lx"),wJ=a("%LX"),wK=a("%#LX"),wL=a("%Lo"),wM=a("%#Lo"),wB=a("%Ld"),wE=a(s1),wN=a("%Lu"),wp=a("%+d"),wq=a("% d"),ws=a("%+i"),wt=a("% i"),wu=a("%x"),wv=a("%#x"),ww=a("%X"),wx=a("%#X"),wy=a("%o"),wz=a("%#o"),wo=a(dW),wr=a(sM),wA=a(rX),vJ=a("@]"),vK=a("@}"),vL=a("@?"),vM=a("@\n"),vN=a("@."),vO=a("@@"),vP=a("@%"),vQ=a("@"),wm=a("CamlinternalFormat.Type_mismatch"),xD=a(s),xE=[0,[11,a(sU),[2,0,[2,0,0]]],a(", %s%s")],x2=[0,[11,a(tu),[2,0,[12,10,0]]],a("Fatal error: exception %s\n")],x1=a("Fatal error: out of memory in uncaught exception handler"),xY=[0,[2,0,[12,10,0]],a("%s\n")],xQ=a("Raised at"),xR=a("Re-raised at"),xS=a("Raised by primitive operation at"),xT=a("Called from"),xU=a(" (inlined)"),xW=a(s),xV=[0,[2,0,[11,a(' file "'),[2,0,[12,34,[2,0,[11,a(", line "),[4,0,0,0,[11,a(tf),[4,0,0,0,[12,45,Yi]]]]]]]]]],a('%s file "%s"%s, line %d, characters %d-%d')],xX=[0,[2,0,[11,a(" unknown location"),0]],a("%s unknown location")],xL=a("Out of memory"),xM=a("Stack overflow"),xN=a("Pattern matching failed"),xO=a("Assertion failed"),xP=a("Undefined recursive module"),xG=[0,[12,40,[2,0,[2,0,[12,41,0]]]],a("(%s%s)")],xH=a(s),xI=a(s),xJ=[0,[12,40,[2,0,[12,41,0]]],a("(%s)")],xC=[0,[4,0,0,0,0],a(dW)],xA=[0,[3,0,0],a("%S")],xB=a(tt),Yh=a("TMPDIR"),Yg=a("TEMP"),x4=a(tL),x5=a("Win32"),x6=a("Jsoo_runtime.Error.Exn"),x7=a(hc),ye=a("length"),yg=a(t5),yd=a("split_last"),yc=a("is_power_of_two"),ya=a("log2"),yh=a("Utf8.Utf8"),yG=[0,[8,16,0,0,0],a("%h")],yB=a(rG),yE=a(aL),yC=a(bG),yD=a(s),yz=a(s),yA=a(dO),yj=a(t2),yk=a(fo),yl=a(rG),ym=a("nan payload must not be zero"),yn=a("nan payload must not overlap with exponent bits"),yo=a("nan payload must not overlap with sign bit"),yp=a(s),yr=O(1,0,0),ys=O(aJ,aJ,b4),yt=O(0,0,65520),yy=[0,[8,9,0,1,0],a(sH)],yu=O(0,0,16),yv=O(aJ,aJ,15),yw=[0,[8,9,0,1,0],a(sH)],yx=[0,[7,6,0,0,0],a(fu)],yq=a(dO),yi=[0,a("exec/fxx.ml"),67,10],yF=[0,[8,9,0,[0,17],0],a("%.17g")],yL=[0,[5,6,0,0,0],a(dT)],yP=O(0,0,32760),yQ=O(0,0,65528),yR=O(0,0,32752),yS=[0,[7,6,0,0,0],a(fu)],y3=a(cP),y1=a(dO),y2=a(dO),y0=a(dO),yY=[0,a(g3),r3,4],yZ=O(16384,0,0),yX=[0,a(g3),rV,4],yW=[0,a(g3),sv,4],yT=a("Ixx.Overflow"),yV=a("Ixx.DivideByZero"),y5=[0,[5,6,0,0,0],a(dT)],zK=[0,[7,6,0,0,0],a(fu)],zQ=O(aJ,a_,0),zT=[0,[5,6,0,0,0],a(dT)],Aa=[0,[5,6,0,0,0],a(dT)],Az=a(sa),Ay=a(ck),Ax=a(th),Aw=a(rl),Av=a(tl),Ar=a(tn),As=a(t$),At=a(rU),Au=a(sk),AM=a(sV),AN=a(rk),AO=a(sQ),AP=a(sD),AQ=a(s0),AR=a(tm),AL=a("wrong length"),AK=a(ad),AA=[2,0],AE=[4,0],AH=[5,0],AU=a("null"),AV=a("ref"),AT=[0,a("syntax/values.ml"),99,55],AS=a("Values.NullRef"),AY=a(s),A0=a(bG),AZ=a(r_),AW=[0,[11,a(cP),[4,6,0,0,0]],a("0x%x")],AX=a(bf),Ba=a(": warning: "),A$=a("Error.Make(*).Error"),Bc=O(Z,0,0),Bd=O(0,0,0),Be=O(Y,0,0),Bf=O(Z,0,0),Bg=O(16777152,aJ,b4),Bh=O(64,0,0),Bm=a("illegal instruction i32.load32"),Bo=a("illegal instruction fxx.loadN"),Bn=a("illegal instruction ixx.load64"),Bp=a("illegal instruction i32.store32"),Br=a("illegal instruction fxx.storeN"),Bq=a("illegal instruction ixx.store64"),Bs=a("illegal instruction v128.loadNxM_<ext>"),Bt=a("illegal instruction i32.extendN_s"),Bu=a("illegal instruction i64.extend64_s"),Bv=a("illegal instruction i32.extend_i32_s"),Bw=a("illegal instruction i32.extend_i32_u"),Bx=a("illegal instruction i64.wrap_i64"),By=a("illegal instruction f32.promote_f32"),Bz=a("illegal instruction f64.demote_f64"),BA=a("illegal instruction i64x2.lt_u"),BB=a("illegal instruction i64x2.le_u"),BC=a("illegal instruction i64x2.gt_u"),BD=a("illegal instruction i64x2.ge_u"),BE=a("illegal instruction i16x8.popcnt"),BF=a("illegal instruction i32x4.popcnt"),BG=a("illegal instruction i64x2.popcnt"),BH=a("illegal binary vector instruction"),BI=a("illegal i8x16 conversion instruction"),BJ=a("illegal i16x8 conversion instruction"),BK=a("illegal i64x2 conversion instruction"),BL=a("illegal instruction f32x4.promote_low_f32x4"),BM=a("illegal instruction f64x2.demote_zero_f64x2"),BP=a("illegal declarative data segment"),BO=[0,a(hK),878,11],BN=[0,a(hK),868,11],Bl=[0,a(hK),85,4],Bk=a(sb),Bj=O(aJ,a_,0),Bi=O(1,0,0),Bb=O(aJ,a_,0),Ce=[0,[0,3,1]],Cd=[0,[0,2,1]],Cc=[0,[0,3,0]],Cb=[0,[0,2,0]],Ca=[0,[0,1,0]],B$=[0,[0,0,0]],B_=[0,[0,3,[0,2,1]]],B9=[0,[0,3,[0,2,0]]],B8=[0,[0,3,[0,1,1]]],B7=[0,[0,3,[0,1,0]]],B6=[0,[0,3,[0,0,1]]],B5=[0,[0,3,[0,0,0]]],B4=[0,2],B3=[0,1],B2=[0,0],B1=[0,1],B0=[0,0],BZ=[0,[0,2,1]],BY=[0,[0,2,0]],BX=[0,[0,1,1]],BW=[0,[0,1,0]],BV=[0,[0,0,1]],BU=[0,[0,0,0]],BT=[0,[0,1,1]],BS=[0,[0,1,0]],BR=[0,[0,0,1]],BQ=[0,[0,0,0]],Cj=a(r$),Ck=a(ti),Cl=a(r$),Cm=a(ti),Cn=O(Z,0,0),Co=O(aJ,aJ,b4),Cw=[0,a("binary/decode.ml"),E,10],CN=[0,5],CO=a("ELSE or END opcode expected"),CP=a("misplaced ELSE opcode"),CQ=a("misplaced END opcode"),CR=[0,[5,6,[0,2,2],0,0],a("%02lx")],CS=a(ad),CT=a(ru),CM=a(ru),Di=a("magic header not detected"),Dj=a("unknown binary version"),Dk=a("unexpected content after last section"),Dl=a("function and code section have inconsistent lengths"),Dm=a("data count and data section have inconsistent lengths"),Dn=a("data count section required"),Dd=a("malformed data segment kind"),Db=a("malformed elements segment kind"),C$=a("malformed element kind"),C8=a("too many locals"),C9=O(0,b5,0),C_=O(0,0,0),C3=a("malformed export kind"),CX=a("malformed import kind"),CU=a("malformed section id"),CK=a(s),CI=a(s),CJ=[1,0],CH=a("malformed memop flags"),CG=a("zero byte expected"),CF=a("END opcode expected"),CE=a("malformed mutability"),CD=a("malformed function type"),CB=a("malformed number type"),CA=a("malformed vector type"),Cz=a("malformed reference type"),Cy=a("section size mismatch"),Cx=a(fp),Cv=a(sb),Ci=a("unexpected end of section or function"),Ch=[0,[4,6,[0,2,2],0,0],a("%02x")],Cf=a("Decode.EOS"),Dr=a(ck),Do=a("Instance.FuncRef"),Dx=a("ref "),Dt=a("Script.ExternRef"),Du=a("Script.Syntax"),JR=a("parser"),JQ=a(fp),JO=a(s),Jd=a(r2),Jb=a(r2),I6=a(s),I4=a("integer constant out of range"),I5=a("alignment must be a power of two"),H5=a("invalid lane length"),HY=[0,0,0],Hy=[1,0],Hu=[0,0,0],Ha=[1,0],G8=[0,0,0],GM=[0,0,0],GG=[0,0,0],FO=a(dX),FI=a("import after global definition"),FG=a("import after table definition"),FE=a("import after memory definition"),FC=a("import after function definition"),Fy=a("multiple start sections"),Fm=a("binary:"),Fk=a("quote:"),EQ=a("invalid vector constant"),EK=a(aL),EL=a("NaN pattern with non-float type"),EH=[2,[1,0]],EF=[2,[1,1]],ED=a(rH),Ea=[0,0,0],Eb=a("inline function type does not match explicit type"),D$=a(im),D_=a(h1),D9=a(cV),D8=a(cX),D7=a(dK),D6=a(dQ),D5=a(hO),D4=a(dX),D3=a(im),D2=a(h1),D1=a(cV),D0=a(cX),DZ=a(dK),DY=a(dQ),DX=a(hO),DV=a(ad),DW=a("duplicate "),DT=a(" bindings"),DU=a("too many "),DS=a("unknown type "),DR=a("unknown label "),DQ=a(im),DP=a(h1),DO=a(cV),DN=a(cX),DM=a(dK),DL=a(dQ),DK=a(hO),DJ=a(dX),DH=a(ad),DI=a("unknown "),DG=a("i32 constant out of range"),DF=a("malformed lane index"),DD=a(sj),DE=a(rH),DC=a(sj),DA=a(tk),DB=a("unexpected token"),Ec=[0,de,258,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,sB,283,284,285,286,287,288,289,290,291,292,293,sv,295,296,297,rV,299,300,301,302,303,304,305,316,317,318,319,332,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,365,366,0,0],Ee=[0,259,260,261,262,263,264,265,266,306,307,308,r3,310,311,312,313,314,315,320,321,322,323,324,325,326,327,328,329,330,331,333,334,364,0],Eg=a("\xff\xff\x04\0\x05\0\x05\0\x06\0\x06\0\x07\0\x07\0\b\0\b\0\b\0\t\0\t\0\n\0\n\0\x0b\0\f\0\f\0\f\0\r\0\r\0\x0f\0\x11\0\x10\0\x10\0\x12\0\x14\0\x14\0\x14\0\x15\0\x15\0\x13\0\x13\0\x16\0\x16\0\x17\0\x17\0\x0e\0\x18\0\x18\0\x19\0\x19\0\x1a\0\x1a\0\x1b\0\x1b\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\"\0#\0#\0\x1e\0$\0$\0%\0%\0&\0&\0'\0'\0(\0(\0\x1f\0\x1f\0)\0)\0*\0*\0+\0+\0 \0 \0 \0 \0,\0,\0.\0.\0/\0/\0!\x000\x000\x000\x000\x000\x000\x000\x002\x002\x003\x003\x005\x005\x006\x006\x004\x004\x007\x007\x008\x008\x009\x009\x009\0-\0-\0-\0-\x001\x001\0:\0;\0<\0<\0<\0<\0<\0?\0?\0?\0A\0A\0=\0=\0=\0B\0B\0C\0C\0C\0D\0E\0F\0F\0G\0H\0H\0I\0I\0J\0K\0K\0L\0L\0L\0L\0L\0M\0N\0N\0N\0N\0N\0O\0O\0O\0P\0Q\0Q\0Q\0Q\0R\0S\0S\0S\0T\0T\0T\0T\0T\0U\0>\0V\0V\0V\0V\0W\0@\0X\0Y\0Y\0Z\0[\0[\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0]\0]\0^\0_\0`\0a\0a\0b\0b\0b\0c\0c\0e\0e\0e\0e\0e\0e\0e\0g\0g\0g\0g\0g\0i\0i\0h\0h\0h\0h\0j\0k\0l\0l\0m\0m\0m\0d\0d\0n\0n\0o\0o\0p\0p\0p\0p\0p\0p\0f\0f\0\x01\0\x01\0\x02\0\x03\0\x03\0\0\0\0\0\0\0"),Eh=a("\x02\0\x01\0\0\0\x02\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\0\0\x02\0\x01\0\x04\0\x04\0\x01\0\x05\0\x06\0\0\0\x05\0\x02\0\x01\0\x01\0\x02\0\x04\0\x01\0\x01\0\x01\0\0\0\x02\0\x01\0\x01\0\0\0\x02\0\0\0\x01\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x02\0\x02\0\x03\0\x01\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x03\0\x03\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x02\0\x02\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x01\0\x01\0\x01\0\x01\0\x02\0\x02\0\x02\0\x01\0\x02\0\x02\0\x01\0\x01\0\x01\0\x01\0\x01\0\x03\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x02\0\x01\0\x02\0\x02\0\x02\0\x05\0\0\0\x02\0\x05\0\x01\0\x03\0\x02\0\x02\0\x01\0\x05\0\x01\0\x05\0\0\0\x03\0\x02\0\x02\0\x01\0\x05\0\x01\0\x05\0\x01\0\x05\0\x05\0\x05\0\b\0\x02\0\x01\0\x01\0\x05\0\x01\0\x05\0\x03\0\x02\0\x02\0\x03\0\x02\0\x03\0\x03\0\x03\0\x05\0\x01\0\x02\0\x01\0\x05\0\x01\0\x05\0\x01\0\x02\0\x01\0\x01\0\x05\0\x01\0\x05\0\x02\0\b\0\x04\0\0\0\x01\0\x01\0\x02\0\0\0\x02\0\x01\0\x05\0\x02\0\x01\0\x03\0\x02\0\x02\0\x01\0\x05\0\x06\0\0\0\x05\0\x01\0\x05\0\x06\0\x01\0\x05\0\x01\0\x05\0\x06\0\x04\0\x04\0\x04\0\x01\0\x01\0\x04\0\x01\0\0\0\x02\0\x01\0\x02\0\x02\0\x05\0\x07\0\x06\0\x06\0\x06\0\x05\0\x01\0\x02\0\x02\0\x05\0\x06\0\x05\0\x07\0\x06\0\x05\0\x01\0\x02\0\x02\0\x04\0\x05\0\x02\0\x02\0\x02\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x05\0\x04\0\x04\0\x04\0\x04\0\x05\0\x04\0\x01\0\x04\0\x05\0\x04\0\0\0\x01\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0\x01\0\x05\0\x01\0\x01\0\0\0\x01\0\x01\0\x06\0\x06\0\x06\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x01\0\x01\0\x01\0\x05\0\x01\0\0\0\x02\0\x05\0\x05\0\x05\0\x04\0\x04\0\x05\0\x04\0\x04\0\x01\0\x01\0\x01\0\0\0\x02\0\x01\0\x01\0\0\0\x02\0\x01\0\x04\0\x01\0\x03\0\x03\0\x05\0\0\0\x02\0\x02\0\x02\0\x01\0\x02\0\x02\0\x02\0\x02\0\x02\0"),Ei=a('\0\0\0\0\0\0\0\0\0\0\0\0:\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\x01\t\x01\0\0\x17\x01\x15\x01\x16\x01\0\0\x19\x01\0\0\0\0;\x017\x01\0\0<\x01\x05\x01\xf7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xfc\0\xfd\0\xfa\0\xfe\0\xfb\0\xf9\0\0\x01\x01\x01\xf8\0\xff\x006\x01\x1b\x015\x01\0\x008\x019\x01%\0$\0\0\0\x1f\0 \0\0\0\0\0\xf2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\x03\x01\0\0\b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x003\x004\x005\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x009\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0U\0V\0W\0X\0\0\0\0\0\0\0\0\0\0\0a\0b\0_\0`\0c\0\0\0\0\0\\\0\0\0\0\0\0\0\0\0\0\0e\0f\0g\0h\0i\0j\0l\0\0\0\0\0\0\0\0\0\0\0.\0/\x000\x001\x002\0\xa9\0\xaa\0\xbf\0\0\0\xb1\0\0\0\0\0\xba\0\xbd\0\xf5\0\0\0\0\0\xf3\0\0\0\b\0\t\0\x06\0\x07\0\n\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd4\0\0\0\0\0\0\0\0\0\0\0\xc6\0\0\0\0\0\xc5\0\0\0\0\0\0\0\0\0\0\0\x16\0\xdd\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0-\x01/\x01\0\0\0\0\0\0\0\0\0\0\x1f\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0t\0o\0r\0\'\0\0\0\0\0\0\x006\x007\0\0\0:\0\0\0\0\0\0\0\x84\0v\0x\0z\0~\0\x80\0\x82\0;\0<\0=\0>\0?\0@\0A\0B\0C\0D\0\0\0\0\0N\0Y\0Z\0+\0\0\0\0\0\x1a\0\x1b\0\x1c\0^\0\x05\0\x04\0[\0]\0\0\0\0\0\0\0\0\0\0\0\0\0k\0m\0n\0\0\0\xb0\0\0\0\xab\0\xaf\0\0\0\0\0\xb3\0\xb5\0\xb4\0\0\0\0\0\x10\0\xf4\0\0\0\xae\0\xe2\0\0\0\xe3\0\xe4\0\xe1\0\x18\0\0\0\x15\0\xd5\0\xd6\0\xd3\0\0\0\0\0\0\0\0\0\xc8\0\0\0\xcd\0\0\0\0\0\0\0\xcb\0\0\0\0\0\xcc\0\xce\0\x02\0\xde\0\xdf\0\xdc\0\0\0\xd9\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\0\0\0\0\x04\x01\x1c\x01\x18\x01\0\0\0\0$\x01%\x01&\x01\0\0\r\x01\x0e\x01\x0f\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\x12\x014\x01\x11\x01\x13\x01\x14\x01\x1d\x01\x1e\x01\0\0\0\0\x98\0\x91\0\0\0\0\0\0\0\0\0\0\0\0\0\x9e\0\x93\0\x9a\0\x9c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\0\x8f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\0\x8a\0\x8b\0\0\0\0\x008\0\0\0\0\0\0\0w\0\x7f\0u\0}\0E\0F\0-\0O\0P\0Q\0R\0\0\0\0\0d\0\x1e\0\0\0\0\0\0\0\xb2\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\xd0\0\0\0\xca\0\0\0"\0\xd2\0\xd1\0\0\0\0\0\0\0\xdb\0\0\0\0\0\0\0\0\0\xea\0\0\0\0\0\0\0\0\0\n\x01\x0b\x01\0\0\0\0\0\0\f\x01(\x01\0\0\0\0\0\x000\x011\x01\0\0\0\0\0\0\xad\0\x94\0\0\0\0\0\0\0\x96\0\xa0\0\xa1\0\xa3\0\x95\0\0\0\0\0\0\0\x99\0\x92\0\x19\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\xf1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89\0\0\0\0\0\0\0\0\0\0\0\0\0S\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\xc2\0\xc4\0\0\0\xcf\0\xe0\0\xc3\0\xda\0\0\0\0\0\0\0\0\0\xec\0\xef\0\xed\0\xee\0\0\0.\x01 \x01"\x01#\x01*\x01)\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\0\0\0\xa5\0\0\0\0\0\xbb\0\0\0\0\0\xbe\0\0\0\xc0\0\0\0\xeb\0\0\0\0\0\0\0\0\0\0\0\0\0)\0\x85\0\x87\0\0\0\x86\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd7\0\xc7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\x012\x01\0\0\0\0\0\0\0\0\0\0\0\0\xbc\0\xc1\0p\0s\0\0\0\0\0\0\0\0\0\0\0\0\0y\0\x81\0\0\0{\0\x83\0\xb6\0\0\0\0\0\xb9\0\x11\0\0\0\0\0\x14\0\xd8\0\xe6\0\xe5\0\xe9\0\xe7\0\xe8\0!\x01\x97\0\0\0\0\0\0\0\x9b\0\0\0\x9d\0\0\0\x8c\0\0\0\x8e\0\0\0\xb7\0\x12\0\0\0\xa2\0\0\0\xa4\0\x88\0\0\0\0\0\xa6\0'),Ej=a('\x04\0\x06\0\x1b\0\x1e\0[\0\xe3\0;\x01\xc5\0\xaa\x01\xab\x01\xc7\0R\0Q\x01R\x01L\0\xce\0\xcf\0\xde\0\xba\x01j\x01B\x01C\x01k\x01M\0\x12\x01e\x023\x01\xcc\x01\xad\0\xae\0\xaf\0\xb0\0\xb1\0\xb2\0\xb3\0\x0f\x01\x10\x01\xb4\0\x1d\x01\x1e\x01\x1f\x01 \x01!\x01"\x01\xbb\x01\xb5\0\xbd\x01\xbe\x01\n\x01\xa5\x01\x9e\x01\xa6\x01\x07\x02\xa7\x01\xa8\x01\b\x02\t\x02\n\x02V\x01\x07\0\xb6\0\xb7\0\xb8\0M\x01\xb9\0N\x01\xba\0\xbb\0\xd8\0\xe4\0\xd9\0\xda\0f\x01g\x01l\x01\xdb\0\b\0\t\0\xd2\0\n\0\x0b\0\xe1\0\f\0\xca\0z\x01\r\0\xe8\0\x0e\0T\0\x0f\0\x10\0\xeb\0 \0^\0\x12\0"\0\x13\0`\0\x14\0\x15\0\x86\x01\x16\0\xf4\0\x17\0\x18\0\x19\0\xf5\0\x88\x01\xf6\0\x8a\x01J\x02K\x02\xf7\0'),Ek=a('d\x01J\xffV\xffw\xff\0\0-\x01\0\0\xbe\xff\xbe\xff\xbe\xff\xbe\xff\xbe\xff\xbe\xff\xbe\xff\xbe\xff\xbe\xff\xbe\xff\0\0\0\0c\0\0\0\0\0\0\0V\xff\0\0\xb1\0\x1b\0\0\0\0\0\xcf\xff\0\0\0\0\0\0\xc2\0\xd5\0\xdc\xff\xac\xff\x98\xff\xdc\xff\xdc\xff\xdc\xff\xdc\xff\xdc\xff\xf0\xff\xf0\xff\xf5\xff\xff\xff\xf0\xff\xf5\xff\xf5\xff\x0e\0\x0e\0\x0e\0!\0(\0!\0\xff\xff\xff\xff<\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf5\xff\0\0\0\0\0\0\0\0\x18\b\0\0\0\0\x19\0\xe4\xff\0\0R\x008\0\x01\0A\0\x8f\xff\xa2\xffU\0\0\0\xf0\xffq\0\0\0)\xff\0\0V\xff\xf5\xff\xf0\xff\xf0\xff\xde\xff?\0\x98\0\x9e\x000\xff\x8e\0\x0f\xff\xa8\0\xcf\0\xd4\0\xe4\0\x12\0\xbe\xffH\x02\0\0\0\0\0\0f\b\xdc\xff\xdc\xff\xdc\xff\xac\xff\xac\xff\xac\xff\xac\xff\xf6\x05\0\0\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\xac\xff\0\0\0\0\0\0\0\0\xac\xff\xac\xff\xb5\0\xb5\0\xcc\0\0\0\0\0\0\0\0\0\0\x001\xff\xac\xff\0\0\xb5\0\xb5\0\xb5\0\xb5\0\xe7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\0\xea\0\xef\0\xb4\b\x02\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf3\0\0\0\xf6\0\x18\b\0\0\0\0\0\0\xf8\0\xfb\0\0\0*\xff\0\0\0\0\0\0\0\0\0\0\0\0\x02\t\n\0\x01\0\0\x01\x8d\xff\x01\x01\x02\x01\0\0\xc2\xff\x03\x01A\0\x05\x01*\r\0\0D\xff\x04\x01\0\0\b\x01U\xff\xac\xff\t\x01\xaa\xff\0\0\0\0\x03\x01\xa2\xff\n\x01w\rD\0\b\x01\0\0\f\x01\x14\0\x0e\x01\0\0\0\0\x0f\x01\x10\x01\x11\x01\x13\x01\x14\x01\x15\x01\x19\x01\x1a\x01\xb0\xff\x1b\x01\0\0\0\0\x8e\0\x1c\x01\x1d\x01\x1e\x01\x1f\x01\0\0 \x01"\x01\xdc\xff\xdc\xff\xdc\xffX\xff\xac\xffl\0\x9a\0l\0\xf0\xff\xf0\xff#\x01$\x01\xc2\x11P\tD\x06\0\0\0\0\0\0\0\0\x9e\t\x9e\t\x9e\t\0\0\0\0\xac\xff\0\0\x10\x0f\xec\t:\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xac\xff\xac\xff\0\0\0\0\0\0\0\0\xd9\0\xd9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd9\0\xd9\0\xd9\0\xd9\0\xcc\0\xcc\0\0\0\0\0\0\0\xff\r\0\0\xe5\x13\0\0\0\0d\0&\x01\0\0\0\0\0\0Y\0\'\x01\0\0\0\0\x9a\0\0\0\0\0\xfc\0\0\0\0\0\0\0\0\0\xb8\0\0\0\0\0\0\0\0\0\xac\xff\x02\t(\x01z\n\0\0\x04\x01\0\0\xbb\rD\xff\xac\xff\0\0,\x01.\x01\0\0\0\0\0\0\0\0\0\0\0\0\xac\xff\0\0\0\0\0\0N\0G\0/\x01\xac\xff\xac\xff\xac\xff\xac\xff\0\0k\0\x88\0\0\0\0\0\0\0\xc1\xff0\x01\0\0\0\0\0\0\x13\x01\0\0\0\0\0\0\0\0B\xff1\xff1\x01\xbc\0\x0b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\x12#\x01\0\0\0\0\x9e\t3\x01\x9e\tU\x0f4\x015\x01\0\0\0\0\0\0\0\x006\x01\x9a\x007\x01\x9a\x008\x019\x01\x9a\0\xf0\xff:\x01\0\0\0\0\x9a\0L\x12\x9a\x0f\xc8\n\x16\x0b\xdf\x0fd\x0b)\x01\0\0\0\0\0\0\xc9\xff*\x01\0\0\x9a\0\x9a\0i\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<\x01=\x01\0\0\0\0l\0\x9a\0\x89\0\0\0l\0\x9a\0\0\0?\x01\x16\0A\x01C\x01\0\0\x02\t\0\0E\x01\0\0\0\0\0\0\x95\0F\x01\xa7\0\0\0\xdc\xff\xdc\xff\xdc\xff\xdc\xff\0\0G\x01H\x01I\x01N\x01\0\0\0\0\xcc\0c\x01%\x01\0\0\0\0e\x01h\x01i\x01\0\0\0\0j\x01Q\xff\x9a\0\0\0\0\0\xcb\x0el\x01m\x01\0\0\0\0\0\0\0\0\0\0\x9a\0\x9a\0\xae\x10\0\0\0\0\0\0\0\0\xb4\bn\x01\xb2\x0b\0\fo\x01p\x01\0\0r\x01\x9a\0\x9a\0\x9a\0\xf3\x10\x9a\0\x9a\x008\x11\0\0\xdc\xff\xdc\xff\xdc\xff\xdc\xffs\x01v\x01\0\0\0\0w\x01\x9a\0}\x01~\x01\x9a\0\x7f\x01\0\0\x04\x01\x86\x01\0\0\0\0\x87\x01\0\0\0\0\0\0\0\0\x8c\x01\n\0\x03\x01\x03\x01\0\0\0\0\0\0\0\0\xcc\0\0\0\0\0\0\0\0\0\0\0\0\0Q\xff\x97\x01\x9a\x01\x02\t\x9a\0\x9a\0$\x10\0\0\xa5\x13\0\0\x9b\x01\x9c\x01\0\0\xb4\bE\x0e\0\0\x8b\x0e\0\0\0\f\0\0f\b\x9e\x01\x9f\x01\xa0\x01\xa2\x01\xa3\x01\0\0\0\0\0\0\x02\t\0\0\xec\tN\f&\x01\xa4\x01\x8d\x01\xf8\0\xa5\x01\xa7\x01\xa8\x01\0\0\0\0z\0\xa9\x01\xaa\x01\xab\x01\xaf\x01\xb0\x01\xb1\x01\0\0\0\0"\x01\xb2\x01\xb3\x01\xb4\x014\x01\xb6\x01\0\0\0\0\0\0\0\0P\t\xc8\n\x9c\fd\x0b\xea\f[\x01\0\0\0\0\x91\x12\0\0\0\0\0\0&\x01\xd2\0\0\0\0\0\xf8\0L\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x01l\x01\xb8\x01\0\0\xd6\x12\0\0\x1b\x13\0\0`\x13\0\0\xdc\xff\0\0\0\0\x92\x01\0\0}\x11\0\0\0\0\x02\t\xba\x01\0\0'),El=a('\0\x007\x02\0\0\xb0\x02\0\0\0\0\0\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x06\0\0\0\x000\0V\0\x96\xffZ\0)\0\0\0\0\0j\xff\xdf\0\0\0\xb5\x01\xb5\x01\0\0\0\0\0\0\0\0\0\0\0\0\xbd\x01\xb2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe1\0\0\0\0\0\0\0\0\0\xbe\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\0\0\0\0\0\0\0\0\0\xc2\x01\0\0\xc3\x01\xc4\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\x01\0\0\0\0\0\0\0\0\0\0\0\0\xc2\x01\0\0\0\0\0\0\0\0b\xff.\x07\x92\x06.\x07\0\0\0\0\0\0\0\0c\xff\0\0\0\0\0\0\0\0\0\0\0\0\x9c\x02\xea\x028\x03\x86\x03\xd4\x03"\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xfb\x01\xfb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xfb\x01\xfb\x01W\xffW\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0p\x04\0\0\0\0\xbe\x01k\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc6\x01\xbe\x01\0\0\0\0\0\0\xc7\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbe\x01\0\0\0\0\0\0\0\0p\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\xc9\x01\xc9\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc5\x01\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x01|\x07\xcd\x01|\x07\xcb\x01\0\0\xce\x01\xce\x01\xce\x01\0\0\0\0\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa6\x01\x1e\0\xa6\x01\0\0\0\0\xbe\x04\0\0\0\0c\xffc\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\x05\0\0\0\0\0\0\0\0Z\x05Z\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Z\x05Z\x05\xcc\x01\xcc\x01p\x04p\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbe\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xbe\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x01\0\0\0\0\xbe\x01\0\0\xbe\x01\0\0\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\xce\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xce\x01\0\0\0\0\0\0\0\0\0\0k\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xce\x01\xce\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xce\x01\xce\x01\0\0\0\0\xce\x01\xce\x01\0\0\0\0\xc9\x01\0\0\0\0\0\0\xbe\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe3\x000\0\xcf\x01\xcf\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd1\x01\xce\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xce\x01\xce\x01\0\0\0\0\0\0\0\0\0\0\xbe\x01\0\0\xbe\x01\xbe\x01\0\0\0\0\0\0\0\0\xce\x01\xce\x01\xce\x01\0\0\xce\x01\xce\x01\0\0\0\0\xa8\x05\xa8\x05\xca\x07\xa8\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc7\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd2\x01\0\0\0\0\0\0\0\0\0\0\0\0\xd1\x01\0\0\0\0\xbe\x01\xce\x01\xce\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbe\x01\0\0\0\0\0\0\0\0\xbe\x01\0\0b\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa6\x01\0\0c\xffc\xff\xc6\x01\0\0\xc6\x01\xc7\x01\0\0\xc7\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x01\0\0\0\0\0\0\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0k\xffk\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc6\x01\0\0\0\0\0\0\xc7\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbe\x01\0\0\0\0'),Em=a("\0\0\0\0\0\0\0\0\xe0\xffI\xffM\x01\xc7\xff\xbc\xff\xa2\0@\xff\0\0\xf4\xfda\0\xdb\xff9\xff\xb2\xff=\xff\xb8\xff\xd8\x01o\xff\xde\xfe#\xff\xec\xff\xd1\xff(\xfe9\0\xbb\xff\x91\xff\x9c\xff\0\0\0\0\0\0\xab\xff\0\0x\0\xe3\xfd\0\0\xbc\x01\xf6\xfen\0\x0e\xff\xf1\xfe\xe0\xfd\x1d\xffT\xffh\xfeQ\0\0\0\x1b\xff\\\0;\x01\0\0\x80\xfe^\0!\xfe:\0\xdb\0\xc6\xfe\0\0)\x02[\xff\xe1\xff\xcb\xfe\xe7\xffv\0\xd1\0*\xfe\0\0\0\0\xeb\xff\0\0\x12\x01\xbf\xfeG\xffR\xff\0\0\0\0\x13\x02\0\0\0\0\x07\x02\0\0\x1f\x02\0\0\0\0\0\0\0\0\x96\x02\0\0\0\0\xb9\x01\xe9\x02-\0\xe8\x02\0\0\0\0\xae\x01\r\x01\x9d\x01b\x01\0\0\xf6\x01\xed\x02\0\0\x1d\0>\xff\0\0?\xff\0\0\0\0\xa9\0\0\0"),Eo=a("S\0I\x01\xd7\x008\x01\xd7\0\xac\0\x0e\x01G\x01X\x01^\x01\xdd\0\xc6\x01\\\0\t\x01\x1c\x01a\0\xc5\x01\xc6\0U\0V\0W\0X\0Y\0\xd7\x01\xf6\0\x9d\x01\x1a\x01U\x01q\x01\xcd\0\xd6\0\xd2\x01\xd3\x01n\x01\"\x02\x0f\x02\xb2\x01\xe1\x01Q\x02c\x01\xde\x01\xc8\x01:\0m\x01\x87\x01\x89\x01x\x01u\x02\xbf\x01\xc0\x01\x80\x01\x81\x01F\0\x1a\x01\xc8\0\xd0\0T\x01\xdf\0\xc1\x01\xe6\0\xc9\0\xd1\x009\x01\xe0\0[\x02\x86\x02\xee\0\xef\0\xe5\x005\x016\x017\x01\x13\x01\x14\x01\x91\x02\x05\0f\x02g\x02h\x02\xc3\0\xc4\0\x11\x01\x11\x01\x11\x015\x016\x017\x01\x1a\0N\0\xa2\x01*\0N\0O\0b\0c\0O\0\xc3\0\xc4\0\x96\x02E\0q\0|\0\xbc\x01\xbc\x01\xbc\x01\x91\x02\x86\x02\x02\x01\x02\x01\xa8\0-\0\t\x01L\x01\xac\0\x17\x000\x001\0p\0q\0|\0\x1d\0q\0|\0\x17\0\x17\0\xec\0\t\x01\xa8\0:\x01e\x01\xa8\0\xd7\0\xc6\0\xc6\0\x84\x02\x07\x01\b\x01\xe9\0\xea\0\xae\x02*\0\xe3\x01\xed\0\xd7\0\xd3\0\xdd\0\xdd\0\xd4\x000\x001\0]\x01#\0\xcd\0Q\0\xc3\0\xc4\0\xd6\0\x0e\x01\x1c\x01K\0\xd6\0#\0#\0\xdc\0\xd4\0\xcc\x006\x02\t\x01\xc6\x01\x9c\x01\xc8\0\x1c\x01\x1c\x01\x9c\x01\xfa\x01N\0\xc9\0G\0\xd0\0O\0\x9c\x01\t\x01U\x01\x02\x02\xd1\0\xe6\x01\xa3\x01\xe2\x01\x03\x02H\x02\x0b\x02:\0\xe8\x01\xdf\0I\0i\x01\xb0\x02\xb7\x01\xc8\x01\xe0\0\x87\x01\x89\x01\x02\x01\x02\x014\x01\xc3\0\xc4\0w\x01\x9f\x01\xa0\x01\xa1\x01\x1a\x01\xb3\x02J\0=\x01>\x01?\x01@\x01\x11\x01\x11\x01\x11\x01$\x02\xd4\0\xac\x01%\x02\xaf\x01\t\x01K\0\t\x01#\0\x8f\x01\xb0\x01\xb1\x01\xd5\0\x07\x01\b\x01\x90\x01\x91\x01\x92\x01\xcd\x01#\0q\x02\xa9\x02\xbc\x01\x93\x01\xbc\x01Z\0\xf5\x01\xce\x01\xcf\x01\xd0\x01\xd1\x01]\0\x90\x01\xfb\x01\xf6\x01\t\x01\xa5\x02\xc0\0p\x01\t\x01\xf7\x01_\0\x07\x01\b\x01\xc1\0\xc2\0W\x01\xc3\0\xc4\0\xbc\x01d\0\xdb\x01e\x01\xc1\0\xc2\0\xfc\0\xc3\0\xc4\0d\x01\xfd\0N\0\xf6\0\xbc\0\x1a\x01O\0#\0$\0%\0z\x02h\x003\x02&\0'\0(\0)\0*\0j\0#\0#\0+\0,\0H\0#\0\xd6\0#\0\xa8\0\xbd\0U\x01\xa8\0\x92\x02\t\x01#\0#\0\xbf\0#\0#\0-\0\t\x01e\0f\0g\0\xcb\0k\0\xcc\0\xf0\0u\x01\x9c\x01\x1c\x01\x1c\x01v\x01\x06\x02\xc3\0\xc4\0\x9c\x01\x9c\x01\xe9\x01\t\x01\t\x01Q\0v\x01\t\x01\xe2\0#\0\x05\x02#\0\x8e\x02#\0\xa3\x01#\0\xad\x02\x8d\x02\t\x01#\0#\0{\x01\xfb\x01\x01\0\x02\0\x03\0\x14\x02|\x01}\x01\x17\x02~\x01\xf3\x01V\x02I\x02\xb7\x01v\x01\xe7\0K\0\xc1\0\xc2\0x\x02\xc3\0\xc4\0\x8e\x02-\0y\x02w\x02.\0/\x000\x001\x002\x003\x004\x005\x006\x007\0e\x018\x009\0\xf4\x01#\0$\0%\0v\x01\xf3\0\x18\x02&\0'\0(\0)\0*\0\xea\x018\x02\x9d\x01+\0,\0v\x01\xeb\x01\xec\x01\xf1\0\xed\x01\t\x01~\x02\xc1\0\xc2\0\xf2\0\xc3\0\xc4\0\xad\x01\xae\x01:\x02\t\x01\xd8\x01\xd9\x01v\x01\xf8\0,\x02\x06\x02\x06\x02\x83\x02/\x02\x07\x01\x03\x01\xd4\x01\xd5\x01\x07\x01I\x02\t\x01\x8c\x02\x1f\0\t\x01\xfe\x01\xff\x01;\0<\0=\0>\0?\0@\0A\0B\0C\0D\0\x02\0\x03\x01\xd8\x01\xd9\x01\x02\x005\x016\x017\x01i\0l\0m\0\xf9\0;\x02<\x02=\x02>\x02\xfa\0\xd4\x01\xd5\x01e\x01\xbc\x01\xbc\x01\x07\x01\x07\x01\x02\x01\x02\x01#\0#\0n\0o\0l\x022\x01\xfb\0o\x02\t\x01D\x01\t\x01\x0e\x01\xdd\0A\x01E\x01v\x02\t\x01J\x01\t\x01K\x01\xc6\0P\x01\x1c\x01\x1c\x01P\0S\x01d\x02d\x02d\x02d\x02Z\x01\\\x01[\x01d\x01\xcc\0`\x01\xb5\x02h\x01T\x01o\x01s\x01y\x01\xcb\x01\xdc\x01\x7f\x01\x82\x01\x83\x01\x84\x01\x85\x01\0\x02\x8b\x01\x8c\x01\x0e\x01\x1c\x01\x1c\x01\x8d\x01\x8e\x01\x94\x01\x96\x01\x97\x01\x98\x01\x99\x01\x9a\x01\x9b\x01H\x01\xd5\x01\xb3\x01\xd6\x01\x9c\x01\xda\x01\xdf\x01\t\x01\x9c\x01\x9c\x01\xe4\x01C\x02\xe5\x01\xee\x01\xf8\x01\xfd\x01\x04\x02\x0e\x02\xa2\x01\x1a\x01\x11\x02\x13\x02\x15\x02\x16\x02\x19\x02#\x02&\x02)\x02*\x021\x02\t\x014\x02\t\x015\x02\t\x017\x029\x02?\x02@\x02A\x02\x12\x02\t\x01\x06\x02\x06\x02B\x02\x15\x01\x16\x01\x17\x01\x18\x01\x1b\x01\x1a\x02#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x01'\x02(\x02\xff\x01D\x020\x011\x01E\x02F\x02G\x02P\x02R\x02\xac\x02W\x02\\\x02]\x02<\x01^\x02i\x02+\x02-\x02j\x02k\x02.\x020\x02#\0$\0%\0m\x02n\x02p\x02&\0'\0(\0)\0*\0d\x02r\x02s\x02+\0,\0-\0t\x02\x94\x02.\0/\x000\x001\x002\x003\x004\x005\x006\x007\0|\x028\x009\0}\x02\x81\x02\x82\x02\xd9\x01\x87\x02\x88\x02\x89\x02L\x02\x8a\x02\x8b\x02\x93\x02\x97\x02\x98\x02\xb4\x02\x9a\x02\x9b\x02\x9c\x02\x9d\x02T\x02U\x02\xf6\0\x9e\x02\x9f\x02\xa0\x02\xa2\x02\xa3\x02\xa4\x02\xa6\x02\xaf\x02\xb1\x02\xa8\0\x02\x01\xb6\x02_\x02`\x02a\x02\xa8\0b\x02c\x02\x07\x01\xf6\0\x1a\x01\x02\x013\x01\xb8\0\x13\0\xc9\0!\0'\x01\xac\0&\0,\0\x0b\0\x99\x02#\0+\x01\x1d\0\xa7\0\x85\x02\xc7\x01\x90\x02\xa1\x02\xa4\x01\xa9\x01\xab\x02\xfc\x01\xb2\x02\x10\x02\xa7\x02S\x02O\x01\x95\x02_\x01\xb8\x01Y\x02r\x01Y\x01\xbe\0\x11\0!\0\xf9\x01\x95\x012\x02\x1c\0\x7f\x02\x80\x02\0\0{\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0*\0*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc9\x01\xca\x01\0\0\0\0\0\0*\0*\0*\0*\0*\0*\0*\0\0\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\0\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\xdd\x01*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\0\0\0\0\xe7\x01\0\0\0\0\0\0\0\0\0\0\0\0\xef\x01\xf0\x01\xf1\x01\xf2\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\x03\x01\x04\x01\x05\x01\x06\x01G\0G\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\x01\b\xx1d\0\x1d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\0\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\0\0\0\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\0\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0!\0!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0!\0!\0!\0!\0!\0!\0!\0\0\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\0\0\0\0!\0!\0!\0!\0!\0!\0!\0!\0\0\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0M\0M\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0M\0M\0M\0M\0M\0M\0M\0\0\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0\0\0\0\0M\0M\0M\0M\0M\0M\0M\0M\0\0\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0(\0(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\x19\x01\0\0N\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\xb6\x01\0\0N\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0#\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0#\0#\0#\0#\0\0\0#\0\0\0\0\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\0\0\0\0#\0#\0#\0#\0#\0#\0#\0#\0\0\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&\0&\0&\0&\0&\0\0\0&\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0\0\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\x0b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0F\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0H\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\xb5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\xb9\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\xc4\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\x1e\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x01r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\xb6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0!\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0X\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0Z\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\x8f\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\xa8\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0\f\x01v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0\r\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\xaa\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0s\0t\0u\0v\0\0\0w\0\0\0\0\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\0\0\0\0\0\0\0\0b\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0r\0s\0t\0\xfe\0\xff\0t\x01\0\x01\0\0b\x01\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0b\x01\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\x04\x01\x05\x01\x06\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\x05\x01\x06\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0r\0s\0t\0\xfe\0\xff\0\x06\x01\0\x01M\x02\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\x03\x01N\x02O\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\x03\x01\xc2\x01\xc3\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\x03\x01\f\x02\r\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\x03\x01\x1c\x02\x1d\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\x03\x01\x1f\x02 \x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01M\x02\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0N\x02O\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\xc2\x01\xc3\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\f\x02\r\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\x1c\x02\x1d\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\x1f\x02 \x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01M\x02\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0O\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\xb4\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\x01\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\x1b\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\xc3\x01r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\r\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0\x1d\x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0\0\0\0\0\0\0\0\0 \x02r\0s\0t\0\xfe\0\xff\0\0\0\0\x01M\x02\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0r\0s\0t\0\xfe\0\xff\0\0\0\0\x01\0\0\0\0\x01\x01y\0z\0{\0|\0\x02\x01~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\0\0\0\0\x94\0\x95\0\x96\0\x97\0\x98\0\x99\0\x9a\0\x9b\0\0\0\x9c\0\x9d\0\x9e\0\x9f\0\xa0\0\xa1\0\xa2\0\xa3\0\xa4\0\xa5\0\xa6\0\xa7\0\xa8\0\xa9\0\xaa\0\xab\0"),Ep=a("%\0\xad\0W\0\x94\0Y\0M\0u\0\xac\0\xc8\0\xd0\0X\0\x1a\x01,\0q\0}\0/\0\x1a\x01U\0&\0'\0(\0)\0*\0L\x01\0\0\xfe\0\0\0\xc7\0\xdf\0V\0W\0A\x01B\x01\xda\0\xba\x01\xa3\x01\t\x01f\x01\x05\x02\xd5\0b\x01\x1b\x01\x01\x01\xd9\0\xee\0\xee\0\xe5\0;\x02\x13\x01\x14\x01\xe9\0\xea\0\x17\0}\0U\0V\0\x0e\x01X\0\x17\x01[\0U\0V\0\r\x01X\0\x16\x02^\x02b\0c\0Y\0\x03\x01\x04\x01\x05\x01w\0x\0j\x02\x01\x01$\x02%\x02&\x02\x0b\x01\f\x01v\0w\0x\0\x03\x01\x04\x01\x05\x01\x01\x01\x03\x01\x01\x01\x03\x01\x03\x01\x07\x010\x001\0\x07\x01\x0b\x01\f\x01n\x02\0\0\x02\x01\x02\x01\x12\x01\x13\x01\x14\x01\x89\x02\x87\x02\x01\x01\x02\x01\x02\x01_\x01\xd3\0\xb8\0\xb9\0\x02\x01d\x01e\x01H\0\x14\x01\x14\x01\x01\x01\x17\x01\x17\x01\x0b\x01\f\x01`\0\xe2\0\x14\x01O\x01\xd6\0\x17\x01\xd8\0\xc8\0\xc9\0\\\x02]\x01^\x01`\x01a\x01\x97\x025\x01j\x01a\0\xe4\0\x01\x01\xdf\0\xe0\0O\x01d\x01e\x01\xcf\0\x01\x01\xd1\0\x01\x01\x0b\x01\f\x01\xd5\0\f\x01\r\x01\x07\x01\xd9\0\x0b\x01\f\x01\x01\x01O\x01\x03\x01\xe0\x01\x0b\x01\xb7\x01\xfe\0\xc9\0\x1a\x01\x1b\x01\x02\x01l\x01\x03\x01\xc9\0\0\0\xd1\0\x07\x01\t\x01\x19\x01b\x01\x9c\x01\xd1\0p\x01\x02\x01i\x01\x9f\x01l\x01\xa1\x01\x01\x01w\x01\xe0\0\0\0\xd8\0\xa3\x02\r\x01\xb8\x01\xe0\0\x8a\x01\x8a\x01`\x01a\x01\x93\0\x0b\x01\f\x01\xe4\0\xff\0\0\x01\x01\x01\x1b\x01\xac\x02\0\0\x9d\0\x9e\0\x9f\0\xa0\0\xff\0\0\x01\x01\x01\x14\x01O\x01\x04\x01\x17\x01\x06\x01F\x01\x07\x01H\x01O\x016\x01\x07\x01\b\x01Z\x01]\x01^\x01<\x01=\x01>\x014\x01Z\x012\x02\x8a\x02\x9f\x01D\x01\xa1\x01\x06\x016\x01=\x01>\x01?\x01@\x01\x07\x01<\x01\x8f\x01>\x01d\x01\x81\x02\x01\x01Y\x01h\x01D\x01\x07\x01]\x01^\x01\b\x01\t\x01\x01\x01\x0b\x01\f\x01\xba\x01\x01\x01T\x01f\x01\b\x01\t\x01\x02\x01\x0b\x01\f\x01\x01\x01\x06\x01\x03\x01\x02\x01\x02\x01\x02\x01\x07\x01O\x01P\x01Q\x01C\x02\x01\x01\xdc\x01U\x01V\x01W\x01X\x01Y\x01\x01\x01\x01\x01\x02\x01]\x01^\x01_\x01\x06\x01i\x01\x01\x01\x14\x01O\x01\xe0\x01\x17\x01k\x02\x9b\x01\b\x01\t\x01\x02\x01\x0b\x01\f\x01_\x01\xa2\x012\x003\x004\0\x01\x016\0\x03\x01\x06\x01\x02\x01\x9c\x01\xb7\x01\xb8\x01\x06\x01\xa0\x01\x0b\x01\f\x01\xa3\x01\xa4\x01\x02\x01\xb5\x01\xb6\x01\x01\x01\x06\x01\xb9\x01\x01\x01\x01\x01\xa0\x01\x03\x01i\x02\x01\x01\xa4\x01\x03\x01\x93\x02i\x02\xc4\x01\x0b\x01\f\x01O\x01\xf5\x01\x01\0\x02\0\x03\0\xac\x01U\x01V\x01\xaf\x01X\x01\x02\x01\x13\x02\0\x02\xb8\x01\x06\x01\x01\x01\x07\x01\b\x01\t\x01=\x02\x0b\x01\f\x01\x88\x02_\x01>\x02<\x02b\x01c\x01d\x01e\x01f\x01g\x01h\x01i\x01j\x01k\x01\xdc\x01m\x01n\x01\x02\x01O\x01P\x01Q\x01\x06\x01\x01\x01\xb0\x01U\x01V\x01W\x01X\x01Y\x01O\x01\x02\x01}\x02]\x01^\x01\x06\x01U\x01V\x01\x06\x01X\x01\x04\x02M\x02\b\x01\t\x01\x06\x01\x0b\x01\f\x01\x05\x01\x06\x01\x02\x01\x0e\x02R\x01S\x01\x06\x01\x06\x01\xd4\x01\x05\x02\x06\x02W\x02\xd8\x01\x02\x01Q\x01R\x01S\x01\x06\x01J\x02\x1e\x02g\x02\x03\0!\x02\x02\x01\x03\x01\x07\0\b\0\t\0\n\0\x0b\0\f\0\r\0\x0e\0\x0f\0\x10\0\x02\x01Q\x01R\x01S\x01\x06\x01\x03\x01\x04\x01\x05\x015\x006\x007\0\x06\x01\xea\x01\xeb\x01\xec\x01\xed\x01\x06\x01R\x01S\x012\x02\x8a\x02\x8b\x02\x01\x01\x02\x01\x01\x01\x02\x01\x01\x01\x02\x018\x009\0,\x024\x01\x06\x01/\x02P\x02\x03\x01R\x02^\x02>\x02\n\x01\x03\x01;\x02X\x02\x02\x01Z\x02\x01\x01<\x02\x01\x01i\x02j\x02$\0\x02\x01#\x02$\x02%\x02&\x02\x02\x01\x01\x01\x03\x01\x01\x01\x03\x01\x02\x01\xb4\x02\x01\x01\x0e\x01\x02\x01\x02\x01\x01\x015\x01W\x01\x02\x01\x02\x01\x02\x01\x02\x01\x01\x01\n\x01\x02\x01\x02\x01\x87\x02\x88\x02\x89\x02\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x01\x01\x01\x01S\x01\x02\x01\x01\x01}\x02\x02\x01\x02\x01\x8f\x02\x81\x02\x82\x02\x02\x01\n\x01\x02\x01\x02\x01\x02\x01\x02\x01\x01\x01\x01\x01\x01\x01\0\0\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x14\x01\x14\x01\x03\x01\x03\x01\x02\x01\xa6\x02\x02\x01\xa8\x02\x02\x01\xaa\x02\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\xaa\x01\xb1\x02\xa3\x02\xa4\x02\x02\x01y\0z\0{\0|\0}\0\xb4\x01\x7f\0\x80\0\x81\0\x82\0\x83\0\x84\0\x85\0\x86\0\x87\0\x88\0\x89\0\x8a\0\x8b\0\xc2\x01\xc3\x01\x03\x01\x02\x01\x90\0\x91\0\x02\x01\x02\x01\x02\x01\x01\x01\x01\x01\x14\x01\x02\x01\x02\x01\x02\x01\x9b\0\x02\x01\x02\x01\xd4\x01\xd5\x01\x02\x01\x02\x01\xd8\x01\xd9\x01O\x01P\x01Q\x01\x02\x01\x02\x01\x02\x01U\x01V\x01W\x01X\x01Y\x01\xac\x02\x02\x01\x02\x01]\x01^\x01_\x01\x01\x01\x01\x01b\x01c\x01d\x01e\x01f\x01g\x01h\x01i\x01j\x01k\x01\x02\x01m\x01n\x01\x02\x01\x02\x01\x02\x01S\x01\x02\x01\x02\x01\x02\x01\x01\x02\x02\x01\x02\x01\x02\x01\x02\x01\x01\x01\x17\x01\x02\x01\x02\x01\x02\x01\x02\x01\f\x02\r\x02\0\0\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x01\x01\x01\x01\x01\x01\x14\x01\x06\x01\x02\x01\x1b\x02\x1c\x02\x1d\x02\x02\x01\x1f\x02 \x02\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x01\x01\x03\x01\x02\x01p\x02\x03\x01\x02\x01\x02\x01\x02\x01^\x02\x1b\x01j\x02}\x02\x02\x01\x03\x01\x8b\x02\x90\x01\xa4\x02\xa4\x01\x82\x02\x06\x02\xb9\0m\x02\xd1\0\r\x01\x15\x02\xe0\0\xc9\0S\0\x01\0\x03\0\x8a\x01\xf7\0\xdc\x01\x02\0N\x02O\x02\xff\xffJ\x02\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\x01.\x01\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff5\x016\x017\x018\x019\x01:\x01;\x01<\x01=\x01a\x01?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xfft\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff{\x01|\x01}\x01~\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xffQ\x01R\x01S\x01T\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff]\x01^\x01\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\x03\x01\xff\xff\xff\xff\xff\xff\x07\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\x03\x01\xff\xff\xff\xff\xff\xff\x07\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\x02\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\\\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffV\x01\xff\xff\xff\xff\xff\xff\xff\xff[\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01X\x01\x15\x01\xff\xff[\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff[\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xffR\x01S\x01T\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01T\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01T\x01\x15\x01\x16\x01\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xffQ\x01R\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xffQ\x01R\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xffQ\x01R\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xffQ\x01R\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xffQ\x01R\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\x16\x01\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xffR\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xffR\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xffR\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xffR\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xffR\x01S\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\x16\x01\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\xff\xff\xff\xff\xff\xff\xff\xffS\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\x16\x01\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\xff\xff\x15\x01\xff\xff\xff\xff\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x01\xff\xff\xff\xff6\x017\x018\x019\x01:\x01;\x01<\x01=\x01\xff\xff?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01"),Eq=a("LPAR\0RPAR\0FUNCREF\0EXTERNREF\0EXTERN\0MUT\0UNREACHABLE\0NOP\0DROP\0SELECT\0BLOCK\0END\0IF\0THEN\0ELSE\0LOOP\0BR\0BR_IF\0BR_TABLE\0CALL\0CALL_INDIRECT\0RETURN\0LOCAL_GET\0LOCAL_SET\0LOCAL_TEE\0GLOBAL_GET\0GLOBAL_SET\0TABLE_GET\0TABLE_SET\0TABLE_SIZE\0TABLE_GROW\0TABLE_FILL\0TABLE_COPY\0TABLE_INIT\0ELEM_DROP\0MEMORY_SIZE\0MEMORY_GROW\0MEMORY_FILL\0MEMORY_COPY\0MEMORY_INIT\0DATA_DROP\0REF_NULL\0REF_FUNC\0REF_EXTERN\0REF_IS_NULL\0VEC_SHUFFLE\0FUNC\0START\0TYPE\0PARAM\0RESULT\0LOCAL\0GLOBAL\0TABLE\0ELEM\0MEMORY\0DATA\0DECLARE\0OFFSET\0ITEM\0IMPORT\0EXPORT\0MODULE\0BIN\0QUOTE\0SCRIPT\0REGISTER\0INVOKE\0GET\0ASSERT_MALFORMED\0ASSERT_INVALID\0ASSERT_UNLINKABLE\0ASSERT_RETURN\0ASSERT_TRAP\0ASSERT_EXHAUSTION\0INPUT\0OUTPUT\0EOF\0"),Er=a("NAT\0INT\0FLOAT\0STRING\0VAR\0NUM_TYPE\0VEC_TYPE\0VEC_SHAPE\0LOAD\0STORE\0OFFSET_EQ_NAT\0ALIGN_EQ_NAT\0CONST\0UNARY\0BINARY\0TEST\0COMPARE\0CONVERT\0VEC_LOAD\0VEC_STORE\0VEC_LOAD_LANE\0VEC_STORE_LANE\0VEC_CONST\0VEC_UNARY\0VEC_BINARY\0VEC_TERNARY\0VEC_TEST\0VEC_SHIFT\0VEC_BITMASK\0VEC_SPLAT\0VEC_EXTRACT\0VEC_REPLACE\0NAN\0"),Kc=a(sY),Ke=a(cP),Kd=a(cP),Kf=a("unclosed string literal"),Kg=a("illegal control character in string literal"),Kh=a("illegal escape"),Ki=a("i32.xor"),Od=a("f64x2.floor"),P$=a("f32x4.demote_f64x2_zero"),Q_=a("f32.convert_i32_u"),RD=a(tT),RT=a(t9),R1=a("assert_exhaustion"),R2=a("assert_invalid"),R3=a("assert_malformed"),R4=a("assert_return"),R5=a("assert_trap"),R6=a("assert_unlinkable"),R7=a("binary"),RU=a("br"),RV=a("br_if"),RW=a("br_table"),RX=a("call"),RY=a("call_indirect"),RZ=a("data"),R0=a("data.drop"),RE=a(th),RM=a(sN),RN=a("elem"),RO=a("elem.drop"),RP=a(tI),RQ=a("end"),RR=a(sA),RS=a(sa),RF=a(rU),RG=a("f32.abs"),RH=a("f32.add"),RI=a("f32.ceil"),RJ=a("f32.const"),RK=a("f32.convert_i32_s"),RL=[5,2],Q$=a("f32.mul"),Rp=a("f32.ge"),Rw=a("f32.convert_i64_s"),Rx=a("f32.convert_i64_u"),Ry=a("f32.copysign"),Rz=a("f32.demote_f64"),RA=a("f32.div"),RB=a("f32.eq"),RC=a("f32.floor"),Rq=a("f32.gt"),Rr=a("f32.le"),Rs=a("f32.load"),Rt=a("f32.lt"),Ru=a("f32.max"),Rv=a("f32.min"),Ra=a("f32.trunc"),Ri=a("f32.ne"),Rj=a("f32.nearest"),Rk=a("f32.neg"),Rl=a("f32.reinterpret_i32"),Rm=a("f32.sqrt"),Rn=a("f32.store"),Ro=a("f32.sub"),Rb=a(s0),Rc=a("f32x4.abs"),Rd=a("f32x4.add"),Re=a("f32x4.ceil"),Rf=a("f32x4.convert_i32x4_s"),Rg=a("f32x4.convert_i32x4_u"),Rh=[7,[4,0]],Qa=a("f64.copysign"),QF=a("f32x4.pmin"),QV=a("f32x4.lt"),Q3=a("f32x4.div"),Q4=a("f32x4.eq"),Q5=a("f32x4.extract_lane"),Q6=a("f32x4.floor"),Q7=a("f32x4.ge"),Q8=a("f32x4.gt"),Q9=a("f32x4.le"),QW=a("f32x4.max"),QX=a("f32x4.min"),QY=a("f32x4.mul"),QZ=a("f32x4.ne"),Q0=a("f32x4.nearest"),Q1=a("f32x4.neg"),Q2=a("f32x4.pmax"),QG=a("f64.add"),QN=a("f32x4.replace_lane"),QO=a("f32x4.splat"),QP=a("f32x4.sqrt"),QQ=a("f32x4.sub"),QR=a("f32x4.trunc"),QS=a(sk),QT=a("f64.abs"),QU=[5,3],QH=a("f64.ceil"),QI=a("f64.const"),QJ=a("f64.convert_i32_s"),QK=a("f64.convert_i32_u"),QL=a("f64.convert_i64_s"),QM=a("f64.convert_i64_u"),Qb=a("f64.promote_f32"),Qr=a("f64.lt"),Qy=a("f64.div"),Qz=a("f64.eq"),QA=a("f64.floor"),QB=a("f64.ge"),QC=a("f64.gt"),QD=a("f64.le"),QE=a("f64.load"),Qs=a("f64.max"),Qt=a("f64.min"),Qu=a("f64.mul"),Qv=a("f64.ne"),Qw=a("f64.nearest"),Qx=a("f64.neg"),Qc=a("f64x2.add"),Qj=a("f64.reinterpret_i64"),Qk=a("f64.sqrt"),Ql=a("f64.store"),Qm=a("f64.sub"),Qn=a("f64.trunc"),Qo=a(tm),Qp=a("f64x2.abs"),Qq=[7,[5,0]],Qd=a("f64x2.ceil"),Qe=a("f64x2.convert_low_i32x4_s"),Qf=a("f64x2.convert_low_i32x4_u"),Qg=a("f64x2.div"),Qh=a("f64x2.eq"),Qi=a("f64x2.extract_lane"),Oe=a("i16x8.ne"),Pc=a("i16x8.avgr_u"),PG=a("f64x2.sqrt"),PW=a("f64x2.ne"),P4=a("f64x2.ge"),P5=a("f64x2.gt"),P6=a("f64x2.le"),P7=a("f64x2.lt"),P8=a("f64x2.max"),P9=a("f64x2.min"),P_=a("f64x2.mul"),PX=a("f64x2.nearest"),PY=a("f64x2.neg"),PZ=a("f64x2.pmax"),P0=a("f64x2.pmin"),P1=a("f64x2.promote_low_f32x4"),P2=a("f64x2.replace_lane"),P3=a("f64x2.splat"),PH=a("global.set"),PP=a("f64x2.sub"),PQ=a("f64x2.trunc"),PR=a(ck),PS=a(rl),PT=a("get"),PU=a(dK),PV=a("global.get"),PI=a(rk),PJ=a("i16x8.abs"),PK=a("i16x8.add"),PL=a("i16x8.add_sat_s"),PM=a("i16x8.add_sat_u"),PN=a("i16x8.all_true"),PO=[7,[1,0]],Pd=a("i16x8.ge_s"),Ps=a("i16x8.extend_low_i8x16_u"),Pz=a("i16x8.bitmask"),PA=a("i16x8.eq"),PB=a("i16x8.extadd_pairwise_i8x16_s"),PC=a("i16x8.extadd_pairwise_i8x16_u"),PD=a("i16x8.extend_high_i8x16_s"),PE=a("i16x8.extend_high_i8x16_u"),PF=a("i16x8.extend_low_i8x16_s"),Pt=a("i16x8.extmul_high_i8x16_s"),Pu=a("i16x8.extmul_high_i8x16_u"),Pv=a("i16x8.extmul_low_i8x16_s"),Pw=a("i16x8.extmul_low_i8x16_u"),Px=a("i16x8.extract_lane_s"),Py=a("i16x8.extract_lane_u"),Pe=a("i16x8.max_s"),Pl=a("i16x8.ge_u"),Pm=a("i16x8.gt_s"),Pn=a("i16x8.gt_u"),Po=a("i16x8.le_s"),Pp=a("i16x8.le_u"),Pq=a("i16x8.lt_s"),Pr=a("i16x8.lt_u"),Pf=a("i16x8.max_u"),Pg=a("i16x8.min_s"),Ph=a("i16x8.min_u"),Pi=a("i16x8.mul"),Pj=a("i16x8.narrow_i32x4_s"),Pk=a("i16x8.narrow_i32x4_u"),Of=a("i32.load16_u"),OJ=a("i32.ctz"),OY=a("i16x8.sub"),O7=a("i16x8.neg"),O8=a("i16x8.q15mulr_sat_s"),O9=a("i16x8.replace_lane"),O_=a("i16x8.shl"),O$=a("i16x8.shr_s"),Pa=a("i16x8.shr_u"),Pb=a("i16x8.splat"),OZ=a("i16x8.sub_sat_s"),O0=a("i16x8.sub_sat_u"),O1=a(tn),O2=a("i32.add"),O3=a("i32.and"),O4=a("i32.clz"),O5=a("i32.const"),O6=[5,0],OK=a("i32.ge_u"),OR=a("i32.div_s"),OS=a("i32.div_u"),OT=a("i32.eq"),OU=a("i32.eqz"),OV=a("i32.extend16_s"),OW=a("i32.extend8_s"),OX=a("i32.ge_s"),OL=a("i32.gt_s"),OM=a("i32.gt_u"),ON=a("i32.le_s"),OO=a("i32.le_u"),OP=a("i32.load"),OQ=a("i32.load16_s"),Og=a("i32.shr_s"),Ov=a("i32.popcnt"),OC=a("i32.load8_s"),OD=a("i32.load8_u"),OE=a("i32.lt_s"),OF=a("i32.lt_u"),OG=a("i32.mul"),OH=a("i32.ne"),OI=a("i32.or"),Ow=a("i32.reinterpret_f32"),Ox=a("i32.rem_s"),Oy=a("i32.rem_u"),Oz=a("i32.rotl"),OA=a("i32.rotr"),OB=a("i32.shl"),Oh=a("i32.trunc_f64_s"),Oo=a("i32.shr_u"),Op=a("i32.store"),Oq=a("i32.store16"),Or=a("i32.store8"),Os=a("i32.sub"),Ot=a("i32.trunc_f32_s"),Ou=a("i32.trunc_f32_u"),Oi=a("i32.trunc_f64_u"),Oj=a("i32.trunc_sat_f32_s"),Ok=a("i32.trunc_sat_f32_u"),Ol=a("i32.trunc_sat_f64_s"),Om=a("i32.trunc_sat_f64_u"),On=a("i32.wrap_i64"),Kj=a("i64x2.replace_lane"),Mh=a("i64.gt_s"),Nf=a("i32x4.mul"),NK=a("i32x4.extmul_low_i16x8_s"),NZ=a("i32x4.extadd_pairwise_i16x8_s"),N7=a(sQ),N8=a("i32x4.abs"),N9=a("i32x4.add"),N_=a("i32x4.all_true"),N$=a("i32x4.bitmask"),Oa=a("i32x4.dot_i16x8_s"),Ob=a("i32x4.eq"),Oc=[7,[2,0]],N0=a("i32x4.extadd_pairwise_i16x8_u"),N1=a("i32x4.extend_high_i16x8_s"),N2=a("i32x4.extend_high_i16x8_u"),N3=a("i32x4.extend_low_i16x8_s"),N4=a("i32x4.extend_low_i16x8_u"),N5=a("i32x4.extmul_high_i16x8_s"),N6=a("i32x4.extmul_high_i16x8_u"),NL=a("i32x4.le_u"),NS=a("i32x4.extmul_low_i16x8_u"),NT=a("i32x4.extract_lane"),NU=a("i32x4.ge_s"),NV=a("i32x4.ge_u"),NW=a("i32x4.gt_s"),NX=a("i32x4.gt_u"),NY=a("i32x4.le_s"),NM=a("i32x4.lt_s"),NN=a("i32x4.lt_u"),NO=a("i32x4.max_s"),NP=a("i32x4.max_u"),NQ=a("i32x4.min_s"),NR=a("i32x4.min_u"),Ng=a("i64.and"),Nv=a("i32x4.sub"),ND=a("i32x4.ne"),NE=a("i32x4.neg"),NF=a("i32x4.replace_lane"),NG=a("i32x4.shl"),NH=a("i32x4.shr_s"),NI=a("i32x4.shr_u"),NJ=a("i32x4.splat"),Nw=a("i32x4.trunc_sat_f32x4_s"),Nx=a("i32x4.trunc_sat_f32x4_u"),Ny=a("i32x4.trunc_sat_f64x2_s_zero"),Nz=a("i32x4.trunc_sat_f64x2_u_zero"),NA=a(t$),NB=a("i64.add"),NC=[5,1],Nh=a("i64.extend16_s"),No=a("i64.clz"),Np=a("i64.const"),Nq=a("i64.ctz"),Nr=a("i64.div_s"),Ns=a("i64.div_u"),Nt=a("i64.eq"),Nu=a("i64.eqz"),Ni=a("i64.extend32_s"),Nj=a("i64.extend8_s"),Nk=a("i64.extend_i32_s"),Nl=a("i64.extend_i32_u"),Nm=a("i64.ge_s"),Nn=a("i64.ge_u"),Mi=a("i64.trunc_f32_u"),MN=a("i64.popcnt"),M2=a("i64.load32_u"),M_=a("i64.gt_u"),M$=a("i64.le_s"),Na=a("i64.le_u"),Nb=a("i64.load"),Nc=a("i64.load16_s"),Nd=a("i64.load16_u"),Ne=a("i64.load32_s"),M3=a("i64.load8_s"),M4=a("i64.load8_u"),M5=a("i64.lt_s"),M6=a("i64.lt_u"),M7=a("i64.mul"),M8=a("i64.ne"),M9=a("i64.or"),MO=a("i64.shr_u"),MV=a("i64.reinterpret_f64"),MW=a("i64.rem_s"),MX=a("i64.rem_u"),MY=a("i64.rotl"),MZ=a("i64.rotr"),M0=a("i64.shl"),M1=a("i64.shr_s"),MP=a("i64.store"),MQ=a("i64.store16"),MR=a("i64.store32"),MS=a("i64.store8"),MT=a("i64.sub"),MU=a("i64.trunc_f32_s"),Mj=a("i64x2.extend_high_i32x4_u"),My=a(sD),MG=a("i64.trunc_f64_s"),MH=a("i64.trunc_f64_u"),MI=a("i64.trunc_sat_f32_s"),MJ=a("i64.trunc_sat_f32_u"),MK=a("i64.trunc_sat_f64_s"),ML=a("i64.trunc_sat_f64_u"),MM=a("i64.xor"),Mz=a("i64x2.abs"),MA=a("i64x2.add"),MB=a("i64x2.all_true"),MC=a("i64x2.bitmask"),MD=a("i64x2.eq"),ME=a("i64x2.extend_high_i32x4_s"),MF=[7,[3,0]],Mk=a("i64x2.ge_s"),Mr=a("i64x2.extend_low_i32x4_s"),Ms=a("i64x2.extend_low_i32x4_u"),Mt=a("i64x2.extmul_high_i32x4_s"),Mu=a("i64x2.extmul_high_i32x4_u"),Mv=a("i64x2.extmul_low_i32x4_s"),Mw=a("i64x2.extmul_low_i32x4_u"),Mx=a("i64x2.extract_lane"),Ml=a("i64x2.gt_s"),Mm=a("i64x2.le_s"),Mn=a("i64x2.lt_s"),Mo=a("i64x2.mul"),Mp=a("i64x2.ne"),Mq=a("i64x2.neg"),Kk=a(r7),Lk=a("i8x16.ne"),LO=a("i8x16.extract_lane_u"),L3=a("i8x16.add"),L$=a("i64x2.shl"),Ma=a("i64x2.shr_s"),Mb=a("i64x2.shr_u"),Mc=a("i64x2.splat"),Md=a("i64x2.sub"),Me=a(sV),Mf=a("i8x16.abs"),Mg=[7,[0,0]],L4=a("i8x16.add_sat_s"),L5=a("i8x16.add_sat_u"),L6=a("i8x16.all_true"),L7=a("i8x16.avgr_u"),L8=a("i8x16.bitmask"),L9=a("i8x16.eq"),L_=a("i8x16.extract_lane_s"),LP=a("i8x16.lt_u"),LW=a("i8x16.ge_s"),LX=a("i8x16.ge_u"),LY=a("i8x16.gt_s"),LZ=a("i8x16.gt_u"),L0=a("i8x16.le_s"),L1=a("i8x16.le_u"),L2=a("i8x16.lt_s"),LQ=a("i8x16.max_s"),LR=a("i8x16.max_u"),LS=a("i8x16.min_s"),LT=a("i8x16.min_u"),LU=a("i8x16.narrow_i16x8_s"),LV=a("i8x16.narrow_i16x8_u"),Ll=a("input"),LA=a("i8x16.splat"),LH=a("i8x16.neg"),LI=a("i8x16.popcnt"),LJ=a("i8x16.replace_lane"),LK=a("i8x16.shl"),LL=a("i8x16.shr_s"),LM=a("i8x16.shr_u"),LN=a("i8x16.shuffle"),LB=a("i8x16.sub"),LC=a("i8x16.sub_sat_s"),LD=a("i8x16.sub_sat_u"),LE=a("i8x16.swizzle"),LF=a(sh),LG=a(r6),Lm=a(cV),Lt=a("invoke"),Lu=a(sn),Lv=a(dQ),Lw=a("local.get"),Lx=a("local.set"),Ly=a("local.tee"),Lz=a(sm),Ln=a(rg),Lo=a(rC),Lp=a(rv),Lq=a("memory.init"),Lr=a(rm),Ls=a(t0),Kl=a("v128.and"),KQ=a("script"),K6=a("ref.extern"),Lb=a("nan:arithmetic"),Lc=a("nan:canonical"),Ld=a(r0),Le=a(r5),Lf=a("output"),Lg=a(rK),Lh=a("quote"),Li=[32,0],Lj=[32,1],K7=a("ref.func"),K8=a(sR),K9=a(sg),K_=a("register"),K$=a(dZ),La=a(tP),KR=a("table.init"),KZ=a(eS),K0=a("start"),K1=a(cX),K2=a("table.copy"),K3=a("table.fill"),K4=a("table.get"),K5=a("table.grow"),KS=a("table.set"),KT=a("table.size"),KU=a(tX),KV=a(dX),KW=a(s9),KX=a(tl),KY=[6,0],Km=a("v128.load64_lane"),KC=a("v128.load16x4_s"),KJ=a("v128.andnot"),KK=a("v128.any_true"),KL=a("v128.bitselect"),KM=a("v128.const"),KN=a("v128.load"),KO=a("v128.load16_lane"),KP=a("v128.load16_splat"),KD=a("v128.load16x4_u"),KE=a("v128.load32_lane"),KF=a("v128.load32_splat"),KG=a("v128.load32_zero"),KH=a("v128.load32x2_s"),KI=a("v128.load32x2_u"),Kn=a("v128.or"),Kv=a("v128.load64_splat"),Kw=a("v128.load64_zero"),Kx=a("v128.load8_lane"),Ky=a("v128.load8_splat"),Kz=a("v128.load8x8_s"),KA=a("v128.load8x8_u"),KB=a("v128.not"),Ko=a("v128.store"),Kp=a("v128.store16_lane"),Kq=a("v128.store32_lane"),Kr=a("v128.store64_lane"),Ks=a("v128.store8_lane"),Kt=a("v128.xor"),R8=a("misplaced control character"),R9=a("misplaced unicode character"),R_=a(fp),Ku=a("unknown operator "),R$=a(sY),Sa=a("unclosed comment"),Sb=a(fp),Sd=a("string"),Se=a(s),Sf=a(s),Sg=a(ad),Sj=a(rq),Sk=a("\n  "),Sh=a(tc),Si=a(so),Sl=a(rq),WD=[0,a(s9),0],WE=[0,a(r0),0],WF=[0,a(sN),0],WG=[0,a(tP),0],WH=[0,a(rm),0],WI=[0,a(rv),0],WJ=[0,a(rC),0],WK=[0,a(rg),0],WL=[0,a(sR),0],WM=a(dZ),WN=a(eS),WO=[0,a(eS),[0,[1,a(dZ),0],0]],WP=[0,a(eS),0],WQ=a(t9),WR=a(sm),WS=a(tI),WT=a(tX),WU=a(sh),WV=a("br "),WW=a("br_if "),WX=a(ad),WY=a("br_table "),WZ=a("call "),W0=a(hT),W1=a("call_indirect "),W2=a("local.get "),W3=a("local.set "),W4=a("local.tee "),W5=a("global.get "),W6=a("global.set "),W7=a("table.get "),W8=a("table.set "),W9=a("table.size "),W_=a("table.grow "),W$=a("table.fill "),Xa=a(ad),Xb=a("table.copy "),Xc=a(ad),Xd=a("table.init "),Xe=a("elem.drop "),Xf=a(d0),Xg=a(d0),Xh=a(eV),Xi=a(eV),Xl=a("_zero"),Xj=a("_splat"),Xm=a("8x8"),Xn=a("16x4"),Xo=a("32x2"),Xk=a(d0),Xp=a(d0),Xq=a(eV),Xr=a(d0),Xs=a(eV),Xt=a("memory.init "),Xu=a("data.drop "),Xv=a(sg),Xw=a("ref.func "),Xx=a(ad),Xy=a(ad),Ya=a(t0),X$=a(s),X_=a("start "),X8=a(t1),X3=a(ck),X5=a(cX),X6=a(cV),X7=a(dK),X4=a(sA),XY=a(dX),XZ=a("func $"),X1=a(t1),X0=a(r6),XX=a("type $"),XU=a(cV),XV=a("data $"),XS=a(sn),XQ=a(cX),XR=a("elem $"),XN=[0,[0,a(tT)],0],XO=a(r5),XM=[0,a(cQ),558,9],XJ=[0,a(cQ),548,9],XI=a(ck),XF=a(ad),XG=a("memory $"),XD=a(ad),XE=a("table $"),XC=a(" $"),Xz=a(dQ),XA=a(hT),XB=a(ck),WB=a(hT),WC=a(dZ),WA=a(".const i32x4"),Wz=a(".const"),Wx=a(ad),Wy=a("_lane"),Ws=a(s),Ww=a(" align="),Wt=a(s),Wv=a(" offset="),Wu=a(bf),Wc=a(bf),Wb=a("v128."),V8=a(hq),V_=a(h_),V$=a(hq),Wa=a(h_),V9=a(bf),V2=a(hH),V3=a(dV),V4=a(b2),V5=a(eP),V6=a(b2),V7=a(eP),V1=a("replace_lane "),V0=a("extract_lane "),VY=a(ad),VZ=a("extract_lane"),VW=a("splat"),VV=a("bitselect"),VQ=a(rz),VR=a(s2),VS=a(tM),VT=a("andnot"),VO=a("not"),VM=a("any_true"),VK=a("bitmask"),VH=a(tV),VI=a(s7),VJ=a(sP),Vv=a("demote_f64x2_zero"),Vw=a("promote_low_f32x4"),Vx=a("i32x4_s"),Vy=a(b2),Vz=a(s),VB=a(tG),VA=a(sc),VC=a("i32x4_u"),VD=a(b2),VE=a(s),VG=a(tG),VF=a(sc),Ve=a(bJ),Vf=a(rQ),Vg=a(cm),Vh=a(rQ),Vi=a(bJ),Vj=a(tj),Vk=a(cm),Vl=a(tj),Vm=a(bJ),Vn=a(tp),Vo=a(cm),Vp=a(tp),Vq=a("trunc_sat_f32x4_s"),Vr=a("trunc_sat_f32x4_u"),Vs=a("trunc_sat_f64x2_s_zero"),Vt=a("trunc_sat_f64x2_u_zero"),U_=a(ff),U$=a(eR),Va=a(tw),Vb=a(tJ),Vc=a(sG),Vd=a(sL),UZ=a(ff),U0=a(eR),U1=a(sK),U2=a(rp),U3=a(rP),U4=a(rI),U5=a(ta),U6=a(tE),U7=a(rA),U8=a(rt),UR=a(fy),US=a(fx),UT=a(fe),UU=a(rE),UV=a(sf),UW=a(sx),UX=a("pmin"),UY=a("pmax"),Um=a(fy),Un=a(fx),Uo=a(fe),Up=a("min_s"),Uq=a("min_u"),Ur=a("max_s"),Us=a("max_u"),Ut=a("avgr_u"),Uu=a("add_sat_s"),Uv=a("add_sat_u"),Uw=a("sub_sat_s"),Ux=a("sub_sat_u"),Uy=a(bJ),Uz=a("dot_i"),UA=a("q15mulr_sat_s"),UB=a(bJ),UC=a(t8),UD=a(bJ),UE=a(rR),UF=a(cm),UG=a(t8),UH=a(cm),UI=a(rR),UJ=a("swizzle"),UK=a(bJ),UL=a(tD),UM=a(cm),UN=a(tD),UO=a(ad),UP=a("shuffle "),Uf=a(h2),Ug=a(hD),Uh=a(re),Ui=a(t7),Uj=a(sW),Uk=a(ss),Ul=a(tR),Ub=a(h2),Uc=a(hD),Ud=a(to),Ua=a("all_true"),T$=[0,a(cQ),eU,20],T4=a(dV),T5=a(b2),T6=a(hH),T8=a(dV),T9=a(eP),T_=a(b2),T7=[0,a(cQ),eZ,11],TX=a(dV),TY=a(b2),TZ=a(eP),T1=a(b2),T2=a(dV),T3=a(hH),T0=[0,a(cQ),tg,11],TQ=a("convert_i32_s"),TR=a("convert_i32_u"),TS=a("convert_i64_s"),TT=a("convert_i64_u"),TU=a("promote_f32"),TV=a("demote_f64"),TW=a("reinterpret_i"),TI=a(fy),TJ=a(fx),TK=a(fe),TL=a(rE),TM=a(sf),TN=a(sx),TO=a("copysign"),TA=a(hD),TB=a(h2),TC=a(t7),TD=a(sW),TE=a(ss),TF=a(tR),TG=a(re),Tt=a(ff),Tu=a(eR),Tv=a(tw),Tw=a(sG),Tx=a(tJ),Ty=a(sL),Tr=[0,a(cQ),tN,18],Te=a("extend_i32_s"),Tf=a("extend_i32_u"),Tg=a("wrap_i64"),Th=a("trunc_f32_s"),Ti=a("trunc_f32_u"),Tj=a("trunc_f64_s"),Tk=a("trunc_f64_u"),Tl=a("trunc_sat_f32_s"),Tm=a("trunc_sat_f32_u"),Tn=a("trunc_sat_f64_s"),To=a("trunc_sat_f64_u"),Tp=a("reinterpret_f"),S0=a(fy),S1=a(fx),S2=a(fe),S3=a("div_s"),S4=a("div_u"),S5=a("rem_s"),S6=a("rem_u"),S7=a(rz),S8=a(s2),S9=a(tM),S_=a(tV),S$=a(s7),Ta=a(sP),Tb=a("rotl"),Tc=a("rotr"),SU=a("clz"),SV=a("ctz"),SW=a(to),SX=a(bJ),SY=a("extend"),SJ=a(ff),SK=a(eR),SL=a(sK),SM=a(rp),SN=a(ta),SO=a(tE),SP=a(rP),SQ=a(rI),SR=a(rA),SS=a(rt),SH=a("eqz"),SF=a(cm),SE=a(bJ),SA=a("8"),SB=a("16"),SC=a(hq),SD=a(h_),Sz=a(r7),Sy=a(ad),Sv=a(dZ),Sw=a(rK),Sx=a(ck),Ss=[0,[11,a("\\u{"),[4,6,[0,2,2],0,[12,E,0]]],a("\\u{%02x}")],So=a('\\"'),Sn=a(sd),Sq=a(rw),Sp=a(tW),Sm=[0,[12,92,[4,6,[0,2,2],0,0]],a("\\%02x")],Yd=a("Unsupported"),Yc=a("(decode)"),Yf=a("WebAssemblyText");function
ah(a){if(typeof
a==="number")return 0;else
switch(a[0]){case
0:return[0,ah(a[1])];case
1:return[1,ah(a[1])];case
2:return[2,ah(a[1])];case
3:return[3,ah(a[1])];case
4:return[4,ah(a[1])];case
5:return[5,ah(a[1])];case
6:return[6,ah(a[1])];case
7:return[7,ah(a[1])];case
8:var
c=a[1];return[8,c,ah(a[2])];case
9:var
b=a[1];return[9,b,b,ah(a[3])];case
10:return[10,ah(a[1])];case
11:return[11,ah(a[1])];case
12:return[12,ah(a[1])];case
13:return[13,ah(a[1])];default:return[14,ah(a[1])]}}function
aI(a,b){if(typeof
a==="number")return b;else
switch(a[0]){case
0:return[0,aI(a[1],b)];case
1:return[1,aI(a[1],b)];case
2:return[2,aI(a[1],b)];case
3:return[3,aI(a[1],b)];case
4:return[4,aI(a[1],b)];case
5:return[5,aI(a[1],b)];case
6:return[6,aI(a[1],b)];case
7:return[7,aI(a[1],b)];case
8:var
c=a[1];return[8,c,aI(a[2],b)];case
9:var
d=a[2],e=a[1];return[9,e,d,aI(a[3],b)];case
10:return[10,aI(a[1],b)];case
11:return[11,aI(a[1],b)];case
12:return[12,aI(a[1],b)];case
13:return[13,aI(a[1],b)];default:return[14,aI(a[1],b)]}}function
_(a,b){if(typeof
a==="number")return b;else
switch(a[0]){case
0:return[0,_(a[1],b)];case
1:return[1,_(a[1],b)];case
2:var
c=a[1];return[2,c,_(a[2],b)];case
3:var
d=a[1];return[3,d,_(a[2],b)];case
4:var
e=a[3],f=a[2],g=a[1];return[4,g,f,e,_(a[4],b)];case
5:var
h=a[3],i=a[2],j=a[1];return[5,j,i,h,_(a[4],b)];case
6:var
k=a[3],l=a[2],m=a[1];return[6,m,l,k,_(a[4],b)];case
7:var
n=a[3],o=a[2],p=a[1];return[7,p,o,n,_(a[4],b)];case
8:var
q=a[3],r=a[2],s=a[1];return[8,s,r,q,_(a[4],b)];case
9:var
t=a[1];return[9,t,_(a[2],b)];case
10:return[10,_(a[1],b)];case
11:var
u=a[1];return[11,u,_(a[2],b)];case
12:var
v=a[1];return[12,v,_(a[2],b)];case
13:var
w=a[2],x=a[1];return[13,x,w,_(a[3],b)];case
14:var
y=a[2],z=a[1];return[14,z,y,_(a[3],b)];case
15:return[15,_(a[1],b)];case
16:return[16,_(a[1],b)];case
17:var
A=a[1];return[17,A,_(a[2],b)];case
18:var
B=a[1];return[18,B,_(a[2],b)];case
19:return[19,_(a[1],b)];case
20:var
C=a[2],D=a[1];return[20,D,C,_(a[3],b)];case
21:var
E=a[1];return[21,E,_(a[2],b)];case
22:return[22,_(a[1],b)];case
23:var
F=a[1];return[23,F,_(a[2],b)];default:var
G=a[2],H=a[1];return[24,H,G,_(a[3],b)]}}function
aP(a){throw[0,aU,a]}function
aa(a){throw[0,f7,a]}function
fM(b,a){return cu(b,a)?b:a}function
fN(b,a){return bO(b,a)?b:a}function
fO(a){return 0<=a?a:-a|0}var
uJ=hU;function
i(d,c){var
a=u(d),e=u(c),b=af(a+e|0);bK(d,0,b,0,a);bK(c,0,b,a,e);return aD(b)}function
uK(a){return a?uL:uM}function
t(a,b){if(a){var
c=a[1];return[0,c,t(a[2],b)]}return b}YT(0);uw(1);var
cA=uw(2);function
c9(b,a){return ux(b,a,0,u(a))}function
iL(a){c9(cA,a);uy(cA,10);return d4(cA)}function
fP(b){function
a(b){var
a=b;for(;;){if(a){var
c=a[2],d=a[1];try{d4(d)}catch(a){a=ap(a);if(a[1]!==iJ)throw a;var
e=a}var
a=c;continue}return 0}}return a(YU(0))}iF(a(rh),fP);function
iN(h,g,e){var
a=g,c=e;for(;;){var
b=d(c,0);if(b){var
i=b[2],a=f(h,a,b[1]),c=i;continue}return a}}function
df(a){if(0<=a&&!(a_<a))return a;return aa(uP)}Y8(0);var
iO=Y9(0)[1],c_=(4*Y7(0)|0)-1|0;function
bj(c){var
b=0,a=c;for(;;){if(a){var
b=b+1|0,a=a[2];continue}return b}}function
d7(a){return a?a[1]:aP(uW)}function
iP(d,c){if(0<=c){var
a=d,b=c;for(;;){if(a){var
e=a[2],f=a[1];if(0===b)return f;var
a=e,b=b-1|0;continue}return aP(uX)}}return aa(uY)}function
c$(d,c){var
a=d,b=c;for(;;){if(a){var
e=[0,a[1],b],a=a[2],b=e;continue}return b}}function
iQ(a){return c$(a,0)}function
iR(a,c,b){if(c<=a)return 0;var
e=d(b,a);return[0,e,iR(a+1|0,c,b)]}function
cB(b,e){if(0<=b){if(50<b){var
c=0,a=0;for(;;){if(b<=a)return iQ(c);var
c=[0,d(e,a),c],a=a+1|0;continue}}return iR(0,b,e)}return aa(uZ)}function
iS(a){if(a){var
b=a[1];return t(b,iS(a[2]))}return 0}function
au(b,a){if(a){var
c=a[2],e=d(b,a[1]);return[0,e,au(b,c)]}return 0}function
iT(c,b,a){if(a){var
d=a[2],e=f(b,c,a[1]);return[0,e,iT(c+1|0,b,d)]}return 0}function
fQ(b,a){return iT(0,b,a)}function
cb(c,b){var
a=b;for(;;){if(a){var
e=a[2];d(c,a[1]);var
a=e;continue}return 0}}function
bw(e,d){var
b=0,a=d;for(;;){if(a){var
c=a[2];f(e,b,a[1]);var
b=b+1|0,a=c;continue}return 0}}function
d8(e,d,c){var
b=d,a=c;for(;;){if(a){var
g=a[2],b=f(e,b,a[1]),a=g;continue}return b}}function
d9(c,a,b){if(a){var
d=a[1];return f(c,d,d9(c,a[2],b))}return b}function
d_(c,b,a){if(b){if(a){var
d=a[2],e=b[2],g=f(c,b[1],a[1]);return[0,g,d_(c,e,d)]}}else
if(!a)return 0;return aa(u0)}function
fR(e,c){var
a=c;for(;;){if(a){var
f=a[2],b=d(e,a[1]);if(b){var
a=f;continue}return b}return 1}}function
iU(a){if(a){var
b=a[1],d=b[2],e=b[1],c=iU(a[2]);return[0,[0,e,c[1]],[0,d,c[2]]]}return u1}function
iV(d,c){var
b=d,a=c;for(;;){if(0===b)return a;if(a){var
b=b-1|0,a=a[2];continue}throw[0,F,u2]}}function
cc(a,c){var
b=af(a);Yz(b,0,a,c);return b}function
fS(a){var
b=a5(a),c=af(b);b7(a,0,c,0,b);return c}function
eb(a){return aD(fS(a))}function
ef(a){return fS(bL(a))}function
fT(c,b,a){if(0<=b&&0<=a&&!((a5(c)-a|0)<b)){var
d=af(a);b7(c,b,d,0,a);return d}return aa(u3)}function
f8(c,b,a){return aD(fT(c,b,a))}function
iW(e,c,d,b,a){if(0<=a&&0<=c&&!((a5(e)-a|0)<c)&&0<=b&&!((a5(d)-a|0)<b))return b7(e,c,d,b,a);return aa(u4)}function
bb(e,c,d,b,a){if(0<=a&&0<=c&&!((u(e)-a|0)<c)&&0<=b&&!((a5(d)-a|0)<b))return bK(e,c,d,b,a);return aa(u5)}function
ec(b,a){return aD(cc(b,a))}function
bR(c,b,a){return aD(fT(bL(c),b,a))}function
cC(m,g){if(g){var
h=u(m),b=0,d=g,p=0;for(;;){if(d){var
i=d[2],j=d[1];if(i){var
k=(u(j)+h|0)+b|0,o=b<=k?k:aa(u6),b=o,d=i;continue}var
n=u(j)+b|0}else
var
n=b;var
f=af(n),c=p,e=g;for(;;){if(e){var
l=e[2],a=e[1];if(l){bK(a,0,f,c,u(a));bK(m,0,f,c+u(a)|0,h);var
c=(c+u(a)|0)+h|0,e=l;continue}bK(a,0,f,c,u(a))}return aD(f)}}}return u7}function
iX(e,b){var
c=u(b)-1|0,f=0;if(!(c<0)){var
a=f;for(;;){d(e,aO(b,a));var
g=a+1|0;if(c!==a){var
a=g;continue}break}}return 0}function
iY(e,d,c,b){var
a=c;for(;;){if(d<=a)throw aE;if(aO(e,a)===b)return a;var
a=a+1|0;continue}}function
u9(b,a,d){var
c=u(b);if(0<=a&&!(c<a))try{iY(b,c,a,d);var
e=1;return e}catch(a){a=ap(a);if(a===aE)return 0;throw a}return aa(u_)}function
eg(m){var
d=bL(m),c=a5(d);if(0===c)var
i=d;else{var
e=af(c),f=c-1|0,k=0;if(!(f<0)){var
a=k;for(;;){var
b=g(d,a),j=0;if(97<=b&&!(dY<b)){var
h=b+fv|0;j=1}if(!j)var
h=b;U(e,a,h);var
l=a+1|0;if(f!==a){var
a=l;continue}break}}var
i=e}return aD(i)}var
u$=r;function
iZ(a){return 1-(typeof
a==="number"?1:0)}function
eh(e,c,d,b,a){if(0<=a&&0<=c&&!((e.length-1-a|0)<c)&&0<=b&&!((d.length-1-a|0)<b))return Yl(e,c,d,b,a);return aa(va)}var
cD=0,ei=1,fU=-1;function
fV(a){return bO(a,0)?a:-a|0}var
ej=-2147483648,ek=hU;function
el(a){return a^-1}function
cE(a){return d3(vb,a)}var
vc=iB;function
vd(a){return bO(a,ve)?a:fC(a)}function
fX(a){return fD(a,vf)}function
i4(a){return ut(vg,a)}function
bS(c,a,b){return f8(c[2],a,b-a|0)}function
i6(b){var
a=b[12],c=a!==bx?1:0,d=c?(b[12]=[0,a[1],a[2]+1|0,a[4],a[4]],0):c;return d}var
em=[M,vh,aY(0)],i7=[M,vi,aY(0)],y=[0,b$(br,0),b$(br,0),b$(br,bx),b$(br,bx),br,0,0,0,bx,bx,0,0,0,0,0,0];function
i8(g){var
a=y[5],b=a*2|0,c=b$(b,0),d=b$(b,0),e=b$(b,bx),f=b$(b,bx);eh(y[1],0,c,0,a);y[1]=c;eh(y[2],0,d,0,a);y[2]=d;eh(y[3],0,e,0,a);y[3]=e;eh(y[4],0,f,0,a);y[4]=f;y[5]=b;return 0}var
vj=[0,function(a){return 0}];function
fY(c,k,j,e){var
o=y[11],p=y[14],q=y[6],r=y[15],s=y[7],t=y[8],u=y[16];y[6]=y[14]+1|0;y[7]=k;y[10]=e[12];try{var
b=0,a=0;for(;;)switch(Y0(c,y,b,a)){case
0:var
l=d(j,e);y[9]=e[11];y[10]=e[12];var
b=1,a=l;continue;case
1:throw i7;case
2:i8(0);var
b=2,a=0;continue;case
3:i8(0);var
b=3,a=0;continue;case
4:try{var
h=y[13],m=d(bi(c[1],h)[1+h],y),n=4,g=n,f=m}catch(a){a=ap(a);if(a!==i7)throw a;var
g=5,f=0,v=a}var
b=g,a=f;continue;default:d(c[14],vk);var
b=5,a=0;continue}}catch(a){a=ap(a);var
i=y[7];y[11]=o;y[14]=p;y[6]=q;y[15]=r;y[7]=s;y[8]=t;y[16]=u;if(a[1]===em)return a[2];vj[1]=function(a){if(iZ(a)){var
b=c6(a);return bi(c[3],b)[1+b]===i?1:0}return bi(c[2],a)[1+a]===i?1:0};throw a}}function
b(a,c){var
b=a[11]-c|0;return bi(a[2],b)[1+b]}function
vt(c){function
p(a){return a?a[4]:0}function
e(b,e,a){var
c=b?b[4]:0,d=a?a[4]:0,f=d<=c?c+1|0:d+1|0;return[0,b,e,a,f]}function
g(b,f,a){var
g=b?b[4]:0,h=a?a[4]:0;if((h+2|0)<g){if(b){var
c=b[3],k=b[2],i=b[1],m=p(c);if(m<=p(i))return e(i,k,e(c,f,a));if(c){var
n=c[2],o=c[1],q=e(c[3],f,a);return e(e(i,k,o),n,q)}return aa(vl)}return aa(vm)}if((g+2|0)<h){if(a){var
j=a[3],l=a[2],d=a[1],r=p(d);if(r<=p(j))return e(e(b,f,d),l,j);if(d){var
s=d[2],t=d[1],u=e(d[3],l,j);return e(e(b,f,t),s,u)}return aa(vn)}return aa(vo)}var
v=h<=g?g+1|0:h+1|0;return[0,b,f,a,v]}function
a(d,b){if(b){var
e=b[3],h=b[2],i=b[1],j=f(c[1],d,h);if(0===j)return b;if(0<=j){var
k=a(d,e);return e===k?b:g(i,h,k)}var
l=a(d,i);return i===l?b:g(l,h,e)}return[0,0,d,0,1]}function
h(a){return[0,0,a,0,1]}function
A(b,a){if(a){var
c=a[3],d=a[2];return g(A(b,a[1]),d,c)}return h(b)}function
B(b,a){if(a){var
c=a[2],d=a[1];return g(d,c,B(b,a[3]))}return h(b)}function
b(c,d,a){if(c){if(a){var
f=a[4],h=c[4],i=a[3],j=a[2],k=a[1],l=c[3],m=c[2],n=c[1];return(f+2|0)<h?g(n,m,b(l,d,a)):(h+2|0)<f?g(b(c,d,k),j,i):e(c,d,a)}return B(d,c)}return A(d,a)}function
l(c){var
a=c;for(;;){if(a){var
b=a[1];if(b){var
a=b;continue}return a[2]}throw aE}}function
C(c){var
a=c;for(;;){if(a){var
b=a[1];if(b){var
a=b;continue}return[0,a[2]]}return 0}}function
D(c){var
a=c;for(;;){if(a){var
b=a[3],d=a[2];if(b){var
a=b;continue}return d}throw aE}}function
N(c){var
a=c;for(;;){if(a){var
b=a[3],d=a[2];if(b){var
a=b;continue}return[0,d]}return 0}}function
r(a){if(a){var
b=a[1];if(b){var
c=a[3],d=a[2];return g(r(b),d,c)}return a[3]}return aa(vp)}function
m(c,a){if(c){if(a){var
d=r(a);return b(c,l(a),d)}return c}return a}function
i(d,a){if(a){var
e=a[3],g=a[2],h=a[1],l=f(c[1],d,g);if(0===l)return[0,h,1,e];if(0<=l){var
j=i(d,e),m=j[3],n=j[2];return[0,b(h,g,j[1]),n,m]}var
k=i(d,h),o=k[2],p=k[1];return[0,p,o,b(k[3],g,e)]}return vq}var
s=0;function
O(a){return a?0:1}function
P(g,e){var
a=e;for(;;){if(a){var
h=a[3],i=a[1],b=f(c[1],g,a[2]),d=0===b?1:0;if(d)return d;var
j=0<=b?h:i,a=j;continue}return 0}}function
t(e,b){if(b){var
a=b[3],h=b[2],d=b[1],i=f(c[1],e,h);if(0===i){if(d){if(a){var
m=r(a);return g(d,l(a),m)}return d}return a}if(0<=i){var
j=t(e,a);return a===j?b:g(d,h,j)}var
k=t(e,d);return d===k?b:g(k,h,a)}return 0}function
j(d,c){if(d){if(c){var
g=c[4],e=c[2],h=d[4],f=d[2],m=c[3],n=c[1],o=d[3],p=d[1];if(g<=h){if(1===g)return a(e,d);var
k=i(f,c),q=k[1],r=j(o,k[3]);return b(j(p,q),f,r)}if(1===h)return a(f,c);var
l=i(e,d),s=l[1],t=j(l[3],m);return b(j(s,n),e,t)}return d}return c}function
n(a,d){if(a){if(d){var
e=a[3],f=a[2],g=a[1],c=i(f,d),h=c[1];if(0===c[2]){var
j=n(e,c[3]);return m(n(g,h),j)}var
k=n(e,c[3]);return b(n(g,h),f,k)}return 0}return 0}function
u(e,a){if(a){var
j=a[3],g=a[2],k=a[1],l=f(c[1],e,g);if(0===l)return 0;if(0<=l){var
h=u(e,j);if(h){var
m=h[2];return[0,b(k,g,h[1]),m]}return 0}var
i=u(e,k);if(i){var
n=i[2],o=i[1];return[0,o,function(a){return b(d(n,0),g,j)}]}return 0}return[0,0,function(a){return 0}]}function
E(g,f){var
a=g,b=f;for(;;){if(a&&b){var
h=a[3],i=a[2],j=a[1];if(a===b)return 0;var
c=u(i,b);if(c){var
k=c[2],e=E(j,c[1]);if(e){var
a=h,b=d(k,0);continue}return e}return 0}return 1}}function
o(a,d){if(a){if(d){var
e=a[3],f=a[2],g=a[1],c=i(f,d),h=c[1];if(0===c[2]){var
j=o(e,c[3]);return b(o(g,h),f,j)}var
k=o(e,c[3]);return m(o(g,h),k)}return a}return 0}function
k(d,c){var
a=d,b=c;for(;;){if(a){var
e=[0,a[2],a[3],b],a=a[1],b=e;continue}return b}}function
G(m,l){var
n=k(l,0),b=k(m,0),a=n;for(;;){if(b){if(a){var
e=a[3],g=a[2],h=b[3],i=b[2],d=f(c[1],b[1],a[1]);if(0===d){var
j=k(g,e),b=k(i,h),a=j;continue}return d}return 1}return a?-1:0}}function
Q(b,a){return 0===G(b,a)?1:0}function
q(o,n){var
a=o,b=n;for(;;){if(a){if(b){var
h=b[3],i=b[1],d=a[3],e=a[2],g=a[1],j=f(c[1],e,b[2]);if(0===j){var
k=q(g,i);if(k){var
a=d,b=h;continue}return k}if(0<=j){var
l=q([0,0,e,d,0],h);if(l){var
a=g;continue}return l}var
m=q([0,g,e,0,0],i);if(m){var
a=d;continue}return m}return 0}return 1}}function
H(b,c){var
a=c;for(;;){if(a){var
e=a[3],f=a[2];H(b,a[1]);d(b,f);var
a=e;continue}return 0}}function
I(c,e,d){var
a=e,b=d;for(;;){if(a){var
g=a[3],h=a[2],i=f(c,h,I(c,a[1],b)),a=g,b=i;continue}return b}}function
J(b,g){var
a=g;for(;;){if(a){var
h=a[3],i=a[1],c=d(b,a[2]);if(c){var
e=J(b,i);if(e){var
a=h;continue}var
f=e}else
var
f=c;return f}return 1}}function
K(b,g){var
a=g;for(;;){if(a){var
h=a[3],i=a[1],c=d(b,a[2]);if(c)var
e=c;else{var
f=K(b,i);if(!f){var
a=h;continue}var
e=f}return e}return 0}}function
v(c,a){if(a){var
g=a[3],h=a[2],i=a[1],e=v(c,i),j=d(c,h),f=v(c,g);if(j){if(i===e&&g===f)return a;return b(e,h,f)}return m(e,f)}return 0}function
w(c,a){if(a){var
e=a[2],l=a[3],f=w(c,a[1]),g=f[2],h=f[1],n=d(c,e),i=w(c,l),j=i[2],k=i[1];if(n){var
o=m(g,j);return[0,b(h,e,k),o]}var
p=b(g,e,j);return[0,m(h,k),p]}return vr}function
x(a){if(a){var
b=a[1],c=x(a[3]);return(x(b)+1|0)+c|0}return 0}function
L(d,c){var
b=d,a=c;for(;;){if(a){var
e=a[2],f=a[1],b=[0,e,L(b,a[3])],a=f;continue}return b}}function
R(a){return L(0,a)}function
S(g,e){var
a=e;for(;;){if(a){var
b=a[2],h=a[3],i=a[1],d=f(c[1],g,b);if(0===d)return b;var
j=0<=d?h:i,a=j;continue}throw aE}}function
T(f,j){var
b=j;for(;;){if(b){var
g=b[2],k=b[3],l=b[1];if(d(f,g)){var
c=g,a=l;for(;;){if(a){var
e=a[2],h=a[3],i=a[1];if(d(f,e)){var
c=e,a=i;continue}var
a=h;continue}return c}}var
b=k;continue}throw aE}}function
U(f,j){var
b=j;for(;;){if(b){var
g=b[2],k=b[3],l=b[1];if(d(f,g)){var
c=g,a=l;for(;;){if(a){var
e=a[2],h=a[3],i=a[1];if(d(f,e)){var
c=e,a=i;continue}var
a=h;continue}return[0,c]}}var
b=k;continue}return 0}}function
V(f,j){var
b=j;for(;;){if(b){var
g=b[2],k=b[3],l=b[1];if(d(f,g)){var
c=g,a=k;for(;;){if(a){var
e=a[2],h=a[3],i=a[1];if(d(f,e)){var
c=e,a=h;continue}var
a=i;continue}return c}}var
b=l;continue}throw aE}}function
W(f,j){var
b=j;for(;;){if(b){var
g=b[2],k=b[3],l=b[1];if(d(f,g)){var
c=g,a=k;for(;;){if(a){var
e=a[2],h=a[3],i=a[1];if(d(f,e)){var
c=e,a=h;continue}var
a=i;continue}return[0,c]}}var
b=l;continue}return 0}}function
X(g,e){var
a=e;for(;;){if(a){var
b=a[2],h=a[3],i=a[1],d=f(c[1],g,b);if(0===d)return[0,b];var
j=0<=d?h:i,a=j;continue}return 0}}function
y(k,e){if(e){var
m=e[3],n=e[2],o=e[1],g=y(k,o),h=d(k,n),i=y(k,m);if(o===g&&n===h&&m===i)return e;var
p=0;if(0!==g){var
s=D(g);if(0<=f(c[1],s,h))p=1}if(!p){var
q=0;if(0!==i){var
r=l(i);if(0<=f(c[1],h,r))q=1}if(!q)return b(g,h,i)}return j(g,a(h,i))}return 0}function
Y(d){if(d){var
k=d[2],g=d[1];if(k){var
l=k[2],i=k[1];if(l){var
n=l[2],o=l[1];if(n){var
p=n[2],r=n[1];if(p){if(p[2]){var
b=c[1],t=function(j,g){if(2===j){if(g){var
u=g[2];if(u){var
n=u[1],k=g[1],v=f(b,k,n);return 0===v?[0,k,0]:0<v?[0,k,[0,n,0]]:[0,n,[0,k,0]]}}}else
if(3===j&&g){var
p=g[2];if(p){var
w=p[2];if(w){var
c=w[1],a=p[1],d=g[1],x=f(b,d,a);if(0===x){var
y=f(b,a,c);return 0===y?[0,a,0]:0<y?[0,a,[0,c,0]]:[0,c,[0,a,0]]}if(0<x){var
z=f(b,a,c);if(0===z)return[0,d,[0,a,0]];if(0<z)return[0,d,[0,a,[0,c,0]]];var
A=f(b,d,c);return 0===A?[0,d,[0,a,0]]:0<A?[0,d,[0,c,[0,a,0]]]:[0,c,[0,d,[0,a,0]]]}var
B=f(b,d,c);if(0===B)return[0,a,[0,d,0]];if(0<B)return[0,a,[0,d,[0,c,0]]];var
C=f(b,a,c);return 0===C?[0,a,[0,d,0]]:0<C?[0,a,[0,c,[0,d,0]]]:[0,c,[0,a,[0,d,0]]]}}}var
o=j>>1,D=iV(o,g),E=m(o,g),i=E,h=m(j-o|0,D),e=0;for(;;){if(i){if(h){var
q=h[2],r=h[1],s=i[2],l=i[1],t=f(b,l,r);if(0===t){var
i=s,h=q,e=[0,l,e];continue}if(0<=t){var
h=q,e=[0,r,e];continue}var
i=s,e=[0,l,e];continue}return c$(i,e)}return c$(h,e)}},m=function(j,g){if(2===j){if(g){var
u=g[2];if(u){var
m=u[1],k=g[1],v=f(b,k,m);return 0===v?[0,k,0]:0<=v?[0,m,[0,k,0]]:[0,k,[0,m,0]]}}}else
if(3===j&&g){var
o=g[2];if(o){var
w=o[2];if(w){var
c=w[1],a=o[1],d=g[1],x=f(b,d,a);if(0===x){var
y=f(b,a,c);return 0===y?[0,a,0]:0<=y?[0,c,[0,a,0]]:[0,a,[0,c,0]]}if(0<=x){var
z=f(b,d,c);if(0===z)return[0,a,[0,d,0]];if(0<=z){var
A=f(b,a,c);return 0===A?[0,a,[0,d,0]]:0<=A?[0,c,[0,a,[0,d,0]]]:[0,a,[0,c,[0,d,0]]]}return[0,a,[0,d,[0,c,0]]]}var
B=f(b,a,c);if(0===B)return[0,d,[0,a,0]];if(0<=B){var
C=f(b,d,c);return 0===C?[0,d,[0,a,0]]:0<=C?[0,c,[0,d,[0,a,0]]]:[0,d,[0,c,[0,a,0]]]}return[0,d,[0,a,[0,c,0]]]}}}var
n=j>>1,D=iV(n,g),E=t(n,g),i=E,h=t(j-n|0,D),e=0;for(;;){if(i){if(h){var
p=h[2],q=h[1],r=i[2],l=i[1],s=f(b,l,q);if(0===s){var
i=r,h=p,e=[0,l,e];continue}if(0<s){var
i=r,e=[0,l,e];continue}var
h=p,e=[0,q,e];continue}return c$(i,e)}return c$(h,e)}},q=bj(d),u=2<=q?m(q,d):d,j=function(b,a){if(!(3<b>>>0))switch(b){case
0:return[0,0,a];case
1:if(a)return[0,[0,0,a[1],0,1],a[2]];break;case
2:if(a){var
d=a[2];if(d)return[0,[0,[0,0,a[1],0,1],d[1],0,2],d[2]]}break;default:if(a){var
f=a[2];if(f){var
g=f[2];if(g)return[0,[0,[0,0,a[1],0,1],f[1],[0,0,g[1],0,1],2],g[2]]}}}var
h=b/2|0,i=j(h,a),c=i[2],l=i[1];if(c){var
m=c[1],k=j((b-h|0)-1|0,c[2]),n=k[2];return[0,e(l,m,k[1]),n]}throw[0,F,vs]};return j(bj(u),u)[1]}var
v=p[1];return a(v,a(r,a(o,a(i,h(g)))))}return a(r,a(o,a(i,h(g))))}return a(o,a(i,h(g)))}return a(i,h(g))}return h(g)}return s}function
M(c,b){return iN(function(c,b){return a(b,c)},b,c)}function
Z(a){return M(a,s)}function
z(a,d){if(a){var
b=a[1],c=k(a[2],a[3]);return[0,b,function(a){return z(c,a)}]}return 0}function
_(a){var
b=k(a,0);return function(a){return z(b,a)}}return[0,s,O,P,a,h,t,j,n,E,o,G,Q,q,H,y,I,J,K,v,w,x,R,l,C,D,N,l,C,i,S,X,T,U,V,W,Y,function(j,i){var
a=i,b=0;for(;;){if(a){var
d=a[3],e=a[2],k=a[1],g=f(c[1],e,j);if(0!==g){if(0<=g){var
a=k,b=[0,e,d,b];continue}var
a=d;continue}var
h=[0,e,d,b]}else
var
h=b;return function(a){return z(h,a)}}},_,M,Z]}function
vC(g){function
h(a){return a?a[5]:0}function
b(b,f,e,a){var
c=h(b),d=h(a),g=d<=c?c+1|0:d+1|0;return[0,b,f,e,a,g]}function
p(b,a){return[0,0,b,a,0,1]}function
a(c,g,f,a){var
i=c?c[5]:0,j=a?a[5]:0;if((j+2|0)<i){if(c){var
d=c[4],m=c[3],n=c[2],k=c[1],q=h(d);if(q<=h(k))return b(k,n,m,b(d,g,f,a));if(d){var
r=d[3],s=d[2],t=d[1],u=b(d[4],g,f,a);return b(b(k,n,m,t),s,r,u)}return aa(vu)}return aa(vv)}if((i+2|0)<j){if(a){var
l=a[4],o=a[3],p=a[2],e=a[1],v=h(e);if(v<=h(l))return b(b(c,g,f,e),p,o,l);if(e){var
w=e[3],x=e[2],y=e[1],z=b(e[4],p,o,l);return b(b(c,g,f,y),x,w,z)}return aa(vw)}return aa(vx)}var
A=j<=i?i+1|0:j+1|0;return[0,c,g,f,a,A]}var
z=0;function
M(a){return a?0:1}function
l(d,c,b){if(b){var
e=b[4],i=b[3],j=b[2],h=b[1],o=b[5],k=f(g[1],d,j);if(0===k)return i===c?b:[0,h,d,c,e,o];if(0<=k){var
m=l(d,c,e);return e===m?b:a(h,j,i,m)}var
n=l(d,c,h);return h===n?b:a(n,j,i,e)}return[0,0,d,c,0,1]}function
N(d,c){var
a=c;for(;;){if(a){var
e=a[4],h=a[3],i=a[1],b=f(g[1],d,a[2]);if(0===b)return h;var
j=0<=b?e:i,a=j;continue}throw aE}}function
O(g,l){var
b=l;for(;;){if(b){var
h=b[2],m=b[4],n=b[3],o=b[1];if(d(g,h)){var
e=h,c=n,a=o;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(d(g,f)){var
e=f,c=j,a=k;continue}var
a=i;continue}return[0,e,c]}}var
b=m;continue}throw aE}}function
P(g,l){var
b=l;for(;;){if(b){var
h=b[2],m=b[4],n=b[3],o=b[1];if(d(g,h)){var
e=h,c=n,a=o;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(d(g,f)){var
e=f,c=j,a=k;continue}var
a=i;continue}return[0,[0,e,c]]}}var
b=m;continue}return 0}}function
Q(g,l){var
b=l;for(;;){if(b){var
h=b[2],m=b[4],n=b[3],o=b[1];if(d(g,h)){var
e=h,c=n,a=m;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(d(g,f)){var
e=f,c=j,a=i;continue}var
a=k;continue}return[0,e,c]}}var
b=o;continue}throw aE}}function
R(g,l){var
b=l;for(;;){if(b){var
h=b[2],m=b[4],n=b[3],o=b[1];if(d(g,h)){var
e=h,c=n,a=m;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(d(g,f)){var
e=f,c=j,a=i;continue}var
a=k;continue}return[0,[0,e,c]]}}var
b=o;continue}return 0}}function
S(d,c){var
a=c;for(;;){if(a){var
e=a[4],h=a[3],i=a[1],b=f(g[1],d,a[2]);if(0===b)return[0,h];var
j=0<=b?e:i,a=j;continue}return 0}}function
T(e,d){var
a=d;for(;;){if(a){var
h=a[4],i=a[1],b=f(g[1],e,a[2]),c=0===b?1:0;if(c)return c;var
j=0<=b?h:i,a=j;continue}return 0}}function
m(c){var
a=c;for(;;){if(a){var
b=a[1];if(b){var
a=b;continue}return[0,a[2],a[3]]}throw aE}}function
A(c){var
a=c;for(;;){if(a){var
b=a[1];if(b){var
a=b;continue}return[0,[0,a[2],a[3]]]}return 0}}function
U(c){var
a=c;for(;;){if(a){var
b=a[4],d=a[3],e=a[2];if(b){var
a=b;continue}return[0,e,d]}throw aE}}function
V(c){var
a=c;for(;;){if(a){var
b=a[4],d=a[3],e=a[2];if(b){var
a=b;continue}return[0,[0,e,d]]}return 0}}function
q(b){if(b){var
c=b[1];if(c){var
d=b[4],e=b[3],f=b[2];return a(q(c),f,e,d)}return b[4]}return aa(vy)}function
B(c,b){if(c){if(b){var
d=m(b),e=d[2],f=d[1];return a(c,f,e,q(b))}return c}return b}function
r(e,b){if(b){var
c=b[4],i=b[3],h=b[2],d=b[1],j=f(g[1],e,h);if(0===j)return B(d,c);if(0<=j){var
k=r(e,c);return c===k?b:a(d,h,i,k)}var
l=r(e,d);return d===l?b:a(l,h,i,c)}return 0}function
s(c,i,b){if(b){var
e=b[4],j=b[3],k=b[2],h=b[1],r=b[5],l=f(g[1],c,k);if(0===l){var
m=d(i,[0,j]);if(m){var
n=m[1];return j===n?b:[0,h,c,n,e,r]}return B(h,e)}if(0<=l){var
o=s(c,i,e);return e===o?b:a(h,k,j,o)}var
p=s(c,i,h);return h===p?b:a(p,k,j,e)}var
q=d(i,0);return q?[0,0,c,q[1],0,1]:0}function
C(b,c){var
a=c;for(;;){if(a){var
d=a[4],e=a[3],g=a[2];C(b,a[1]);f(b,g,e);var
a=d;continue}return 0}}function
t(b,a){if(a){var
c=a[5],e=a[4],f=a[3],g=a[2],h=t(b,a[1]),i=d(b,f);return[0,h,g,i,t(b,e),c]}return 0}function
u(b,a){if(a){var
c=a[2],d=a[5],e=a[4],g=a[3],h=u(b,a[1]),i=f(b,c,g);return[0,h,c,i,u(b,e),d]}return 0}function
D(c,e,d){var
a=e,b=d;for(;;){if(a){var
f=a[4],g=a[3],h=a[2],i=I(c,h,g,D(c,a[1],b)),a=f,b=i;continue}return b}}function
E(b,g){var
a=g;for(;;){if(a){var
h=a[4],i=a[1],c=f(b,a[2],a[3]);if(c){var
d=E(b,i);if(d){var
a=h;continue}var
e=d}else
var
e=c;return e}return 1}}function
G(b,g){var
a=g;for(;;){if(a){var
h=a[4],i=a[1],c=f(b,a[2],a[3]);if(c)var
d=c;else{var
e=G(b,i);if(!e){var
a=h;continue}var
d=e}return d}return 0}}function
H(d,c,b){if(b){var
e=b[4],f=b[3],g=b[2];return a(H(d,c,b[1]),g,f,e)}return p(d,c)}function
J(d,c,b){if(b){var
e=b[3],f=b[2],g=b[1];return a(g,f,e,J(d,c,b[4]))}return p(d,c)}function
c(e,g,f,d){if(e){if(d){var
h=d[5],i=e[5],j=d[4],k=d[3],l=d[2],m=d[1],n=e[4],o=e[3],p=e[2],q=e[1];return(h+2|0)<i?a(q,p,o,c(n,g,f,d)):(i+2|0)<h?a(c(e,g,f,m),l,k,j):b(e,g,f,d)}return J(g,f,e)}return H(g,f,d)}function
n(b,a){if(b){if(a){var
d=m(a),e=d[2],f=d[1];return c(b,f,e,q(a))}return b}return a}function
o(d,e,b,a){return b?c(d,e,b[1],a):n(d,a)}function
i(b,a){if(a){var
d=a[4],e=a[3],h=a[2],j=a[1],m=f(g[1],b,h);if(0===m)return[0,j,[0,e],d];if(0<=m){var
k=i(b,d),n=k[3],o=k[2];return[0,c(j,h,e,k[1]),o,n]}var
l=i(b,j),p=l[2],q=l[1];return[0,q,p,c(l[3],h,e,d)]}return vz}function
j(c,b,a){if(b){var
d=b[2],k=b[5],l=b[4],m=b[3],n=b[1];if(h(a)<=k){var
e=i(d,a),p=e[2],q=e[1],r=j(c,l,e[3]),s=I(c,d,[0,m],p);return o(j(c,n,q),d,s,r)}}else
if(!a)return 0;if(a){var
f=a[2],t=a[4],u=a[3],v=a[1],g=i(f,b),w=g[2],x=g[1],y=j(c,g[3],t),z=I(c,f,w,[0,u]);return o(j(c,x,v),f,z,y)}throw[0,F,vA]}function
k(d,b,a){if(b){if(a){var
j=a[3],e=a[2],l=b[3],f=b[2],u=a[4],v=a[1],w=b[4],x=b[1];if(a[5]<=b[5]){var
g=i(f,a),m=g[2],y=g[3],n=k(d,x,g[1]),p=k(d,w,y);return m?o(n,f,I(d,f,l,m[1]),p):c(n,f,l,p)}var
h=i(e,b),q=h[2],z=h[3],r=k(d,h[1],v),s=k(d,z,u);return q?o(r,e,I(d,e,q[1],j),s):c(r,e,j,s)}var
t=b}else
var
t=a;return t}function
v(b,a){if(a){var
g=a[4],h=a[3],i=a[2],j=a[1],d=v(b,j),k=f(b,i,h),e=v(b,g);if(k){if(j===d&&g===e)return a;return c(d,i,h,e)}return n(d,e)}return 0}function
w(b,a){if(a){var
d=a[3],e=a[2],m=a[4],g=w(b,a[1]),h=g[2],i=g[1],o=f(b,e,d),j=w(b,m),k=j[2],l=j[1];if(o){var
p=n(h,k);return[0,c(i,e,d,l),p]}var
q=c(h,e,d,k);return[0,n(i,l),q]}return vB}function
e(d,c){var
a=d,b=c;for(;;){if(a){var
e=[0,a[2],a[3],a[4],b],a=a[1],b=e;continue}return b}}function
W(j,i,h){var
r=e(h,0),b=e(i,0),a=r;for(;;){if(b){if(a){var
k=a[4],l=a[3],m=a[2],n=b[4],o=b[3],p=b[2],c=f(g[1],b[1],a[1]);if(0===c){var
d=f(j,p,m);if(0===d){var
q=e(l,k),b=e(o,n),a=q;continue}return d}return c}return 1}return a?-1:0}}function
X(k,j,i){var
s=e(i,0),b=e(j,0),a=s;for(;;){if(b){if(a){var
l=a[4],m=a[3],n=a[2],o=b[4],p=b[3],q=b[2],c=0===f(g[1],b[1],a[1])?1:0;if(c){var
d=f(k,q,n);if(d){var
r=e(m,l),b=e(p,o),a=r;continue}var
h=d}else
var
h=c;return h}return 0}return a?0:1}}function
x(a){if(a){var
b=a[1],c=x(a[4]);return(x(b)+1|0)+c|0}return 0}function
K(d,c){var
b=d,a=c;for(;;){if(a){var
e=a[3],f=a[2],g=a[1],b=[0,[0,f,e],K(b,a[4])],a=g;continue}return b}}function
Y(a){return K(0,a)}function
L(b,a){return iN(function(b,a){return l(a[1],a[2],b)},a,b)}function
Z(a){return L(a,z)}function
y(a,f){if(a){var
b=a[2],c=a[1],d=e(a[3],a[4]);return[0,[0,c,b],function(a){return y(d,a)}]}return 0}function
_(a){var
b=e(a,0);return function(a){return y(b,a)}}return[0,z,M,T,l,s,p,r,j,k,W,X,C,D,E,G,v,w,x,Y,m,A,U,V,m,A,i,N,S,O,P,Q,R,t,u,_,function(k,j){var
a=j,b=0;for(;;){if(a){var
c=a[4],e=a[3],d=a[2],l=a[1],h=f(g[1],d,k);if(0!==h){if(0<=h){var
a=l,b=[0,d,e,c,b];continue}var
a=c;continue}var
i=[0,d,e,c,b]}else
var
i=b;return function(a){return y(i,a)}}},L,Z]}var
vE=[M,vD,aY(0)];function
vF(a){throw vE}function
vG(a){var
c=a[1];a[1]=vF;try{var
b=d(c,0);a[1]=b;YY(a,cl);return b}catch(b){b=ap(b);a[1]=function(a){throw b};throw b}}function
cd(a){var
b=1<=a?a:1,c=c_<b?c_:b,d=af(c);return[0,d,0,c,d]}function
dg(a){return f8(a[1],0,a[2])}function
fZ(a,c){var
b=[0,a[3]];for(;;){if(b[1]<(a[2]+c|0)){b[1]=2*b[1]|0;continue}if(c_<b[1])if((a[2]+c|0)<=c_)b[1]=c_;else
aP(vH);var
d=af(b[1]);iW(a[1],0,d,0,a[2]);a[1]=d;a[3]=b[1];return 0}}function
a6(a,c){var
b=a[2];if(a[3]<=b)fZ(a,1);U(a[1],b,c);a[2]=b+1|0;return 0}function
ed(a,d,c,b){var
e=c<0?1:0;if(e)var
f=e;else
var
h=b<0?1:0,f=h||((u(d)-b|0)<c?1:0);if(f)aa(vI);var
g=a[2]+b|0;if(a[3]<g)fZ(a,b);bb(d,c,a[1],a[2],b);a[2]=g;return 0}function
aV(a,c){var
b=u(c),d=a[2]+b|0;if(a[3]<d)fZ(a,b);bb(c,0,a[1],a[2],b);a[2]=d;return 0}var
f0=-6;function
i9(a){return[0,0,af(a)]}function
i_(a,g){var
b=a5(a[2]),c=a[1]+g|0,d=b<c?1:0;if(d){var
e=af(fN(b*2|0,c));iW(a[2],0,e,0,b);a[2]=e;var
f=0}else
var
f=d;return f}function
da(a,b){i_(a,1);bM(a[2],a[1],b);a[1]=a[1]+1|0;return 0}function
aA(a,c){var
b=u(c);i_(a,b);bb(c,0,a[2],a[1],b);a[1]=a[1]+b|0;return 0}function
i$(a){return f8(a[2],0,a[1])}function
f1(a){if(typeof
a==="number")switch(a){case
0:return vJ;case
1:return vK;case
2:return vL;case
3:return vM;case
4:return vN;case
5:return vO;default:return vP}else
switch(a[0]){case
0:return a[1];case
1:return a[1];default:return i(vQ,ec(1,a[1]))}}function
f2(b,c){var
a=c;for(;;)if(typeof
a==="number")return 0;else
switch(a[0]){case
0:var
d=a[1];aA(b,vR);var
a=d;continue;case
1:var
e=a[1];aA(b,vS);var
a=e;continue;case
2:var
f=a[1];aA(b,vT);var
a=f;continue;case
3:var
g=a[1];aA(b,vU);var
a=g;continue;case
4:var
h=a[1];aA(b,vV);var
a=h;continue;case
5:var
i=a[1];aA(b,vW);var
a=i;continue;case
6:var
j=a[1];aA(b,vX);var
a=j;continue;case
7:var
k=a[1];aA(b,vY);var
a=k;continue;case
8:var
l=a[2],m=a[1];aA(b,vZ);f2(b,m);aA(b,v0);var
a=l;continue;case
9:var
n=a[3],o=a[1];aA(b,v1);f2(b,o);aA(b,v2);var
a=n;continue;case
10:var
p=a[1];aA(b,v3);var
a=p;continue;case
11:var
q=a[1];aA(b,v4);var
a=q;continue;case
12:var
r=a[1];aA(b,v5);var
a=r;continue;case
13:var
s=a[1];aA(b,v6);var
a=s;continue;default:var
t=a[1];aA(b,v7);var
a=t;continue}}function
an(a){if(typeof
a==="number")return 0;else
switch(a[0]){case
0:return[0,an(a[1])];case
1:return[1,an(a[1])];case
2:return[2,an(a[1])];case
3:return[3,an(a[1])];case
4:return[4,an(a[1])];case
5:return[5,an(a[1])];case
6:return[6,an(a[1])];case
7:return[7,an(a[1])];case
8:var
b=a[1];return[8,b,an(a[2])];case
9:var
c=a[2],d=a[1];return[9,c,d,an(a[3])];case
10:return[10,an(a[1])];case
11:return[11,an(a[1])];case
12:return[12,an(a[1])];case
13:return[13,an(a[1])];default:return[14,an(a[1])]}}function
aB(a){if(typeof
a==="number"){var
s=function(a){return 0},t=function(a){return 0},u=function(a){return 0};return[0,function(a){return 0},u,t,s]}else
switch(a[0]){case
0:var
b=aB(a[1]),v=b[4],w=b[3],x=b[2],y=b[1],z=function(a){d(x,0);return 0};return[0,function(a){d(y,0);return 0},z,w,v];case
1:var
c=aB(a[1]),A=c[4],B=c[3],C=c[2],D=c[1],E=function(a){d(C,0);return 0};return[0,function(a){d(D,0);return 0},E,B,A];case
2:var
e=aB(a[1]),F=e[4],G=e[3],H=e[2],I=e[1],J=function(a){d(H,0);return 0};return[0,function(a){d(I,0);return 0},J,G,F];case
3:var
f=aB(a[1]),K=f[4],L=f[3],M=f[2],N=f[1],O=function(a){d(M,0);return 0};return[0,function(a){d(N,0);return 0},O,L,K];case
4:var
g=aB(a[1]),P=g[4],Q=g[3],R=g[2],S=g[1],T=function(a){d(R,0);return 0};return[0,function(a){d(S,0);return 0},T,Q,P];case
5:var
h=aB(a[1]),U=h[4],V=h[3],W=h[2],X=h[1],Y=function(a){d(W,0);return 0};return[0,function(a){d(X,0);return 0},Y,V,U];case
6:var
i=aB(a[1]),Z=i[4],_=i[3],$=i[2],aa=i[1],ab=function(a){d($,0);return 0};return[0,function(a){d(aa,0);return 0},ab,_,Z];case
7:var
j=aB(a[1]),ac=j[4],ad=j[3],ae=j[2],af=j[1],ag=function(a){d(ae,0);return 0};return[0,function(a){d(af,0);return 0},ag,ad,ac];case
8:var
k=aB(a[2]),ah=k[4],ai=k[3],aj=k[2],ak=k[1],al=function(a){d(aj,0);return 0};return[0,function(a){d(ak,0);return 0},al,ai,ah];case
9:var
am=a[2],ao=a[1],l=aB(a[3]),ap=l[4],ar=l[3],as=l[2],at=l[1],m=aB(aq(an(ao),am)),au=m[4],av=m[3],aw=m[2],ax=m[1],ay=function(a){d(au,0);d(ap,0);return 0},az=function(a){d(ar,0);d(av,0);return 0},aA=function(a){d(aw,0);d(as,0);return 0};return[0,function(a){d(at,0);d(ax,0);return 0},aA,az,ay];case
10:var
n=aB(a[1]),aC=n[4],aD=n[3],aE=n[2],aF=n[1],aG=function(a){d(aE,0);return 0};return[0,function(a){d(aF,0);return 0},aG,aD,aC];case
11:var
o=aB(a[1]),aH=o[4],aI=o[3],aJ=o[2],aK=o[1],aL=function(a){d(aJ,0);return 0};return[0,function(a){d(aK,0);return 0},aL,aI,aH];case
12:var
p=aB(a[1]),aM=p[4],aN=p[3],aO=p[2],aP=p[1],aQ=function(a){d(aO,0);return 0};return[0,function(a){d(aP,0);return 0},aQ,aN,aM];case
13:var
q=aB(a[1]),aR=q[4],aS=q[3],aT=q[2],aU=q[1],aV=function(a){d(aR,0);return 0},aW=function(a){d(aS,0);return 0},aX=function(a){d(aT,0);return 0};return[0,function(a){d(aU,0);return 0},aX,aW,aV];default:var
r=aB(a[1]),aY=r[4],aZ=r[3],a0=r[2],a1=r[1],a2=function(a){d(aY,0);return 0},a3=function(a){d(aZ,0);return 0},a4=function(a){d(a0,0);return 0};return[0,function(a){d(a1,0);return 0},a4,a3,a2]}}function
aq(c,b){var
a=0;if(typeof
c==="number")if(typeof
b==="number")return 0;else
switch(b[0]){case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;case
8:a=5;break;case
9:a=6;break;default:throw[0,F,v8]}else
switch(c[0]){case
0:var
e=0,t=c[1];if(typeof
b!=="number")switch(b[0]){case
0:return[0,aq(t,b[1])];case
8:a=5;e=1;break;case
9:a=6;e=1;break;case
10:e=1;break;case
11:a=1;e=1;break;case
12:a=2;e=1;break;case
13:a=3;e=1;break;case
14:a=4;e=1;break}if(!e)a=7;break;case
1:var
f=0,u=c[1];if(typeof
b!=="number")switch(b[0]){case
1:return[1,aq(u,b[1])];case
8:a=5;f=1;break;case
9:a=6;f=1;break;case
10:f=1;break;case
11:a=1;f=1;break;case
12:a=2;f=1;break;case
13:a=3;f=1;break;case
14:a=4;f=1;break}if(!f)a=7;break;case
2:var
g=0,v=c[1];if(typeof
b==="number")g=1;else
switch(b[0]){case
2:return[2,aq(v,b[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:g=1}if(g)a=7;break;case
3:var
h=0,w=c[1];if(typeof
b==="number")h=1;else
switch(b[0]){case
3:return[3,aq(w,b[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:h=1}if(h)a=7;break;case
4:var
i=0,x=c[1];if(typeof
b==="number")i=1;else
switch(b[0]){case
4:return[4,aq(x,b[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:i=1}if(i)a=7;break;case
5:var
j=0,y=c[1];if(typeof
b==="number")j=1;else
switch(b[0]){case
5:return[5,aq(y,b[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:j=1}if(j)a=7;break;case
6:var
k=0,z=c[1];if(typeof
b==="number")k=1;else
switch(b[0]){case
6:return[6,aq(z,b[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:k=1}if(k)a=7;break;case
7:var
l=0,A=c[1];if(typeof
b==="number")l=1;else
switch(b[0]){case
7:return[7,aq(A,b[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:l=1}if(l)a=7;break;case
8:var
m=0,B=c[2],C=c[1];if(typeof
b==="number")m=1;else
switch(b[0]){case
8:var
D=b[1],E=aq(B,b[2]);return[8,aq(C,D),E];case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:m=1}if(m)throw[0,F,wf];break;case
9:var
n=0,G=c[3],H=c[2],I=c[1];if(typeof
b==="number")n=1;else
switch(b[0]){case
8:a=5;break;case
9:var
J=b[3],K=b[2],L=b[1],s=aB(aq(an(H),L)),M=s[4];d(s[2],0);d(M,0);return[9,I,K,aq(G,J)];case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:n=1}if(n)throw[0,F,wg];break;case
10:var
N=c[1];if(typeof
b!=="number"&&10===b[0])return[10,aq(N,b[1])];throw[0,F,wh];case
11:var
o=0,O=c[1];if(typeof
b==="number")o=1;else
switch(b[0]){case
10:break;case
11:return[11,aq(O,b[1])];default:o=1}if(o)throw[0,F,wi];break;case
12:var
p=0,P=c[1];if(typeof
b==="number")p=1;else
switch(b[0]){case
10:break;case
11:a=1;break;case
12:return[12,aq(P,b[1])];default:p=1}if(p)throw[0,F,wj];break;case
13:var
q=0,Q=c[1];if(typeof
b==="number")q=1;else
switch(b[0]){case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:return[13,aq(Q,b[1])];default:q=1}if(q)throw[0,F,wk];break;default:var
r=0,R=c[1];if(typeof
b==="number")r=1;else
switch(b[0]){case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:return[14,aq(R,b[1])];default:r=1}if(r)throw[0,F,wl]}switch(a){case
0:throw[0,F,v$];case
1:throw[0,F,wa];case
2:throw[0,F,wb];case
3:throw[0,F,wc];case
4:throw[0,F,wd];case
5:throw[0,F,v9];case
6:throw[0,F,v_];default:throw[0,F,we]}}var
av=[M,wm,aY(0)];function
en(b,a){if(typeof
b==="number")return[0,0,a];else{if(0===b[0])return[0,[0,b[1],b[2]],a];if(typeof
a!=="number"&&2===a[0])return[0,[1,b[1]],a[1]];throw av}}function
db(e,b,d){var
a=en(e,d);if(typeof
b==="number"){if(0===b)return[0,a[1],0,a[2]];var
c=a[2];if(typeof
c!=="number"&&2===c[0])return[0,a[1],1,c[1]];throw av}return[0,a[1],[0,b[1]],a[2]]}function
aQ(b,c,a){if(typeof
b==="number")return[0,0,W(c,a)];else
switch(b[0]){case
0:if(typeof
a!=="number"&&0===a[0]){var
h=aQ(b[1],c,a[1]);return[0,[0,h[1]],h[2]]}break;case
1:if(typeof
a!=="number"&&1===a[0]){var
i=aQ(b[1],c,a[1]);return[0,[1,i[1]],i[2]]}break;case
2:if(typeof
a!=="number"&&2===a[0]){var
j=aQ(b[1],c,a[1]);return[0,[2,j[1]],j[2]]}break;case
3:if(typeof
a!=="number"&&3===a[0]){var
k=aQ(b[1],c,a[1]);return[0,[3,k[1]],k[2]]}break;case
4:if(typeof
a!=="number"&&4===a[0]){var
l=aQ(b[1],c,a[1]);return[0,[4,l[1]],l[2]]}break;case
5:if(typeof
a!=="number"&&5===a[0]){var
m=aQ(b[1],c,a[1]);return[0,[5,m[1]],m[2]]}break;case
6:if(typeof
a!=="number"&&6===a[0]){var
n=aQ(b[1],c,a[1]);return[0,[6,n[1]],n[2]]}break;case
7:if(typeof
a!=="number"&&7===a[0]){var
o=aQ(b[1],c,a[1]);return[0,[7,o[1]],o[2]]}break;case
8:if(typeof
a!=="number"&&8===a[0]){var
p=a[1],x=a[2],y=b[2];if(e([0,b[1]],[0,p]))throw av;var
q=aQ(y,c,x);return[0,[8,p,q[1]],q[2]]}break;case
9:if(typeof
a!=="number"&&9===a[0]){var
f=a[2],g=a[1],z=a[3],A=b[3],B=b[2],C=b[1],D=[0,ah(g)];if(e([0,ah(C)],D))throw av;var
E=[0,ah(f)];if(e([0,ah(B)],E))throw av;var
r=aB(aq(an(g),f)),F=r[4];d(r[2],0);d(F,0);var
s=aQ(ah(A),c,z),G=s[2];return[0,[9,g,f,an(s[1])],G]}break;case
10:if(typeof
a!=="number"&&10===a[0]){var
t=aQ(b[1],c,a[1]);return[0,[10,t[1]],t[2]]}break;case
11:if(typeof
a!=="number"&&11===a[0]){var
u=aQ(b[1],c,a[1]);return[0,[11,u[1]],u[2]]}break;case
13:if(typeof
a!=="number"&&13===a[0]){var
v=aQ(b[1],c,a[1]);return[0,[13,v[1]],v[2]]}break;case
14:if(typeof
a!=="number"&&14===a[0]){var
w=aQ(b[1],c,a[1]);return[0,[14,w[1]],w[2]]}break}throw av}function
W(b,a){if(typeof
b==="number")return[0,0,a];else
switch(b[0]){case
0:if(typeof
a!=="number"&&0===a[0]){var
t=W(b[1],a[1]);return[0,[0,t[1]],t[2]]}break;case
1:if(typeof
a!=="number"&&0===a[0]){var
u=W(b[1],a[1]);return[0,[1,u[1]],u[2]]}break;case
2:var
ac=b[2],v=en(b[1],a),f=v[2],ad=v[1];if(typeof
f!=="number"&&1===f[0]){var
w=W(ac,f[1]);return[0,[2,ad,w[1]],w[2]]}throw av;case
3:var
ae=b[2],x=en(b[1],a),g=x[2],af=x[1];if(typeof
g!=="number"&&1===g[0]){var
y=W(ae,g[1]);return[0,[3,af,y[1]],y[2]]}throw av;case
4:var
ag=b[4],ai=b[1],h=db(b[2],b[3],a),i=h[3],aj=h[2],ak=h[1];if(typeof
i!=="number"&&2===i[0]){var
z=W(ag,i[1]);return[0,[4,ai,ak,aj,z[1]],z[2]]}throw av;case
5:var
al=b[4],am=b[1],j=db(b[2],b[3],a),k=j[3],an=j[2],ao=j[1];if(typeof
k!=="number"&&3===k[0]){var
A=W(al,k[1]);return[0,[5,am,ao,an,A[1]],A[2]]}throw av;case
6:var
ap=b[4],aq=b[1],l=db(b[2],b[3],a),m=l[3],ar=l[2],as=l[1];if(typeof
m!=="number"&&4===m[0]){var
B=W(ap,m[1]);return[0,[6,aq,as,ar,B[1]],B[2]]}throw av;case
7:var
at=b[4],au=b[1],n=db(b[2],b[3],a),o=n[3],aw=n[2],ax=n[1];if(typeof
o!=="number"&&5===o[0]){var
C=W(at,o[1]);return[0,[7,au,ax,aw,C[1]],C[2]]}throw av;case
8:var
ay=b[4],az=b[1],p=db(b[2],b[3],a),q=p[3],aA=p[2],aB=p[1];if(typeof
q!=="number"&&6===q[0]){var
D=W(ay,q[1]);return[0,[8,az,aB,aA,D[1]],D[2]]}throw av;case
9:var
aC=b[2],E=en(b[1],a),r=E[2],aD=E[1];if(typeof
r!=="number"&&7===r[0]){var
F=W(aC,r[1]);return[0,[9,aD,F[1]],F[2]]}throw av;case
10:var
G=W(b[1],a);return[0,[10,G[1]],G[2]];case
11:var
aE=b[1],H=W(b[2],a);return[0,[11,aE,H[1]],H[2]];case
12:var
aF=b[1],I=W(b[2],a);return[0,[12,aF,I[1]],I[2]];case
13:if(typeof
a!=="number"&&8===a[0]){var
J=a[1],aG=a[2],aH=b[3],aI=b[1];if(e([0,b[2]],[0,J]))throw av;var
K=W(aH,aG);return[0,[13,aI,J,K[1]],K[2]]}break;case
14:if(typeof
a!=="number"&&9===a[0]){var
L=a[1],aJ=a[3],aK=b[3],aL=b[2],aM=b[1],aN=[0,ah(L)];if(e([0,ah(aL)],aN))throw av;var
M=W(aK,ah(aJ));return[0,[14,aM,L,M[1]],M[2]]}break;case
15:if(typeof
a!=="number"&&10===a[0]){var
N=W(b[1],a[1]);return[0,[15,N[1]],N[2]]}break;case
16:if(typeof
a!=="number"&&11===a[0]){var
O=W(b[1],a[1]);return[0,[16,O[1]],O[2]]}break;case
17:var
aO=b[1],P=W(b[2],a);return[0,[17,aO,P[1]],P[2]];case
18:var
Q=b[2],s=b[1];if(0===s[0]){var
U=s[1],aT=U[2],V=W(U[1],a),aU=V[1],X=W(Q,V[2]);return[0,[18,[0,[0,aU,aT]],X[1]],X[2]]}var
Y=s[1],aV=Y[2],Z=W(Y[1],a),aX=Z[1],_=W(Q,Z[2]);return[0,[18,[1,[0,aX,aV]],_[1]],_[2]];case
19:if(typeof
a!=="number"&&13===a[0]){var
R=W(b[1],a[1]);return[0,[19,R[1]],R[2]]}break;case
20:if(typeof
a!=="number"&&1===a[0]){var
aP=b[2],aR=b[1],S=W(b[3],a[1]);return[0,[20,aR,aP,S[1]],S[2]]}break;case
21:if(typeof
a!=="number"&&2===a[0]){var
aS=b[1],T=W(b[2],a[1]);return[0,[21,aS,T[1]],T[2]]}break;case
23:var
d=b[2],c=b[1];if(typeof
c==="number")switch(c){case
0:return aW(c,d,a);case
1:return aW(c,d,a);case
2:if(typeof
a!=="number"&&14===a[0]){var
$=W(d,a[1]);return[0,[23,2,$[1]],$[2]]}throw av;default:return aW(c,d,a)}else
switch(c[0]){case
0:return aW(c,d,a);case
1:return aW(c,d,a);case
2:return aW(c,d,a);case
3:return aW(c,d,a);case
4:return aW(c,d,a);case
5:return aW(c,d,a);case
6:return aW(c,d,a);case
7:return aW(c,d,a);case
8:return aW([8,c[1],c[2]],d,a);case
9:var
aY=c[1],aa=aQ(c[2],d,a),ab=aa[2];return[0,[23,[9,aY,aa[1]],ab[1]],ab[2]];case
10:return aW(c,d,a);default:return aW(c,d,a)}}throw av}function
aW(d,c,b){var
a=W(c,b);return[0,[23,d,a[1]],a[2]]}function
aX(k,g,a){var
b=u(a),h=0<=g?k:0,d=fO(g);if(d<=b)return a;var
l=2===h?48:32,c=cc(d,l);switch(h){case
0:bb(a,0,c,0,b);break;case
1:bb(a,0,c,d-b|0,b);break;default:var
e=0;if(0<b){var
i=0;if(43!==C(a,0)&&45!==C(a,0)&&32!==C(a,0)){e=1;i=1}if(!i){bM(c,0,C(a,0));bb(a,1,c,(d-b|0)+1|0,b-1|0)}}else
e=1;if(e){var
f=0;if(1<b&&48===C(a,0)){var
j=0;if(b3!==C(a,1)&&88!==C(a,1)){f=1;j=1}if(!j){bM(c,1,C(a,1));bb(a,2,c,(d-b|0)+2|0,b-2|0)}}else
f=1;if(f)bb(a,0,c,d-b|0,b)}}return aD(c)}function
cF(k,b){var
c=fO(k),a=u(b),d=C(b,0),e=0;if(58<=d){if(71<=d){if(!(5<d-97>>>0))e=1}else
if(65<=d)e=1}else{var
f=0;if(32!==d)if(43<=d)switch(d+t3|0){case
5:if(a<(c+2|0)&&1<a){var
j=0;if(b3===C(b,1)||88===C(b,1))j=1;if(j){var
h=cc(c+2|0,48);bM(h,1,C(b,1));bb(b,2,h,(c-a|0)+4|0,a-2|0);return aD(h)}}e=1;f=1;break;case
0:case
2:break;case
1:case
3:case
4:f=1;break;default:e=1;f=1}else
f=1;if(!f&&a<(c+1|0)){var
g=cc(c+1|0,48);bM(g,0,d);bb(b,1,g,(c-a|0)+2|0,a-1|0);return aD(g)}}if(e&&a<c){var
i=cc(c,48);bb(b,0,i,c-a|0,a);return aD(i)}return b}function
wn(l){var
k=0,C=u(l);for(;;){if(C<=k)var
p=l;else{var
o=aO(l,k)+fv|0,q=0;if(59<o>>>0){if(33<o-61>>>0)q=1}else
if(2===o)q=1;if(!q){var
k=k+1|0;continue}var
e=bL(l),a=[0,0],s=a5(e)-1|0,y=0;if(!(s<0)){var
j=y;for(;;){var
f=g(e,j),h=0;if(32<=f){var
m=f+rj|0,r=0;if(58<m>>>0){if(93<=m)r=1}else
if(56<m-1>>>0){h=1;r=1}if(!r){var
n=1;h=2}}else
if(11<=f){if(13===f)h=1}else
if(8<=f)h=1;switch(h){case
0:var
n=4;break;case
1:var
n=2;break}a[1]=a[1]+n|0;var
B=j+1|0;if(s!==j){var
j=B;continue}break}}if(a[1]===a5(e))var
v=fS(e);else{var
b=af(a[1]);a[1]=0;var
t=a5(e)-1|0,z=0;if(!(t<0)){var
i=z;for(;;){var
c=g(e,i),d=0;if(35<=c)if(92===c)d=2;else
if(Z<=c)d=1;else
d=3;else
if(32<=c)if(34<=c)d=2;else
d=3;else
if(14<=c)d=1;else
switch(c){case
8:U(b,a[1],92);a[1]++;U(b,a[1],98);break;case
9:U(b,a[1],92);a[1]++;U(b,a[1],dP);break;case
10:U(b,a[1],92);a[1]++;U(b,a[1],b_);break;case
13:U(b,a[1],92);a[1]++;U(b,a[1],dS);break;default:d=1}switch(d){case
1:U(b,a[1],92);a[1]++;U(b,a[1],48+(c/br|0)|0);a[1]++;U(b,a[1],48+((c/10|0)%10|0)|0);a[1]++;U(b,a[1],48+(c%10|0)|0);break;case
2:U(b,a[1],92);a[1]++;U(b,a[1],c);break;case
3:U(b,a[1],c);break}a[1]++;var
A=i+1|0;if(t!==i){var
i=A;continue}break}}var
v=b}var
p=aD(v)}var
w=u(p),x=cc(w+2|0,34);bK(p,0,x,1,w);return aD(x)}}function
eo(m,a){if(13<=m){var
g=[0,0],h=u(a)-1|0,n=0;if(!(h<0)){var
c=n;for(;;){if(!(9<aO(a,c)+bo>>>0))g[1]++;var
q=c+1|0;if(h!==c){var
c=q;continue}break}}var
i=g[1],j=af(u(a)+((i-1|0)/3|0)|0),k=[0,0],d=function(a){bM(j,k[1],a);k[1]++;return 0},e=[0,((i-1|0)%3|0)+1|0],l=u(a)-1|0,o=0;if(!(l<0)){var
b=o;for(;;){var
f=aO(a,b);if(9<f+bo>>>0)d(f);else{if(0===e[1]){d(95);e[1]=3}e[1]+=-1;d(f)}var
p=b+1|0;if(l!==b){var
b=p;continue}break}}return aD(j)}return a}function
xd(b,c){switch(b){case
1:var
a=wp;break;case
2:var
a=wq;break;case
4:var
a=ws;break;case
5:var
a=wt;break;case
6:var
a=wu;break;case
7:var
a=wv;break;case
8:var
a=ww;break;case
9:var
a=wx;break;case
10:var
a=wy;break;case
11:var
a=wz;break;case
0:case
13:var
a=wo;break;case
3:case
14:var
a=wr;break;default:var
a=wA}return eo(b,d3(a,c))}function
xe(b,c){switch(b){case
1:var
a=wP;break;case
2:var
a=wQ;break;case
4:var
a=wS;break;case
5:var
a=wT;break;case
6:var
a=wU;break;case
7:var
a=wV;break;case
8:var
a=wW;break;case
9:var
a=wX;break;case
10:var
a=wY;break;case
11:var
a=wZ;break;case
0:case
13:var
a=wO;break;case
3:case
14:var
a=wR;break;default:var
a=w0}return eo(b,d3(a,c))}function
xf(b,c){switch(b){case
1:var
a=w2;break;case
2:var
a=w3;break;case
4:var
a=w5;break;case
5:var
a=w6;break;case
6:var
a=w7;break;case
7:var
a=w8;break;case
8:var
a=w9;break;case
9:var
a=w_;break;case
10:var
a=w$;break;case
11:var
a=xa;break;case
0:case
13:var
a=w1;break;case
3:case
14:var
a=w4;break;default:var
a=xb}return eo(b,d3(a,c))}function
xg(b,c){switch(b){case
1:var
a=wC;break;case
2:var
a=wD;break;case
4:var
a=wF;break;case
5:var
a=wG;break;case
6:var
a=wH;break;case
7:var
a=wI;break;case
8:var
a=wJ;break;case
9:var
a=wK;break;case
10:var
a=wL;break;case
11:var
a=wM;break;case
0:case
13:var
a=wB;break;case
3:case
14:var
a=wE;break;default:var
a=wN}return eo(b,ut(a,c))}function
by(c,m,f){if(16<=c){var
k=0;if(17<=c)switch(c+h3|0){case
2:k=1;break;case
0:case
3:var
h=43;break;default:var
h=32}else
k=1;if(k)var
h=45;var
n=YF(f,m,h);return 19<=c?eg(n):n}if(15===c)var
o=xc;else{var
r=fO(m);switch(c){case
15:var
b=70;break;case
0:case
1:case
2:var
b=cU;break;case
3:case
4:case
5:var
b=dN;break;case
6:case
7:case
8:var
b=69;break;case
9:case
10:case
11:var
b=as;break;case
12:case
13:case
14:var
b=71;break;case
16:case
17:case
18:var
b=e5;break;default:var
b=72}var
d=i9(16);da(d,37);switch(c){case
1:case
4:case
7:case
10:case
13:case
17:case
20:da(d,43);break;case
2:case
5:case
8:case
11:case
14:case
18:case
21:da(d,32);break}da(d,46);aA(d,a(s+r));da(d,b);var
o=i$(d)}var
e=up(o,f);if(15===c){var
p=Yw(f),t=u(e);if(3===p)return f<0.?xh:xi;if(4<=p)return xj;var
g=0;for(;;){if(g===t)var
q=0;else{var
j=C(e,g)-46|0,l=0;if(23<j>>>0){if(55===j)l=1}else
if(21<j-1>>>0)l=1;if(!l){var
g=g+1|0;continue}var
q=1}return q?e:i(e,xk)}}return e}function
dB(e,A,z,y){var
b=A,a=z,c=y;for(;;)if(typeof
c==="number")return d(b,a);else
switch(c[0]){case
0:var
B=c[1];return function(c){return H(b,[5,a,c],B)};case
1:var
C=c[1];return function(c){var
e=0;if(40<=c)if(92===c)var
d=uQ;else
if(Z<=c)e=1;else
e=2;else
if(32<=c)if(39<=c)var
d=uR;else
e=2;else
if(14<=c)e=1;else
switch(c){case
8:var
d=uS;break;case
9:var
d=uT;break;case
10:var
d=uU;break;case
13:var
d=uV;break;default:e=1}switch(e){case
1:var
f=af(4);U(f,0,92);U(f,1,48+(c/br|0)|0);U(f,2,48+((c/10|0)%10|0)|0);U(f,3,48+(c%10|0)|0);var
d=aD(f);break;case
2:var
g=af(1);U(g,0,c);var
d=aD(g);break}var
h=u(d),i=cc(h+2|0,39);bK(d,0,i,1,h);return H(b,[4,a,aD(i)],C)};case
2:var
D=c[2],E=c[1];return f3(b,a,D,E,function(a){return a});case
3:return f3(b,a,c[2],c[1],wn);case
4:return ep(b,a,c[4],c[2],c[3],xd,c[1]);case
5:return ep(b,a,c[4],c[2],c[3],xe,c[1]);case
6:return ep(b,a,c[4],c[2],c[3],xf,c[1]);case
7:return ep(b,a,c[4],c[2],c[3],xg,c[1]);case
8:var
h=c[4],i=c[3],k=c[2],j=c[1];if(typeof
k==="number"){if(typeof
i==="number")return 0===i?function(c){return H(b,[4,a,by(j,f0,c)],h)}:function(d,c){return H(b,[4,a,by(j,d,c)],h)};var
aa=i[1];return function(c){return H(b,[4,a,by(j,aa,c)],h)}}else{if(0===k[0]){var
n=k[2],o=k[1];if(typeof
i==="number")return 0===i?function(c){return H(b,[4,a,aX(o,n,by(j,f0,c))],h)}:function(d,c){return H(b,[4,a,aX(o,n,by(j,d,c))],h)};var
ab=i[1];return function(c){return H(b,[4,a,aX(o,n,by(j,ab,c))],h)}}var
p=k[1];if(typeof
i==="number")return 0===i?function(d,c){return H(b,[4,a,aX(p,d,by(j,f0,c))],h)}:function(e,d,c){return H(b,[4,a,aX(p,e,by(j,d,c))],h)};var
ac=i[1];return function(d,c){return H(b,[4,a,aX(p,d,by(j,ac,c))],h)}}case
9:return f3(b,a,c[2],c[1],uK);case
10:var
a=[7,a],c=c[1];continue;case
11:var
a=[2,a,c[1]],c=c[2];continue;case
12:var
a=[3,a,c[1]],c=c[2];continue;case
13:var
G=c[3],I=c[2],q=i9(16);f2(q,I);var
x=i$(q);return function(c){return H(b,[4,a,x],G)};case
14:var
J=c[3],K=c[2];return function(d){var
e=d[1],c=W(e,ah(an(K)));if(typeof
c[2]==="number")return H(b,a,_(c[1],J));throw av};case
15:var
L=c[1];return function(d,c){return H(b,[6,a,function(a){return f(d,a,c)}],L)};case
16:var
M=c[1];return function(c){return H(b,[6,a,c],M)};case
17:var
a=[0,a,c[1]],c=c[2];continue;case
18:var
m=c[1];if(0===m[0]){var
N=c[2],O=m[1][1],P=0,b=function(b,c,d){return function(a){return H(c,[1,b,[0,a]],d)}}(a,b,N),a=P,c=O;continue}var
Q=c[2],R=m[1][1],S=0,b=function(b,c,d){return function(a){return H(c,[1,b,[1,a]],d)}}(a,b,Q),a=S,c=R;continue;case
19:throw[0,F,xm];case
20:var
V=c[3],X=[8,a,xn];return function(a){return H(b,X,V)};case
21:var
Y=c[2];return function(c){return H(b,[4,a,d3(xo,c)],Y)};case
22:var
$=c[1];return function(c){return H(b,[5,a,c],$)};case
23:var
g=c[2],l=c[1];if(typeof
l==="number")switch(l){case
0:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
1:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
2:throw[0,F,xp];default:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g])}else
switch(l[0]){case
0:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
1:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
2:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
3:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
4:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
5:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
6:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
7:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
8:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);case
9:var
w=l[2];return e<50?gP(e+1|0,b,a,w,g):v(gP,[0,b,a,w,g]);case
10:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g]);default:return e<50?T(e+1|0,b,a,g):v(T,[0,b,a,g])}default:var
r=c[3],s=c[1],t=d(c[2],0);return e<50?gO(e+1|0,b,a,r,s,t):v(gO,[0,b,a,r,s,t])}}function
gP(e,d,c,a,b){if(typeof
a==="number")return e<50?T(e+1|0,d,c,b):v(T,[0,d,c,b]);else
switch(a[0]){case
0:var
f=a[1];return function(a){return a0(d,c,f,b)};case
1:var
g=a[1];return function(a){return a0(d,c,g,b)};case
2:var
h=a[1];return function(a){return a0(d,c,h,b)};case
3:var
i=a[1];return function(a){return a0(d,c,i,b)};case
4:var
j=a[1];return function(a){return a0(d,c,j,b)};case
5:var
k=a[1];return function(a){return a0(d,c,k,b)};case
6:var
l=a[1];return function(a){return a0(d,c,l,b)};case
7:var
m=a[1];return function(a){return a0(d,c,m,b)};case
8:var
n=a[2];return function(a){return a0(d,c,n,b)};case
9:var
o=a[3],p=a[2],q=aq(an(a[1]),p);return function(a){return a0(d,c,aI(q,o),b)};case
10:var
r=a[1];return function(e,a){return a0(d,c,r,b)};case
11:var
s=a[1];return function(a){return a0(d,c,s,b)};case
12:var
t=a[1];return function(a){return a0(d,c,t,b)};case
13:throw[0,F,xq];default:throw[0,F,xr]}}function
T(d,b,e,a){var
c=[8,e,xs];return d<50?dB(d+1|0,b,c,a):v(dB,[0,b,c,a])}function
gO(h,b,f,a,e,c){if(e){var
i=e[1];return function(e){return xl(b,f,a,i,d(c,e))}}var
g=[4,f,c];return h<50?dB(h+1|0,b,g,a):v(dB,[0,b,g,a])}function
H(a,b,c){return am(dB(0,a,b,c))}function
a0(a,b,c,d){return am(gP(0,a,b,c,d))}function
xl(a,b,c,d,e){return am(gO(0,a,b,c,d,e))}function
f3(f,e,c,a,b){if(typeof
a==="number")return function(a){return H(f,[4,e,d(b,a)],c)};else{if(0===a[0]){var
g=a[2],h=a[1];return function(a){return H(f,[4,e,aX(h,g,d(b,a))],c)}}var
i=a[1];return function(g,a){return H(f,[4,e,aX(i,g,d(b,a))],c)}}}function
ep(g,e,d,h,c,b,a){if(typeof
h==="number"){if(typeof
c==="number")return 0===c?function(c){return H(g,[4,e,f(b,a,c)],d)}:function(h,c){return H(g,[4,e,cF(h,f(b,a,c))],d)};var
l=c[1];return function(c){return H(g,[4,e,cF(l,f(b,a,c))],d)}}else{if(0===h[0]){var
i=h[2],j=h[1];if(typeof
c==="number")return 0===c?function(c){return H(g,[4,e,aX(j,i,f(b,a,c))],d)}:function(h,c){return H(g,[4,e,aX(j,i,cF(h,f(b,a,c)))],d)};var
m=c[1];return function(c){return H(g,[4,e,aX(j,i,cF(m,f(b,a,c)))],d)}}var
k=h[1];if(typeof
c==="number")return 0===c?function(h,c){return H(g,[4,e,aX(k,h,f(b,a,c))],d)}:function(i,h,c){return H(g,[4,e,aX(k,i,cF(h,f(b,a,c)))],d)};var
n=c[1];return function(h,c){return H(g,[4,e,aX(k,h,cF(n,f(b,a,c)))],d)}}}function
bz(b,f){var
a=f;for(;;)if(typeof
a==="number")return 0;else
switch(a[0]){case
0:var
g=a[1],h=f1(a[2]);bz(b,g);return c9(b,h);case
1:var
c=a[2],e=a[1];if(0===c[0]){var
i=c[1];bz(b,e);c9(b,xt);var
a=i;continue}var
j=c[1];bz(b,e);c9(b,xu);var
a=j;continue;case
6:var
m=a[2];bz(b,a[1]);return d(m,b);case
7:bz(b,a[1]);return d4(b);case
8:var
n=a[2];bz(b,a[1]);return aa(n);case
2:case
4:var
k=a[2];bz(b,a[1]);return c9(b,k);default:var
l=a[2];bz(b,a[1]);return uy(b,l)}}function
bT(b,f){var
a=f;for(;;)if(typeof
a==="number")return 0;else
switch(a[0]){case
0:var
g=a[1],h=f1(a[2]);bT(b,g);return aV(b,h);case
1:var
c=a[2],e=a[1];if(0===c[0]){var
i=c[1];bT(b,e);aV(b,xv);var
a=i;continue}var
j=c[1];bT(b,e);aV(b,xw);var
a=j;continue;case
6:var
m=a[2];bT(b,a[1]);return d(m,b);case
7:var
a=a[1];continue;case
8:var
n=a[2];bT(b,a[1]);return aa(n);case
2:case
4:var
k=a[2];bT(b,a[1]);return aV(b,k);default:var
l=a[2];bT(b,a[1]);return a6(b,l)}}function
bU(b,f){var
a=f;for(;;)if(typeof
a==="number")return 0;else
switch(a[0]){case
0:var
g=a[1],h=f1(a[2]);bU(b,g);return aV(b,h);case
1:var
c=a[2],e=a[1];if(0===c[0]){var
i=c[1];bU(b,e);aV(b,xx);var
a=i;continue}var
j=c[1];bU(b,e);aV(b,xy);var
a=j;continue;case
6:var
m=a[2];bU(b,a[1]);return aV(b,d(m,0));case
7:var
a=a[1];continue;case
8:var
n=a[2];bU(b,a[1]);return aa(n);case
2:case
4:var
k=a[2];bU(b,a[1]);return aV(b,k);default:var
l=a[2];bU(b,a[1]);return a6(b,l)}}function
ja(d,c){var
a=c[1],b=0;return H(function(a){bz(d,a);return 0},b,a)}function
jb(d,c){var
a=c[1],b=0;return H(function(a){bT(d,a);return 0},b,a)}function
xz(a){return ja(cA,a)}function
ai(b){var
a=b[1];return H(function(b){var
a=cd(64);bU(a,b);return dg(a)},0,a)}var
f$=[0,0];function
gb(j,h){var
a=j[1+h];if(iZ(a)){if(c6(a)===ac)return d(ai(xA),a);if(c6(a)===dU){var
c=up(uO,a),b=0,g=u(c);for(;;){if(g<=b)return i(c,uN);var
e=C(c,b),f=0;if(48<=e){if(!(58<=e))f=1}else
if(45===e)f=1;if(f){var
b=b+1|0;continue}return c}}return xB}return d(ai(xC),a)}function
jc(b,a){if(b.length-1<=a)return xD;var
c=jc(b,a+1|0),d=gb(b,a);return f(ai(xE),d,c)}function
xF(a){var
b=a.length-1;if(2<b>>>0){var
c=jc(a,2),e=gb(a,1);return f(ai(xG),e,c)}switch(b){case
0:return xH;case
1:return xI;default:var
g=gb(a,1);return d(ai(xJ),g)}}function
xK(a){function
b(l){var
b=l;for(;;){if(b){var
m=b[2],n=b[1];try{var
o=d(n,a),c=o}catch(a){var
c=0}if(c)return c[1];var
b=m;continue}if(a===fL)return xL;if(a===iI)return xM;if(a[1]===d6){var
e=a[2],h=e[3],p=e[2],q=e[1];return g1(ai(ga),q,p,h,h+5|0,xN)}if(a[1]===F){var
f=a[2],j=f[3],r=f[2],s=f[1];return g1(ai(ga),s,r,j,j+6|0,xO)}if(a[1]===iK){var
g=a[2],k=g[3],t=g[2],u=g[1];return g1(ai(ga),u,t,k,k+6|0,xP)}if(0===c6(a)){var
v=a[1][1];return i(v,xF(a))}return a[1]}}return b(f$[1])}function
xZ(s,r){var
e=Yx(r),g=e.length-1-1|0,o=0;if(!(g<0)){var
b=o;for(;;){var
a=bi(e,b)[1+b],f=function(a){return function(b){return b?0===a?xQ:xR:0===a?xS:xT}}(b);if(0===a[0])var
h=a[5],i=a[4],j=a[3],k=a[6]?xU:xW,l=a[2],m=f(a[1]),c=[0,Yj(ai(xV),m,l,k,j,i,h)];else
if(a[1])var
c=0;else
var
n=f(0),c=[0,d(ai(xX),n)];if(c){var
p=c[1];d(ja(s,xY),p)}var
q=b+1|0;if(g!==b){var
b=q;continue}break}}return 0}function
jd(a){f$[1]=[0,a,f$[1]];return 0}var
x0=YX(hG,0);iF(a(s3),function(g,f){try{try{var
a=f?x0:YD(0);try{fP(0)}catch(a){}var
c=xK(g);d(xz(x2),c);xZ(cA,a);var
e=d4(cA),b=e}catch(a){a=ap(a);if(a!==fL)throw a;var
b=iL(x1)}return b}catch(a){return 0}});function
x3(b,a){var
c=c6(a)===M?a:a[1];return iF(b,c)}try{uE(Yh)}catch(a){a=ap(a);if(a!==aE)throw a}try{uE(Yg)}catch(a){a=ap(a);if(a!==aE)throw a}var
Yk=0;if(c(iO,x4)&&c(iO,x5))Yk=1;var
je=[M,x6,aY(0)];x3(x7,[0,je,[0]]);(function(a){throw a});var
gc=A,x8=gc.Array;jd(function(a){return a[1]===je?[0,aN(a[2].toString())]:0});jd(function(a){return a
instanceof
x8?0:[0,aN(a.toString())]});function
x9(b,a){return Zb[fF(b)]=a}var
jf=gc.Uint8Array,x_=gc.ArrayBuffer;function
x$(c){if(c<=0)aP(ya);var
b=0,a=c;for(;;){if(1===a)return b;var
b=b+1|0,a=a>>>1|0;continue}}function
yb(a){if(a<0)aP(yc);var
b=0!==a?1:0,c=b?0===(a&(a-1|0))?1:0:b;return c}function
dc(e,b,c){var
a=c;for(;;){if(a===u(b))return 0;if(d(e,C(b,a)))return[0,a];var
a=a+1|0;continue}}function
jg(a){if(a){var
b=a[2],c=a[1];if(b){var
d=jg(b);return[0,[0,c,d[1]],d[2]]}return[0,0,c]}return aP(yd)}function
eq(c){var
b=c,a=0;for(;;){if(b){if(j(a,hU)){var
b=b[2],a=a+1|0;continue}return aP(ye)}return a}}function
yf(d,c){var
a=d,b=c;for(;;){if(e(b,0)){if(a&&iv(b,0)){var
a=a[2],b=b-1|0;continue}}else
if(a)return a[1];return aP(yg)}}function
w(a,b){return a?a[1]:b}function
jh(b,a){var
c=a?[0,d(b,a[1])]:a;return c}var
bV=[M,yh,aY(0)];function
cG(a){return Y|a&63}function
di(b){if(b){var
a=b[1];if(0<=a){var
c=b[2];if(Y<=a){if(tF<=a){if(hR<=a){if(tK<=a)throw bV;var
d=di(c),e=[0,cG(a),d],f=[0,cG(a>>>6|0),e];return[0,eW|a>>>18|0,[0,cG(a>>>12|0),f]]}var
g=di(c),h=[0,cG(a),g];return[0,a$|a>>>12|0,[0,cG(a>>>6|0),h]]}var
i=di(c);return[0,cp|a>>>6|0,[0,cG(a),i]]}return[0,a,di(c)]}throw bV}return b}function
ji(b){var
c=au(df,di(b)),a=cd(80);cb(function(b){return a6(a,b)},c);return dg(a)}function
cH(a){if(Y===(a&cp))return a&63;throw bV}function
er(c,a){if(!(a<c)){var
b=0;if(!(55296<=a)||57344<=a)b=1;if(b&&!(tK<=a))return a}throw bV}function
dj(b){if(b){var
c=b[2],a=b[1];if(Y<=a){if(cp<=a){if(c){var
d=c[2],f=c[1];if(!(a$<=a)){var
m=dj(d);return[0,er(Y,((a&31)<<6)+cH(f)|0),m]}if(d){var
e=d[2],g=d[1];if(!(eW<=a)){var
k=dj(e),l=cH(g);return[0,er(tF,(((a&15)<<12)+(cH(f)<<6)|0)+l|0),k]}if(e&&!(M<=a)){var
h=dj(e[2]),i=cH(e[1]),j=cH(g)<<6;return[0,er(hR,((((a&7)<<18)+(cH(f)<<12)|0)+j|0)+i|0),h]}}}throw bV}throw bV}var
n=dj(c);return[0,er(0,a),n]}return b}function
jj(g){var
c=u(g)-1|0,b=0;if(c<0)var
d=b;else{var
a=c,e=b;for(;;){var
f=[0,C(g,a),e],h=a-1|0;if(0!==a){var
a=h,e=f;continue}var
d=f;break}}return dj(au(function(a){return a},d))}function
jk(a){if(52<a[1])throw[0,F,yi];var
D=d(a[8],rD),I=d(a[8],-Infinity),E=a[5],v=a[7],k=a[8],b=a[9],J=a[6];function
K(a){return a}function
L(a){return a}function
x(a){var
b=N(a,D),c=b||N(a,I);return c}function
c(c){var
b=d(a[9],c);return b!=b?1:0}function
q(b){return f(a[15],b,a[5])}function
m(d,b){var
e=c(d)?d:c(b)?b:a[5];return q(e)}function
n(b){var
d=c(b)?b:a[5];return q(d)}function
g(e,g,c){var
h=d(b,e),a=f(g,h,d(b,c));return a==a?d(k,a):m(e,c)}function
p(e,c){var
a=d(e,d(b,c));return a==a?d(k,a):n(c)}var
M=d(k,0.);function
O(b,a){return g(b,function(b,a){return b+a},a)}function
P(b,a){return g(b,function(b,a){return b-a},a)}function
Q(b,a){return g(b,function(b,a){return b*a},a)}function
R(b,a){return g(b,function(b,a){return b/a},a)}function
S(a){return p(function(a){return Math.sqrt(a)},a)}function
T(a){return p(function(a){return Math.ceil(a)},a)}function
U(a){return p(function(a){return Math.floor(a)},a)}function
V(f){var
a=d(b,f);if(a==0.)return f;var
g=a<0.?Math.ceil(a):Math.floor(a),e=d(k,g);return c(e)?n(e):e}function
W(h){var
a=d(b,h);if(a==0.)return h;var
e=Math.ceil(a),i=Math.floor(a),j=Math.abs(a-e),l=Math.abs(a-i),m=j<l?1:0;if(m)var
f=m;else{var
o=j==l?1:0;if(o)var
p=e/2.,f=Math.floor(p)==p?1:0;else
var
f=o}var
q=f?e:i,g=d(k,q);return c(g)?n(g):g}function
X(e,c){var
g=d(b,e),h=d(b,c);return g==h?f(a[15],e,c):g<h?e:h<g?c:m(e,c)}function
Y(e,c){var
g=d(b,e),h=d(b,c);return g==h?f(a[14],e,c):h<g?e:g<h?c:m(e,c)}function
h(b){return f(a[14],b,a[4])}function
r(b){return f(a[16],b,a[3])}function
Z(c,b){var
d=f(a[14],b,a[3]),e=h(c);return f(a[15],e,d)}function
_(c,a){var
e=d(b,a);return d(b,c)==e?1:0}function
$(c,a){var
e=d(b,a);return d(b,c)!=e?1:0}function
aa(c,a){var
e=d(b,a);return d(b,c)<e?1:0}function
ab(c,a){var
e=d(b,a);return e<d(b,c)?1:0}function
ac(c,a){var
e=d(b,a);return d(b,c)<=e?1:0}function
ad(c,a){var
e=d(b,a);return e<=d(b,c)?1:0}function
l(e,b,a){var
c=a===u(b)?1:0;if(c)var
d=c;else
var
f=C(b,a),g=e?80:69,d=f===g?1:0;return d}function
y(c,h){var
a=h;for(;;){if(!l(1,c,a)){var
b=C(c,a),d=48<=b?1:0,e=d?b<=57?1:0:d;if(e)var
f=e;else
var
g=65<=b?1:0,f=g?b<=70?1:0:g;if(!f){var
a=a+1|0;continue}}return a}}function
o(b,d){var
c=d;for(;;){var
a=y(b,c);if(!l(1,b,a)&&48===C(b,a)){var
c=a+1|0;continue}return a}}function
s(b){if(ca(b,yj))return D;if(ca(b,yk))return E;if(6<u(b)&&ca(bR(b,0,6),yl)){var
ab=bR(b,4,u(b)-4|0),r=d(a[10],ab);if(N(r,a[2]))throw[0,aU,ym];var
ac=a[2];if(e(f(a[14],r,v),ac))throw[0,aU,yn];if(j(r,a[2]))throw[0,aU,yo];return f(a[15],r,v)}var
s=[0,0],t=[0,u(b)],B=u(b)-1|0;if(!(B<0)){var
h=B;for(;;){if(aO(b,h)===95){var
Z=s[1];s[1]=[0,bR(b,h+1|0,(t[1]-h|0)-1|0),Z];t[1]=h}var
_=h-1|0;if(0!==h){var
h=_;continue}break}}var
Y=s[1],g=cC(yp,[0,bR(b,0,t[1]),Y]),c=YA(g);if(Math.abs(c)==rD)var
J=c;else{var
w=cr(c),L=c4(b8(yr,52-a[1]|0),1);if(e(a4(w,fX(b8(ys,52-a[1]|0))),L))var
M=c;else{var
O=cs(a4(w,yt)),P=cs(ct(L,cr(O)))-O,n=u9(g,0,b3);if(n){var
Q=o(eg(g),0),ad=ct(a4(w,yv),yu);if(Q===u(g))var
R=f(ai(yw),u(g),c);else
var
A=C(g,Q)-50|0,af=5<A>>>0?-1===A?0:3:2<=A?2:1,R=d(ai(yx),b8(ad,af));var
S=R}else
var
S=f(ai(yy),u(g),c);var
i=eg(g),m=eg(S),ae=o(m,0),G=o(i,0),F=ae;for(;;){var
p=y(i,G),q=y(m,F),$=l(n,i,p),H=l(n,m,q);if(0===$)if(0===H){var
aa=C(m,q),I=iB(C(i,p),aa);if(0===I){var
G=p+1|0,F=q+1|0;continue}var
z=I}else
var
z=l(n,i,o(i,p))?0:1;else
var
z=0===H?l(n,m,o(m,q))?0:-1:0;var
T=z+1|0,W=0;if(!(2<T>>>0)){var
X=0;switch(T){case
0:var
V=c-P;break;case
1:X=1;break;default:var
V=c+P}if(!X){var
U=V;W=1}}if(!W)var
U=c;var
M=U;break}}var
J=M}var
K=d(k,J);return x(K)?aP(yq):K}function
ae(a){if(ca(a,yz))return aP(yA);if(43!==C(a,0)&&45!==C(a,0))return s(a);var
b=s(bR(a,1,u(a)-1|0));return 43===C(a,0)?b:r(b)}function
t(a){var
b=48<=a?1:0,c=b?a<=57?1:0:b;return c}function
z(a){var
b=t(a);if(b)var
c=b;else
var
d=97<=a?1:0,c=d?a<=cU?1:0:d;return c}function
A(d,i,h,g,f,c){var
a=h,b=f;for(;;){var
e=a<g?1:0;if(e){if(0===b)a6(d,95);a6(d,C(i,a));var
a=a+1|0,b=cv((b+c|0)-1|0,c);continue}return e}}function
B(h,b,a){function
k(a){return 1-d(h,a)}var
c=u(a),l=0,m=0,g=w(dc(h,a,w(dc(function(a){return b3===a?1:0},a,m),l)),c),f=w(dc(k,a,g),c),i=w(dc(h,a,f),c),j=w(dc(k,a,i),c),e=cd(c1(cw(c,b+1|0),b));ed(e,a,0,g);A(e,a,g,f,cv(f-g|0,b)+b|0,b);ed(e,a,f,i-f|0);A(e,a,i,j,b,b);ed(e,a,j,c-j|0);return dg(e)}function
G(n,m,l,e){if(c(e))var
o=d(a[13],v),p=h(e),q=f(a[14],p,o),k=i(yB,B(z,4,d(a[12],q)));else
var
g=d(n,d(b,h(e))),s=46===C(g,u(g)-1|0)?i(g,yE):g,k=B(m,l,s);var
r=j(e,a[2])?yC:yD;return i(r,k)}var
af=3,ag=ai(yF);function
H(a){return G(ag,t,af,a)}return[0,E,J,x,c,k,b,ae,H,function(a){return x(a)?H(a):G(ai(yG),z,4,a)},K,L,O,P,Q,R,S,X,Y,T,U,V,W,h,r,Z,_,$,aa,ac,ab,ad,M]}var
yH=23,yI=2143289344,yJ=-4194304,yK=2139095040,yM=ai(yL);function
yN(b,a){return b^a}function
yO(b,a){return b|a}var
P=jk([0,yH,cD,ej,ek,yI,yJ,yK,fA,fB,f6,cE,yM,el,function(b,a){return b&a},yO,yN]),bk=[0,P[1],P[2],P[3],P[4],P[5],P[6],P[7],P[8],P[9],P[10],P[11],P[12],P[13],P[14],P[15],P[16],P[17],P[18],P[19],P[20],P[21],P[22],P[23],P[24],P[25],P[26],P[27],P[28],P[29],P[30],P[31],P[32]],Q=jk([0,52,i0,i2,i3,yP,yQ,yR,cr,cs,YO,i4,ai(yS),fX,a4,ct,fD]),bl=[0,Q[1],Q[2],Q[3],Q[4],Q[5],Q[6],Q[7],Q[8],Q[9],Q[10],Q[11],Q[12],Q[13],Q[14],Q[15],Q[16],Q[17],Q[18],Q[19],Q[20],Q[21],Q[22],Q[23],Q[24],Q[25],Q[26],Q[27],Q[28],Q[29],Q[30],Q[31],Q[32]],gd=[M,yV,aY(0)],yU=[M,yT,aY(0)];function
es(a){function
h(d,c,b){var
e=f(a[8],b,a[5]);return f(c,f(a[8],d,a[5]),e)}function
s(g,b){if(N(b,a[1]))throw gd;var
i=f(a[18],b,a[26]-1|0),k=d(a[14],i),l=f(a[13],g,k),m=f(a[19],l,1),n=f(a[11],m,b),c=f(a[17],n,1),o=f(a[10],c,b),e=f(a[9],g,o);if(h(e,j,b))return[0,c,e];var
p=f(a[9],e,b);return[0,f(a[8],c,a[2]),p]}function
M(a){return a}function
O(a){return a}var
z=a[1],t=a[2],m=d(a[20],10),P=a[14],Q=a[6],R=a[7];function
c(c){var
b=64-a[26]|0,e=c4(b8(d(a[23],c),b),b);return d(a[22],e)}function
S(d,b){return c(f(a[8],d,b))}function
T(d,b){return c(f(a[9],d,b))}function
U(d,b){return c(f(a[10],d,b))}var
n=f(a[17],a[3],a[26]-1|0),A=f(a[16],n,a[3]);function
V(c,b){if(N(b,a[1]))throw gd;if(N(c,n)&&N(b,a[3]))throw yU;return f(a[11],c,b)}function
B(b,a){return s(b,a)[1]}function
W(c,b){if(N(b,a[1]))throw gd;return f(a[12],c,b)}function
D(b,a){return s(b,a)[2]}function
X(e,c){var
b=iz(fW,64-a[26]|0),f=a4(b,d(a[23],e)),g=us(c2(c2(f,a4(b,d(a[23],c))),i1),aH(2));return d(a[22],g)}var
k=a[13],o=a[15],Y=a[16];function
v(e,c,b){var
g=d(a[20],a[26]-1|0),h=f(a[13],b,g);return f(e,c,d(a[21],h))}function
l(d,b){return c(v(a[17],d,b))}function
Z(c,b){return v(a[18],c,b)}var
_=a[5],E=e(l(t,d(a[20],a[26]-1|0)),_);function
g(b){if(E){var
c=f(a[19],a[3],32-a[26]|0);return f(a[13],b,c)}return b}function
p(d,b){var
e=g(d);return c(v(a[19],e,b))}function
G(b){var
c=d(a[20],a[26]-1|0),e=f(a[13],b,c);return d(a[21],e)}function
$(b,e){var
c=G(e),g=p(b,d(a[20],a[26]-c|0));return f(o,l(b,d(a[20],c)),g)}function
aa(b,e){var
c=G(e),g=l(b,d(a[20],a[26]-c|0));return f(o,p(b,d(a[20],c)),g)}function
ab(g){var
c=0,b=g;for(;;){if(N(b,a[1]))var
e=a[26];else{if(N(f(k,b,f(a[17],a[2],a[26]-1|0)),z)){var
c=1+c|0,b=f(a[17],b,1);continue}var
e=c}return d(a[20],e)}}function
ac(g){var
c=0,b=g;for(;;){if(N(b,a[1]))var
e=a[26];else{var
h=a[2];if(!N(f(k,b,a[2]),h)){var
c=1+c|0,b=f(a[19],b,1);continue}var
e=c}return d(a[20],e)}}function
ad(g){var
b=0,e=a[26],c=g;for(;;){if(0===e)return d(a[20],b);var
h=a[2],i=N(f(k,c,a[2]),h)?b+1|0:b,b=i,e=e-1|0,c=f(a[19],c,1);continue}}function
ae(d,c){var
b=a[26]-d|0,e=f(a[17],c,b);return f(a[18],e,b)}function
af(b){return N(b,a[1])}var
ag=N,ah=e,ai=j;function
H(b,a){return h(b,j,a)}var
aj=cu;function
w(b,a){return h(b,cu,a)}var
ak=iv;function
al(b,a){return h(b,iv,a)}var
am=bO;function
an(b,a){return h(b,bO,a)}function
q(a){return c(fM(fN(a,n),A))}function
x(b){var
d=g(a[3]);return c(fM(fN(b,a[1]),d))}function
I(c,b){if(32<=a[26])throw[0,F,yW];var
e=d(a[21],b),f=d(a[21],c)+e|0;return d(a[20],f)}function
J(c,b){if(32<=a[26])throw[0,F,yX];var
e=d(a[21],b),f=d(a[21],c)-e|0;return d(a[20],f)}function
ao(b,a){return q(I(b,a))}function
ap(b,a){var
c=g(a);return x(I(g(b),c))}function
aq(b,a){return q(J(b,a))}function
ar(b,a){var
c=g(a);return x(J(g(b),c))}function
at(c,b){if(32<=a[26])throw[0,F,yY];var
e=d(a[23],c),f=c4(c2(iy(e,d(a[23],b)),yZ),15);return q(d(a[22],f))}var
au=a[21];function
av(b){var
c=d(a[21],a[4])<<1|1;return d(a[21],b)&c}var
aw=a[20];function
ax(b){var
c=f(o,l(d(a[20],uJ),t),t);return f(k,d(a[20],b),c)}function
b(b){var
a=1-b;return a?aP(y0):a}var
K=s(a[3],m),L=K[1],ay=K[2];function
y(c){var
j=u(c);function
h(i){b(0<(j-i|0)?1:0);if((i+2|0)<=j&&48===C(c,i)&&b3===C(c,i+1|0)){var
g=i+2|0,l=a[1];for(;;){if(g===j)return l;if(95===C(c,g)){var
g=g+1|0;continue}var
e=C(c,g),o=0;if(65<=e)if(97<=e)if(as<=e)o=1;else
var
n=(10+e|0)-97|0;else
if(71<=e)o=1;else
var
n=(10+e|0)-65|0;else
if(9<e+bo>>>0)o=1;else
var
n=e-48|0;if(o)var
n=aP(y1);var
v=d(a[20],n),x=d(a[20],4);b(w(l,p(a[3],x)));var
y=f(a[17],l,4),g=g+1|0,l=f(a[15],y,v);continue}}var
h=i,k=a[1];for(;;){if(h===j)return k;if(95===C(c,h)){var
h=h+1|0;continue}var
q=C(c,h),z=9<q+bo>>>0?aP(y2):q-48|0,r=d(a[20],z),s=H(k,L);if(s)var
t=s;else
var
u=N(k,L),t=u?w(r,ay):u;b(t);var
A=f(a[10],k,m),h=h+1|0,k=f(a[8],A,r);continue}}b(0<j?1:0);var
i=C(c,0)+t3|0,r=0;if(!(2<i>>>0)){var
s=0;switch(i){case
0:var
o=h(1);break;case
1:s=1;break;default:var
q=h(1),z=a[3];b(bO(f(a[9],q,a[2]),z));var
o=d(a[7],q)}if(!s){var
e=o;r=1}}if(!r)var
e=h(0);if(E){var
t=d(a[20],1<<(a[26]-1|0)),v=f(a[13],t,e);if(N(v,a[1]))var
k=e;else
var
y=f(a[17],a[3],a[26]),k=f(a[15],y,e);var
g=k}else
var
g=e;var
l=cu(n,g),x=l?cu(g,A):l;b(x);return g}function
az(c){var
d=y(c),e=45===C(c,0)?1:0,f=e||bO(d,a[1]);b(f);return d}function
aA(a){var
d=y(a),c=43!==C(a,0)?1:0,e=c?45!==C(a,0)?1:0:c;b(e);return d}function
r(a,c){var
f=u(c),g=45===C(c,0)?1:0,d=cd(c1(cw(f,a+1|0),a));ed(d,c,0,g);var
b=g,e=cv(f-g|0,a)+a|0;for(;;){if(b<f){if(0===e)a6(d,95);a6(d,C(c,b));var
b=b+1|0,e=cv((e+a|0)-1|0,a);continue}return dg(d)}}function
aB(b){return r(3,d(a[24],b))}function
aC(b){if(bO(b,a[1]))return r(3,d(a[24],b));var
c=D(b,m),e=d(a[24],c),f=B(b,m);return r(3,i(d(a[24],f),e))}return[0,M,O,z,P,Q,R,S,T,U,V,B,W,D,X,k,o,Y,l,Z,p,$,aa,ab,ac,ad,ae,af,ag,ah,ai,H,aj,w,ak,al,am,an,g,q,x,ao,ap,aq,ar,at,aw,ax,az,aA,y,au,av,aB,aC,function(b){return i(y3,r(4,d(a[25],b)))}]}var
y4=32,y6=ai(y5),y7=aZ,y8=aH;function
y9(a){return a}function
y_(a){return a}function
y$(b,a){return b>>>a|0}function
za(b,a){return b>>a}function
zb(b,a){return b<<a}function
zc(b,a){return b^a}function
zd(b,a){return b|a}function
ze(b,a){return b&a}var
zf=cv,zg=c1,zh=cw;function
zi(b,a){return b-a|0}function
zj(b,a){return b+a|0}var
G=es([0,cD,ei,fU,ek,ej,fV,function(a){return-a|0},zj,zi,zh,zg,zf,ze,el,zd,zc,zb,za,y$,y_,y9,y7,y8,cE,y6,y4]),dk=G[54],jl=G[53],hX=G[50],et=G[47],jm=G[37],jn=G[36],eu=G[33],jo=G[32],jp=G[31],jq=G[30],ge=G[3],zk=G[52],zl=G[49],zm=G[46],zn=G[45],zo=G[44],zp=G[43],zq=G[42],zr=G[41],zs=G[38],zt=G[35],zu=G[34],zv=G[29],zw=G[28],zx=G[25],zy=G[20],zz=G[19],zA=G[18],zB=G[14],zC=G[9],zD=G[8],zE=G[7],zF=G[6],zG=G[5],zH=G[2],zI=G[1],zJ=64,zL=ai(zK);function
zM(a){return a}var
ev=es([0,i0,i1,fW,i3,i2,vd,fC,c2,YP,iy,us,YN,a4,fX,ct,fD,b8,c4,iz,aH,aZ,zM,function(a){return a},i4,zL,zJ]),hY=ev[50],zN=ev[53],zO=ev[31],zP=ev[7];function
gf(a){return a4(aH(a),zQ)}var
zR=16;function
zS(a){return d(ai(zT),a&b4)}var
zU=aZ,zV=aH;function
zW(a){return a}function
zX(a){return a}function
zY(b,a){return b>>>a|0}function
zZ(b,a){return b>>a}function
z0(b,a){return b<<a}function
z1(b,a){return b^a}function
z2(b,a){return b|a}function
z3(b,a){return b&a}var
z4=cv,z5=c1,z6=cw;function
z7(b,a){return b-a|0}function
z8(b,a){return b+a|0}var
jr=es([0,cD,ei,fU,ek,ej,fV,function(a){return-a|0},z8,z7,z6,z5,z4,z3,el,z2,z1,z0,zZ,zY,zX,zW,zU,zV,cE,zS,zR]),js=jr[50],z9=jr[52],z_=8;function
z$(a){return d(ai(Aa),a&a_)}var
Ab=aZ,Ac=aH;function
Ad(a){return a}function
Ae(a){return a}function
Af(b,a){return b>>>a|0}function
Ag(b,a){return b>>a}function
Ah(b,a){return b<<a}function
Ai(b,a){return b^a}function
Aj(b,a){return b|a}function
Ak(b,a){return b&a}var
Al=cv,Am=c1,An=cw;function
Ao(b,a){return b-a|0}function
Ap(b,a){return b+a|0}var
jt=es([0,cD,ei,fU,ek,ej,fV,function(a){return-a|0},Ap,Ao,An,Am,Al,Ak,el,Aj,Ai,Ah,Ag,Af,Ae,Ad,Ab,Ac,cE,z$,z_]),ju=jt[50],Aq=jt[52];function
jv(a){if(1!==a&&!(3<=a))return 4;return 8}function
ew(a){switch(a){case
0:return 1;case
1:return 2;case
2:return 4;default:return 8}}function
jw(a){switch(a){case
0:return Ar;case
1:return As;case
2:return At;default:return Au}}function
jx(a){return Av}function
jy(a){return 0===a?Aw:Ax}function
gg(a){switch(a[0]){case
0:return jw(a[1]);case
1:return jx(a[1]);default:return jy(a[1])}}ec(16,0);function
f9(a){switch(a[0]){case
0:return 16;case
1:return 8;case
2:case
4:return 4;default:return 2}}function
jz(a,i){var
j=f9(i[1]),h=i[3],e=i[2];function
c(b,a){return d(h,au(b,d(e,a)))}function
b(c,b,a){var
f=d(e,a);return d(h,d_(c,d(e,b),f))}var
k=d(a[5],cs(fW));function
g(d,c,b){return f(d,c,b)?k:a[32]}function
l(a){return d(h,cB(j,function(b){return a}))}function
m(b,a){return iP(d(e,a),b)}function
n(c,b,a){function
f(d,b){return d===c?a:b}return d(h,fQ(f,d(e,b)))}var
o=a[26];function
p(a,b){return g(o,a,b)}function
q(a,c){return b(p,a,c)}var
r=a[27];function
s(a,b){return g(r,a,b)}function
t(a,c){return b(s,a,c)}var
u=a[28];function
v(a,b){return g(u,a,b)}function
w(a,c){return b(v,a,c)}var
x=a[29];function
y(a,b){return g(x,a,b)}function
z(a,c){return b(y,a,c)}var
A=a[30];function
B(a,b){return g(A,a,b)}function
C(a,c){return b(B,a,c)}var
D=a[31];function
E(a,b){return g(D,a,b)}function
F(a,c){return b(E,a,c)}var
G=a[23];function
H(a){return c(G,a)}var
I=a[24];function
J(a){return c(I,a)}var
K=a[16];function
L(a){return c(K,a)}var
M=a[19];function
N(a){return c(M,a)}var
O=a[20];function
P(a){return c(O,a)}var
Q=a[21];function
R(a){return c(Q,a)}var
S=a[22];function
T(a){return c(S,a)}var
U=a[12];function
V(a,c){return b(U,a,c)}var
W=a[13];function
X(a,c){return b(W,a,c)}var
Y=a[14];function
Z(a,c){return b(Y,a,c)}var
_=a[15];function
$(a,c){return b(_,a,c)}var
aa=a[17];function
ab(a,c){return b(aa,a,c)}var
ac=a[18];function
ad(a,c){return b(ac,a,c)}function
ae(c,b){return f(a[28],b,c)?b:c}function
af(a,c){return b(ae,a,c)}function
ag(c,b){return f(a[28],c,b)?b:c}return[0,j,e,h,l,m,n,q,t,w,z,C,F,H,J,L,N,P,R,T,V,X,Z,$,ab,ad,af,function(a,c){return b(ag,a,c)}]}function
AB(a){return cB(4,function(b){return d(zI,uj(ef(a),b*4|0))})}var
AC=[0,AA,AB,function(b){var
a=af(16);bw(function(c,b){return hW(a,c*4|0,d(zH,b))},b);return eb(a)}],AD=function(j){var
k=f9(j[1]),h=j[3],c=j[2];function
g(b,a){return d(h,au(b,d(c,a)))}function
a(e,b,a){var
f=d(c,a);return d(h,d_(e,d(c,b),f))}function
l(g,b,a){var
h=d(c,a);return d8(function(b,a){return f(g,b,e(a,ge))},b,h)}function
b(c,b,a){return f(c,b,a)?d(zm,-1):ge}function
n(a){return d(h,cB(k,function(b){return a}))}function
m(b,a){return iP(d(c,a),b)}function
o(b,a){return d(zs,m(b,a))}function
p(e,b,a){function
f(c,b){return c===e?a:b}return d(h,fQ(f,d(c,b)))}function
q(a,c){return b(zw,a,c)}function
r(b,c){return a(q,b,c)}function
s(a,c){return b(zv,a,c)}function
t(b,c){return a(s,b,c)}function
u(a,c){return b(jq,a,c)}function
v(b,c){return a(u,b,c)}function
w(a,c){return b(jp,a,c)}function
x(b,c){return a(w,b,c)}function
y(a,c){return b(jo,a,c)}function
z(b,c){return a(y,b,c)}function
A(a,c){return b(eu,a,c)}function
B(b,c){return a(A,b,c)}function
C(a,c){return b(zu,a,c)}function
D(b,c){return a(C,b,c)}function
E(a,c){return b(zt,a,c)}function
F(b,c){return a(E,b,c)}function
G(a,c){return b(jn,a,c)}function
H(b,c){return a(G,b,c)}function
I(a,c){return b(jm,a,c)}function
J(b,c){return a(I,b,c)}function
K(a){return g(zG,a)}function
L(a){return g(zF,a)}function
M(a){return g(zx,a)}function
N(b,c){return a(zE,b,c)}function
O(b,c){return a(zD,b,c)}function
P(b,c){return a(zC,b,c)}function
i(c,b,a){return f(c,b,a)?b:a}function
Q(a,b){return i(jo,a,b)}function
R(b,c){return a(Q,b,c)}function
S(a,b){return i(eu,a,b)}function
T(b,c){return a(S,b,c)}function
U(a,b){return i(jn,a,b)}function
V(b,c){return a(U,b,c)}function
W(a,b){return i(jm,a,b)}function
X(b,c){return a(W,b,c)}function
Y(b,c){return a(zB,b,c)}var
Z=0;function
_(b,a){var
c=b||a;return c}function
$(a){return l(_,Z,a)}var
aa=1;function
ab(a,b){var
c=a?b:a;return c}function
ac(a){return l(ab,aa,a)}function
ad(a){var
b=d(c,a),e=au(function(a){return f(jq,a,ge)?ei:cD},b);return d9(function(b,a){return b|a<<1},e,cD)}function
ae(b,a){var
c=d(et,a);return g(function(a){return f(zA,a,c)},b)}function
af(b,a){var
c=d(et,a);return g(function(a){return f(zz,a,c)},b)}function
ag(b,a){var
c=d(et,a);return g(function(a){return f(zy,a,c)},b)}function
ah(b,c){return a(zr,b,c)}function
ai(b,c){return a(zq,b,c)}function
aj(b,c){return a(zp,b,c)}function
ak(b,c){return a(zo,b,c)}return[0,k,c,h,n,m,o,p,r,t,v,x,z,B,D,F,H,J,K,L,M,N,O,R,T,V,X,P,Y,$,ac,ad,ae,af,ag,ah,ai,aj,ak,function(b,c){return a(zn,b,c)}]}(AC);function
AF(a){return cB(4,function(b){var
c=uj(ef(a),b*4|0);return d(bk[10],c)})}var
AG=[0,AE,AF,function(b){var
a=af(16);bw(function(c,b){return hW(a,c*4|0,d(bk[11],b))},b);return eb(a)}];(function(a){return jz(bk,a)}(AG));function
AI(a){return cB(2,function(b){var
c=Ys(ef(a),b*8|0);return d(bl[10],c)})}var
AJ=[0,AH,AI,function(b){var
a=af(16);bw(function(c,b){return iM(a,c*8|0,d(bl[11],b))},b);return eb(a)}];(function(a){return jz(bl,a)}(AJ));var
dl=[M,AS,aY(0)];function
jA(a){switch(a[0]){case
0:return 0;case
1:return 1;case
2:return 2;default:return 3}}var
ex=[0,function(a){if(a[1]===dl)return a[2];throw[0,F,AT]}],ey=[0,function(b,a){if(b[1]===dl&&a[1]===dl)return 1;return 0}],ez=[0,function(a){return a[1]===dl?AU:AV}],ce=[0,jB,jB];function
eA(b){if(-1===b[2]){var
c=b[3];return d(ai(AW),c)}var
e=i(AX,a(s+(b[3]+1|0)));return i(a(s+b[2]),e)}var
ab=vt([0,vc]),l=[0,ab[1],ab[1],ab[1],ab[1],ab[1],ab[1],ab[1],ab[1],ab[1]];function
aw(b,a){var
c=f(ab[7],b[9],a[9]),d=f(ab[7],b[8],a[8]),e=f(ab[7],b[7],a[7]),g=f(ab[7],b[6],a[6]),h=f(ab[7],b[5],a[5]),i=f(ab[7],b[4],a[4]),j=f(ab[7],b[3],a[3]),k=f(ab[7],b[2],a[2]);return[0,f(ab[7],b[1],a[1]),k,j,i,h,g,e,d,c]}function
gh(a){return[0,a,l[2],l[3],l[4],l[5],l[6],l[7],l[8],l[9]]}function
jC(a){return[0,l[1],a,l[3],l[4],l[5],l[6],l[7],l[8],l[9]]}function
cf(a){return[0,l[1],l[2],a,l[4],l[5],l[6],l[7],l[8],l[9]]}function
dm(a){return[0,l[1],l[2],l[3],a,l[5],l[6],l[7],l[8],l[9]]}function
gi(a){return[0,l[1],l[2],l[3],l[4],a,l[6],l[7],l[8],l[9]]}function
jD(a){return[0,l[1],l[2],l[3],l[4],l[5],a,l[7],l[8],l[9]]}function
jE(a){return[0,l[1],l[2],l[3],l[4],l[5],l[6],a,l[8],l[9]]}function
jF(a){return[0,l[1],l[2],l[3],l[4],l[5],l[6],l[7],l[8],a]}function
aj(a){return d(ab[5],a[2])}var
gj=d(ab[5],0);function
a7(b,a){return d8(aw,l,au(b,a))}function
jG(a){return 0===a[0]?gh(aj(a[1])):l}function
dn(b){var
a=a7(A1,b),c=f(ab[6],0,a[9]);function
d(a){return a-1|0}var
e=f(ab[15],d,c);return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],e]}function
A1(c){var
a=c[2],b=0;if(typeof
a==="number")switch(a){case
3:return l;case
8:b=1;break;case
0:case
1:case
2:break;default:b=2}else
switch(a[0]){case
3:var
e=dn(a[3]),f=dn(a[2]);return aw(aw(jG(a[1]),f),e);case
6:var
g=[0,a[2],a[1]];return a7(function(a){return jF(aj(a))},g);case
8:var
h=gh(aj(a[2]));return aw(cf(aj(a[1])),h);case
19:var
j=cf(aj(a[2]));return aw(cf(aj(a[1])),j);case
20:var
k=jD(aj(a[2]));return aw(cf(aj(a[1])),k);case
21:return jD(aj(a[1]));case
28:var
m=jE(aj(a[1]));return aw(dm(gj),m);case
29:return jE(aj(a[1]));case
0:break;case
30:b=1;break;case
1:case
2:var
d=dn(a[2]);return aw(jG(a[1]),d);case
4:case
5:return jF(aj(a[1]));case
7:case
31:return gi(aj(a[1]));case
12:case
13:return jC(aj(a[1]));case
9:case
10:case
11:var
i=aj(a[1]);return[0,l[1],l[2],l[3],l[4],l[5],l[6],l[7],i,l[9]];case
14:case
15:case
16:case
17:case
18:return cf(aj(a[1]));case
32:case
33:case
34:case
35:case
36:case
37:return l;case
22:case
23:case
24:case
25:case
26:case
27:b=2;break;default:return dm(gj)}switch(b){case
0:return l;case
1:return l;default:return dm(gj)}}function
gk(a){return dn(a[2])}function
A2(a){return gk(a[2][2])}function
jH(b){var
a=dn(b[2][3]);return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],ab[1],a[9]]}function
A3(a){return l}function
A4(a){return l}function
jI(c,b){var
a=b[2];if(typeof
a==="number")return l;var
e=gk(a[2]);return aw(d(c,aj(a[1])),e)}function
A5(a){var
b=jI(cf,a[2][3]);return aw(a7(gk,a[2][2]),b)}function
A6(a){return jI(dm,a[2][2])}function
A7(a){return l}function
A8(b){var
a=b[2][2][2];switch(a[0]){case
0:return gi(aj(a[1]));case
1:return cf(aj(a[1]));case
2:return dm(aj(a[1]));default:return jC(aj(a[1]))}}function
A9(b){var
a=b[2][3][2];return 0===a[0]?gh(aj(a[1])):l}function
A_(a){return gi(aj(a[2][1]))}function
jJ(c){var
a=[M,A$,aY(0)];function
b(a,d){var
e=i(Ba,d),b=N(a[2],a[1])?AY:i(A0,eA(a[2])),c=i(AZ,i(eA(a[1]),b));return iL(i(i(a[1][1],c),e))}return[0,a,b,function(c,b){throw[0,a,c,b]}]}var
jL=jJ([0]),X=jL[3],jK=1;function
dp(a){return a[1][2]}function
jM(b,a){return a6(b[1],a)}function
dq(a,c,b){a[2][1]=[0,[0,c,b],a[2][1]];return 0}function
ee(a){return[32,[0,a[1],[0,a[2]]]]}function
jN(a){return[32,[0,a[1],[1,a[2]]]]}function
jO(a){return[32,[0,a[1],[2,a[2]]]]}function
jP(a){return[32,[0,a[1],[3,a[2]]]]}function
jQ(a){return[38,[0,a[1],[0,a[2]]]]}var
jR=0,jS=1,jT=2,jU=3;function
jV(b,a){return[22,[0,0,b,a,0]]}function
jW(b,a){return[22,[0,1,b,a,0]]}function
jX(b,a){return[22,[0,2,b,a,0]]}function
jY(b,a){return[22,[0,3,b,a,0]]}function
jZ(b,a){return[22,[0,0,b,a,BQ]]}function
j0(b,a){return[22,[0,0,b,a,BR]]}function
j1(b,a){return[22,[0,0,b,a,BS]]}function
j2(b,a){return[22,[0,0,b,a,BT]]}function
j3(b,a){return[22,[0,1,b,a,BU]]}function
j4(b,a){return[22,[0,1,b,a,BV]]}function
j5(b,a){return[22,[0,1,b,a,BW]]}function
j6(b,a){return[22,[0,1,b,a,BX]]}function
j7(b,a){return[22,[0,1,b,a,BY]]}function
j8(b,a){return[22,[0,1,b,a,BZ]]}function
j9(b,a){return[23,[0,0,b,a,0]]}function
j_(b,a){return[23,[0,1,b,a,0]]}function
j$(b,a){return[23,[0,2,b,a,0]]}function
ka(b,a){return[23,[0,3,b,a,0]]}function
kb(b,a){return[23,[0,0,b,a,B0]]}function
kc(b,a){return[23,[0,0,b,a,B1]]}function
kd(b,a){return[23,[0,1,b,a,B2]]}function
ke(b,a){return[23,[0,1,b,a,B3]]}function
kf(b,a){return[23,[0,1,b,a,B4]]}var
kg=4,kh=5,ki=6,kj=7,kk=8;function
mt(b,a){return[24,[0,0,b,a,0]]}function
mu(b,a){return[24,[0,0,b,a,B5]]}function
mv(b,a){return[24,[0,0,b,a,B6]]}function
mw(b,a){return[24,[0,0,b,a,B7]]}function
mx(b,a){return[24,[0,0,b,a,B8]]}function
my(b,a){return[24,[0,0,b,a,B9]]}function
mz(b,a){return[24,[0,0,b,a,B_]]}function
mA(b,a){return[24,[0,0,b,a,B$]]}function
mB(b,a){return[24,[0,0,b,a,Ca]]}function
mC(b,a){return[24,[0,0,b,a,Cb]]}function
mD(b,a){return[24,[0,0,b,a,Cc]]}function
mE(b,a){return[24,[0,0,b,a,Cd]]}function
mF(b,a){return[24,[0,0,b,a,Ce]]}function
mG(b,a){return[25,[0,0,b,a,0]]}function
mH(c,b,a){return[26,[0,[0,0,c,b,0],a]]}function
mI(c,b,a){return[26,[0,[0,0,c,b,1],a]]}function
mJ(c,b,a){return[26,[0,[0,0,c,b,2],a]]}function
mK(c,b,a){return[26,[0,[0,0,c,b,3],a]]}function
mL(c,b,a){return[27,[0,[0,0,c,b,0],a]]}function
mM(c,b,a){return[27,[0,[0,0,c,b,1],a]]}function
mN(c,b,a){return[27,[0,[0,0,c,b,2],a]]}function
mO(c,b,a){return[27,[0,[0,0,c,b,3],a]]}function
mX(a){return[42,[0,[0,[0,a]]]]}function
mZ(a){return[51,[0,[0,[0,a,0]]]]}function
m0(a){return[51,[0,[0,[0,a,1]]]]}function
m1(a){return[52,[0,[0,[0,a]]]]}function
nA(a){return[51,[0,[1,[0,a,0]]]]}function
nB(a){return[51,[0,[1,[0,a,1]]]]}function
nC(a){return[52,[0,[1,[0,a]]]]}function
oe(a){return[51,[0,[2,[0,a,0]]]]}function
of(a){return[52,[0,[2,[0,a]]]]}function
oU(a){return[51,[0,[3,[0,a,0]]]]}function
oV(a){return[52,[0,[3,[0,a]]]]}function
pj(a){return[51,[0,[4,[0,a,0]]]]}function
pk(a){return[52,[0,[4,[0,a]]]]}function
pK(a){return[51,[0,[5,[0,a,0]]]]}function
pL(a){return[52,[0,[5,[0,a]]]]}var
gl=[M,Cf,aY(0)];function
bB(a){return u(a[2])}function
J(a){return a[3][1]}function
p_(c,a){var
d=bB(a),b=d<(J(a)+c|0)?1:0;if(b)throw gl;return b}function
gm(b,a){if(0<=b){p_(b,a);a[3][1]=a[3][1]+b|0;return 0}throw gl}function
p$(a){return C(a[2],a[3][1])}function
gn(a){var
b=bB(a);return J(a)===b?0:[0,p$(a)]}function
Cg(a){p_(1,a);var
b=p$(a);gm(1,a);return b}var
qa=jJ([0])[1];function
qb(a){return d(ai(Ch),a)}function
qc(b,a){return[0,b[1],-1,a]}function
go(a,c,b){var
d=qc(a,b);return[0,qc(a,c),d]}function
ax(c,a,b){throw[0,qa,go(c,a,a),b]}function
aR(e,d,c,b){var
a=1-e;return a?ax(d,c,b):a}function
eB(a,b){try{var
c=d(a,b);return c}catch(a){a=ap(a);if(a===gl)return ax(b,bB(b),Ci);throw a}}function
qd(a){return eB(Cg,a)}function
gp(b){function
a(a){var
c=J(a);gm(b,a);return bR(a[2],c,b)}return function(b){return eB(a,b)}}function
eC(c,a,b){var
d=J(a)-1|0;return aR(eB(qd,a)===c?1:0,a,d,b)}function
q(b,a){var
c=J(a),e=d(b,a);return[0,go(a,c,J(a)),e]}function
R(a){return qd(a)}function
qe(a){var
b=R(a);return(R(a)<<8)+b|0}function
dr(a){var
b=qe(a);return b+(qe(a)<<16)|0}function
gq(b,a){aR(0<b?1:0,a,J(a),Cj);var
c=R(a),f=7<=b?1:0,e=J(a)-1|0,g=f||((c&Z)<1<<b?1:0);aR(g,a,e,Ck);var
d=aH(c&Z);return 0===(c&Y)?d:ct(d,b8(gq(b-7|0,a),7))}function
ds(c,a){aR(0<c?1:0,a,J(a),Cl);var
b=R(a),d=-1<<(c-1|0)&Z,f=7<=c?1:0,h=J(a)-1|0;if(f)var
g=f;else
var
i=0===(b&d)?1:0,g=i||((b&d)===d?1:0);aR(g,a,h,Cm);var
e=aH(b&Z);return 0===(b&Y)?0===(b&64)?e:ct(e,fD(Co,Cn)):ct(e,b8(ds(c-7|0,a),7))}function
a8(a){return aZ(gq(32,a))}function
eD(a){return aZ(ds(7,a))}function
Cp(a){return aZ(ds(32,a))}function
Cq(a){return aZ(ds(33,a))}function
Cr(a){return ds(64,a)}function
Cs(a){var
b=dr(a);return d(bk[10],b)}function
Ct(a){var
b=gf(dr(a)),c=c2(b,b8(gf(dr(a)),32));return d(bl[10],c)}function
Cu(a){return d(gp(16),a)}function
gr(a){var
b=J(a),c=a8(a);return f(eu,c,bB(a)-b|0)?c:ax(a,b,Cv)}function
eE(a){return d(gp(gr(a)),a)}function
qf(c,b,a){if(0===b)return 0;var
e=d(c,a);return[0,e,qf(c,b-1|0,a)]}function
qg(c,a,b){var
e=a?[0,d(c,b)]:a;return e}function
al(b,a){return qf(b,gr(a),a)}function
qh(f,a){var
b=f;for(;;){if(b){var
e=b[2],c=b[1];if(e){var
g=J(a);try{var
h=d(c,a);return h}catch(c){c=ap(c);if(c[1]===qa){a[3][1]=g;var
b=e;continue}throw c}}return d(c,a)}throw[0,F,Cw]}}function
eF(b){var
c=J(b);try{var
a=jj(eE(b));return a}catch(a){a=ap(a);if(a===bV)return ax(b,c,Cx);throw a}}function
qi(d,a){var
b=gr(a),c=J(a),e=f(d,b,a);aR(J(a)===(c+b|0)?1:0,a,c,Cy);return e}function
cI(a){var
b=eD(a);if(h3===b)return 1;var
c=rY!==b?1:0;return c?ax(a,J(a)-1|0,Cz):c}function
dt(a){var
b=0,c=[0,function(a){return[2,cI(a)]},b],d=[0,function(a){var
b=-5!==eD(a)?1:0,c=b?ax(a,J(a)-1|0,CA):b;return[1,c]},c];return qh([0,function(b){var
c=eD(b)+4|0;if(3<c>>>0)var
a=ax(b,J(b)-1|0,CB);else
switch(c){case
0:var
a=3;break;case
1:var
a=2;break;case
2:var
a=1;break;default:var
a=0}return[0,a]},d],a)}function
qj(a){return al(dt,a)}function
CC(a){if(fv===eD(a)){var
b=qj(a);return[0,b,qj(a)]}return ax(a,J(a)-1|0,CD)}function
qk(b,a){var
c=1===aZ(gq(1,a))?1:0,e=d(b,a);return[0,e,qg(b,c,a)]}function
ql(a){var
b=cI(a);return[0,qk(a8,a),b]}function
qm(a){return[0,qk(a8,a)]}function
qn(a){var
d=dt(a),b=R(a),c=0!==b?1:0,e=c?1===b?1:ax(a,J(a)-1|0,CE):c;return[0,d,e]}function
K(a){return a8(a)}function
cJ(a){return eC(11,a,CF)}function
cK(a){return eC(0,a,CG)}function
B(a){var
b=a8(a),c=J(a)-1|0;aR(f(eu,b,32),a,c,CH);return[0,b,a8(a)]}function
gs(a){var
c=J(a),b=0,d=[0,function(a){return[1,[0,dt(a)]]},b],e=[0,function(a){eC(64,a,CI);return CJ},d];return qh([0,function(a){var
b=q(Cq,a);aR(bO(b[2],0),a,c,CK);return[0,b]},e],a)}function
cL(a){var
b=0;for(;;){var
c=gn(a);if(c){var
d=c[1];if(5!==d&&11!==d){var
e=J(a),f=CL(a),b=[0,[0,go(a,e,e),f],b];continue}}return iQ(b)}}function
CL(b){var
h=J(b),g=R(b),l=0;if(!(dU<g>>>0)){var
f=g;if(e3<=f){if(!(dJ<=f))switch(f){case
109:return kI;case
110:return kJ;case
111:return kK;case
112:return kL;case
113:return kM;case
114:return kN;case
115:return kO;case
116:return kP;case
117:return kQ;case
118:return kR;case
119:return kS;case
120:return kT;case
121:return ko;case
122:return kp;case
123:return kq;case
124:return kU;case
125:return kV;case
126:return kW;case
127:return kX;case
128:return kY;case
129:return kZ;case
130:return k0;case
131:return k1;case
132:return k2;case
133:return k3;case
134:return k4;case
135:return k5;case
136:return k6;case
137:return k7;case
138:return k8;case
139:return ks;case
140:return kr;case
141:return ku;case
142:return kv;case
143:return kw;case
144:return kx;case
145:return kt;case
146:return k9;case
147:return k_;case
148:return k$;case
149:return la;case
150:return lb;case
151:return lc;case
152:return ld;case
153:return kz;case
154:return ky;case
155:return kB;default:return kC}switch(f){case
157:return kD;case
158:return kE;case
159:return kA;case
160:return le;case
161:return lf;case
162:return lg;case
163:return lh;case
164:return li;case
165:return lj;case
166:return lk;case
167:return lY;case
168:return lZ;case
169:return l0;case
170:return l1;case
171:return l2;case
172:return l7;case
173:return l8;case
174:return l9;case
175:return l_;case
176:return l$;case
177:return ma;case
178:return mb;case
179:return mc;case
180:return md;case
181:return me;case
182:return mj;case
183:return mk;case
184:return ml;case
185:return mm;case
186:return mn;case
187:return mo;case
188:return mp;case
189:return mq;case
190:return mr;case
191:return ms;case
192:return lT;case
193:return lU;case
194:return lV;case
195:return lW;case
196:return lX;case
208:return[30,cI(b)];case
209:return kk;case
210:return[31,q(K,b)];case
252:var
c=a8(b);if(j(c,9))if(j(c,4))if(j(c,2)){if(!e(c,0))return l3;if(!e(c,1))return l4}else{if(!e(c,2))return l5;if(!e(c,3))return l6}else
if(j(c,6)){if(!e(c,4))return mf;if(!e(c,5))return mg}else{if(!e(c,6))return mh;if(!e(c,7))return mi;if(!e(c,8)){var
aE=q(K,b);cK(b);return[28,aE]}}else
if(j(c,13))if(j(c,11)){if(!e(c,9))return[29,q(K,b)];if(!e(c,10)){cK(b);cK(b);return kj}}else{if(!e(c,11)){cK(b);return ki}if(!e(c,12)){var
aF=q(K,b);return[20,q(K,b),aF]}}else
if(j(c,15)){if(!e(c,13))return[21,q(K,b)];if(!e(c,14)){var
aG=q(K,b);return[19,aG,q(K,b)]}}else{if(!e(c,15))return[17,q(K,b)];if(!e(c,16))return[16,q(K,b)];if(!e(c,17))return[18,q(K,b)]}var
aD=i(CS,d(ai(CR),c));return ax(b,h,i(CT,i(qb(g),aD)));case
253:var
a=a8(b);if(j(a,d$))if(j(a,59))if(j(a,29))if(j(a,14))if(j(a,7))if(j(a,3)){if(!e(a,0)){var
X=B(b);return mt(X[1],X[2])}if(!e(a,1)){var
W=B(b);return mu(W[1],W[2])}if(!e(a,2)){var
V=B(b);return mv(V[1],V[2])}}else
if(j(a,5)){if(!e(a,3)){var
$=B(b);return mw($[1],$[2])}if(!e(a,4)){var
_=B(b);return mx(_[1],_[2])}}else{if(!e(a,5)){var
ab=B(b);return my(ab[1],ab[2])}if(!e(a,6)){var
aa=B(b);return mz(aa[1],aa[2])}}else
if(j(a,10)){if(!e(a,7)){var
af=B(b);return mA(af[1],af[2])}if(!e(a,8)){var
ae=B(b);return mB(ae[1],ae[2])}if(!e(a,9)){var
ad=B(b);return mC(ad[1],ad[2])}}else
if(j(a,12)){if(!e(a,10)){var
ah=B(b);return mD(ah[1],ah[2])}if(!e(a,11)){var
ag=B(b);return mG(ag[1],ag[2])}}else{if(!e(a,12))return jQ(q(Cu,b));if(!e(a,13))return mX(cB(16,function(a){return R(b)}))}else
if(j(a,21))if(j(a,17)){if(!e(a,14))return mW;if(!e(a,15))return mY;if(!e(a,16))return nz}else
if(j(a,19)){if(!e(a,17))return od;if(!e(a,18))return oT}else{if(!e(a,19))return pi;if(!e(a,20))return pJ}else
if(j(a,25))if(j(a,23)){if(!e(a,21))return mZ(R(b));if(!e(a,22))return m0(R(b))}else{if(!e(a,23))return m1(R(b));if(!e(a,24))return nA(R(b))}else
if(j(a,27)){if(!e(a,25))return nB(R(b));if(!e(a,26))return nC(R(b))}else{if(!e(a,27))return oe(R(b));if(!e(a,28))return of(R(b))}else
if(j(a,44))if(j(a,36))if(j(a,32)){if(!e(a,29))return oU(R(b));if(!e(a,30))return oV(R(b));if(!e(a,31))return pj(R(b))}else
if(j(a,34)){if(!e(a,32))return pk(R(b));if(!e(a,33))return pK(R(b))}else{if(!e(a,34))return pL(R(b));if(!e(a,35))return m2}else
if(j(a,40))if(j(a,38)){if(!e(a,36))return m3;if(!e(a,37))return m4}else{if(!e(a,38))return m5;if(!e(a,39))return m8}else
if(j(a,42)){if(!e(a,40))return m9;if(!e(a,41))return m6}else{if(!e(a,42))return m7;if(!e(a,43))return m_}else
if(j(a,51))if(j(a,47)){if(!e(a,44))return m$;if(!e(a,45))return nD;if(!e(a,46))return nE}else
if(j(a,49)){if(!e(a,47))return nF;if(!e(a,48))return nG}else{if(!e(a,49))return nJ;if(!e(a,50))return nK}else
if(j(a,55))if(j(a,53)){if(!e(a,51))return nH;if(!e(a,52))return nI}else{if(!e(a,53))return nL;if(!e(a,54))return nM}else
if(j(a,57)){if(!e(a,55))return og;if(!e(a,56))return oh}else{if(!e(a,57))return oi;if(!e(a,58))return oj}else
if(j(a,88))if(j(a,73))if(j(a,66))if(j(a,62)){if(!e(a,59))return om;if(!e(a,60))return on;if(!e(a,61))return ok}else
if(j(a,64)){if(!e(a,62))return ol;if(!e(a,63))return oo}else{if(!e(a,64))return op;if(!e(a,65))return pl}else
if(j(a,69)){if(!e(a,66))return pm;if(!e(a,67))return pn;if(!e(a,68))return pp}else
if(j(a,71)){if(!e(a,69))return po;if(!e(a,70))return pq}else{if(!e(a,71))return pM;if(!e(a,72))return pN}else
if(j(a,80))if(j(a,76)){if(!e(a,73))return pO;if(!e(a,74))return pQ;if(!e(a,75))return pP}else
if(j(a,78)){if(!e(a,76))return pR;if(!e(a,77))return mP}else{if(!e(a,78))return mQ;if(!e(a,79))return mR}else
if(j(a,84))if(j(a,82)){if(!e(a,80))return mS;if(!e(a,81))return mT}else{if(!e(a,82))return mU;if(!e(a,83))return mV}else
if(j(a,86)){if(!e(a,84)){var
ak=B(b),aI=R(b);return mH(ak[1],ak[2],aI)}if(!e(a,85)){var
aj=B(b),aH=R(b);return mI(aj[1],aj[2],aH)}}else{if(!e(a,86)){var
an=B(b),aL=R(b);return mJ(an[1],an[2],aL)}if(!e(a,87)){var
am=B(b),aJ=R(b);return mK(am[1],am[2],aJ)}}else
if(j(a,as))if(j(a,95))if(j(a,91)){if(!e(a,88)){var
aq=B(b),aO=R(b);return mL(aq[1],aq[2],aO)}if(!e(a,89)){var
ap=B(b),aN=R(b);return mM(ap[1],ap[2],aN)}if(!e(a,90)){var
ao=B(b),aM=R(b);return mN(ao[1],ao[2],aM)}}else
if(j(a,93)){if(!e(a,91)){var
at=B(b),aP=R(b);return mO(at[1],at[2],aP)}if(!e(a,92)){var
ar=B(b);return mE(ar[1],ar[2])}}else{if(!e(a,93)){var
au=B(b);return mF(au[1],au[2])}if(!e(a,94))return pG}else
if(j(a,99))if(j(a,97)){if(!e(a,95))return p7;if(!e(a,96))return ns}else{if(!e(a,97))return na;if(!e(a,98))return nt}else
if(j(a,dN)){if(!e(a,99))return nc;if(!e(a,br))return nb}else{if(!e(a,dN))return nd;if(!e(a,cU))return ne}else
if(j(a,b_))if(j(a,fs)){if(!e(a,as))return pu;if(!e(a,e5))return pv;if(!e(a,g8))return pw}else
if(j(a,fd)){if(!e(a,fs))return px;if(!e(a,ia))return nj}else{if(!e(a,fd))return nk;if(!e(a,e3))return nl}else
if(j(a,dS))if(j(a,fw)){if(!e(a,b_))return nm;if(!e(a,ik))return nn}else{if(!e(a,fw))return no;if(!e(a,ic))return np}else
if(j(a,dP)){if(!e(a,dS))return nq;if(!e(a,he))return nr}else{if(!e(a,dP))return pU;if(!e(a,ii))return pV}else
if(j(a,fr))if(j(a,e_))if(j(a,fm))if(j(a,E))if(j(a,eQ)){if(!e(a,d$))return nu;if(!e(a,hp))return nv;if(!e(a,b3))return nw}else
if(j(a,z)){if(!e(a,eQ))return nx;if(!e(a,dY))return pW}else{if(!e(a,z))return ny;if(!e(a,aK))return ob}else
if(j(a,Y)){if(!e(a,E))return oc;if(!e(a,D))return oR;if(!e(a,Z))return oS}else
if(j(a,fn)){if(!e(a,Y))return n2;if(!e(a,ha))return nN}else{if(!e(a,fn))return oa;if(!e(a,ht))return nP}else
if(j(a,fh))if(j(a,e$)){if(!e(a,fm))return nO;if(!e(a,h0))return nQ;if(!e(a,g2))return nR}else
if(j(a,fl)){if(!e(a,e$))return nf;if(!e(a,hJ))return ng}else{if(!e(a,fl))return nh;if(!e(a,hQ))return ni}else
if(j(a,fc))if(j(a,e1)){if(!e(a,fh))return nS;if(!e(a,hS))return nT}else{if(!e(a,e1))return nU;if(!e(a,hx))return nV}else
if(j(a,fg)){if(!e(a,fc))return nW;if(!e(a,g9))return nX}else{if(!e(a,fg))return nY;if(!e(a,ip))return nZ}else
if(j(a,e4))if(j(a,e0))if(j(a,fa)){if(!e(a,e_))return n0;if(!e(a,g$))return pX;if(!e(a,h7))return n1}else
if(j(a,fj)){if(!e(a,fa))return n3;if(!e(a,g5))return n4}else{if(!e(a,fj))return n5;if(!e(a,io))return n6}else
if(j(a,fi))if(j(a,dJ)){if(!e(a,e0))return n7;if(!e(a,hu))return n8}else{if(!e(a,dJ))return n9;if(!e(a,g7))return n_}else
if(j(a,ft)){if(!e(a,fi))return n$;if(!e(a,hn))return oq}else{if(!e(a,ft))return or;if(!e(a,ir))return ot}else
if(j(a,eX))if(j(a,fb)){if(!e(a,e4))return os;if(!e(a,hj))return ou;if(!e(a,hg))return ov}else
if(j(a,e9)){if(!e(a,fb))return ow;if(!e(a,hw))return ox}else{if(!e(a,e9))return oy;if(!e(a,id))return oz}else
if(j(a,e7))if(j(a,eO)){if(!e(a,eX))return oA;if(!e(a,h9))return oB}else{if(!e(a,eO))return oC;if(!e(a,iq))return oH}else
if(j(a,fq)){if(!e(a,e7))return oD;if(!e(a,hE))return oE}else{if(!e(a,fq))return oF;if(!e(a,ih))return oG}else
if(j(a,a$))if(j(a,hs))if(j(a,e2))if(j(a,eT)){if(!e(a,fr))return oI;if(!e(a,ho))return oN;if(!e(a,hF))return oO}else
if(j(a,cp)){if(!e(a,eT))return oP;if(!e(a,hC))return oQ}else{if(!e(a,cp))return o6;if(!e(a,hi))return o7}else
if(j(a,ie)){if(!e(a,e2))return o9;if(!e(a,hv))return o8;if(!e(a,sT))return oW}else
if(j(a,h6)){if(!e(a,ie))return oX;if(!e(a,r8))return oY}else{if(!e(a,h6))return oZ;if(!e(a,ry))return pb}else
if(j(a,eU))if(j(a,e6)){if(!e(a,hs))return pc;if(!e(a,sZ))return pd;if(!e(a,s_))return o_}else
if(j(a,eZ)){if(!e(a,e6))return o$;if(!e(a,sw))return pa}else{if(!e(a,eZ))return o0;if(!e(a,r9))return o1}else
if(j(a,g4))if(j(a,hM)){if(!e(a,eU))return o2;if(!e(a,rf))return o4}else{if(!e(a,hM))return o3;if(!e(a,tQ))return o5}else
if(j(a,hy)){if(!e(a,g4))return pe;if(!e(a,st))return pf}else{if(!e(a,hy))return pg;if(!e(a,te))return ph}else
if(j(a,ij))if(j(a,hm))if(j(a,g_)){if(!e(a,a$))return pr;if(!e(a,bE))return ps;if(!e(a,sX))return pt}else
if(j(a,ib)){if(!e(a,g_))return py;if(!e(a,tZ))return pz}else{if(!e(a,ib))return pA;if(!e(a,sr))return pB}else
if(j(a,hf))if(j(a,h5)){if(!e(a,hm))return pC;if(!e(a,r4))return pD}else{if(!e(a,h5))return pE;if(!e(a,ty))return pF}else
if(j(a,hk)){if(!e(a,hf))return p4;if(!e(a,bF))return pS}else{if(!e(a,hk))return pT;if(!e(a,eW))return pY}else
if(j(a,M))if(j(a,hV)){if(!e(a,ij))return pZ;if(!e(a,r1))return p0;if(!e(a,tx))return p1}else
if(j(a,dM)){if(!e(a,hV))return p2;if(!e(a,hb))return p3}else{if(!e(a,dM))return p5;if(!e(a,hL))return p6}else
if(j(a,ac))if(j(a,cl)){if(!e(a,M))return oJ;if(!e(a,tr))return oK}else{if(!e(a,cl))return pH;if(!e(a,hG))return pI}else
if(j(a,cn)){if(!e(a,ac))return oL;if(!e(a,dU))return oM}else{if(!e(a,cn))return p8;if(!e(a,a_))return p9}var
k=d(zk,a);l=1;break}}else{if(61<=f)switch(f){case
61:var
T=B(b);return ke(T[1],T[2]);case
62:var
U=B(b);return kf(U[1],U[2]);case
63:cK(b);return kg;case
64:cK(b);return kh;case
65:return ee(q(Cp,b));case
66:return jN(q(Cr,b));case
67:return jO(q(Cs,b));case
68:return jP(q(Ct,b));case
69:return ll;case
70:return ln;case
71:return lo;case
72:return lp;case
73:return lq;case
74:return lt;case
75:return lu;case
76:return lr;case
77:return ls;case
78:return lv;case
79:return lw;case
80:return lm;case
81:return lx;case
82:return ly;case
83:return lz;case
84:return lA;case
85:return lD;case
86:return lE;case
87:return lB;case
88:return lC;case
89:return lF;case
90:return lG;case
91:return lH;case
92:return lI;case
93:return lJ;case
94:return lL;case
95:return lK;case
96:return lM;case
97:return lN;case
98:return lO;case
99:return lP;case
100:return lR;case
101:return lQ;case
102:return lS;case
103:return kl;case
104:return km;case
105:return kn;case
106:return kF;case
107:return kG;default:return kH}switch(f){case
0:return jR;case
1:return jS;case
2:var
av=gs(b),aw=cL(b);cJ(b);return[1,av,aw];case
3:var
ay=gs(b),az=cL(b);cJ(b);return[2,ay,az];case
4:var
m=gs(b),n=cL(b);if(N(gn(b),CN)){eC(5,b,CO);var
aA=cL(b);cJ(b);return[3,m,n,aA]}cJ(b);return[3,m,n,0];case
5:return ax(b,h,CP);case
11:return ax(b,h,CQ);case
12:return[4,q(K,b)];case
13:return[5,q(K,b)];case
14:var
aB=al(function(a){return q(K,a)},b);return[6,aB,q(K,b)];case
15:return jU;case
16:return[7,q(K,b)];case
17:var
aC=q(K,b);return[8,q(K,b),aC];case
26:return jT;case
27:return[0,0];case
28:return[0,[0,al(dt,b)]];case
32:return[9,q(K,b)];case
33:return[10,q(K,b)];case
34:return[11,q(K,b)];case
35:return[12,q(K,b)];case
36:return[13,q(K,b)];case
37:return[14,q(K,b)];case
38:return[15,q(K,b)];case
39:var
k=g;l=1;break;case
40:var
o=B(b);return jV(o[1],o[2]);case
41:var
p=B(b);return jW(p[1],p[2]);case
42:var
r=B(b);return jX(r[1],r[2]);case
43:var
s=B(b);return jY(s[1],s[2]);case
44:var
t=B(b);return jZ(t[1],t[2]);case
45:var
u=B(b);return j0(u[1],u[2]);case
46:var
v=B(b);return j1(v[1],v[2]);case
47:var
w=B(b);return j2(w[1],w[2]);case
48:var
x=B(b);return j3(x[1],x[2]);case
49:var
y=B(b);return j4(y[1],y[2]);case
50:var
A=B(b);return j5(A[1],A[2]);case
51:var
C=B(b);return j6(C[1],C[2]);case
52:var
F=B(b);return j7(F[1],F[2]);case
53:var
G=B(b);return j8(G[1],G[2]);case
54:var
H=B(b);return j9(H[1],H[2]);case
55:var
I=B(b);return j_(I[1],I[2]);case
56:var
L=B(b);return j$(L[1],L[2]);case
57:var
O=B(b);return ka(O[1],O[2]);case
58:var
P=B(b);return kb(P[1],P[2]);case
59:var
Q=B(b);return kc(Q[1],Q[2]);case
60:var
S=B(b);return kd(S[1],S[2])}}}if(!l)var
k=g;return ax(b,h,i(CM,qb(k)))}function
cg(a){var
b=q(cL,a);cJ(a);return b}function
qo(f,e,d,a){var
c=gn(a),b=jh(function(b){if(12<b>>>0)return ax(a,J(a),CU);switch(b){case
0:return rW;case
1:return s$;case
2:return sz;case
3:return sI;case
4:return sC;case
5:return sq;case
6:return tU;case
7:return tC;case
8:return t_;case
9:return tH;case
10:return td;case
11:return sE;default:return sS}},c);if(b&&N(b[1],f)){var
g=1;eB(function(a){return gm(g,a)},a);return qi(e,a)}return d}function
a9(d,c,b,a){return qo(d,function(a){return c},b,a)}function
CV(a){return q(CC,a)}function
CW(a){var
b=R(a);if(3<b>>>0)return ax(a,J(a)-1|0,CX);switch(b){case
0:return[0,q(K,a)];case
1:return[1,ql(a)];case
2:return[2,qm(a)];default:return[3,qn(a)]}}function
CY(a){var
b=eF(a),c=eF(a);return[0,b,c,q(CW,a)]}function
CZ(a){return[0,ql(a)]}function
C0(a){return[0,qm(a)]}function
C1(a){var
b=qn(a);return[0,b,cg(a)]}function
C2(a){var
b=R(a);if(3<b>>>0)return ax(a,J(a)-1|0,C3);switch(b){case
0:return[0,q(K,a)];case
1:return[1,q(K,a)];case
2:return[2,q(K,a)];default:return[3,q(K,a)]}}function
C4(a){var
b=eF(a);return[0,b,q(C2,a)]}function
C5(a){return[0,q(K,a)]}function
C6(a){var
b=a8(a);return[0,b,dt(a)]}function
C7(g,a){var
c=J(a),b=al(C6,a);aR(f(zO,d8(zP,C_,au(function(a){return gf(a[1])},b)),C9),a,c,C8);var
d=iS(au(function(c){var
b=c[1],a=0,d=c[2];for(;;){if(N(b,0))return a;var
b=b-1|0,a=[0,d,a];continue}},b)),e=cL(a);cJ(a);return[0,[0,ce,-1],d,e]}function
gt(a){return 0}function
gu(a){var
b=q(K,a);return[0,b,cg(a)]}function
gv(a){return[0,[0,ce,0],cg(a)]}function
qp(a){return 1}function
eG(b){var
a=q(K,b);return[0,[0,a[1],[31,a]],0]}function
gw(a){var
b=0!==R(a)?1:0;return b?ax(a,J(a)-1|0,C$):b}function
Da(a){var
b=a8(a);if(j(b,4))if(j(b,2)){if(!e(b,0)){var
f=q(gv,a);return[0,0,al(function(a){return q(eG,a)},a),f]}if(!e(b,1)){var
c=q(gt,a),d=gw(a);return[0,d,al(function(a){return q(eG,a)},a),c]}}else{if(!e(b,2)){var
i=q(gu,a),k=gw(a);return[0,k,al(function(a){return q(eG,a)},a),i]}if(!e(b,3)){var
g=q(qp,a),h=gw(a);return[0,h,al(function(a){return q(eG,a)},a),g]}}else
if(j(b,6)){if(!e(b,4)){var
n=q(gv,a);return[0,0,al(cg,a),n]}if(!e(b,5)){var
l=q(gt,a),m=cI(a);return[0,m,al(cg,a),l]}}else{if(!e(b,6)){var
r=q(gu,a),s=cI(a);return[0,s,al(cg,a),r]}if(!e(b,7)){var
o=q(qp,a),p=cI(a);return[0,p,al(cg,a),o]}}return ax(a,J(a)-1|0,Db)}function
Dc(a){var
b=a8(a);if(e(b,0)){if(e(b,1)){if(e(b,2))return ax(a,J(a)-1|0,Dd);var
c=q(gu,a);return[0,eE(a),c]}var
d=q(gt,a);return[0,eE(a),d]}var
f=q(gv,a);return[0,eE(a),f]}function
De(a){return[0,a8(a)]}function
Df(b,a){var
c=J(a),e=eF(a);return[0,[0,e,d(gp(b-(J(a)-c|0)|0),a)]]}function
a1(a){return qo(rW,Df,0,a)}function
a2(c,b){for(;;){var
a=0!==d(c,b)?1:0;if(a)continue;return a}}var
Dg=s4,eH=[M,Do,aY(0)];function
Dh(a){aR(N(dr(a),Dg),a,0,Di);aR(N(dr(a),jK),a,4,Dj);a2(a1,a);var
f=0,g=a9(s$,function(a){return al(CV,a)},f,a);a2(a1,a);var
h=0;function
i(a){return q(CY,a)}var
j=a9(sz,function(a){return al(i,a)},h,a);a2(a1,a);var
k=0;function
l(a){return q(K,a)}var
d=a9(sI,function(a){return al(l,a)},k,a);a2(a1,a);var
m=0;function
n(a){return q(CZ,a)}var
o=a9(sC,function(a){return al(n,a)},m,a);a2(a1,a);var
p=0;function
r(a){return q(C0,a)}var
s=a9(sq,function(a){return al(r,a)},p,a);a2(a1,a);var
t=0;function
u(a){return q(C1,a)}var
v=a9(tU,function(a){return al(u,a)},t,a);a2(a1,a);var
w=0;function
x(a){return q(C4,a)}var
y=a9(tC,function(a){return al(x,a)},w,a);a2(a1,a);var
z=0,A=1;function
B(a){return q(C5,a)}var
C=a9(t_,function(a){return qg(B,A,a)},z,a);a2(a1,a);var
D=0;function
E(a){return q(Da,a)}var
F=a9(tH,function(a){return al(E,a)},D,a);a2(a1,a);var
b=a9(sS,De,0,a);a2(a1,a);var
G=0;function
H(a){return qi(C7,a)}function
I(a){return q(H,a)}var
c=a9(td,function(a){return al(I,a)},G,a);a2(a1,a);var
L=0;function
M(a){return q(Dc,a)}var
e=a9(sE,function(a){return al(M,a)},L,a);a2(a1,a);var
O=bB(a),P=bB(a);aR(J(a)===P?1:0,a,O,Dk);var
Q=bB(a),R=bj(c);aR(bj(d)===R?1:0,a,Q,Dl);var
T=0===b?1:0,S=bB(a),U=T||N(b,[0,eq(e)]);aR(U,a,S,Dm);var
W=0!==b?1:0,V=bB(a),X=W||fR(function(a){var
b=ab[1];return N(jH(a)[7],b)},c);aR(X,a,V,Dn);return[0,g,v,o,s,d_(function(c,a){var
b=a[2];return[0,a[1],[0,c,b[2],b[3]]]},d,c),C,F,e,j,y]}var
Dp=ex[1];ex[1]=function(a){return a[1]===eH?0:d(Dp,a)};var
Dq=ez[1];ez[1]=function(a){return a[1]===eH?Dr:d(Dq,a)};var
Ds=ey[1];ey[1]=function(b,a){if(b[1]===eH&&a[1]===eH)return b[2]===a[2]?1:0;return f(Ds,b,a)};var
du=[M,Dt,aY(0)],eI=[M,Du,aY(0)],Dv=ex[1];ex[1]=function(a){return a[1]===du?1:d(Dv,a)};var
Dw=ez[1];ez[1]=function(a){return a[1]===du?i(Dx,cE(a[2])):d(Dw,a)};var
Dy=ey[1];ey[1]=function(b,a){if(b[1]===du&&a[1]===du)return N(b[2],a[2]);return f(Dy,b,a)};function
$(b,a){throw[0,eI,b,a]}function
Dz(a){var
b=ca(a,DA)?DB:a;return $(ce,b)}function
qq(a){return[0,a[1],a[2],a[4]-a[3]|0]}function
qr(b,a){var
c=qq(a);return[0,qq(b),c]}function
k(j){var
g=y[11],i=bi(y[4],g)[1+g],a=y[12];for(;;){if(0<a){var
b=(y[11]-a|0)+1|0,c=bi(y[3],b)[1+b],d=(y[11]-a|0)+1|0;if(!e(c,bi(y[4],d)[1+d])){var
a=a-1|0;continue}var
h=c}else
var
f=y[11],h=bi(y[4],f)[1+f];return qr(h,i)}}function
aC(c){var
b=y[11]-(y[12]-c|0)|0,d=bi(y[4],b)[1+b],a=y[11]-(y[12]-c|0)|0;return qr(bi(y[3],a)[1+a],d)}function
qs(a,b){try{var
c=d(a,b);return c}catch(a){a=ap(a);if(a[1]===aU)return $(b[1],DC);throw a}}function
qt(d,c,a,b){try{var
e=I(d,c,a,b);return e}catch(a){a=ap(a);if(a[1]===aU)return $(b,DD);if(a[1]===f7)return $(b,DE);throw a}}function
dv(d,c){try{var
b=0,a=f6(d);b=1}catch(a){a=ap(a);if(a[1]!==aU)throw a}if(b&&0<=a&&!(b5<=a))return a;return $(c,DF)}function
cM(a,b){try{var
c=d(zl,a);return c}catch(a){a=ap(a);if(a[1]===aU)return $(b,DG);throw a}}var
bm=vC([0,u$]);function
bC(a){return[0,bm[1],0]}function
gx(i){var
a=bm[1],b=bC(0),c=bC(0),d=bC(0),e=bC(0),f=bC(0),g=bC(0),h=bC(0);return[0,[0,bC(0),0],h,g,f,e,d,c,b,a,[0,0]]}function
qu(a){var
b=0,c=a[10][1];d9(function(b,a){return d(b,a)},c,b);a[10][1]=0;return 0}function
qv(a){var
b=a[10],c=bm[1],d=a[8],e=a[7],f=a[6],g=bC(0);return[0,a[1],a[2],a[3],a[4],g,f,e,d,c,b]}function
bW(c,a,b){try{var
e=f(bm[27],b[2],a[1]);return e}catch(a){a=ap(a);if(a===aE){var
d=i(DI,i(c,i(DH,b[2])));return $(b[1],d)}throw a}}function
bc(b,a){return bW(DJ,b[1][1],a)}function
ch(b,a){return bW(DK,b[4],a)}function
gy(a,b){qu(a);return bW(DL,a[5],b)}function
gz(b,a){return bW(DM,b[6],a)}function
a3(b,a){return bW(DN,b[2],a)}function
qw(b,a){return bW(DO,b[3],a)}function
gA(b,a){return bW(DP,b[8],a)}function
qx(b,a){return bW(DQ,b[7],a)}function
eJ(a,b){try{var
d=f(bm[27],b[2],a[9]);return d}catch(a){a=ap(a);if(a===aE){var
c=i(DR,b[2]);return $(b[1],c)}throw a}}function
qy(a,b){try{var
d=yf(a[1][2],b[2])[2];return d}catch(a){a=ap(a);if(a[1]===aU){var
c=i(DS,cE(b[2]));return $(b[1],c)}throw a}}function
bD(d,a,b){var
c=a[2];a[2]=c+b|0;if(f(jp,a[2],b))$(ce,i(DU,i(d,DT)));return c}function
bX(c,b,a){var
d=bD(c,b,1);if(f(bm[3],a[2],b[1])){var
e=i(DW,i(c,i(DV,a[2])));$(a[1],e)}b[1]=I(bm[4],a[2],d,b[1]);return d}function
gB(b,a){return bX(DX,b[4],a)}function
qz(a,b){qu(a);return bX(DY,a[5],b)}function
qA(b,a){return bX(DZ,b[6],a)}function
qB(b,a){return bX(D0,b[2],a)}function
qC(b,a){return bX(D1,b[3],a)}function
dw(b,a){return bX(D2,b[8],a)}function
gC(b,a){return bX(D3,b[7],a)}function
qD(a,b){var
c=t(a[1][2],[0,b,0]);a[1][2]=c;return bD(D4,a[1][1],1)}function
gD(a){return bD(D5,a[4],1)}function
gE(b,a){function
c(f){var
c=c6(a),d=cl===c?a[1]:dM===c?vG(a):a,e=eq(d);bD(D6,b[5],e);return 0}b[10][1]=[0,c,b[10][1]];return 0}function
qE(a){return bD(D7,a[6],1)}function
qF(a){return bD(D8,a[2],1)}function
qG(a){return bD(D9,a[3],1)}function
dx(a){return bD(D_,a[8],1)}function
gF(a){return bD(D$,a[7],1)}function
qH(a){var
b=a[10],c=a[9];function
d(a){return 1+a|0}var
e=f(bm[33],d,c);return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],e,b]}function
bY(f,e,c){var
a=f[1][2],b=0;for(;;){if(a){if(!N(a[1][2],e)){var
a=a[2],b=b+1|0;continue}var
d=[0,b]}else
var
d=a;return d?[0,c,d[1]]:[0,c,qD(f,[0,c,e])]}}function
ci(b,a,c,d){if(N(c,Ea))gE(b,[dM,function(c){return qy(b,a)[1]}]);else
if(e(c,qy(b,a)))$(d,Eb);return a}var
Ed=Ec.slice(),Ef=Ee.slice(),En=5427;function
Es(a){throw[0,em,b(a,0)]}function
Et(a){throw[0,em,b(a,0)]}function
Eu(a){throw[0,em,b(a,0)]}function
Ev(a){return[0,0,b(a,1)]}function
Ew(a){return b(a,1)}function
Ex(a){return[0,b(a,0),0]}function
Ey(a){var
c=b(a,1);return[0,[0,k(0),[0,0,c]],0]}function
Ez(a){return b(a,1)}function
EA(a){var
c=b(a,1);return[0,c,b(a,0)]}function
EB(a){return 0}function
EC(a){b(a,3);var
c=b(a,2),e=b(a,1),f=bj(e);if(f9(c)!==f)$(k(0),ED);var
g=k(0);return[0,g,[1,[0,[0,[0,c,au(function(a){return d(a,c)},e)]]]]]}function
EE(a){return[0,k(0),EF]}function
EG(a){return[0,k(0),EH]}function
EI(a){var
c=b(a,0),d=k(0);return[0,d,[2,[0,[0,k(0),c]]]]}function
EJ(e){var
g=b(e,2),f=b(e,1),h=k(0),a=aC(3);switch(d(g,[0,ce,EK])[2][0]){case
2:var
c=[0,a,[2,f]];break;case
3:var
c=[0,a,[3,f]];break;default:var
c=$(a,EL)}return[0,h,[0,[1,c]]]}function
EM(a){var
c=b(a,0),d=k(0);return[0,d,[0,[0,[0,k(0),c]]]]}function
EN(a){var
c=b(a,1);return[0,c,b(a,0)]}function
EO(a){return 0}function
EP(a){var
c=b(a,0);return function(b){var
a=aC(3);switch(b[0]){case
4:return[1,[0,a,[2,c]]];case
5:return[1,[0,a,[3,c]]];default:return $(a,EQ)}}}function
ER(a){var
c=b(a,0);return function(e){var
a=c[2],b=c[1];switch(e[0]){case
0:return[0,[0,b,[0,d(ju,a)]]];case
1:return[0,[0,b,[0,d(js,a)]]];case
2:return[0,[0,b,[0,d(hX,a)]]];case
3:return[0,[0,b,[1,d(hY,a)]]];case
4:return[0,[0,b,[2,d(bk[7],a)]]];default:return[0,[0,b,[3,d(bl[7],a)]]]}}}function
ES(a){var
c=b(a,1);return[0,c,b(a,0)]}function
ET(a){return 0}function
EU(a){var
c=b(a,0);return[0,k(0),[2,c]]}function
EV(a){var
c=b(a,0);return[0,k(0),[1,c]]}function
EW(a){var
c=b(a,0);return[0,k(0),[0,c]]}function
EX(a){var
c=b(a,1);return[0,du,cM(c,aC(3))]}function
EY(a){return[0,dl,b(a,1)]}function
EZ(a){var
c=b(a,3),d=b(a,2),e=b(a,1);return qt(c,d,e,k(0))[2]}function
E0(a){var
c=b(a,2);return qs(c,b(a,1))[2]}function
E1(a){var
c=b(a,1);return[0,k(0),[1,c,0]]}function
E2(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[1,c,[0,d]]]}function
E3(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[0,c,d]]}function
E4(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[2,c,d]]}function
E5(a){var
c=b(a,1);return[0,c,b(a,0)]}function
E6(a){return 0}function
E7(a){var
c=b(a,0);return[0,k(0),[4,c]]}function
E8(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[1,c,d]]}function
E9(c){var
a=b(c,0),d=k(0);return[0,d,[0,a[1],a[2]]]}function
E_(a){var
c=b(a,0);return[0,k(0),[3,c]]}function
E$(a){var
c=b(a,0);return[0,k(0),[2,c]]}function
Fa(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[6,c,d]]}function
Fb(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[5,c,d]]}function
Fc(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[4,c,d]]}function
Fd(a){var
c=b(a,2),d=b(a,1),e=k(0);return[0,e,[3,c[2],d]]}function
Fe(a){var
c=b(a,2),d=b(a,1),e=k(0);return[0,e,[2,c[2],d]]}function
Ff(a){var
c=b(a,2),d=b(a,1),e=k(0);return[0,e,[1,c[2],d]]}function
Fg(a){var
c=b(a,2),d=b(a,1),e=k(0);return[0,e,[0,c[2],d]]}function
Fh(a){var
c=b(a,2),d=b(a,1);return[0,k(0),[1,c,d]]}function
Fi(a){var
c=b(a,3),d=b(a,2),e=b(a,1);return[0,k(0),[0,c,d,e]]}function
Fj(a){var
c=b(a,3),d=b(a,1),e=k(0);return[0,c,[0,e,[2,i(Fk,eA(k(0)[1])),d]]]}function
Fl(a){var
c=b(a,3),d=b(a,1),e=k(0);return[0,c,[0,e,[1,i(Fm,eA(k(0)[1])),d]]]}function
Fn(a){return b(a,0)}function
Fo(a){var
c=b(a,0);return[0,[0,k(0),c]]}function
Fp(a){return 0}function
Fq(a){var
c=b(a,0),d=k(0),e=k(0);return[0,d,[0,[0,e,f(c,gx(0),0)]]]}function
Fr(a){var
c=b(a,0),d=k(0),e=k(0);return[0,d,[0,[0,e,f(c,gx(0),0)]]]}function
Fs(a){var
c=b(a,2),d=b(a,1),e=k(0),g=k(0);return[0,c,[0,e,[0,[0,g,f(d,gx(0),0)]]]]}function
Ft(a){var
c=b(a,0);return[0,[0,k(0),c]]}function
Fu(a){return 0}function
Fv(a){var
c=b(a,1),e=b(a,0);return function(b){var
f=d(e,b);return function(h){var
a=d(f,0),e=a[10],g=[0,d(c,b),e];return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],g]}}}function
Fw(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(c,a),f=d(e,a);return function(e){var
c=d(b,0),a=d(f,0);return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],[0,c,a[9]],a[10]]}}}function
Fx(a){var
e=b(a,1),c=b(a,0);return function(b){var
f=d(c,b);return function(g){var
a=d(f,0),c=d(e,b);return a[6]?$(c[1],Fy):[0,a[1],a[2],a[3],a[4],a[5],[0,c],a[7],a[8],a[9],a[10]]}}}function
Fz(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(c,a),f=d(e,a);return function(e){var
c=d(b,0),a=d(f,0);return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],[0,c,a[8]],a[9],a[10]]}}}function
FA(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(c,a),f=d(e,a);return function(e){var
c=d(b,0),a=d(f,0);return[0,a[1],a[2],a[3],a[4],a[5],a[6],[0,c,a[7]],a[8],a[9],a[10]]}}}function
FB(a){var
c=b(a,1),e=b(a,0);return function(a){var
f=d(c,a),g=d(e,a);return function(o){var
b=d(f,0),c=b[1],a=d(g,0),e=0!==c?1:0,h=e?0!==a[9]?1:0:e;if(h)$(d7(a[9])[1],FC);var
i=t(b[3],a[10]),j=t(b[2],a[9]),k=a[8],l=a[7],m=a[6],n=t(c,a[5]);return[0,a[1],a[2],a[3],a[4],n,m,l,k,j,i]}}}function
FD(a){var
c=b(a,1),e=b(a,0);return function(a){var
f=d(c,a),g=d(e,a);return function(p){var
b=d(f,0),c=b[1],a=d(g,0),e=0!==c?1:0,h=e?0!==a[9]?1:0:e;if(h)$(d7(a[9])[1],FE);var
i=t(b[4],a[10]),j=t(b[3],a[9]),k=t(b[2],a[8]),l=a[7],m=a[6],n=a[5],o=t(c,a[4]);return[0,a[1],a[2],a[3],o,n,m,l,k,j,i]}}}function
FF(a){var
c=b(a,1),e=b(a,0);return function(a){var
f=d(c,a),g=d(e,a);return function(q){var
b=d(f,0),c=b[1],a=d(g,0),e=0!==c?1:0,h=e?0!==a[9]?1:0:e;if(h)$(d7(a[9])[1],FG);var
i=t(b[4],a[10]),j=t(b[3],a[9]),k=a[8],l=t(b[2],a[7]),m=a[6],n=a[5],o=a[4],p=t(c,a[3]);return[0,a[1],a[2],p,o,n,m,l,k,j,i]}}}function
FH(a){var
c=b(a,1),e=b(a,0);return function(a){var
f=d(c,a),g=d(e,a);return function(r){var
b=d(f,0),c=b[1],a=d(g,0),e=0!==c?1:0,h=e?0!==a[9]?1:0:e;if(h)$(d7(a[9])[1],FI);var
i=t(b[3],a[10]),j=t(b[2],a[9]),k=a[8],l=a[7],m=a[6],n=a[5],o=a[4],p=a[3],q=t(c,a[2]);return[0,a[1],q,p,o,n,m,l,k,j,i]}}}function
FJ(a){var
c=b(a,1),e=b(a,0);return function(a){d(c,a);return d(e,a)}}function
FK(a){return b(a,0)}function
FL(a){return function(a,b){return[0,a[1][2],bA[2],bA[3],bA[4],bA[5],bA[6],bA[7],bA[8],bA[9],bA[10]]}}function
FM(a){var
c=b(a,1),d=k(0);return function(a){return[0,d,[0,f(c,a,ch)]]}}function
FN(a){var
c=b(a,2),d=b(a,1);return function(a){var
b=t(a[1][2],[0,d,0]);a[1][2]=b;return bX(FO,a[1][1],c)}}function
FP(a){var
c=b(a,1);return function(a){return qD(a,c)}}function
FQ(a){var
c=b(a,0);return[0,k(0),c]}function
FR(c){var
d=b(c,1),a=k(0);return function(b,c){return[0,a,[0,d,[0,a,b]]]}}function
FS(a){var
c=b(a,2),e=b(a,1),f=k(0),g=aC(4);return function(a){return[0,f,[0,c,[0,g,d(e,a)]]]}}function
FT(a){var
c=b(a,1);return function(a){return[3,f(c,a,gz)]}}function
FU(a){var
c=b(a,1);return function(a){return[2,f(c,a,qw)]}}function
FV(a){var
c=b(a,1);return function(a){return[1,f(c,a,a3)]}}function
FW(a){var
c=b(a,1);return function(a){return[0,f(c,a,ch)]}}function
FX(a){var
c=b(a,2);return[0,c,b(a,1)]}function
FY(a){var
c=b(a,3),e=b(a,2),f=b(a,1),g=k(0),h=aC(5);return function(a){var
b=d(f,a);return function(a){return[0,g,[0,c,e,[0,h,d(b,0)]]]}}}function
FZ(a){var
c=b(a,2),d=b(a,1);return function(a){I(c,a,qE,qA);return function(a){return[3,d]}}}function
F0(a){var
c=b(a,2),d=b(a,1);return function(a){I(c,a,qG,qC);return function(a){return[2,d]}}}function
F1(a){var
c=b(a,2),d=b(a,1);return function(a){I(c,a,qF,qB);return function(a){return[1,d]}}}function
F2(a){var
c=b(a,2),d=b(a,1),e=aC(4);return function(a){I(c,a,gD,gB);return function(b){return[0,bY(a,d,e)]}}}function
F3(a){var
c=b(a,2),d=b(a,1);return function(a){I(c,a,gD,gB);return function(b){return[0,f(d,a,bc)]}}}function
F4(a){var
d=b(a,1),e=b(a,0);return function(c,b,g){var
a=I(e,c,b,g),h=a[3],i=[0,f(d,[3,b],c),h];return[0,a[1],a[2],i]}}function
F5(a){var
c=b(a,1),d=b(a,0);return function(e,b,a){return[0,0,[0,[0,a,[0,c[1],c[2],[0,a,[3,d]]]],0],0]}}function
F6(a){var
c=b(a,1),e=b(a,0);return function(b,f,a){return[0,[0,[0,a,[0,c,d(e,b)]],0],0,0]}}function
F7(a){var
d=b(a,2),e=b(a,1),c=k(0);return function(a){var
b=[0,c,I(d,a,qE,qA)];return function(d){return I(e,a,b,c)}}}function
F8(a){var
c=b(a,1);return function(f,d,a){var
e=[0,a,[0,[0,a,ee([0,a,0])],0]],b=c1(u(c)+b4|0,hR);return[0,[0,[0,a,[0,[0,[0,b,[0,b]]]]],0],[0,[0,a,[0,c,[0,a,[0,d,e]]]],0],0,0]}}function
F9(a){var
d=b(a,1),e=b(a,0);return function(c,b,g){var
a=I(e,c,b,g),h=a[4],i=[0,f(d,[2,b],c),h];return[0,a[1],a[2],a[3],i]}}function
F_(a){var
c=b(a,1),d=b(a,0);return function(e,b,a){return[0,0,0,[0,[0,a,[0,c[1],c[2],[0,a,[2,d]]]],0],0]}}function
F$(a){var
c=b(a,0);return function(d,b,a){return[0,[0,[0,a,[0,c]],0],0,0,0]}}function
Ga(a){var
d=b(a,2),e=b(a,1),c=k(0);return function(a){var
b=[0,c,I(d,a,qG,qC)];return function(d){return I(e,a,b,c)}}}function
Gb(a){var
e=b(a,3),f=b(a,2),g=b(a,1),c=k(0);return function(a){I(e,a,gF,gC);return function(b){return[0,c,[0,g,[0,c,[0,[0,c,0],d(f,a)]]]]}}}function
Gc(a){var
e=b(a,4),g=b(a,3),h=b(a,2),i=b(a,1),c=k(0);return function(a){I(e,a,gF,gC);return function(e){var
b=d(h,a);return[0,c,[0,i,[0,c,[0,f(g,a,qw),b]]]]}}}function
Gd(a){var
d=b(a,2),e=b(a,1),c=k(0);return function(a){I(d,a,gF,gC);return function(a){return[0,c,[0,e,[0,c,0]]]}}}function
Ge(a){var
f=b(a,5),g=b(a,2),h=b(a,1);return function(b,i,a){var
j=[0,a,[0,[0,a,ee([0,a,0])],0]],k=d(h,b),c=[0,d(g,b),k],e=eq(c);return[0,[0,[0,a,[0,[0,[0,e,[0,e]],f]]],0],[0,[0,a,[0,0,c,[0,a,[0,i,j]]]],0],0,0]}}function
Gf(a){var
d=b(a,4),e=b(a,1);return function(h,g,a){var
i=[0,a,[0,[0,a,ee([0,a,0])],0]],b=f(e,h,ch),c=eq(b);return[0,[0,[0,a,[0,[0,[0,c,[0,c]],d]]],0],[0,[0,a,[0,0,b,[0,a,[0,g,i]]]],0],0,0]}}function
Gg(a){var
d=b(a,1),e=b(a,0);return function(c,b,g){var
a=I(e,c,b,g),h=a[4],i=[0,f(d,[1,b],c),h];return[0,a[1],a[2],a[3],i]}}function
Gh(a){var
c=b(a,1),d=b(a,0);return function(e,b,a){return[0,0,0,[0,[0,a,[0,c[1],c[2],[0,a,[1,d]]]],0],0]}}function
Gi(a){var
c=b(a,0);return function(d,b,a){return[0,[0,[0,a,[0,c]],0],0,0,0]}}function
Gj(a){var
d=b(a,2),e=b(a,1),c=k(0);return function(a){var
b=[0,c,I(d,a,qF,qB)];return function(d){return I(e,a,b,c)}}}function
Gk(a){var
e=b(a,3),g=b(a,2),h=b(a,1),c=k(0);return function(a){I(e,a,dx,dw);return function(e){var
b=[0,c,[0,[0,c,0],d(g,a)]];return[0,c,[0,0,f(h,a,ch),b]]}}}function
Gl(a){var
f=b(a,3),g=b(a,2),e=b(a,1),c=k(0);return function(a){I(f,a,dx,dw);return function(h){var
b=[0,c,[0,[0,c,0],d(g,a)]],f=d(e[2],a);return[0,c,[0,e[1],f,b]]}}}function
Gm(a){var
f=b(a,3),c=b(a,1),e=k(0);return function(a){I(f,a,dx,dw);return function(f){var
b=d(c[2],a);return[0,e,[0,c[1],b,[0,e,1]]]}}}function
Gn(a){var
g=b(a,4),h=b(a,3),i=b(a,2),c=b(a,1),e=k(0);return function(a){I(g,a,dx,dw);return function(k){var
b=d(i,a),g=[0,e,[0,f(h,a,a3),b]],j=d(c[2],a);return[0,e,[0,c[1],j,g]]}}}function
Go(a){var
f=b(a,2),c=b(a,1),e=k(0);return function(a){I(f,a,dx,dw);return function(f){var
b=d(c[2],a);return[0,e,[0,c[1],b,[0,e,0]]]}}}function
Gp(a){var
c=b(a,1),e=b(a,0);return[0,c,function(a){return d(e,a)}]}function
Gq(a){var
c=b(a,1),d=b(a,0);return[0,c,function(a){return f(d,a,ch)}]}function
Gr(a){var
c=b(a,0);function
d(a){var
b=a[1];return[0,b,[0,[0,b,[31,a]],0]]}return function(b,a){return au(d,f(c,b,a))}}function
Gs(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(e,a);return[0,d(c,a),b]}}function
Gt(a){return function(a){return 0}}function
Gu(a){var
c=b(a,0),e=k(0);return function(a){return[0,e,d(c,a)]}}function
Gv(a){return b(a,1)}function
Gw(a){return 0}function
Gx(a){var
c=b(a,0),e=k(0);return function(a){return[0,e,d(c,a)]}}function
Gy(a){return b(a,1)}function
Gz(a){var
c=b(a,1);return function(a){return d(c,a)}}function
GA(a){var
c=b(a,1);return function(a){return d(c,a)}}function
GB(a){var
c=b(a,3),e=b(a,2),f=b(a,0);return function(b){qz(b,c);var
a=d(f,b);return[0,a[1],[0,e,a[2]],a[3]]}}function
GC(a){var
c=b(a,2),e=b(a,0);return function(b){gE(b,c);var
a=d(e,b),f=a[3],g=t(c,a[2]);return[0,a[1],g,f]}}function
GD(a){var
c=b(a,0);return function(a){var
b=d(c,qH(a));return[0,[0,k(0),-1],0,b]}}function
GE(a){var
e=b(a,2),c=b(a,0),d=c[1],f=c[2],g=t(e,d[2]);return[0,[0,d[1],g],f]}function
GF(a){return[0,GG,b(a,0)]}function
GH(a){var
f=b(a,3),g=b(a,2),c=b(a,0),e=c[1];function
h(a){qz(a,f);return d(c[2],a)}return[0,[0,[0,g,e[1]],e[2]],h]}function
GI(a){var
c=b(a,2),e=b(a,0),f=e[1];function
g(a){gE(a,c);return d(e[2],a)}var
h=f[2];return[0,[0,t(c,f[1]),h],g]}function
GJ(a){return b(a,0)}function
GK(a){var
d=b(a,2),c=b(a,0),e=t(d,c[2]);return[0,c[1],e]}function
GL(a){return GM}function
GN(a){b(a,3);var
d=b(a,2),c=b(a,0);return[0,[0,d,c[1]],c[2]]}function
GO(a){var
d=b(a,2),c=b(a,0),e=c[2];return[0,t(d,c[1]),e]}function
GP(a){return b(a,0)}function
GQ(a){var
d=b(a,1),e=b(a,0);return function(c,b,g){var
a=I(e,c,b,g),h=a[3],i=[0,f(d,[0,b],c),h];return[0,a[1],a[2],i]}}function
GR(a){var
c=b(a,1),d=b(a,0);return function(b,f,a){var
e=[0,a,[0,bY(b,d,a)]];return[0,0,[0,[0,a,[0,c[1],c[2],e]],0],0]}}function
GS(a){var
c=b(a,2),d=b(a,1),e=b(a,0);return function(b,h,a){var
g=[0,a,[0,ci(b,f(d,b,bc),e,a)]];return[0,0,[0,[0,a,[0,c[1],c[2],g]],0],0]}}function
GT(c){var
a=b(c,0);return function(f,h,b){var
c=qv(f),g=bY(c,a[1],b),e=d(a[2],c);return[0,[0,[0,b,[0,g,e[2],e[3]]],0],0,0]}}function
GU(a){var
g=b(a,1),c=b(a,0);return function(h,k,b){var
a=qv(h),i=c[1],j=ci(a,f(g,a,bc),i,b),e=d(c[2],a);return[0,[0,[0,b,[0,j,e[2],e[3]]],0],0,0]}}function
GV(a){var
d=b(a,2),e=b(a,1),c=k(0);return function(a){var
b=[0,c,I(d,a,gD,gB)];return function(d){return I(e,a,b,c)}}}function
GW(a){var
c=b(a,0),e=k(0);return function(a){return[0,e,d(c,a)]}}function
GX(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(e,a);return t(d(c,a),b)}}function
GY(a){return function(a){return 0}}function
GZ(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(e,a);return t(d(c,a),b)}}function
G0(a){var
c=b(a,0);return function(a){return[0,d(c,a),0]}}function
G1(a){var
c=b(a,0);return function(a){return[0,d(c,a),0]}}function
G2(a){return function(a){return 0}}function
G3(a){var
c=b(a,1);return function(b,a){return[0,0,d(c,a),0]}}function
G4(a){var
c=b(a,5),e=b(a,1);return function(f,a){var
b=d(e,a);return[0,0,d(c,a),b]}}function
G5(a){var
c=b(a,1),e=b(a,0);return function(b,g){var
h=d(c,b),a=f(e,b,g),i=a[3],j=a[2];return[0,t(h,a[1]),j,i]}}function
G6(a){var
e=b(a,2),c=b(a,0),d=c[1],f=c[2],g=t(e,d[2]);return[0,[0,d[1],g],f]}function
G7(a){return[0,G8,b(a,0)]}function
G9(a){var
e=b(a,2),c=b(a,0),d=c[1],f=c[2],g=d[2];return[0,[0,t(e,d[1]),g],f]}function
G_(a){return b(a,0)}function
G$(a){var
c=b(a,0),j=k(0);return function(d,k){var
a=c[1],h=0;if(!a[1]){var
b=a[2],i=0;if(b)if(b[2])i=1;else
var
g=[1,[0,b[1]]];else
var
g=Ha;if(!i){var
e=g;h=1}}if(!h)var
e=[0,bY(d,a,j)];return[0,e,f(c[2],d,k)]}}function
Hb(a){var
d=b(a,1),c=b(a,0),e=k(0);return function(a,b){var
g=f(c[2],a,b),h=c[1];return[0,[0,ci(a,f(d,a,bc),h,e)],g]}}function
Hc(a){var
c=b(a,0);return function(a){return[0,0,d(c,a)]}}function
Hd(a){var
c=b(a,2),e=b(a,0);return function(b){var
a=d(e,b),f=a[2];return[0,t(c,a[1]),f]}}function
He(a){var
c=b(a,0);return function(b){var
a=d(c,b);return[0,[0,0,a[1]],a[2]]}}function
Hf(a){var
c=b(a,2),e=b(a,0);return function(f){var
a=d(e,f),b=a[1],g=a[2],h=b[2];return[0,[0,t(c,b[1]),h],g]}}function
Hg(a){var
c=b(a,0),e=aC(1);return function(a){var
b=d(c,a),f=b[2];return[0,bY(a,b[1],e),f]}}function
Hh(a){var
e=b(a,1),g=b(a,0),h=aC(1);return function(a){var
b=d(g,a),c=b[1];if(!c[1]&&!c[2]){var
j=b[2];return[0,f(e,a,bc),j]}var
i=b[2];return[0,ci(a,f(e,a,bc),c,h),i]}}function
Hi(a){var
c=b(a,0);return function(a){return[0,0,0,d(c,a)]}}function
Hj(a){var
c=b(a,2),e=b(a,0);return function(b){var
a=d(e,b),f=a[3];return[0,1,t(c,a[2]),f]}}function
Hk(a){var
d=b(a,1),e=b(a,0);return function(b){var
c=f(e,b,f(d,b,0)),a=c[2];return[0,a[1],[3,c[1],a[2],a[3]]]}}function
Hl(a){var
c=b(a,1),e=b(a,0);return function(b){var
a=d(e,f(c,b,0));return[0,0,[2,a[1],a[2]]]}}function
Hm(a){var
c=b(a,1),e=b(a,0);return function(b){var
a=d(e,f(c,b,0));return[0,0,[1,a[1],a[2]]]}}function
Hn(a){var
c=b(a,0),e=aC(1);return function(b){var
a=d(c,b);return[0,a[2],[8,[0,e,0],a[1]]]}}function
Ho(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(e,a),g=b[1],h=[8,f(c,a,a3),g];return[0,b[2],h]}}function
Hp(a){var
c=b(a,0);return function(e){var
a=d(c,e),b=a[1],f=b?[0,a[2]]:b;return[0,a[3],[0,f]]}}function
Hq(a){var
c=b(a,1),e=b(a,0);return function(a){var
b=d(c,a);return[0,d(e,a),b]}}function
Hr(a){var
c=b(a,1),e=k(0);return function(b){var
a=d(c,b);return t(a[1],[0,[0,e,a[2]],0])}}function
Hs(a){var
e=b(a,2),c=b(a,0),d=c[1],f=c[2],g=t(e,d[2]);return[0,[0,d[1],g],f]}function
Ht(a){return[0,Hu,b(a,0)]}function
Hv(a){var
e=b(a,2),c=b(a,0),d=c[1],f=c[2],g=d[2];return[0,[0,t(e,d[1]),g],f]}function
Hw(a){return b(a,0)}function
Hx(a){var
c=b(a,0),j=k(0);return function(e){var
a=c[1],h=0;if(!a[1]){var
b=a[2],i=0;if(b)if(b[2])i=1;else
var
g=[1,[0,b[1]]];else
var
g=Hy;if(!i){var
f=g;h=1}}if(!h)var
f=[0,bY(e,a,j)];return[0,f,d(c[2],e)]}}function
Hz(a){var
e=b(a,1),c=b(a,0),g=aC(1);return function(a){var
b=d(c[2],a),h=c[1];return[0,[0,ci(a,f(e,a,bc),h,g)],b]}}function
HA(a){var
c=b(a,6),e=b(a,5),g=b(a,3),h=b(a,2),i=b(a,0);return function(j){var
a=f(c,j,t(g,i)),b=d(e,a),k=d(h,a);return[3,b[1],b[2],k]}}function
HB(a){var
c=b(a,3),e=b(a,2),g=b(a,0);return function(b){var
a=d(e,f(c,b,g));return[3,a[1],a[2],0]}}function
HC(a){var
c=b(a,3),e=b(a,2),g=b(a,0);return function(b){var
a=d(e,f(c,b,g));return[2,a[1],a[2]]}}function
HD(a){var
c=b(a,3),e=b(a,2),g=b(a,0);return function(b){var
a=d(e,f(c,b,g));return[1,a[1],a[2]]}}function
HE(a){var
c=b(a,0);return function(a){return[0,0,d(c,a)]}}function
HF(a){var
c=b(a,2),e=b(a,0);return function(b){var
a=d(e,b),f=a[2];return[0,t(c,a[1]),f]}}function
HG(a){var
c=b(a,0);return function(b){var
a=d(c,b);return[0,[0,0,a[1]],a[2]]}}function
HH(a){var
c=b(a,2),e=b(a,0);return function(f){var
a=d(e,f),b=a[1],g=a[2],h=b[2];return[0,[0,t(c,b[1]),h],g]}}function
HI(a){var
c=b(a,0),e=k(0);return function(a){var
b=d(c,a),f=b[2];return[0,bY(a,b[1],e),f]}}function
HJ(a){var
e=b(a,1),g=b(a,0),h=aC(1);return function(a){var
b=d(g,a),c=b[1];if(!c[1]&&!c[2]){var
j=b[2];return[0,f(e,a,bc),j]}var
i=b[2];return[0,ci(a,f(e,a,bc),c,h),i]}}function
HK(c){var
e=b(c,0),a=aC(1);return function(c){var
b=d(e,c);return[0,[0,a,[8,[0,a,0],b[1]]],b[2]]}}function
HL(a){var
c=b(a,1),e=b(a,0),g=aC(1);return function(a){var
b=d(e,a),h=b[2],i=b[1];return[0,[0,g,[8,f(c,a,a3),i]],h]}}function
HM(a){return function(a){return 0}}function
HN(a){var
c=b(a,2),e=b(a,0);return function(a){return t(c,d(e,a))}}function
HO(a){var
c=b(a,0);return function(a){return[0,0,d(c,a)]}}function
HP(a){var
c=b(a,2),e=b(a,0);return function(b){var
a=d(e,b),f=a[2];return[0,t(c,a[1]),f]}}function
HQ(a){var
c=b(a,0),e=k(0);return function(a){return bY(a,d(c,a),e)}}function
HR(a){var
c=b(a,1),e=b(a,0),g=aC(1);return function(a){var
b=d(e,a);if(!b[1]&&!b[2])return f(c,a,bc);return ci(a,f(c,a,bc),b,g)}}function
HS(c){var
e=b(c,0),a=k(0);return function(b){return[0,a,[8,[0,a,0],d(e,b)]]}}function
HT(a){var
c=b(a,1),e=b(a,0),g=k(0);return function(a){var
b=d(e,a);return[0,g,[8,f(c,a,a3),b]]}}function
HU(a){var
c=b(a,0);return function(a){return[0,0,0,d(c,a)]}}function
HV(a){var
c=b(a,2),e=b(a,0);return function(b){var
a=d(e,b),f=a[3];return[0,1,t(c,a[2]),f]}}function
HW(a){var
c=b(a,0),e=aC(1);return function(f){var
a=d(c,f),b=a[1],g=a[3],h=b?[0,a[2]]:b;return[0,[0,e,[0,h]],g]}}function
HX(a){return HY}function
HZ(a){var
c=b(a,2);return[0,1,t(c,b(a,0)[2])]}function
H0(c){var
a=b(c,0),d=k(0);return function(e){var
b=a[1],c=b?[0,a[2]]:b;return[0,d,[0,c]]}}function
H1(a){var
c=b(a,1),e=b(a,0),f=k(0);return function(a){return d(c,dv(e,f))}}function
H2(a){var
c=b(a,1),e=b(a,0),f=k(0);return function(a){return d(c,dv(e,f))}}function
H3(a){var
c=b(a,0);return function(a){return c}}function
H4(c){var
a=b(c,0),d=k(0);return function(b){if(1-(16===bj(a)?1:0))$(d,H5);return mX(au(function(a){return dv(a[2],a[1])},a))}}function
H6(a){var
c=b(a,0);return function(a){return c}}function
H7(a){var
c=b(a,0);return function(a){return c}}function
H8(a){var
c=b(a,0);return function(a){return c}}function
H9(a){var
c=b(a,0);return function(a){return c}}function
H_(a){var
c=b(a,0);return function(a){return c}}function
H$(a){var
c=b(a,0);return function(a){return c}}function
Ia(a){var
c=b(a,2),d=b(a,1),e=b(a,0),f=k(0);return function(a){return qt(c,d,e,f)[1]}}function
Ib(a){var
c=b(a,0);return function(a){return c}}function
Ic(a){var
c=b(a,0);return function(a){return c}}function
Id(a){var
c=b(a,0);return function(a){return c}}function
Ie(a){var
c=b(a,0);return function(a){return c}}function
If(a){var
c=b(a,0);return function(a){return c}}function
Ig(a){var
c=b(a,1),d=b(a,0);return function(a){return qs(c,d)[1]}}function
Ih(a){var
c=b(a,0);return function(a){return[31,f(c,a,ch)]}}function
Ii(a){return function(a){return kk}}function
Ij(a){var
c=b(a,0);return function(a){return[30,c]}}function
Ik(a){var
c=b(a,0);return function(a){return[29,f(c,a,qx)]}}function
Il(a){var
c=b(a,0);return function(a){return[28,f(c,a,qx)]}}function
Im(a){return function(a){return kj}}function
In(a){return function(a){return ki}}function
Io(a){return function(a){return kh}}function
Ip(a){return function(a){return kg}}function
Iq(a){var
c=b(a,3),d=b(a,2),e=b(a,1),f=b(a,0),g=k(0);return function(a){return I(c,e,d,dv(f,g))}}function
Ir(a){var
c=b(a,3),d=b(a,2),e=b(a,1),f=b(a,0),g=k(0);return function(a){return I(c,e,d,dv(f,g))}}function
Is(a){var
c=b(a,2),d=b(a,1),e=b(a,0);return function(a){return f(c,e,d)}}function
It(a){var
c=b(a,2),d=b(a,1),e=b(a,0);return function(a){return f(c,e,d)}}function
Iu(a){var
c=b(a,2),d=b(a,1),e=b(a,0);return function(a){return f(c,e,d)}}function
Iv(a){var
c=b(a,2),d=b(a,1),e=b(a,0);return function(a){return f(c,e,d)}}function
Iw(a){var
c=b(a,0);return function(a){return[21,f(c,a,gA)]}}function
Ix(a){var
c=b(a,0),d=k(0);return function(a){return[20,[0,d,0],f(c,a,gA)]}}function
Iy(b){var
a=k(0);return function(b){return[19,[0,a,0],[0,a,0]]}}function
Iz(b){var
a=k(0);return function(b){return[18,[0,a,0]]}}function
IA(b){var
a=k(0);return function(b){return[17,[0,a,0]]}}function
IB(b){var
a=k(0);return function(b){return[16,[0,a,0]]}}function
IC(b){var
a=k(0);return function(b){return[15,[0,a,0]]}}function
ID(b){var
a=k(0);return function(b){return[14,[0,a,0]]}}function
IE(a){var
c=b(a,1),d=b(a,0);return function(a){var
b=f(d,a,gA);return[20,f(c,a,a3),b]}}function
IF(a){var
c=b(a,1),d=b(a,0);return function(a){var
b=f(d,a,a3);return[19,f(c,a,a3),b]}}function
IG(a){var
c=b(a,0);return function(a){return[18,f(c,a,a3)]}}function
IH(a){var
c=b(a,0);return function(a){return[17,f(c,a,a3)]}}function
II(a){var
c=b(a,0);return function(a){return[16,f(c,a,a3)]}}function
IJ(a){var
c=b(a,0);return function(a){return[15,f(c,a,a3)]}}function
IK(a){var
c=b(a,0);return function(a){return[14,f(c,a,a3)]}}function
IL(a){var
c=b(a,0);return function(a){return[13,f(c,a,gz)]}}function
IM(a){var
c=b(a,0);return function(a){return[12,f(c,a,gz)]}}function
IN(a){var
c=b(a,0);return function(a){return[11,f(c,a,gy)]}}function
IO(a){var
c=b(a,0);return function(a){return[10,f(c,a,gy)]}}function
IP(a){var
c=b(a,0);return function(a){return[9,f(c,a,gy)]}}function
IQ(a){var
c=b(a,0);return function(a){return[7,f(c,a,ch)]}}function
IR(a){return function(a){return jU}}function
IS(a){var
c=b(a,1),d=b(a,0);return function(a){var
e=f(d,a,eJ),b=jg([0,f(c,a,eJ),e]);return[6,b[1],b[2]]}}function
IT(a){var
c=b(a,0);return function(a){return[5,f(c,a,eJ)]}}function
IU(a){var
c=b(a,0);return function(a){return[4,f(c,a,eJ)]}}function
IV(a){return function(a){return jT}}function
IW(a){return function(a){return jS}}function
IX(a){return function(a){return jR}}function
IY(a){return b(a,0)}function
IZ(a){var
c=b(a,0),e=k(0);return function(a){return[0,[0,e,d(c,a)],0]}}function
I0(a){var
c=b(a,0);return function(b){var
a=d(c,b);return[0,a[1],a[2]]}}function
I1(a){var
c=b(a,0);return function(b){var
a=d(c,b);return[0,a[1],a[2]]}}function
I2(a){var
c=b(a,0),e=k(0);return function(a){return[0,[0,e,d(c,a)],0]}}function
I3(d){var
e=b(d,0),f=k(0);try{var
a=f6(e);if(!(0<=a))throw[0,aU,I6];var
c=a}catch(a){a=ap(a);if(a[1]!==aU)throw a;var
c=$(f,I4)}if(1-yb(c))$(k(0),I5);return[0,x$(c)]}function
I7(a){return 0}function
I8(a){var
c=b(a,0);return cM(c,k(0))}function
I9(a){return 0}function
I_(a){return[0,b(a,0),0]}function
I$(a){return 0}function
Ja(a){var
d=b(a,0);return function(a,b){cb(function(a){var
b=c(a[2],d[2]);return b?$(a[1],Jb):b},b);var
e=a[10],g=a[9];function
h(a){return 1+a|0}var
i=f(bm[33],h,g),j=I(bm[4],d[2],0,i);return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],j,e]}}function
Jc(a){return function(b,a){cb(function(a){return $(a[1],Jd)},a);return qH(b)}}function
Je(a){var
c=b(a,0);return[0,k(0),c]}function
Jf(a){var
c=b(a,0);return function(b,d,a){return f(a,b,c)}}function
Jg(a){return function(b,a,c){return d(a,b)}}function
Jh(a){var
c=b(a,1),d=b(a,0);return function(b,a){var
e=f(d,b,a);return[0,f(c,b,a),e]}}function
Ji(a){return function(b,a){return 0}}function
Jj(c){var
d=b(c,0),a=k(0);return function(c,b){return[0,a,f(b,c,[0,a,d])]}}function
Jk(c){var
d=b(c,0),a=k(0);return function(c,b){return[0,a,cM(d,a)]}}function
Jl(a){var
c=b(a,1);return[0,c,b(a,0)]}function
Jm(a){return 0}function
Jn(a){var
c=b(a,0);return[0,k(0),c]}function
Jo(a){var
c=b(a,0);return[0,k(0),c]}function
Jp(a){var
c=b(a,0);return[0,k(0),c]}function
Jq(a){return b(a,1)}function
Jr(a){var
c=b(a,1),d=b(a,0),e=[0,cM(d,aC(2))];return[0,cM(c,aC(1)),e]}function
Js(a){var
c=b(a,0);return[0,cM(c,aC(1)),0]}function
Jt(a){return[0,b(a,0)]}function
Ju(a){var
c=b(a,1);return[0,c,b(a,0)]}function
Jv(a){var
c=b(a,2);return t(c,b(a,0))}function
Jw(a){return 0}function
Jx(a){b(a,3);var
d=b(a,2),c=b(a,0);return[0,[0,d,c[1]],c[2]]}function
Jy(a){var
d=b(a,2),c=b(a,0),e=c[2];return[0,t(d,c[1]),e]}function
Jz(a){return[0,0,b(a,0)]}function
JA(a){return b(a,1)}function
JB(a){return[0,b(a,1),1]}function
JC(a){return[0,b(a,0),0]}function
JD(a){var
c=b(a,1);return[0,c,b(a,0)]}function
JE(a){return 0}function
JF(a){return[2,b(a,0)]}function
JG(a){return[1,b(a,0)]}function
JH(a){return[0,b(a,0)]}function
JI(a){return 1}function
JJ(a){return 0}function
JK(a){return 1}function
JL(a){return 0}function
JM(a){var
c=b(a,1);return i(c,b(a,0))}function
JN(a){return JO}function
JP(a){var
c=b(a,0),d=k(0);try{var
e=jj(c);return e}catch(a){a=ap(a);if(a===bV)return $(d,JQ);throw a}}var
gG=[0,[0,function(a){return aP(JR)},JP,JN,JM,JL,JK,JJ,JI,JH,JG,JF,JE,JD,JC,JB,JA,Jz,Jy,Jx,Jw,Jv,Ju,Jt,Js,Jr,Jq,Jp,Jo,Jn,Jm,Jl,Jk,Jj,Ji,Jh,Jg,Jf,Je,Jc,Ja,I$,I_,I9,I8,I7,I3,I2,I1,I0,IZ,IY,IX,IW,IV,IU,IT,IS,IR,IQ,IP,IO,IN,IM,IL,IK,IJ,II,IH,IG,IF,IE,ID,IC,IB,IA,Iz,Iy,Ix,Iw,Iv,Iu,It,Is,Ir,Iq,Ip,Io,In,Im,Il,Ik,Ij,Ii,Ih,Ig,If,Ie,Id,Ic,Ib,Ia,H$,H_,H9,H8,H7,H6,H4,H3,H2,H1,H0,HZ,HX,HW,HV,HU,HT,HS,HR,HQ,HP,HO,HN,HM,HL,HK,HJ,HI,HH,HG,HF,HE,HD,HC,HB,HA,Hz,Hx,Hw,Hv,Ht,Hs,Hr,Hq,Hp,Ho,Hn,Hm,Hl,Hk,Hj,Hi,Hh,Hg,Hf,He,Hd,Hc,Hb,G$,G_,G9,G7,G6,G5,G4,G3,G2,G1,G0,GZ,GY,GX,GW,GV,GU,GT,GS,GR,GQ,GP,GO,GN,GL,GK,GJ,GI,GH,GF,GE,GD,GC,GB,GA,Gz,Gy,Gx,Gw,Gv,Gu,Gt,Gs,Gr,Gq,Gp,Go,Gn,Gm,Gl,Gk,Gj,Gi,Gh,Gg,Gf,Ge,Gd,Gc,Gb,Ga,F$,F_,F9,F8,F7,F6,F5,F4,F3,F2,F1,F0,FZ,FY,FX,FW,FV,FU,FT,FS,FR,FQ,FP,FN,FM,FL,FK,FJ,FH,FF,FD,FB,FA,Fz,Fx,Fw,Fv,Fu,Ft,Fs,Fr,Fq,Fp,Fo,Fn,Fl,Fj,Fi,Fh,Fg,Ff,Fe,Fd,Fc,Fb,Fa,E$,E_,E9,E8,E7,E6,E5,E4,E3,E2,E1,E0,EZ,EY,EX,EW,EV,EU,ET,ES,ER,EP,EO,EN,EM,EJ,EI,EG,EE,EC,EB,EA,Ez,Ey,Ex,Ew,Ev,Eu,Et,Es],Ed,Ef,Eg,Eh,Ei,Ej,Ek,El,Em,En,Eo,Ep,Dz,Eq,Er];function
JS(b,a){return fY(gG,1,b,a)}function
JT(b,a){return fY(gG,2,b,a)}function
JU(b,a){return fY(gG,3,b,a)}function
eK(a){return[0,a[1],a[2],a[4]-a[3]|0]}function
bZ(a,b){var
c=eK(a[11]);throw[0,eI,[0,c,eK(a[12])],b]}function
qI(c,a,b){a[11]=c;return bZ(a,b)}function
h(a,o,n,m,l){var
j=o,i=n,e=m,c=l;for(;;){if(a[9])return[0,b5,j,i,e,c];a[6]=e;a[7]=c;d(a[1],a);var
b=a[6],k=a[7],f=a[3],h=a[2];if(b<f)return[0,g(h,b),h,f,b+1|0,k];var
j=h,i=f,e=b,c=k;continue}}function
g0(q,c,w,t,s,r,u){var
j=t,i=s,b=r;for(;;){if(i<=b)var
d=h(c,j,i,b,b),a=d[1],n=d[2],l=d[3],k=d[4],e=d[5];else
var
a=g(j,b),n=j,l=i,k=b+1|0,e=b;var
f=0;if(93<=a){var
o=a+ea|0;if(30<o>>>0){if(32===o)f=1}else
if(29!==o)f=1}else
if(59!==a)if(45<=a){if(91!==a)f=1}else
if(33<=a)switch(a+m|0){case
1:var
p=20;return q<50?gZ(q+1|0,c,p,n,l,k,e):v(gZ,[0,c,p,n,l,k,e]);case
7:case
8:case
11:break;default:f=1}if(f){var
j=n,i=l,b=k;continue}c[6]=e;c[7]=e;return 20}}function
gZ(b2,a,e,b6,b5,b4,b3){var
k=b6,j=b5,i=b4,l=b3;a:for(;;){if(j<=i)var
B=h(a,k,j,i,l),m=B[1],d=B[2],c=B[3],b=B[4],f=B[5];else
var
m=g(k,i),d=k,c=j,b=i+1|0,f=l;if(Z<=m){if(a$<=m){var
a6=0;if(bF<=m){if(!(hb<=m))switch(m+dd|0){case
0:if(c<=b)var
C=h(a,d,c,b,f),ba=C[1],ay=C[2],ax=C[3],F=C[4],D=C[5];else
var
ba=g(d,b),ay=d,ax=c,F=b+1|0,D=f;if(31<ba+p>>>0){a[6]=D;a[7]=D;return e}if(ax<=F)var
G=h(a,ay,ax,F,D),be=G[1],bd=G[2],bc=G[3],bb=G[4],az=G[5];else
var
be=g(ay,F),bd=ay,bc=ax,bb=F+1|0,az=D;if(63<be+p>>>0){a[6]=az;a[7]=az;return e}var
k=bd,j=bc,i=bb,l=az;continue;case
3:if(c<=b)var
L=h(a,d,c,b,f),bk=L[1],aE=L[2],aD=L[3],N=L[4],M=L[5];else
var
bk=g(d,b),aE=d,aD=c,N=b+1|0,M=f;if(47<bk+f4>>>0){a[6]=M;a[7]=M;return e}if(aD<=N)var
O=h(a,aE,aD,N,M),bl=O[1],aG=O[2],aF=O[3],Q=O[4],P=O[5];else
var
bl=g(aE,N),aG=aE,aF=aD,Q=N+1|0,P=M;if(63<bl+p>>>0){a[6]=P;a[7]=P;return e}if(aF<=Q)var
R=h(a,aG,aF,Q,P),bq=R[1],bp=R[2],bn=R[3],bm=R[4],aH=R[5];else
var
bq=g(aG,Q),bp=aG,bn=aF,bm=Q+1|0,aH=P;if(63<bq+p>>>0){a[6]=aH;a[7]=aH;return e}var
k=bp,j=bn,i=bm,l=aH;continue;case
7:if(c<=b)var
_=h(a,d,c,b,f),bx=_[1],aO=_[2],aN=_[3],aa=_[4],$=_[5];else
var
bx=g(d,b),aO=d,aN=c,aa=b+1|0,$=f;if(15<bx+p>>>0){a[6]=$;a[7]=$;return e}if(aN<=aa)var
ab=h(a,aO,aN,aa,$),by=ab[1],aQ=ab[2],aP=ab[3],ad=ab[4],ac=ab[5];else
var
by=g(aO,aa),aQ=aO,aP=aN,ad=aa+1|0,ac=$;if(63<by+p>>>0){a[6]=ac;a[7]=ac;return e}if(aP<=ad)var
af=h(a,aQ,aP,ad,ac),bC=af[1],bB=af[2],bA=af[3],bz=af[4],aR=af[5];else
var
bC=g(aQ,ad),bB=aQ,bA=aP,bz=ad+1|0,aR=ac;if(63<bC+p>>>0){a[6]=aR;a[7]=aR;return e}var
k=bB,j=bA,i=bz,l=aR;continue;case
1:case
2:a6=1;break;default:if(c<=b)var
S=h(a,d,c,b,f),br=S[1],aJ=S[2],aI=S[3],U=S[4],T=S[5];else
var
br=g(d,b),aJ=d,aI=c,U=b+1|0,T=f;if(63<br+p>>>0){a[6]=T;a[7]=T;return e}if(aI<=U)var
V=h(a,aJ,aI,U,T),bs=V[1],aL=V[2],aK=V[3],X=V[4],W=V[5];else
var
bs=g(aJ,U),aL=aJ,aK=aI,X=U+1|0,W=T;if(63<bs+p>>>0){a[6]=W;a[7]=W;return e}if(aK<=X)var
Y=h(a,aL,aK,X,W),bw=Y[1],bv=Y[2],bu=Y[3],bt=Y[4],aM=Y[5];else
var
bw=g(aL,X),bv=aL,bu=aK,bt=X+1|0,aM=W;if(63<bw+p>>>0){a[6]=aM;a[7]=aM;return e}var
k=bv,j=bu,i=bt,l=aM;continue}}else{if(!(bE<=m)){if(c<=b)var
ag=h(a,d,c,b,f),bD=ag[1],aT=ag[2],aS=ag[3],ai=ag[4],ah=ag[5];else
var
bD=g(d,b),aT=d,aS=c,ai=b+1|0,ah=f;if(31<bD+f5>>>0){a[6]=ah;a[7]=ah;return e}if(aS<=ai)var
aj=h(a,aT,aS,ai,ah),bJ=aj[1],bI=aj[2],bH=aj[3],bG=aj[4],aU=aj[5];else
var
bJ=g(aT,ai),bI=aT,bH=aS,bG=ai+1|0,aU=ah;if(63<bJ+p>>>0){a[6]=aU;a[7]=aU;return e}var
k=bI,j=bH,i=bG,l=aU;continue}a6=1}if(a6){if(c<=b)var
H=h(a,d,c,b,f),bf=H[1],aB=H[2],aA=H[3],J=H[4],I=H[5];else
var
bf=g(d,b),aB=d,aA=c,J=b+1|0,I=f;if(63<bf+p>>>0){a[6]=I;a[7]=I;return e}if(aA<=J)var
K=h(a,aB,aA,J,I),bj=K[1],bi=K[2],bh=K[3],bg=K[4],aC=K[5];else
var
bj=g(aB,J),bi=aB,bh=aA,bg=J+1|0,aC=I;if(63<bj+p>>>0){a[6]=aC;a[7]=aC;return e}var
k=bi,j=bh,i=bg,l=aC;continue}}else
if(b9<=m){if(c<=b)var
ak=h(a,d,c,b,f),bN=ak[1],bM=ak[2],bL=ak[3],bK=ak[4],aV=ak[5];else
var
bN=g(d,b),bM=d,bL=c,bK=b+1|0,aV=f;if(63<bN+p>>>0){a[6]=aV;a[7]=aV;return e}var
k=bM,j=bL,i=bK,l=aV;continue}}else{if(34===m)return b2<50?g0(b2+1|0,a,e,d,c,b,f):v(g0,[0,a,e,d,c,b,f]);if(92===m){if(c<=b)var
al=h(a,d,c,b,f),t=al[1],s=al[2],r=al[3],n=al[4],q=al[5];else
var
t=g(d,b),s=d,r=c,n=b+1|0,q=f;var
a7=0;if(48<=t){var
aw=0;if(71<=t){var
bO=t+ro|0;if(25<bO>>>0)aw=1;else
switch(bO){case
25:if(r<=n)var
an=h(a,s,r,n,q),bT=an[1],aY=an[2],aX=an[3],ap=an[4],ao=an[5];else
var
bT=g(s,n),aY=s,aX=r,ap=n+1|0,ao=q;if(z===bT){if(aX<=ap)var
aq=h(a,aY,aX,ap,ao),bX=aq[1],bW=aq[2],bV=aq[3],bU=aq[4],aZ=aq[5];else
var
bX=g(aY,ap),bW=aY,bV=aX,bU=ap+1|0,aZ=ao;var
a4=bX+bo|0,a8=0;if(22<a4>>>0){if(!(5<a4+cW>>>0))a8=1}else
if(6<a4+co>>>0)a8=1;if(a8){var
at=bW,ar=bV,x=bU,a0=aZ;for(;;){if(ar<=x)var
au=h(a,at,ar,x,a0),o=au[1],A=au[2],y=au[3],w=au[4],u=au[5];else
var
o=g(at,x),A=at,y=ar,w=x+1|0,u=a0;var
a2=0;if(95<=o){if(96!==o)if(as<=o){if(E===o){var
k=A,j=y,i=w,l=u;continue a}}else{if(!(96<=o)){if(y<=w)var
av=h(a,A,y,w,u),b1=av[1],b0=av[2],bZ=av[3],bY=av[4],a1=av[5];else
var
b1=g(A,w),b0=A,bZ=y,bY=w+1|0,a1=u;var
a5=b1+bo|0,a9=0;if(22<a5>>>0){if(!(5<a5+cW>>>0))a9=1}else
if(6<a5+co>>>0)a9=1;if(a9){var
at=b0,ar=bZ,x=bY,a0=a1;continue}a[6]=a1;a[7]=a1;return e}a2=1}}else
if(58<=o){if(!(5<o+hI>>>0))a2=1}else
if(48<=o)a2=1;if(a2){var
at=A,ar=y,x=w,a0=u;continue}a[6]=u;a[7]=u;return e}}a[6]=aZ;a[7]=aZ;return e}a[6]=ao;a[7]=ao;return e;case
0:case
18:case
22:case
24:a7=1;aw=1;break;case
5:case
6:case
7:case
8:case
9:case
10:break;default:aw=1}}else
if(!(6<t+ae>>>0))aw=1;if(!aw){if(r<=n)var
am=h(a,s,r,n,q),bS=am[1],bR=am[2],bQ=am[3],bP=am[4],aW=am[5];else
var
bS=g(s,n),bR=s,bQ=r,bP=n+1|0,aW=q;var
a3=bS+bo|0,a_=0;if(22<a3>>>0){if(!(5<a3+cW>>>0))a_=1}else
if(6<a3+co>>>0)a_=1;if(a_){var
k=bR,j=bQ,i=bP,l=aW;continue}a[6]=aW;a[7]=aW;return e}}else
if(34===t||39===t)a7=1;if(a7){var
k=s,j=r,i=n,l=q;continue}a[6]=q;a[7]=q;return e}if(32<=m){var
k=d,j=c,i=b,l=f;continue}}a[6]=f;a[7]=f;return e}}function
o(a,b,c,d,e,f){return am(g0(0,a,b,c,d,e,f))}function
n(a,b,c,d,e,f){return am(gZ(0,a,b,c,d,e,f))}function
qM(a,G,C,B,A,F){var
k=C,j=B,c=A;for(;;){if(j<=c)var
l=h(a,k,j,c,c),d=l[1],f=l[2],e=l[3],b=l[4],p=l[5];else
var
d=g(k,c),f=k,e=j,b=c+1|0,p=c;var
s=0;if(z<=d){if(aK!==d&&D!==d)s=1}else
if(60<=d){var
y=d+S|0;if(!(4<y>>>0))switch(y){case
4:if(e<=b)var
q=h(a,f,e,b,b),i=q[1],w=q[2],v=q[3],u=q[4],r=q[5];else
var
i=g(f,b),w=f,v=e,u=b+1|0,r=b;var
t=0;if(94<=i){if(E<=i){if(D!==i)t=1}else
if(z===i)t=1}else{var
x=i+m|0;if(57<x>>>0){if(59!==x)t=1}else
if(!(27<=x))switch(x){case
1:return n(a,20,w,v,u,r);case
7:case
8:case
11:case
26:t=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
k=w,j=v,c=u;continue}}return t?(a[6]=r,a[7]=r,20):o(a,20,w,v,u,r);case
0:case
2:s=1;break}}else
if(33<=d)switch(d+m|0){case
1:return n(a,4,f,e,b,p);case
7:case
8:case
11:case
26:s=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
k=f,j=e,c=b;continue}else
s=1;return s?(a[6]=p,a[7]=p,4):o(a,4,f,e,b,p)}}function
dh(a,B,y,x,e,A){if(x<=e)var
l=h(a,y,x,e,e),i=l[1],d=l[2],c=l[3],b=l[4],f=l[5];else
var
i=g(y,e),d=y,c=x,b=e+1|0,f=e;var
q=0;if(94<=i){if(E<=i){if(D!==i)q=1}else
if(z===i)q=1}else{var
s=i+m|0;if(57<s>>>0){if(59!==s)q=1}else
if(!(27<=s))switch(s){case
1:return n(a,20,d,c,b,f);case
10:case
12:if(c<=b)var
p=h(a,d,c,b,b),k=p[1],v=p[2],u=p[3],t=p[4],j=p[5];else
var
k=g(d,b),v=d,u=c,t=b+1|0,j=b;var
r=0;if(94<=k){if(E<=k){if(D!==k)r=1}else
if(z===k)r=1}else{var
w=k+m|0;if(57<w>>>0){if(59!==w)r=1}else
if(!(27<=w))switch(w){case
1:return n(a,20,v,u,t,j);case
7:case
8:case
11:case
26:r=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:return qM(a,20,v,u,t,j)}}return r?(a[6]=j,a[7]=j,20):o(a,20,v,u,t,j);case
7:case
8:case
11:case
26:q=1;break;case
0:case
2:case
3:case
4:case
5:case
6:case
9:case
13:case
14:case
25:break;default:return qM(a,20,d,c,b,f)}}return q?(a[6]=f,a[7]=f,20):o(a,20,d,c,b,f)}function
f_(a,O,M,L,k,N){if(L<=k)var
s=h(a,M,L,k,k),b=s[1],v=s[2],u=s[3],t=s[4],l=s[5];else
var
b=g(M,k),v=M,u=L,t=k+1|0,l=k;var
r=0;if(cU<=b){if(E<=b){if(D===b)r=1}else
if(z!==b)r=1}else{var
j=0;if(69!==b)if(60<=b)if(91<=b)switch(b+S|0){case
10:break;case
0:case
2:j=1;break;default:r=1;j=1}else{r=1;j=1}else
if(33<=b)switch(b+m|0){case
1:return n(a,4,v,u,t,l);case
7:case
8:case
11:case
26:j=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
x=v,w=u,d=t;for(;;){if(w<=d)var
y=h(a,x,w,d,d),i=y[1],f=y[2],e=y[3],c=y[4],p=y[5];else
var
i=g(x,d),f=x,e=w,c=d+1|0,p=d;var
K=0;if(60<=i){var
C=0;if(91<=i)if(Z<=i)C=1;else
switch(i+S|0){case
4:if(e<=c)var
A=h(a,f,e,c,c),q=A[1],I=A[2],H=A[3],G=A[4],B=A[5];else
var
q=g(f,c),I=f,H=e,G=c+1|0,B=c;var
F=0;if(94<=q){if(E<=q){if(D!==q)F=1}else
if(z===q)F=1}else{var
J=q+m|0;if(57<J>>>0){if(59!==J)F=1}else
if(!(27<=J))switch(J){case
1:return n(a,20,I,H,G,B);case
7:case
8:case
11:case
26:F=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
x=I,w=H,d=G;continue}}return F?(a[6]=B,a[7]=B,20):o(a,20,I,H,G,B);case
10:break;case
0:case
2:case
32:case
34:C=1;break;default:K=1;C=1}else
if(69!==i){K=1;C=1}if(!C)return dh(a,4,f,e,c,p)}else
if(33<=i)switch(i+m|0){case
1:return n(a,4,f,e,c,p);case
7:case
8:case
11:case
26:break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
x=f,w=e,d=c;continue;default:K=1}return K?o(a,4,f,e,c,p):(a[6]=p,a[7]=p,4)}default:r=1;j=1}else
j=1;if(!j)return dh(a,4,v,u,t,l)}return r?o(a,4,v,u,t,l):(a[6]=l,a[7]=l,4)}function
gY(t,a,z,x,w,u,y){var
l=x,k=w,f=u;for(;;){if(k<=f)var
j=h(a,l,k,f,f),q=j[1],e=j[2],d=j[3],c=j[4],b=j[5];else
var
q=g(l,f),e=l,d=k,c=f+1|0,b=f;var
p=q+m|0,i=0;if(57<p>>>0){var
r=p+ae|0;if(!(35<r>>>0))switch(r){case
4:var
s=2;return t<50?gX(t+1|0,a,s,e,d,c,b):v(gX,[0,a,s,e,d,c,b]);case
10:i=2;break;case
0:case
2:case
32:case
34:break;default:i=1}}else
if(37<=p)i=1;else
switch(p){case
1:return n(a,2,e,d,c,b);case
13:return f_(a,2,e,d,c,b);case
36:i=2;break;case
7:case
8:case
11:case
26:break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
l=e,k=d,f=c;continue;default:i=1}switch(i){case
0:a[6]=b;a[7]=b;return 2;case
2:return dh(a,2,e,d,c,b);default:return o(a,2,e,d,c,b)}}}function
gX(s,a,u,q,p,c,t){if(p<=c)var
e=h(a,q,p,c,c),d=e[1],j=e[2],i=e[3],f=e[4],b=e[5];else
var
d=g(q,c),j=q,i=p,f=c+1|0,b=c;var
k=0;if(94<=d){if(E<=d){if(D!==d)k=1}else
if(z===d)k=1}else{var
l=d+m|0;if(57<l>>>0){if(59!==l)k=1}else
if(!(27<=l))switch(l){case
1:return n(a,20,j,i,f,b);case
7:case
8:case
11:case
26:k=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
r=20;return s<50?gY(s+1|0,a,r,j,i,f,b):v(gY,[0,a,r,j,i,f,b])}}return k?(a[6]=b,a[7]=b,20):o(a,20,j,i,f,b)}function
qJ(a,b,c,d,e,f){return am(gY(0,a,b,c,d,e,f))}function
JV(a,b,c,d,e,f){return am(gX(0,a,b,c,d,e,f))}function
qL(a,G,C,B,A,F){var
k=C,j=B,c=A;for(;;){if(j<=c)var
l=h(a,k,j,c,c),d=l[1],f=l[2],e=l[3],b=l[4],p=l[5];else
var
d=g(k,c),f=k,e=j,b=c+1|0,p=c;var
s=0;if(z<=d){if(aK!==d&&D!==d)s=1}else
if(60<=d){var
y=d+S|0;if(!(4<y>>>0))switch(y){case
4:if(e<=b)var
q=h(a,f,e,b,b),i=q[1],w=q[2],v=q[3],u=q[4],r=q[5];else
var
i=g(f,b),w=f,v=e,u=b+1|0,r=b;var
t=0;if(94<=i){if(E<=i){if(D!==i)t=1}else
if(z===i)t=1}else{var
x=i+m|0;if(57<x>>>0){if(59!==x)t=1}else
if(!(27<=x))switch(x){case
1:return n(a,20,w,v,u,r);case
7:case
8:case
11:case
26:t=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
k=w,j=v,c=u;continue}}return t?(a[6]=r,a[7]=r,20):o(a,20,w,v,u,r);case
0:case
2:s=1;break}}else
if(33<=d)switch(d+m|0){case
1:return n(a,4,f,e,b,p);case
7:case
8:case
11:case
26:s=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
k=f,j=e,c=b;continue}else
s=1;return s?(a[6]=p,a[7]=p,4):o(a,4,f,e,b,p)}}function
eL(a,B,y,x,e,A){if(x<=e)var
l=h(a,y,x,e,e),i=l[1],d=l[2],c=l[3],b=l[4],f=l[5];else
var
i=g(y,e),d=y,c=x,b=e+1|0,f=e;var
q=0;if(94<=i){if(E<=i){if(D!==i)q=1}else
if(z===i)q=1}else{var
s=i+m|0;if(57<s>>>0){if(59!==s)q=1}else
if(!(27<=s))switch(s){case
1:return n(a,20,d,c,b,f);case
10:case
12:if(c<=b)var
p=h(a,d,c,b,b),k=p[1],v=p[2],u=p[3],t=p[4],j=p[5];else
var
k=g(d,b),v=d,u=c,t=b+1|0,j=b;var
r=0;if(94<=k){if(E<=k){if(D!==k)r=1}else
if(z===k)r=1}else{var
w=k+m|0;if(57<w>>>0){if(59!==w)r=1}else
if(!(27<=w))switch(w){case
1:return n(a,20,v,u,t,j);case
7:case
8:case
11:case
26:r=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:return qL(a,20,v,u,t,j)}}return r?(a[6]=j,a[7]=j,20):o(a,20,v,u,t,j);case
7:case
8:case
11:case
26:q=1;break;case
0:case
2:case
3:case
4:case
5:case
6:case
9:case
13:case
14:case
25:break;default:return qL(a,20,d,c,b,f)}}return q?(a[6]=f,a[7]=f,20):o(a,20,d,c,b,f)}function
JX(a,F,B,A,y,C){var
r=B,q=A,d=y;for(;;){if(q<=d)var
s=h(a,r,q,d,d),i=s[1],f=s[2],e=s[3],b=s[4],k=s[5];else
var
i=g(r,d),f=r,e=q,b=d+1|0,k=d;var
j=0;if(65<=i)if(80<=i){if(!(Z<=i))switch(i-80|0){case
15:if(e<=b)var
t=h(a,f,e,b,b),c=t[1],x=t[2],w=t[3],v=t[4],u=t[5];else
var
c=g(f,b),x=f,w=e,v=b+1|0,u=b;var
l=0;if(as<=c){if(E<=c){if(D===c)l=1}else
if(z!==c)l=1}else
if(33<=c){var
p=0;if(71<=c)if(91<=c)switch(c+S|0){case
0:case
2:p=1;break;case
1:case
3:case
4:case
5:l=1;p=1;break}else{l=1;p=1}else
if(!(65<=c))switch(c+m|0){case
1:return n(a,20,x,w,v,u);case
7:case
8:case
11:case
26:p=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:l=1;p=1}if(!p){var
r=x,q=w,d=v;continue}}return l?o(a,20,x,w,v,u):(a[6]=u,a[7]=u,20);case
0:case
32:return eL(a,4,f,e,b,k);case
11:case
13:case
43:case
45:break;case
17:case
18:case
19:case
20:case
21:case
22:j=1;break;default:j=2}}else
if(71<=i)j=2;else
j=1;else
if(33<=i)switch(i+m|0){case
1:return n(a,4,f,e,b,k);case
7:case
8:case
11:case
26:break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:j=1;break;default:j=2}switch(j){case
0:a[6]=k;a[7]=k;return 4;case
1:var
r=f,q=e,d=b;continue;default:return o(a,4,f,e,b,k)}}}function
qK(c,s,q,p,e,r){if(p<=e)var
i=h(c,q,p,e,e),a=i[1],l=i[2],k=i[3],j=i[4],d=i[5];else
var
a=g(q,e),l=q,k=p,j=e+1|0,d=e;var
b=0;if(80<=a){var
f=0;if(91<=a)if(Z<=a)f=1;else
switch(a+S|0){case
21:break;case
0:case
2:case
32:case
34:f=1;break;case
6:case
7:case
8:case
9:case
10:case
11:b=2;f=1;break;default:b=1;f=1}else
if(81<=a){b=1;f=1}if(!f)return eL(c,4,l,k,j,d)}else
if(65<=a)if(71<=a)b=1;else
b=2;else
if(33<=a)switch(a+m|0){case
1:return n(c,4,l,k,j,d);case
7:case
8:case
11:case
26:break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:b=2;break;default:b=1}switch(b){case
0:c[6]=d;c[7]=d;return 4;case
2:return JX(c,4,l,k,j,d);default:return o(c,4,l,k,j,d)}}function
JW(a,H,F,C,B,G){var
q=F,p=C,f=B;for(;;){if(p<=f)var
r=h(a,q,p,f,f),y=r[1],e=r[2],d=r[3],b=r[4],i=r[5];else
var
y=g(q,f),e=q,d=p,b=f+1|0,i=f;var
u=y+m|0,j=0;if(46<u>>>0){var
A=u+rO|0;if(!(46<A>>>0))switch(A){case
15:if(d<=b)var
s=h(a,e,d,b,b),c=s[1],x=s[2],w=s[3],v=s[4],t=s[5];else
var
c=g(e,b),x=e,w=d,v=b+1|0,t=b;var
k=0;if(as<=c){if(E<=c){if(D===c)k=1}else
if(z!==c)k=1}else
if(33<=c){var
l=0;if(71<=c)if(91<=c)switch(c+S|0){case
0:case
2:l=1;break;case
1:case
3:case
4:case
5:k=1;l=1;break}else{k=1;l=1}else
if(!(65<=c))switch(c+m|0){case
1:return n(a,20,x,w,v,t);case
7:case
8:case
11:case
26:l=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:k=1;l=1}if(!l){var
q=x,p=w,f=v;continue}}return k?o(a,20,x,w,v,t):(a[6]=t,a[7]=t,20);case
0:case
32:return eL(a,2,e,d,b,i);case
11:case
13:case
43:case
45:break;case
17:case
18:case
19:case
20:case
21:case
22:j=2;break;default:j=1}}else
if(38<=u)j=1;else
switch(u){case
1:return n(a,2,e,d,b,i);case
13:return qK(a,2,e,d,b,i);case
7:case
8:case
11:case
26:break;case
0:case
2:case
3:case
4:case
5:case
6:case
9:case
10:case
12:case
14:case
25:case
27:case
28:case
29:case
30:case
31:j=1;break;default:j=2}switch(j){case
0:a[6]=i;a[7]=i;return 2;case
2:var
q=e,p=d,f=b;continue;default:return o(a,2,e,d,b,i)}}}function
gW(t,a,z,x,w,u,y){var
l=x,k=w,f=u;for(;;){if(k<=f)var
j=h(a,l,k,f,f),q=j[1],e=j[2],d=j[3],c=j[4],b=j[5];else
var
q=g(l,f),e=l,d=k,c=f+1|0,b=f;var
p=q+m|0,i=0;if(57<p>>>0){var
r=p+ae|0;if(!(35<r>>>0))switch(r){case
4:var
s=3;return t<50?gV(t+1|0,a,s,e,d,c,b):v(gV,[0,a,s,e,d,c,b]);case
10:i=2;break;case
0:case
2:case
32:case
34:break;default:i=1}}else
if(37<=p)i=1;else
switch(p){case
1:return n(a,3,e,d,c,b);case
13:return f_(a,3,e,d,c,b);case
36:i=2;break;case
7:case
8:case
11:case
26:break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
l=e,k=d,f=c;continue;default:i=1}switch(i){case
0:a[6]=b;a[7]=b;return 3;case
2:return dh(a,3,e,d,c,b);default:return o(a,3,e,d,c,b)}}}function
gV(s,a,u,q,p,c,t){if(p<=c)var
e=h(a,q,p,c,c),d=e[1],j=e[2],i=e[3],f=e[4],b=e[5];else
var
d=g(q,c),j=q,i=p,f=c+1|0,b=c;var
k=0;if(94<=d){if(E<=d){if(D!==d)k=1}else
if(z===d)k=1}else{var
l=d+m|0;if(57<l>>>0){if(59!==l)k=1}else
if(!(27<=l))switch(l){case
1:return n(a,20,j,i,f,b);case
7:case
8:case
11:case
26:k=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
r=20;return s<50?gW(s+1|0,a,r,j,i,f,b):v(gW,[0,a,r,j,i,f,b])}}return k?(a[6]=b,a[7]=b,20):o(a,20,j,i,f,b)}function
qN(a,b,c,d,e,f){return am(gW(0,a,b,c,d,e,f))}function
JY(a,b,c,d,e,f){return am(gV(0,a,b,c,d,e,f))}function
JZ(a,H,F,C,B,G){var
q=F,p=C,f=B;for(;;){if(p<=f)var
r=h(a,q,p,f,f),y=r[1],e=r[2],d=r[3],b=r[4],i=r[5];else
var
y=g(q,f),e=q,d=p,b=f+1|0,i=f;var
u=y+m|0,j=0;if(46<u>>>0){var
A=u+rO|0;if(!(46<A>>>0))switch(A){case
15:if(d<=b)var
s=h(a,e,d,b,b),c=s[1],x=s[2],w=s[3],v=s[4],t=s[5];else
var
c=g(e,b),x=e,w=d,v=b+1|0,t=b;var
k=0;if(as<=c){if(E<=c){if(D===c)k=1}else
if(z!==c)k=1}else
if(33<=c){var
l=0;if(71<=c)if(91<=c)switch(c+S|0){case
0:case
2:l=1;break;case
1:case
3:case
4:case
5:k=1;l=1;break}else{k=1;l=1}else
if(!(65<=c))switch(c+m|0){case
1:return n(a,20,x,w,v,t);case
7:case
8:case
11:case
26:l=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:k=1;l=1}if(!l){var
q=x,p=w,f=v;continue}}return k?o(a,20,x,w,v,t):(a[6]=t,a[7]=t,20);case
0:case
32:return eL(a,3,e,d,b,i);case
11:case
13:case
43:case
45:break;case
17:case
18:case
19:case
20:case
21:case
22:j=2;break;default:j=1}}else
if(38<=u)j=1;else
switch(u){case
1:return n(a,3,e,d,b,i);case
13:return qK(a,3,e,d,b,i);case
7:case
8:case
11:case
26:break;case
0:case
2:case
3:case
4:case
5:case
6:case
9:case
10:case
12:case
14:case
25:case
27:case
28:case
29:case
30:case
31:j=1;break;default:j=2}switch(j){case
0:a[6]=i;a[7]=i;return 3;case
2:var
q=e,p=d,f=b;continue;default:return o(a,3,e,d,b,i)}}}function
ak(d,w,u,t,s,v){var
j=u,i=t,b=s;for(;;){if(i<=b)var
e=h(d,j,i,b,b),a=e[1],p=e[2],l=e[3],k=e[4],f=e[5];else
var
a=g(j,b),p=j,l=i,k=b+1|0,f=b;var
q=0;if(z<=a){if(aK===a||D===a)q=1}else{var
c=0;if(65<=a){var
r=a+S|0;if(!(5<r>>>0))switch(r){case
4:break;case
0:case
2:c=1;break;default:q=1;c=1}}else
if(33<=a)switch(a+m|0){case
1:return n(d,9,p,l,k,f);case
7:case
8:case
11:case
26:c=1;break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:break;default:q=1;c=1}else
c=1;if(!c){var
j=p,i=l,b=k;continue}}return q?o(d,9,p,l,k,f):(d[6]=f,d[7]=f,9)}}function
J0(a,F,D,C,B,E){var
p=D,l=C,c=B;for(;;){if(l<=c)var
q=h(a,p,l,c,c),x=q[1],e=q[2],d=q[3],b=q[4],j=q[5];else
var
x=g(p,c),e=p,d=l,b=c+1|0,j=c;var
v=x+m|0,f=0;if(57<v>>>0){var
y=v+ae|0;if(!(35<y>>>0))switch(y){case
4:if(d<=b)var
r=h(a,e,d,b,b),z=r[1],u=r[2],t=r[3],s=r[4],k=r[5];else
var
z=g(e,b),u=e,t=d,s=b+1|0,k=b;var
w=z+m|0,i=0;if(57<w>>>0){var
A=w+ae|0;if(!(35<A>>>0))switch(A){case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:i=3;break;case
6:case
7:case
8:case
9:case
10:case
11:i=2;break;default:i=1}}else
if(38<=w)i=1;else
switch(w){case
1:return n(a,9,u,t,s,k);case
13:case
25:i=1;break;case
7:case
8:case
11:case
26:break;case
0:case
2:case
3:case
4:case
5:case
6:case
9:case
10:case
12:case
14:case
27:case
28:case
29:case
30:case
31:i=3;break;default:i=2}switch(i){case
0:a[6]=k;a[7]=k;return 9;case
2:var
p=u,l=t,c=s;continue;case
1:return ak(a,9,u,t,s,k);default:return o(a,9,u,t,s,k)}case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:f=3;break;case
6:case
7:case
8:case
9:case
10:case
11:f=2;break;default:f=1}}else
if(38<=v)f=1;else
switch(v){case
1:return n(a,4,e,d,b,j);case
13:case
25:f=1;break;case
7:case
8:case
11:case
26:break;case
0:case
2:case
3:case
4:case
5:case
6:case
9:case
10:case
12:case
14:case
27:case
28:case
29:case
30:case
31:f=3;break;default:f=2}switch(f){case
0:a[6]=j;a[7]=j;return 4;case
2:var
p=e,l=d,c=b;continue;case
1:return ak(a,4,e,d,b,j);default:return o(a,4,e,d,b,j)}}}function
hZ(c,s,j,i,b,r){if(i<=b)var
d=h(c,j,i,b,b),a=d[1],p=d[2],l=d[3],k=d[4],e=d[5];else
var
a=g(j,b),p=j,l=i,k=b+1|0,e=b;var
f=0;if(93<=a){var
q=a+ea|0;if(30<q>>>0){if(32===q)f=1}else
if(29!==q)f=1}else
if(59!==a)if(45<=a){if(91!==a)f=1}else
if(33<=a)switch(a+m|0){case
1:return n(c,5,p,l,k,e);case
7:case
8:case
11:break;default:f=1}return f?o(c,5,p,l,k,e):(c[6]=e,c[7]=e,5)}function
gU(e,a,aI,aH,aG,aF,aE){var
ai=aI,N=aH,M=aG,u=aF,X=aE;for(;;){if(M<=u)var
w=h(a,N,M,u,X),n=w[1],l=w[2],k=w[3],d=w[4],O=w[5];else
var
n=g(N,u),l=N,k=M,d=u+1|0,O=X;var
t=0;if(58<=n){if(92<=n){if(b5===n){a[6]=O;a[7]=O;return ai}if(!(d$<=n))switch(n+ro|0){case
25:if(k<=d)var
B=h(a,l,k,d,d),av=B[1],Q=B[2],P=B[3],D=B[4],C=B[5];else
var
av=g(l,d),Q=l,P=k,D=d+1|0,C=d;if(z===av){if(P<=D)var
F=h(a,Q,P,D,C),az=F[1],ay=F[2],ax=F[3],aw=F[4],R=F[5];else
var
az=g(Q,D),ay=Q,ax=P,aw=D+1|0,R=C;var
ac=az+bo|0,af=0;if(22<ac>>>0){if(!(5<ac+cW>>>0))af=1}else
if(6<ac+co>>>0)af=1;if(af){var
H=ay,G=ax,s=aw,T=R,S=8;for(;;){if(G<=s)var
I=h(a,H,G,s,T),m=I[1],r=I[2],q=I[3],p=I[4],o=I[5];else
var
m=g(H,s),r=H,q=G,p=s+1|0,o=T;var
V=0;if(95<=m){if(96!==m)if(as<=m){if(E===m)return e<50?ao(e+1|0,a,S,r,q,p,o):v(ao,[0,a,S,r,q,p,o])}else{if(!(96<=m)){if(q<=p)var
J=h(a,r,q,p,o),aD=J[1],aC=J[2],aB=J[3],aA=J[4],U=J[5];else
var
aD=g(r,p),aC=r,aB=q,aA=p+1|0,U=o;var
ae=aD+bo|0,ag=0;if(22<ae>>>0){if(!(5<ae+cW>>>0))ag=1}else
if(6<ae+co>>>0)ag=1;if(ag){var
H=aC,G=aB,s=aA,T=U;continue}a[6]=U;a[7]=U;return S}V=1}}else
if(58<=m){if(!(5<m+hI>>>0))V=1}else
if(48<=m)V=1;if(V){var
H=r,G=q,s=p,T=o;continue}a[6]=o;a[7]=o;return S}}a[6]=R;a[7]=R;return 8}a[6]=C;a[7]=C;return 8;case
0:case
18:case
22:case
24:t=2;break;case
5:case
6:case
7:case
8:case
9:case
10:t=1;break}}else
if(!(5<n+hI>>>0))t=1}else{var
ad=n+rj|0;if(5<ad>>>0){if(14<=ad)t=1}else
if(3<ad-1>>>0)t=2}switch(t){case
0:a[6]=d;a[7]=O;return 8;case
1:if(k<=d)var
y=h(a,l,k,d,d),at=y[1],aa=y[2],$=y[3],_=y[4],A=y[5];else
var
at=g(l,d),aa=l,$=k,_=d+1|0,A=d;var
ab=at+bo|0,ah=0;if(22<ab>>>0){if(!(5<ab+cW>>>0))ah=1}else
if(6<ab+co>>>0)ah=1;if(ah){var
au=8;return e<50?ao(e+1|0,a,au,aa,$,_,A):v(ao,[0,a,au,aa,$,_,A])}a[6]=A;a[7]=A;return 8;default:if(k<=d)var
x=h(a,l,k,d,d),j=x[1],i=x[2],f=x[3],c=x[4],b=x[5];else
var
j=g(l,d),i=l,f=k,c=d+1|0,b=d;var
K=0;if(93<=j){var
L=0;if(a$<=j){var
W=0;if(bF<=j)if(de<=j){L=1;W=1}else
switch(j+dd|0){case
0:var
ak=8;return e<50?dE(e+1|0,a,ak,i,f,c,b):v(dE,[0,a,ak,i,f,c,b]);case
3:var
am=8;return e<50?dG(e+1|0,a,am,i,f,c,b):v(dG,[0,a,am,i,f,c,b]);case
7:var
ap=8;return e<50?dH(e+1|0,a,ap,i,f,c,b):v(dH,[0,a,ap,i,f,c,b]);case
19:K=1;L=1;W=1;break;case
1:case
2:break;case
4:case
5:case
6:var
an=8;return e<50?dI(e+1|0,a,an,i,f,c,b):v(dI,[0,a,an,i,f,c,b]);default:W=1}else
if(!(bE<=j)){var
aq=8;return e<50?dD(e+1|0,a,aq,i,f,c,b):v(dD,[0,a,aq,i,f,c,b])}if(!W){var
al=8;return e<50?dF(e+1|0,a,al,i,f,c,b):v(dF,[0,a,al,i,f,c,b])}}else
if(Y<=j){if(b9<=j){var
ar=8;return e<50?dC(e+1|0,a,ar,i,f,c,b):v(dC,[0,a,ar,i,f,c,b])}}else
if(Z<=j){K=2;L=1}else
L=1;if(!L){a[6]=b;a[7]=b;return 8}}else
if(32<=j){if(34===j)return hZ(a,8,i,f,c,b);if(92<=j){var
ai=8,N=i,M=f,u=c,X=b;continue}}else
if(10===j)K=1;else
if(0<=j)K=2;switch(K){case
0:var
aj=8;return e<50?ao(e+1|0,a,aj,i,f,c,b):v(ao,[0,a,aj,i,f,c,b]);case
1:a[6]=c;a[7]=b;return 6;default:a[6]=c;a[7]=b;return 7}}}}function
dI(C,a,b,t,s,m,y){if(s<=m)var
c=h(a,t,s,m,y),z=c[1],o=c[2],n=c[3],e=c[4],d=c[5];else
var
z=g(t,m),o=t,n=s,e=m+1|0,d=y;if(63<z+p>>>0){a[6]=d;a[7]=d;return b}if(n<=e)var
f=h(a,o,n,e,d),A=f[1],r=f[2],q=f[3],j=f[4],i=f[5];else
var
A=g(o,e),r=o,q=n,j=e+1|0,i=d;if(63<A+p>>>0){a[6]=i;a[7]=i;return b}if(q<=j)var
k=h(a,r,q,j,i),B=k[1],x=k[2],w=k[3],u=k[4],l=k[5];else
var
B=g(r,j),x=r,w=q,u=j+1|0,l=i;return 63<B+p>>>0?(a[6]=l,a[7]=l,b):C<50?ao(C+1|0,a,b,x,w,u,l):v(ao,[0,a,b,x,w,u,l])}function
dH(C,a,b,t,s,m,y){if(s<=m)var
c=h(a,t,s,m,y),z=c[1],o=c[2],n=c[3],e=c[4],d=c[5];else
var
z=g(t,m),o=t,n=s,e=m+1|0,d=y;if(15<z+p>>>0){a[6]=d;a[7]=d;return b}if(n<=e)var
f=h(a,o,n,e,d),A=f[1],r=f[2],q=f[3],j=f[4],i=f[5];else
var
A=g(o,e),r=o,q=n,j=e+1|0,i=d;if(63<A+p>>>0){a[6]=i;a[7]=i;return b}if(q<=j)var
k=h(a,r,q,j,i),B=k[1],x=k[2],w=k[3],u=k[4],l=k[5];else
var
B=g(r,j),x=r,w=q,u=j+1|0,l=i;return 63<B+p>>>0?(a[6]=l,a[7]=l,b):C<50?ao(C+1|0,a,b,x,w,u,l):v(ao,[0,a,b,x,w,u,l])}function
dG(C,a,b,t,s,m,y){if(s<=m)var
c=h(a,t,s,m,y),z=c[1],o=c[2],n=c[3],e=c[4],d=c[5];else
var
z=g(t,m),o=t,n=s,e=m+1|0,d=y;if(47<z+f4>>>0){a[6]=d;a[7]=d;return b}if(n<=e)var
f=h(a,o,n,e,d),A=f[1],r=f[2],q=f[3],j=f[4],i=f[5];else
var
A=g(o,e),r=o,q=n,j=e+1|0,i=d;if(63<A+p>>>0){a[6]=i;a[7]=i;return b}if(q<=j)var
k=h(a,r,q,j,i),B=k[1],x=k[2],w=k[3],u=k[4],l=k[5];else
var
B=g(r,j),x=r,w=q,u=j+1|0,l=i;return 63<B+p>>>0?(a[6]=l,a[7]=l,b):C<50?ao(C+1|0,a,b,x,w,u,l):v(ao,[0,a,b,x,w,u,l])}function
dF(w,a,j,n,m,i,s){if(m<=i)var
b=h(a,n,m,i,s),t=b[1],l=b[2],k=b[3],d=b[4],c=b[5];else
var
t=g(n,i),l=n,k=m,d=i+1|0,c=s;if(63<t+p>>>0){a[6]=c;a[7]=c;return j}if(k<=d)var
e=h(a,l,k,d,c),u=e[1],r=e[2],q=e[3],o=e[4],f=e[5];else
var
u=g(l,d),r=l,q=k,o=d+1|0,f=c;return 63<u+p>>>0?(a[6]=f,a[7]=f,j):w<50?ao(w+1|0,a,j,r,q,o,f):v(ao,[0,a,j,r,q,o,f])}function
dE(w,a,j,n,m,i,s){if(m<=i)var
b=h(a,n,m,i,s),t=b[1],l=b[2],k=b[3],d=b[4],c=b[5];else
var
t=g(n,i),l=n,k=m,d=i+1|0,c=s;if(31<t+p>>>0){a[6]=c;a[7]=c;return j}if(k<=d)var
e=h(a,l,k,d,c),u=e[1],r=e[2],q=e[3],o=e[4],f=e[5];else
var
u=g(l,d),r=l,q=k,o=d+1|0,f=c;return 63<u+p>>>0?(a[6]=f,a[7]=f,j):w<50?ao(w+1|0,a,j,r,q,o,f):v(ao,[0,a,j,r,q,o,f])}function
dD(w,a,j,n,m,i,s){if(m<=i)var
b=h(a,n,m,i,s),t=b[1],l=b[2],k=b[3],d=b[4],c=b[5];else
var
t=g(n,i),l=n,k=m,d=i+1|0,c=s;if(31<t+f5>>>0){a[6]=c;a[7]=c;return j}if(k<=d)var
e=h(a,l,k,d,c),u=e[1],r=e[2],q=e[3],o=e[4],f=e[5];else
var
u=g(l,d),r=l,q=k,o=d+1|0,f=c;return 63<u+p>>>0?(a[6]=f,a[7]=f,j):w<50?ao(w+1|0,a,j,r,q,o,f):v(ao,[0,a,j,r,q,o,f])}function
dC(o,a,i,f,e,d,m){if(e<=d)var
b=h(a,f,e,d,m),n=b[1],l=b[2],k=b[3],j=b[4],c=b[5];else
var
n=g(f,d),l=f,k=e,j=d+1|0,c=m;return 63<n+p>>>0?(a[6]=c,a[7]=c,i):o<50?ao(o+1|0,a,i,l,k,j,c):v(ao,[0,a,i,l,k,j,c])}function
ao(i,a,f,w,u,t,s){var
p=w,o=u,k=t,r=s;for(;;){if(o<=k)var
l=h(a,p,o,k,r),j=l[1],e=l[2],d=l[3],c=l[4],b=l[5];else
var
j=g(p,k),e=p,d=o,c=k+1|0,b=r;var
m=0;if(93<=j){var
n=0;if(a$<=j){var
q=0;if(bF<=j)if(de<=j){n=1;q=1}else
switch(j+dd|0){case
0:return i<50?dE(i+1|0,a,f,e,d,c,b):v(dE,[0,a,f,e,d,c,b]);case
3:return i<50?dG(i+1|0,a,f,e,d,c,b):v(dG,[0,a,f,e,d,c,b]);case
7:return i<50?dH(i+1|0,a,f,e,d,c,b):v(dH,[0,a,f,e,d,c,b]);case
19:m=1;n=1;q=1;break;case
1:case
2:break;case
4:case
5:case
6:return i<50?dI(i+1|0,a,f,e,d,c,b):v(dI,[0,a,f,e,d,c,b]);default:q=1}else
if(!(bE<=j))return i<50?dD(i+1|0,a,f,e,d,c,b):v(dD,[0,a,f,e,d,c,b]);if(!q)return i<50?dF(i+1|0,a,f,e,d,c,b):v(dF,[0,a,f,e,d,c,b])}else
if(Y<=j){if(b9<=j)return i<50?dC(i+1|0,a,f,e,d,c,b):v(dC,[0,a,f,e,d,c,b])}else
if(Z<=j){m=2;n=1}else
n=1;if(!n){a[6]=b;a[7]=b;return f}}else
if(32<=j){if(34===j)return hZ(a,f,e,d,c,b);if(92<=j)return i<50?gU(i+1|0,a,f,e,d,c,b):v(gU,[0,a,f,e,d,c,b])}else
if(10===j)m=1;else
if(0<=j)m=2;switch(m){case
0:var
p=e,o=d,k=c,r=b;continue;case
1:a[6]=c;a[7]=b;return 6;default:a[6]=c;a[7]=b;return 7}}}function
J1(a,b,c,d,e,f){return am(gU(0,a,b,c,d,e,f))}function
J2(a,b,c,d,e,f){return am(dI(0,a,b,c,d,e,f))}function
J3(a,b,c,d,e,f){return am(dH(0,a,b,c,d,e,f))}function
J4(a,b,c,d,e,f){return am(dG(0,a,b,c,d,e,f))}function
J5(a,b,c,d,e,f){return am(dF(0,a,b,c,d,e,f))}function
J6(a,b,c,d,e,f){return am(dE(0,a,b,c,d,e,f))}function
J7(a,b,c,d,e,f){return am(dD(0,a,b,c,d,e,f))}function
J8(a,b,c,d,e,f){return am(dC(0,a,b,c,d,e,f))}function
J9(a,b,c,d,e,f){return am(ao(0,a,b,c,d,e,f))}function
gT(s,b,y,w,u,t,x){var
p=w,l=u,c=t;for(;;){if(l<=c)var
j=h(b,p,l,c,c),a=j[1],i=j[2],f=j[3],e=j[4],d=j[5];else
var
a=g(p,c),i=p,f=l,e=c+1|0,d=c;var
k=0;if(z<=a){if(aK!==a&&D!==a)k=1}else
if(60<=a){var
q=a+S|0;if(!(4<q>>>0))switch(q){case
4:var
r=10;return s<50?gS(s+1|0,b,r,i,f,e,d):v(gS,[0,b,r,i,f,e,d]);case
0:case
2:k=1;break}}else
if(33<=a)switch(a+m|0){case
1:return n(b,10,i,f,e,d);case
7:case
8:case
11:case
26:k=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
p=i,l=f,c=e;continue}else
k=1;return k?(b[6]=d,b[7]=d,10):o(b,10,i,f,e,d)}}function
gS(s,a,u,q,p,c,t){if(p<=c)var
e=h(a,q,p,c,c),d=e[1],j=e[2],i=e[3],f=e[4],b=e[5];else
var
d=g(q,c),j=q,i=p,f=c+1|0,b=c;var
k=0;if(94<=d){if(E<=d){if(D!==d)k=1}else
if(z===d)k=1}else{var
l=d+m|0;if(57<l>>>0){if(59!==l)k=1}else
if(!(27<=l))switch(l){case
1:return n(a,20,j,i,f,b);case
7:case
8:case
11:case
26:k=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
r=20;return s<50?gT(s+1|0,a,r,j,i,f,b):v(gT,[0,a,r,j,i,f,b])}}return k?(a[6]=b,a[7]=b,20):o(a,20,j,i,f,b)}function
qO(a,b,c,d,e,f){return am(gT(0,a,b,c,d,e,f))}function
J_(a,b,c,d,e,f){return am(gS(0,a,b,c,d,e,f))}function
gR(s,b,y,w,u,t,x){var
p=w,l=u,c=t;for(;;){if(l<=c)var
j=h(b,p,l,c,c),a=j[1],i=j[2],f=j[3],e=j[4],d=j[5];else
var
a=g(p,c),i=p,f=l,e=c+1|0,d=c;var
k=0;if(z<=a){if(aK!==a&&D!==a)k=1}else
if(60<=a){var
q=a+S|0;if(!(4<q>>>0))switch(q){case
4:var
r=11;return s<50?gQ(s+1|0,b,r,i,f,e,d):v(gQ,[0,b,r,i,f,e,d]);case
0:case
2:k=1;break}}else
if(33<=a)switch(a+m|0){case
1:return n(b,11,i,f,e,d);case
7:case
8:case
11:case
26:k=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
p=i,l=f,c=e;continue}else
k=1;return k?(b[6]=d,b[7]=d,11):o(b,11,i,f,e,d)}}function
gQ(s,a,u,q,p,c,t){if(p<=c)var
e=h(a,q,p,c,c),d=e[1],j=e[2],i=e[3],f=e[4],b=e[5];else
var
d=g(q,c),j=q,i=p,f=c+1|0,b=c;var
k=0;if(94<=d){if(E<=d){if(D!==d)k=1}else
if(z===d)k=1}else{var
l=d+m|0;if(57<l>>>0){if(59!==l)k=1}else
if(!(27<=l))switch(l){case
1:return n(a,20,j,i,f,b);case
7:case
8:case
11:case
26:k=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
r=20;return s<50?gR(s+1|0,a,r,j,i,f,b):v(gR,[0,a,r,j,i,f,b])}}return k?(a[6]=b,a[7]=b,20):o(a,20,j,i,f,b)}function
qP(a,b,c,d,e,f){return am(gR(0,a,b,c,d,e,f))}function
J$(a,b,c,d,e,f){return am(gQ(0,a,b,c,d,e,f))}function
Ka(a,a_,a8,a7,a6,a9){var
j=a8,i=a7,f=a6;for(;;){if(i<=f)var
l=h(a,j,i,f,f),k=l[1],d=l[2],c=l[3],b=l[4],e=l[5];else
var
k=g(j,f),d=j,c=i,b=f+1|0,e=f;var
at=0;if(b9<=k){if(a$===k){if(c<=b)var
m=h(a,d,c,b,e),av=m[1],W=m[2],V=m[3],o=m[4],n=m[5];else
var
av=g(d,b),W=d,V=c,o=b+1|0,n=e;if(31<av+f5>>>0){a[6]=n;a[7]=n;return 15}if(V<=o)var
q=h(a,W,V,o,n),az=q[1],ay=q[2],ax=q[3],aw=q[4],am=q[5];else
var
az=g(W,o),ay=W,ax=V,aw=o+1|0,am=n;if(63<az+p>>>0){a[6]=am;a[7]=am;return 15}var
j=ay,i=ax,f=aw;continue}var
au=0;if(bF<=k)if(de<=k)au=1;else
switch(k+dd|0){case
0:if(c<=b)var
r=h(a,d,c,b,e),aA=r[1],Z=r[2],X=r[3],t=r[4],s=r[5];else
var
aA=g(d,b),Z=d,X=c,t=b+1|0,s=e;if(31<aA+p>>>0){a[6]=s;a[7]=s;return 15}if(X<=t)var
u=h(a,Z,X,t,s),aE=u[1],aD=u[2],aC=u[3],aB=u[4],an=u[5];else
var
aE=g(Z,t),aD=Z,aC=X,aB=t+1|0,an=s;if(63<aE+p>>>0){a[6]=an;a[7]=an;return 15}var
j=aD,i=aC,f=aB;continue;case
3:if(c<=b)var
z=h(a,d,c,b,e),aK=z[1],ab=z[2],aa=z[3],B=z[4],A=z[5];else
var
aK=g(d,b),ab=d,aa=c,B=b+1|0,A=e;if(47<aK+f4>>>0){a[6]=A;a[7]=A;return 15}if(aa<=B)var
C=h(a,ab,aa,B,A),aL=C[1],ad=C[2],ac=C[3],E=C[4],D=C[5];else
var
aL=g(ab,B),ad=ab,ac=aa,E=B+1|0,D=A;if(63<aL+p>>>0){a[6]=D;a[7]=D;return 15}if(ac<=E)var
F=h(a,ad,ac,E,D),aP=F[1],aO=F[2],aN=F[3],aM=F[4],ap=F[5];else
var
aP=g(ad,E),aO=ad,aN=ac,aM=E+1|0,ap=D;if(63<aP+p>>>0){a[6]=ap;a[7]=ap;return 15}var
j=aO,i=aN,f=aM;continue;case
7:if(c<=b)var
N=h(a,d,c,b,e),aW=N[1],aj=N[2],ai=N[3],P=N[4],O=N[5];else
var
aW=g(d,b),aj=d,ai=c,P=b+1|0,O=e;if(15<aW+p>>>0){a[6]=O;a[7]=O;return 15}if(ai<=P)var
Q=h(a,aj,ai,P,O),aX=Q[1],al=Q[2],ak=Q[3],S=Q[4],R=Q[5];else
var
aX=g(aj,P),al=aj,ak=ai,S=P+1|0,R=O;if(63<aX+p>>>0){a[6]=R;a[7]=R;return 15}if(ak<=S)var
T=h(a,al,ak,S,R),a1=T[1],a0=T[2],aZ=T[3],aY=T[4],ar=T[5];else
var
a1=g(al,S),a0=al,aZ=ak,aY=S+1|0,ar=R;if(63<a1+p>>>0){a[6]=ar;a[7]=ar;return 15}var
j=a0,i=aZ,f=aY;continue;case
19:a[6]=b;a[7]=e;return 13;case
1:case
2:break;case
4:case
5:case
6:if(c<=b)var
G=h(a,d,c,b,e),aQ=G[1],af=G[2],ae=G[3],I=G[4],H=G[5];else
var
aQ=g(d,b),af=d,ae=c,I=b+1|0,H=e;if(63<aQ+p>>>0){a[6]=H;a[7]=H;return 15}if(ae<=I)var
J=h(a,af,ae,I,H),aR=J[1],ah=J[2],ag=J[3],L=J[4],K=J[5];else
var
aR=g(af,I),ah=af,ag=ae,L=I+1|0,K=H;if(63<aR+p>>>0){a[6]=K;a[7]=K;return 15}if(ag<=L)var
M=h(a,ah,ag,L,K),aV=M[1],aU=M[2],aT=M[3],aS=M[4],aq=M[5];else
var
aV=g(ah,L),aU=ah,aT=ag,aS=L+1|0,aq=K;if(63<aV+p>>>0){a[6]=aq;a[7]=aq;return 15}var
j=aU,i=aT,f=aS;continue;default:at=1;au=1}else
if(!(bE<=k)){if(c<=b)var
U=h(a,d,c,b,e),a5=U[1],a4=U[2],a3=U[3],a2=U[4],as=U[5];else
var
a5=g(d,b),a4=d,a3=c,a2=b+1|0,as=e;if(63<a5+p>>>0){a[6]=as;a[7]=as;return 15}var
j=a4,i=a3,f=a2;continue}if(!au){if(c<=b)var
v=h(a,d,c,b,e),aF=v[1],$=v[2],_=v[3],x=v[4],w=v[5];else
var
aF=g(d,b),$=d,_=c,x=b+1|0,w=e;if(63<aF+p>>>0){a[6]=w;a[7]=w;return 15}if(_<=x)var
y=h(a,$,_,x,w),aJ=y[1],aI=y[2],aH=y[3],aG=y[4],ao=y[5];else
var
aJ=g($,x),aI=$,aH=_,aG=x+1|0,ao=w;if(63<aJ+p>>>0){a[6]=ao;a[7]=ao;return 15}var
j=aI,i=aH,f=aG;continue}}else{if(10===k){a[6]=b;a[7]=e;return 14}if(Y<=k)at=1}if(at){a[6]=e;a[7]=e;return 15}var
j=d,i=c,f=b;continue}}function
qQ(bc,a){for(;;){var
k=a[6],af=a[3],ag=a[2];a[5]=k;if(af<=k)var
l=h(a,ag,af,k,k),f=l[1],d=l[2],c=l[3],b=l[4],m=l[5];else
var
f=g(ag,k),d=ag,c=af,b=k+1|0,m=k;var
ae=0;if(60<=f){var
i=0;if(a$<=f){var
j=0;if(bF<=f)if(de<=f){ae=1;i=1;j=1}else
switch(f+dd|0){case
0:if(c<=b)var
o=h(a,d,c,b,b),aC=o[1],ai=o[2],ah=o[3],r=o[4],q=o[5];else
var
aC=g(d,b),ai=d,ah=c,r=b+1|0,q=b;if(31<aC+p>>>0){a[6]=q;a[7]=q;var
aD=5}else{if(ah<=r)var
aj=h(a,ai,ah,r,q),aF=aj[1],aE=aj[4],Q=aj[5];else
var
aF=g(ai,r),aE=r+1|0,Q=q;var
bd=63<aF+p>>>0?(a[6]=Q,a[7]=Q,5):(a[6]=aE,a[7]=Q,3),aD=bd}var
e=aD;i=1;j=1;break;case
3:if(c<=b)var
v=h(a,d,c,b,b),aK=v[1],T=v[2],S=v[3],x=v[4],w=v[5];else
var
aK=g(d,b),T=d,S=c,x=b+1|0,w=b;if(47<aK+f4>>>0){a[6]=w;a[7]=w;var
aL=5}else{if(S<=x)var
y=h(a,T,S,x,w),aM=y[1],ao=y[2],an=y[3],A=y[4],z=y[5];else
var
aM=g(T,x),ao=T,an=S,A=x+1|0,z=w;if(63<aM+p>>>0){a[6]=z;a[7]=z;var
aN=5}else{if(an<=A)var
ap=h(a,ao,an,A,z),aP=ap[1],aO=ap[4],U=ap[5];else
var
aP=g(ao,A),aO=A+1|0,U=z;var
bf=63<aP+p>>>0?(a[6]=U,a[7]=U,5):(a[6]=aO,a[7]=U,3),aN=bf}var
aL=aN}var
e=aL;i=1;j=1;break;case
7:if(c<=b)var
H=h(a,d,c,b,b),aX=H[1],_=H[2],Z=H[3],J=H[4],I=H[5];else
var
aX=g(d,b),_=d,Z=c,J=b+1|0,I=b;if(15<aX+p>>>0){a[6]=I;a[7]=I;var
aY=5}else{if(Z<=J)var
K=h(a,_,Z,J,I),aZ=K[1],au=K[2],at=K[3],M=K[4],L=K[5];else
var
aZ=g(_,J),au=_,at=Z,M=J+1|0,L=I;if(63<aZ+p>>>0){a[6]=L;a[7]=L;var
a0=5}else{if(at<=M)var
av=h(a,au,at,M,L),a2=av[1],a1=av[4],$=av[5];else
var
a2=g(au,M),a1=M+1|0,$=L;var
bh=63<a2+p>>>0?(a[6]=$,a[7]=$,5):(a[6]=a1,a[7]=$,3),a0=bh}var
aY=a0}var
e=aY;i=1;j=1;break;case
19:a[6]=b;a[7]=m;var
e=4;i=1;j=1;break;case
1:case
2:break;case
4:case
5:case
6:if(c<=b)var
B=h(a,d,c,b,b),aQ=B[1],W=B[2],V=B[3],D=B[4],C=B[5];else
var
aQ=g(d,b),W=d,V=c,D=b+1|0,C=b;if(63<aQ+p>>>0){a[6]=C;a[7]=C;var
aR=5}else{if(V<=D)var
E=h(a,W,V,D,C),aS=E[1],ar=E[2],aq=E[3],G=E[4],F=E[5];else
var
aS=g(W,D),ar=W,aq=V,G=D+1|0,F=C;if(63<aS+p>>>0){a[6]=F;a[7]=F;var
aT=5}else{if(aq<=G)var
as=h(a,ar,aq,G,F),aW=as[1],aV=as[4],X=as[5];else
var
aW=g(ar,G),aV=G+1|0,X=F;var
bg=63<aW+p>>>0?(a[6]=X,a[7]=X,5):(a[6]=aV,a[7]=X,3),aT=bg}var
aR=aT}var
e=aR;i=1;j=1;break;default:j=1}else
if(!(bE<=f)){if(c<=b)var
N=h(a,d,c,b,b),a3=N[1],ax=N[2],aw=N[3],P=N[4],O=N[5];else
var
a3=g(d,b),ax=d,aw=c,P=b+1|0,O=b;if(31<a3+f5>>>0){a[6]=O;a[7]=O;var
a4=5}else{if(aw<=P)var
ay=h(a,ax,aw,P,O),a6=ay[1],a5=ay[4],aa=ay[5];else
var
a6=g(ax,P),a5=P+1|0,aa=O;var
bi=63<a6+p>>>0?(a[6]=aa,a[7]=aa,5):(a[6]=a5,a[7]=aa,3),a4=bi}var
e=a4;i=1;j=1}if(!j){if(c<=b)var
s=h(a,d,c,b,b),aG=s[1],al=s[2],ak=s[3],u=s[4],t=s[5];else
var
aG=g(d,b),al=d,ak=c,u=b+1|0,t=b;if(63<aG+p>>>0){a[6]=t;a[7]=t;var
aH=5}else{if(ak<=u)var
am=h(a,al,ak,u,t),aJ=am[1],aI=am[4],R=am[5];else
var
aJ=g(al,u),aI=u+1|0,R=t;var
be=63<aJ+p>>>0?(a[6]=R,a[7]=R,5):(a[6]=aI,a[7]=R,3),aH=be}var
e=aH;i=1}}else
if(Y<=f){if(b9<=f){if(c<=b)var
az=h(a,d,c,b,b),a8=az[1],a7=az[4],ab=az[5];else
var
a8=g(d,b),a7=b+1|0,ab=b;var
bj=63<a8+p>>>0?(a[6]=ab,a[7]=ab,5):(a[6]=a7,a[7]=ab,3),e=bj;i=1}}else{ae=1;i=1}if(!i){a[6]=b;a[7]=m;var
e=5}}else
if(10===f){a[6]=b;a[7]=m;var
e=2}else
if(40===f){if(c<=b)var
aA=h(a,d,c,b,b),a_=aA[1],a9=aA[4],ac=aA[5];else
var
a_=g(d,b),a9=b+1|0,ac=b;var
bk=59===a_?(a[6]=a9,a[7]=ac,1):(a[6]=ac,a[7]=ac,3),e=bk}else
if(59<=f){if(c<=b)var
aB=h(a,d,c,b,b),bb=aB[1],ba=aB[4],ad=aB[5];else
var
bb=g(d,b),ba=b+1|0,ad=b;var
bl=41===bb?(a[6]=ba,a[7]=ad,0):(a[6]=ad,a[7]=ad,3),e=bl}else
ae=1;if(ae){a[6]=b;a[7]=m;var
e=3}var
n=a[12];if(n!==bx){a[11]=n;a[12]=[0,n[1],n[2],n[3],a[4]+a[6]|0]}if(5<e>>>0)throw[0,aU,R$];switch(e){case
0:return 0;case
1:qQ(a[11],a);continue;case
2:i6(a);continue;case
3:continue;case
4:return qI(bc,a,Sa);default:return bZ(a,Sb)}}}function
Kb(b){for(;;){var
ch=b[6],h4=b[3],h5=b[2];b[5]=ch;var
iO=-1;if(h4<=ch)var
ey=h(b,h5,h4,ch,ch),O=ey[1],j=ey[2],f=ey[3],e=ey[4],am=ey[5];else
var
O=g(h5,ch),j=h5,f=h4,e=ch+1|0,am=ch;var
hQ=0;if(b9<=O)if(a$===O){if(f<=e)var
ez=h(b,j,f,e,e),iP=ez[1],h7=ez[2],h6=ez[3],eB=ez[4],eA=ez[5];else
var
iP=g(j,e),h7=j,h6=f,eB=e+1|0,eA=e;if(31<iP+f5>>>0){b[6]=eA;b[7]=eA;var
iQ=23}else{if(h6<=eB)var
h_=h(b,h7,h6,eB,eA),qa=h_[1],p$=h_[4],gm=h_[5];else
var
qa=g(h7,eB),p$=eB+1|0,gm=eA;var
r1=63<qa+p>>>0?(b[6]=gm,b[7]=gm,23):(b[6]=p$,b[7]=gm,22),iQ=r1}var
k=iQ}else{var
a1=0;if(bF<=O)if(de<=O){hQ=1;a1=1}else
switch(O+dd|0){case
0:if(f<=e)var
eE=h(b,j,f,e,e),qb=eE[1],ia=eE[2],h$=eE[3],eG=eE[4],eF=eE[5];else
var
qb=g(j,e),ia=j,h$=f,eG=e+1|0,eF=e;if(31<qb+p>>>0){b[6]=eF;b[7]=eF;var
qc=23}else{if(h$<=eG)var
ib=h(b,ia,h$,eG,eF),qe=ib[1],qd=ib[4],gn=ib[5];else
var
qe=g(ia,eG),qd=eG+1|0,gn=eF;var
r2=63<qe+p>>>0?(b[6]=gn,b[7]=gn,23):(b[6]=qd,b[7]=gn,22),qc=r2}var
k=qc;a1=1;break;case
3:if(f<=e)var
eK=h(b,j,f,e,e),qj=eK[1],gq=eK[2],gp=eK[3],eM=eK[4],eL=eK[5];else
var
qj=g(j,e),gq=j,gp=f,eM=e+1|0,eL=e;if(47<qj+f4>>>0){b[6]=eL;b[7]=eL;var
qk=23}else{if(gp<=eM)var
eN=h(b,gq,gp,eM,eL),ql=eN[1],ih=eN[2],ig=eN[3],eP=eN[4],eO=eN[5];else
var
ql=g(gq,eM),ih=gq,ig=gp,eP=eM+1|0,eO=eL;if(63<ql+p>>>0){b[6]=eO;b[7]=eO;var
qm=23}else{if(ig<=eP)var
ii=h(b,ih,ig,eP,eO),qo=ii[1],qn=ii[4],gr=ii[5];else
var
qo=g(ih,eP),qn=eP+1|0,gr=eO;var
r4=63<qo+p>>>0?(b[6]=gr,b[7]=gr,23):(b[6]=qn,b[7]=gr,22),qm=r4}var
qk=qm}var
k=qk;a1=1;break;case
7:if(f<=e)var
eW=h(b,j,f,e,e),qv=eW[1],gw=eW[2],gv=eW[3],eY=eW[4],eX=eW[5];else
var
qv=g(j,e),gw=j,gv=f,eY=e+1|0,eX=e;if(15<qv+p>>>0){b[6]=eX;b[7]=eX;var
qw=23}else{if(gv<=eY)var
eZ=h(b,gw,gv,eY,eX),qx=eZ[1],io=eZ[2],im=eZ[3],e1=eZ[4],e0=eZ[5];else
var
qx=g(gw,eY),io=gw,im=gv,e1=eY+1|0,e0=eX;if(63<qx+p>>>0){b[6]=e0;b[7]=e0;var
qy=23}else{if(im<=e1)var
ip=h(b,io,im,e1,e0),qA=ip[1],qz=ip[4],gx=ip[5];else
var
qA=g(io,e1),qz=e1+1|0,gx=e0;var
r6=63<qA+p>>>0?(b[6]=gx,b[7]=gx,23):(b[6]=qz,b[7]=gx,22),qy=r6}var
qw=qy}var
k=qw;a1=1;break;case
19:b[6]=e;b[7]=am;var
k=19;a1=1;break;case
1:case
2:break;case
4:case
5:case
6:if(f<=e)var
eQ=h(b,j,f,e,e),qp=eQ[1],gt=eQ[2],gs=eQ[3],eS=eQ[4],eR=eQ[5];else
var
qp=g(j,e),gt=j,gs=f,eS=e+1|0,eR=e;if(63<qp+p>>>0){b[6]=eR;b[7]=eR;var
qq=23}else{if(gs<=eS)var
eT=h(b,gt,gs,eS,eR),qr=eT[1],ik=eT[2],ij=eT[3],eV=eT[4],eU=eT[5];else
var
qr=g(gt,eS),ik=gt,ij=gs,eV=eS+1|0,eU=eR;if(63<qr+p>>>0){b[6]=eU;b[7]=eU;var
qs=23}else{if(ij<=eV)var
il=h(b,ik,ij,eV,eU),qu=il[1],qt=il[4],gu=il[5];else
var
qu=g(ik,eV),qt=eV+1|0,gu=eU;var
r5=63<qu+p>>>0?(b[6]=gu,b[7]=gu,23):(b[6]=qt,b[7]=gu,22),qs=r5}var
qq=qs}var
k=qq;a1=1;break;default:hQ=1;a1=1}else
if(!(bE<=O)){if(f<=e)var
iq=h(b,j,f,e,e),qC=iq[1],qB=iq[4],gy=iq[5];else
var
qC=g(j,e),qB=e+1|0,gy=e;var
r7=63<qC+p>>>0?(b[6]=gy,b[7]=gy,23):(b[6]=qB,b[7]=gy,22),k=r7;a1=1}if(!a1){if(f<=e)var
eH=h(b,j,f,e,e),qf=eH[1],id=eH[2],ic=eH[3],eJ=eH[4],eI=eH[5];else
var
qf=g(j,e),id=j,ic=f,eJ=e+1|0,eI=e;if(63<qf+p>>>0){b[6]=eI;b[7]=eI;var
qg=23}else{if(ic<=eJ)var
ie=h(b,id,ic,eJ,eI),qi=ie[1],qh=ie[4],go=ie[5];else
var
qi=g(id,eJ),qh=eJ+1|0,go=eI;var
r3=63<qi+p>>>0?(b[6]=go,b[7]=go,23):(b[6]=qh,b[7]=go,22),qg=r3}var
k=qg}}else{var
q=0;if(90<O>>>0){var
qD=O+S|0;if(35<qD>>>0){hQ=1;q=2}else{var
hR=0;switch(qD){case
6:if(f<=e)var
e2=h(b,j,f,e,e),qE=e2[1],cj=e2[2],ci=e2[3],an=e2[4],dj=e2[5];else
var
qE=g(j,e),cj=j,ci=f,an=e+1|0,dj=e;var
gz=qE+m|0,bv=0;if(57<gz>>>0){var
qF=gz+ae|0;if(!(35<qF>>>0))switch(qF){case
17:if(ci<=an)var
e3=h(b,cj,ci,an,an),qG=e3[1],cl=e3[2],ck=e3[3],ao=e3[4],dk=e3[5];else
var
qG=g(cj,an),cl=cj,ck=ci,ao=an+1|0,dk=an;var
gC=qG+m|0,by=0;if(57<gC>>>0){var
qH=gC+ae|0;if(!(35<qH>>>0))switch(qH){case
14:if(ck<=ao)var
e4=h(b,cl,ck,ao,ao),qL=e4[1],cn=e4[2],cm=e4[3],ap=e4[4],dl=e4[5];else
var
qL=g(cl,ao),cn=cl,cm=ck,ap=ao+1|0,dl=ao;var
gE=qL+m|0,bz=0;if(57<gE>>>0){var
qM=gE+ae|0;if(!(35<qM>>>0))switch(qM){case
12:if(cm<=ap)var
e5=h(b,cn,cm,ap,ap),qS=e5[1],cp=e5[2],co=e5[3],aq=e5[4],dm=e5[5];else
var
qS=g(cn,ap),cp=cn,co=cm,aq=ap+1|0,dm=ap;var
gG=qS+m|0,bA=0;if(57<gG>>>0){var
qT=gG+ae|0;if(!(35<qT>>>0))switch(qT){case
19:if(co<=aq)var
e6=h(b,cp,co,aq,aq),bg=e6[1],cr=e6[2],cq=e6[3],ar=e6[4],dn=e6[5];else
var
bg=g(cp,aq),cr=cp,cq=co,ar=aq+1|0,dn=aq;var
bB=0;if(z<=bg)if(aK===bg||D===bg)bB=2;else
bB=1;else{var
bC=0;if(65<=bg){var
qW=bg+S|0;if(!(5<qW>>>0))switch(qW){case
4:break;case
0:case
2:bB=1;bC=1;break;default:bB=2;bC=1}}else
if(33<=bg)switch(bg+m|0){case
1:var
e7=n(b,9,cr,cq,ar,dn);bC=1;break;case
28:if(cq<=ar)var
e8=h(b,cr,cq,ar,ar),dq=e8[1],ct=e8[2],cs=e8[3],at=e8[4],dp=e8[5];else
var
dq=g(cr,ar),ct=cr,cs=cq,at=ar+1|0,dp=ar;var
c0=0;if(94<=dq){if(E<=dq){if(D!==dq)c0=1}else
if(z===dq)c0=1}else{var
gJ=dq+m|0;if(57<gJ>>>0){if(59!==gJ)c0=1}else
if(!(27<=gJ)){var
hS=0;switch(gJ){case
1:var
qX=n(b,20,ct,cs,at,dp);break;case
15:if(cs<=at)var
e9=h(b,ct,cs,at,at),qY=e9[1],bi=e9[2],bh=e9[3],P=e9[4],cu=e9[5];else
var
qY=g(ct,at),bi=ct,bh=cs,P=at+1|0,cu=at;var
gK=qY+m|0,a2=0;if(57<gK>>>0){var
qZ=gK+ae|0;if(35<qZ>>>0)a2=1;else{var
iH=0;switch(qZ){case
4:var
q0=J$(b,11,bi,bh,P,cu);break;case
29:if(bh<=P)var
e_=h(b,bi,bh,P,P),Q=e_[1],gO=e_[2],gN=e_[3],gM=e_[4],e$=e_[5];else
var
Q=g(bi,P),gO=bi,gN=bh,gM=P+1|0,e$=P;var
bD=0;if(as<=Q){if(E<=Q){if(D===Q)bD=1}else
if(z!==Q)bD=1}else
if(33<=Q){var
c1=0;if(71<=Q)if(91<=Q)switch(Q+S|0){case
0:case
2:c1=1;break;case
1:case
3:case
4:case
5:bD=1;c1=1;break}else{bD=1;c1=1}else
if(!(65<=Q))switch(Q+m|0){case
1:var
gP=n(b,20,gO,gN,gM,e$);bD=2;c1=1;break;case
7:case
8:case
11:case
26:c1=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:bD=1;c1=1}if(!c1){var
es=gO,er=gN,ba=gM;for(;;){if(er<=ba)var
et=h(b,es,er,ba,ba),bb=et[1],cf=et[2],ce=et[3],al=et[4],eu=et[5];else
var
bb=g(es,ba),cf=es,ce=er,al=ba+1|0,eu=ba;var
ac=0;if(65<=bb)if(91<=bb)if(Z<=bb)ac=1;else
switch(bb+S|0){case
4:if(ce<=al)var
ev=h(b,cf,ce,al,al),N=ev[1],gh=ev[2],gg=ev[3],gf=ev[4],ew=ev[5];else
var
N=g(cf,al),gh=cf,gg=ce,gf=al+1|0,ew=al;var
c2=0;if(as<=N){if(E<=N){if(D===N)c2=1}else
if(z!==N)c2=1}else
if(33<=N){var
c3=0;if(71<=N)if(91<=N)switch(N+S|0){case
0:case
2:c3=1;break;case
1:case
3:case
4:case
5:c2=1;c3=1;break}else{c2=1;c3=1}else
if(!(65<=N))switch(N+m|0){case
1:var
dr=n(b,20,gh,gg,gf,ew);c2=2;c3=1;break;case
7:case
8:case
11:case
26:c3=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:c2=1;c3=1}if(!c3){var
es=gh,er=gg,ba=gf;continue}}switch(c2){case
2:break;case
0:b[6]=ew;b[7]=ew;var
dr=20;break;default:var
dr=o(b,20,gh,gg,gf,ew)}break;case
0:case
2:case
32:case
34:ac=1;break;case
6:case
7:case
8:case
9:case
10:case
11:ac=3;break;default:ac=2}else
if(71<=bb)ac=2;else
ac=3;else
if(33<=bb)switch(bb+m|0){case
1:var
dr=n(b,11,cf,ce,al,eu);break;case
7:case
8:case
11:case
26:ac=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:ac=3;break;default:ac=2}else
ac=1;switch(ac){case
1:b[6]=eu;b[7]=eu;var
dr=11;break;case
2:var
dr=o(b,11,cf,ce,al,eu);break;case
3:var
es=cf,er=ce,ba=al;continue}var
gP=dr;bD=2;break}}}switch(bD){case
0:b[6]=e$;b[7]=e$;var
gP=20;break;case
1:var
gP=o(b,20,gO,gN,gM,e$);break}var
q0=gP;break;case
0:case
2:case
32:case
34:a2=1;iH=1;break;default:a2=2;iH=1}if(!iH){var
q1=q0;a2=3}}}else
if(27<=gK)a2=2;else
switch(gK){case
1:var
q1=n(b,11,bi,bh,P,cu);a2=3;break;case
7:case
8:case
11:case
26:a2=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
gL=qP(b,11,bi,bh,P,cu);break;default:a2=2}switch(a2){case
3:var
gL=q1;break;case
1:b[6]=cu;b[7]=cu;var
gL=11;break;case
2:var
gL=o(b,11,bi,bh,P,cu);break}var
qX=gL;break;case
7:case
8:case
11:case
26:c0=1;hS=1;break;case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
gI=qP(b,20,ct,cs,at,dp);c0=2;hS=1;break;default:hS=1}if(!hS){var
gI=qX;c0=2}}}switch(c0){case
1:b[6]=dp;b[7]=dp;var
gI=20;break;case
0:var
gI=o(b,20,ct,cs,at,dp);break}var
e7=gI;bC=1;break;case
7:case
8:case
11:case
26:bB=1;bC=1;break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:break;default:bB=2;bC=1}else{bB=1;bC=1}if(!bC)var
e7=ak(b,9,cr,cq,ar,dn)}switch(bB){case
1:b[6]=dn;b[7]=dn;var
e7=9;break;case
2:var
e7=o(b,9,cr,cq,ar,dn);break}var
qV=e7;bA=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bA=3;break;default:bA=1}}else
if(32<=gG)bA=1;else
switch(gG){case
1:var
qV=n(b,9,cp,co,aq,dm);bA=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bA=1;break;default:bA=3}switch(bA){case
2:var
gH=qV;break;case
0:b[6]=dm;b[7]=dm;var
gH=9;break;case
1:var
gH=ak(b,9,cp,co,aq,dm);break;default:var
gH=o(b,9,cp,co,aq,dm)}var
qU=gH;bz=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bz=3;break;default:bz=1}}else
if(32<=gE)bz=1;else
switch(gE){case
1:var
qU=n(b,9,cn,cm,ap,dl);bz=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bz=1;break;default:bz=3}switch(bz){case
2:var
gF=qU;break;case
0:b[6]=dl;b[7]=dl;var
gF=9;break;case
1:var
gF=ak(b,9,cn,cm,ap,dl);break;default:var
gF=o(b,9,cn,cm,ap,dl)}var
qR=gF;by=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:by=3;break;default:by=1}}else
if(32<=gC)by=1;else
switch(gC){case
1:var
qR=n(b,9,cl,ck,ao,dk);by=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:by=1;break;default:by=3}switch(by){case
2:var
gD=qR;break;case
0:b[6]=dk;b[7]=dk;var
gD=9;break;case
1:var
gD=ak(b,9,cl,ck,ao,dk);break;default:var
gD=o(b,9,cl,ck,ao,dk)}var
qK=gD;bv=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bv=3;break;default:bv=1}}else
if(32<=gz)bv=1;else
switch(gz){case
1:var
qK=n(b,20,cj,ci,an,dj);bv=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bv=1;break;default:bv=3}switch(bv){case
2:var
gA=qK;break;case
0:b[6]=dj;b[7]=dj;var
gA=20;break;case
1:var
gA=ak(b,20,cj,ci,an,dj);break;default:var
gA=o(b,20,cj,ci,an,dj)}var
gB=gA;break;case
14:if(f<=e)var
fb=h(b,j,f,e,e),q3=fb[1],cw=fb[2],cv=fb[3],av=fb[4],dt=fb[5];else
var
q3=g(j,e),cw=j,cv=f,av=e+1|0,dt=e;var
gU=q3+m|0,bG=0;if(57<gU>>>0){var
q4=gU+ae|0;if(!(35<q4>>>0))switch(q4){case
19:if(cv<=av)var
fc=h(b,cw,cv,av,av),q5=fc[1],cy=fc[2],cx=fc[3],aw=fc[4],du=fc[5];else
var
q5=g(cw,av),cy=cw,cx=cv,aw=av+1|0,du=av;var
gW=q5+m|0,bH=0;if(57<gW>>>0){var
q6=gW+ae|0;if(!(35<q6>>>0))switch(q6){case
11:if(cx<=aw)var
fd=h(b,cy,cx,aw,aw),bn=fd[1],g0=fd[2],gZ=fd[3],gY=fd[4],dv=fd[5];else
var
bn=g(cy,aw),g0=cy,gZ=cx,gY=aw+1|0,dv=aw;var
d4=0;if(z<=bn){if(aK===bn||D===bn)d4=1}else{var
c4=0;if(65<=bn){var
q9=bn+S|0;if(!(5<q9>>>0))switch(q9){case
4:break;case
0:case
2:c4=1;break;default:d4=1;c4=1}}else
if(33<=bn)switch(bn+m|0){case
1:var
g1=n(b,4,g0,gZ,gY,dv);d4=2;c4=1;break;case
7:case
8:case
11:case
26:c4=1;break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:break;default:d4=1;c4=1}else
c4=1;if(!c4){var
g1=ak(b,4,g0,gZ,gY,dv);d4=2}}switch(d4){case
0:b[6]=dv;b[7]=dv;var
g1=4;break;case
1:var
g1=o(b,4,g0,gZ,gY,dv);break}var
q8=g1;bH=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bH=3;break;default:bH=1}}else
if(32<=gW)bH=1;else
switch(gW){case
1:var
q8=n(b,9,cy,cx,aw,du);bH=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bH=1;break;default:bH=3}switch(bH){case
2:var
gX=q8;break;case
0:b[6]=du;b[7]=du;var
gX=9;break;case
1:var
gX=ak(b,9,cy,cx,aw,du);break;default:var
gX=o(b,9,cy,cx,aw,du)}var
q7=gX;bG=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bG=3;break;default:bG=1}}else
if(32<=gU)bG=1;else
switch(gU){case
1:var
q7=n(b,20,cw,cv,av,dt);bG=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bG=1;break;default:bG=3}switch(bG){case
2:var
gV=q7;break;case
0:b[6]=dt;b[7]=dt;var
gV=20;break;case
1:var
gV=ak(b,20,cw,cv,av,dt);break;default:var
gV=o(b,20,cw,cv,av,dt)}var
gB=gV;break;case
19:if(f<=e)var
fe=h(b,j,f,e,e),q_=fe[1],cA=fe[2],cz=fe[3],ax=fe[4],dw=fe[5];else
var
q_=g(j,e),cA=j,cz=f,ax=e+1|0,dw=e;var
g2=q_+m|0,bI=0;if(57<g2>>>0){var
q$=g2+ae|0;if(!(35<q$>>>0))switch(q$){case
6:if(cz<=ax)var
ff=h(b,cA,cz,ax,ax),ra=ff[1],cC=ff[2],cB=ff[3],ay=ff[4],dx=ff[5];else
var
ra=g(cA,ax),cC=cA,cB=cz,ay=ax+1|0,dx=ax;var
g4=ra+m|0,bJ=0;if(57<g4>>>0){var
rb=g4+ae|0;if(!(35<rb>>>0))switch(rb){case
19:if(cB<=ay)var
fg=h(b,cC,cB,ay,ay),bo=fg[1],cE=fg[2],cD=fg[3],az=fg[4],dy=fg[5];else
var
bo=g(cC,ay),cE=cC,cD=cB,az=ay+1|0,dy=ay;var
bK=0;if(z<=bo)if(aK===bo||D===bo)bK=2;else
bK=1;else{var
bL=0;if(65<=bo){var
re=bo+S|0;if(!(5<re>>>0))switch(re){case
4:break;case
0:case
2:bK=1;bL=1;break;default:bK=2;bL=1}}else
if(33<=bo)switch(bo+m|0){case
1:var
fh=n(b,4,cE,cD,az,dy);bL=1;break;case
25:if(cD<=az)var
fi=h(b,cE,cD,az,az),bp=fi[1],cG=fi[2],cF=fi[3],aA=fi[4],dz=fi[5];else
var
bp=g(cE,az),cG=cE,cF=cD,aA=az+1|0,dz=az;var
bN=0;if(z<=bp)if(aK===bp||D===bp)bN=2;else
bN=1;else{var
bO=0;if(65<=bp){var
rf=bp+S|0;if(!(5<rf>>>0))switch(rf){case
4:break;case
0:case
2:bN=1;bO=1;break;default:bN=2;bO=1}}else
if(33<=bp)switch(bp+m|0){case
1:var
fj=n(b,9,cG,cF,aA,dz);bO=1;break;case
15:if(cF<=aA)var
fk=h(b,cG,cF,aA,aA),rg=fk[1],cI=fk[2],cH=fk[3],aB=fk[4],dA=fk[5];else
var
rg=g(cG,aA),cI=cG,cH=cF,aB=aA+1|0,dA=aA;var
g6=rg+m|0,bP=0;if(57<g6>>>0){var
rh=g6+ae|0;if(!(35<rh>>>0))switch(rh){case
29:if(cH<=aB)var
fl=h(b,cI,cH,aB,aB),ri=fl[1],fo=fl[2],fn=fl[3],fm=fl[4],cJ=fl[5];else
var
ri=g(cI,aB),fo=cI,fn=cH,fm=aB+1|0,cJ=aB;var
g8=ri+m|0,ad=0;if(57<g8>>>0){var
rj=g8+ae|0;if(35<rj>>>0)ad=1;else
switch(rj){case
0:case
2:case
32:case
34:ad=1;break;case
1:case
3:case
5:case
33:case
35:ad=4;break;case
6:case
7:case
8:case
9:case
10:case
11:ad=3;break;default:ad=2}}else
if(38<=g8)ad=2;else
switch(g8){case
1:var
fp=n(b,9,fo,fn,fm,cJ);break;case
13:case
25:ad=2;break;case
7:case
8:case
11:case
26:ad=1;break;case
0:case
2:case
3:case
4:case
5:case
6:case
9:case
10:case
12:case
14:case
27:case
28:case
29:case
30:case
31:ad=4;break;default:ad=3}switch(ad){case
1:b[6]=cJ;b[7]=cJ;var
fp=9;break;case
3:var
fp=J0(b,9,fo,fn,fm,cJ);break;case
2:var
fp=ak(b,9,fo,fn,fm,cJ);break;case
4:var
fp=o(b,9,fo,fn,fm,cJ);break}var
rk=fp;bP=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bP=3;break;default:bP=1}}else
if(32<=g6)bP=1;else
switch(g6){case
1:var
rk=n(b,9,cI,cH,aB,dA);bP=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bP=1;break;default:bP=3}switch(bP){case
2:var
g7=rk;break;case
0:b[6]=dA;b[7]=dA;var
g7=9;break;case
1:var
g7=ak(b,9,cI,cH,aB,dA);break;default:var
g7=o(b,9,cI,cH,aB,dA)}var
fj=g7;bO=1;break;case
7:case
8:case
11:case
26:bN=1;bO=1;break;case
13:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:break;default:bN=2;bO=1}else{bN=1;bO=1}if(!bO)var
fj=ak(b,9,cG,cF,aA,dz)}switch(bN){case
1:b[6]=dz;b[7]=dz;var
fj=9;break;case
2:var
fj=o(b,9,cG,cF,aA,dz);break}var
fh=fj;bL=1;break;case
7:case
8:case
11:case
26:bK=1;bL=1;break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:bK=2;bL=1}else{bK=1;bL=1}if(!bL)var
fh=ak(b,4,cE,cD,az,dy)}switch(bK){case
1:b[6]=dy;b[7]=dy;var
fh=4;break;case
2:var
fh=o(b,4,cE,cD,az,dy);break}var
rd=fh;bJ=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bJ=3;break;default:bJ=1}}else
if(32<=g4)bJ=1;else
switch(g4){case
1:var
rd=n(b,9,cC,cB,ay,dx);bJ=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bJ=1;break;default:bJ=3}switch(bJ){case
2:var
g5=rd;break;case
0:b[6]=dx;b[7]=dx;var
g5=9;break;case
1:var
g5=ak(b,9,cC,cB,ay,dx);break;default:var
g5=o(b,9,cC,cB,ay,dx)}var
rc=g5;bI=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bI=3;break;default:bI=1}}else
if(32<=g2)bI=1;else
switch(g2){case
1:var
rc=n(b,20,cA,cz,ax,dw);bI=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bI=1;break;default:bI=3}switch(bI){case
2:var
g3=rc;break;case
0:b[6]=dw;b[7]=dw;var
g3=20;break;case
1:var
g3=ak(b,20,cA,cz,ax,dw);break;default:var
g3=o(b,20,cA,cz,ax,dw)}var
gB=g3;break;case
20:if(f<=e)var
fq=h(b,j,f,e,e),rl=fq[1],cL=fq[2],cK=fq[3],aC=fq[4],dB=fq[5];else
var
rl=g(j,e),cL=j,cK=f,aC=e+1|0,dB=e;var
g9=rl+m|0,bQ=0;if(57<g9>>>0){var
rm=g9+ae|0;if(!(35<rm>>>0))switch(rm){case
11:if(cK<=aC)var
fr=h(b,cL,cK,aC,aC),rn=fr[1],cN=fr[2],cM=fr[3],aD=fr[4],dC=fr[5];else
var
rn=g(cL,aC),cN=cL,cM=cK,aD=aC+1|0,dC=aC;var
g$=rn+m|0,bT=0;if(57<g$>>>0){var
ro=g$+ae|0;if(!(35<ro>>>0))switch(ro){case
11:if(cM<=aD)var
fs=h(b,cN,cM,aD,aD),rq=fs[1],cP=fs[2],cO=fs[3],aE=fs[4],dD=fs[5];else
var
rq=g(cN,aD),cP=cN,cO=cM,aE=aD+1|0,dD=aD;var
hb=rq+m|0,bU=0;if(57<hb>>>0){var
rr=hb+ae|0;if(!(35<rr>>>0))switch(rr){case
24:if(cO<=aE)var
ft=h(b,cP,cO,aE,aE),rt=ft[1],cR=ft[2],cQ=ft[3],aF=ft[4],dE=ft[5];else
var
rt=g(cP,aE),cR=cP,cQ=cO,aF=aE+1|0,dE=aE;var
hd=rt+m|0,bV=0;if(57<hd>>>0){var
ru=hd+ae|0;if(!(35<ru>>>0))switch(ru){case
10:if(cQ<=aF)var
fu=h(b,cR,cQ,aF,aF),rw=fu[1],cT=fu[2],cS=fu[3],aG=fu[4],dF=fu[5];else
var
rw=g(cR,aF),cT=cR,cS=cQ,aG=aF+1|0,dF=aF;var
hf=rw+m|0,bW=0;if(57<hf>>>0){var
rx=hf+ae|0;if(!(35<rx>>>0))switch(rx){case
25:if(cS<=aG)var
fv=h(b,cT,cS,aG,aG),bq=fv[1],cV=fv[2],cU=fv[3],aH=fv[4],dG=fv[5];else
var
bq=g(cT,aG),cV=cT,cU=cS,aH=aG+1|0,dG=aG;var
bX=0;if(z<=bq)if(aK===bq||D===bq)bX=2;else
bX=1;else{var
bY=0;if(65<=bq){var
rA=bq+S|0;if(!(5<rA>>>0))switch(rA){case
4:break;case
0:case
2:bX=1;bY=1;break;default:bX=2;bY=1}}else
if(33<=bq)switch(bq+m|0){case
1:var
fw=n(b,9,cV,cU,aH,dG);bY=1;break;case
28:if(cU<=aH)var
fx=h(b,cV,cU,aH,aH),dI=fx[1],cX=fx[2],cW=fx[3],aI=fx[4],dH=fx[5];else
var
dI=g(cV,aH),cX=cV,cW=cU,aI=aH+1|0,dH=aH;var
c5=0;if(94<=dI){if(E<=dI){if(D!==dI)c5=1}else
if(z===dI)c5=1}else{var
hi=dI+m|0;if(57<hi>>>0){if(59!==hi)c5=1}else
if(!(27<=hi)){var
hT=0;switch(hi){case
1:var
rB=n(b,20,cX,cW,aI,dH);break;case
15:if(cW<=aI)var
fy=h(b,cX,cW,aI,aI),rC=fy[1],bs=fy[2],br=fy[3],R=fy[4],cY=fy[5];else
var
rC=g(cX,aI),bs=cX,br=cW,R=aI+1|0,cY=aI;var
hj=rC+m|0,a3=0;if(57<hj>>>0){var
rD=hj+ae|0;if(35<rD>>>0)a3=1;else{var
iI=0;switch(rD){case
4:var
rE=J_(b,10,bs,br,R,cY);break;case
29:if(br<=R)var
fz=h(b,bs,br,R,R),T=fz[1],hn=fz[2],hm=fz[3],hl=fz[4],fA=fz[5];else
var
T=g(bs,R),hn=bs,hm=br,hl=R+1|0,fA=R;var
b0=0;if(as<=T){if(E<=T){if(D===T)b0=1}else
if(z!==T)b0=1}else
if(33<=T){var
c6=0;if(71<=T)if(91<=T)switch(T+S|0){case
0:case
2:c6=1;break;case
1:case
3:case
4:case
5:b0=1;c6=1;break}else{b0=1;c6=1}else
if(!(65<=T))switch(T+m|0){case
1:var
ho=n(b,20,hn,hm,hl,fA);b0=2;c6=1;break;case
7:case
8:case
11:case
26:c6=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:b0=1;c6=1}if(!c6){var
em=hn,el=hm,a9=hl;for(;;){if(el<=a9)var
en=h(b,em,el,a9,a9),a_=en[1],cc=en[2],cb=en[3],aj=en[4],eo=en[5];else
var
a_=g(em,a9),cc=em,cb=el,aj=a9+1|0,eo=a9;var
ag=0;if(65<=a_)if(91<=a_)if(Z<=a_)ag=1;else
switch(a_+S|0){case
4:if(cb<=aj)var
ep=h(b,cc,cb,aj,aj),M=ep[1],ge=ep[2],gd=ep[3],gc=ep[4],eq=ep[5];else
var
M=g(cc,aj),ge=cc,gd=cb,gc=aj+1|0,eq=aj;var
c7=0;if(as<=M){if(E<=M){if(D===M)c7=1}else
if(z!==M)c7=1}else
if(33<=M){var
c8=0;if(71<=M)if(91<=M)switch(M+S|0){case
0:case
2:c8=1;break;case
1:case
3:case
4:case
5:c7=1;c8=1;break}else{c7=1;c8=1}else
if(!(65<=M))switch(M+m|0){case
1:var
dJ=n(b,20,ge,gd,gc,eq);c7=2;c8=1;break;case
7:case
8:case
11:case
26:c8=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:c7=1;c8=1}if(!c8){var
em=ge,el=gd,a9=gc;continue}}switch(c7){case
2:break;case
0:b[6]=eq;b[7]=eq;var
dJ=20;break;default:var
dJ=o(b,20,ge,gd,gc,eq)}break;case
0:case
2:case
32:case
34:ag=1;break;case
6:case
7:case
8:case
9:case
10:case
11:ag=2;break;default:ag=3}else
if(71<=a_)ag=3;else
ag=2;else
if(33<=a_)switch(a_+m|0){case
1:var
dJ=n(b,10,cc,cb,aj,eo);break;case
7:case
8:case
11:case
26:ag=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:ag=2;break;default:ag=3}else
ag=1;switch(ag){case
1:b[6]=eo;b[7]=eo;var
dJ=10;break;case
2:var
em=cc,el=cb,a9=aj;continue;case
3:var
dJ=o(b,10,cc,cb,aj,eo);break}var
ho=dJ;b0=2;break}}}switch(b0){case
0:b[6]=fA;b[7]=fA;var
ho=20;break;case
1:var
ho=o(b,20,hn,hm,hl,fA);break}var
rE=ho;break;case
0:case
2:case
32:case
34:a3=1;iI=1;break;default:a3=2;iI=1}if(!iI){var
rF=rE;a3=3}}}else
if(27<=hj)a3=2;else
switch(hj){case
1:var
rF=n(b,10,bs,br,R,cY);a3=3;break;case
7:case
8:case
11:case
26:a3=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
hk=qO(b,10,bs,br,R,cY);break;default:a3=2}switch(a3){case
3:var
hk=rF;break;case
1:b[6]=cY;b[7]=cY;var
hk=10;break;case
2:var
hk=o(b,10,bs,br,R,cY);break}var
rB=hk;break;case
7:case
8:case
11:case
26:c5=1;hT=1;break;case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
hh=qO(b,20,cX,cW,aI,dH);c5=2;hT=1;break;default:hT=1}if(!hT){var
hh=rB;c5=2}}}switch(c5){case
1:b[6]=dH;b[7]=dH;var
hh=20;break;case
0:var
hh=o(b,20,cX,cW,aI,dH);break}var
fw=hh;bY=1;break;case
7:case
8:case
11:case
26:bX=1;bY=1;break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:break;default:bX=2;bY=1}else{bX=1;bY=1}if(!bY)var
fw=ak(b,9,cV,cU,aH,dG)}switch(bX){case
1:b[6]=dG;b[7]=dG;var
fw=9;break;case
2:var
fw=o(b,9,cV,cU,aH,dG);break}var
rz=fw;bW=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bW=3;break;default:bW=1}}else
if(32<=hf)bW=1;else
switch(hf){case
1:var
rz=n(b,9,cT,cS,aG,dF);bW=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bW=1;break;default:bW=3}switch(bW){case
2:var
hg=rz;break;case
0:b[6]=dF;b[7]=dF;var
hg=9;break;case
1:var
hg=ak(b,9,cT,cS,aG,dF);break;default:var
hg=o(b,9,cT,cS,aG,dF)}var
ry=hg;bV=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bV=3;break;default:bV=1}}else
if(32<=hd)bV=1;else
switch(hd){case
1:var
ry=n(b,9,cR,cQ,aF,dE);bV=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bV=1;break;default:bV=3}switch(bV){case
2:var
he=ry;break;case
0:b[6]=dE;b[7]=dE;var
he=9;break;case
1:var
he=ak(b,9,cR,cQ,aF,dE);break;default:var
he=o(b,9,cR,cQ,aF,dE)}var
rv=he;bU=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bU=3;break;default:bU=1}}else
if(32<=hb)bU=1;else
switch(hb){case
1:var
rv=n(b,9,cP,cO,aE,dD);bU=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bU=1;break;default:bU=3}switch(bU){case
2:var
hc=rv;break;case
0:b[6]=dD;b[7]=dD;var
hc=9;break;case
1:var
hc=ak(b,9,cP,cO,aE,dD);break;default:var
hc=o(b,9,cP,cO,aE,dD)}var
rs=hc;bT=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bT=3;break;default:bT=1}}else
if(32<=g$)bT=1;else
switch(g$){case
1:var
rs=n(b,9,cN,cM,aD,dC);bT=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bT=1;break;default:bT=3}switch(bT){case
2:var
ha=rs;break;case
0:b[6]=dC;b[7]=dC;var
ha=9;break;case
1:var
ha=ak(b,9,cN,cM,aD,dC);break;default:var
ha=o(b,9,cN,cM,aD,dC)}var
rp=ha;bQ=2;break;case
0:case
2:case
32:case
34:break;case
1:case
3:case
5:case
33:case
35:bQ=3;break;default:bQ=1}}else
if(32<=g9)bQ=1;else
switch(g9){case
1:var
rp=n(b,20,cL,cK,aC,dB);bQ=2;break;case
7:case
8:case
11:case
26:break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:bQ=1;break;default:bQ=3}switch(bQ){case
2:var
g_=rp;break;case
0:b[6]=dB;b[7]=dB;var
g_=20;break;case
1:var
g_=ak(b,20,cL,cK,aC,dB);break;default:var
g_=o(b,20,cL,cK,aC,dB)}var
gB=g_;break;case
0:case
2:case
32:case
34:q=1;hR=1;break;case
1:case
3:case
4:case
5:case
33:case
35:hR=1;break;default:if(f<=e)var
fa=h(b,j,f,e,e),bm=fa[1],gS=fa[2],gR=fa[3],gQ=fa[4],ds=fa[5];else
var
bm=g(j,e),gS=j,gR=f,gQ=e+1|0,ds=e;var
d5=0;if(z<=bm){if(aK===bm||D===bm)d5=1}else{var
c9=0;if(65<=bm){var
q2=bm+S|0;if(!(5<q2>>>0))switch(q2){case
4:break;case
0:case
2:c9=1;break;default:d5=1;c9=1}}else
if(33<=bm)switch(bm+m|0){case
1:var
gT=n(b,20,gS,gR,gQ,ds);d5=2;c9=1;break;case
7:case
8:case
11:case
26:c9=1;break;case
13:case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:break;default:d5=1;c9=1}else
c9=1;if(!c9){var
gT=ak(b,20,gS,gR,gQ,ds);d5=2}}switch(d5){case
0:b[6]=ds;b[7]=ds;var
gT=20;break;case
1:var
gT=o(b,20,gS,gR,gQ,ds);break}var
k=gT;q=2;hR=1}if(!hR){var
k=gB;q=2}}}else
if(!(60<=O))switch(O){case
10:b[6]=e;b[7]=am;var
k=18;q=2;break;case
34:if(f<=e)var
fB=h(b,j,f,e,e),t=fB[1],V=fB[2],U=fB[3],y=fB[4],s=fB[5];else
var
t=g(j,e),V=j,U=f,y=e+1|0,s=e;var
a4=0;if(93<=t){var
I=0;if(a$<=t){var
a5=0;if(bF<=t)if(de<=t){a4=1;I=1;a5=1}else
switch(t+dd|0){case
0:var
A=J6(b,23,V,U,y,s);I=1;a5=1;break;case
3:var
A=J4(b,23,V,U,y,s);I=1;a5=1;break;case
7:var
A=J3(b,23,V,U,y,s);I=1;a5=1;break;case
19:a4=2;I=1;a5=1;break;case
1:case
2:break;case
4:case
5:case
6:var
A=J2(b,23,V,U,y,s);I=1;a5=1;break;default:a5=1}else
if(!(bE<=t)){var
A=J7(b,23,V,U,y,s);I=1;a5=1}if(!a5){var
A=J5(b,23,V,U,y,s);I=1}}else
if(Y<=t){if(b9<=t){var
A=J8(b,23,V,U,y,s);I=1}}else
if(Z<=t){a4=3;I=1}else{a4=1;I=1}if(!I){b[6]=s;b[7]=s;var
A=23}}else
if(32<=t)if(34===t)var
A=hZ(b,23,V,U,y,s);else
if(92<=t)var
A=J1(b,23,V,U,y,s);else
a4=1;else
if(10===t)a4=2;else
if(0<=t)a4=3;else
a4=1;switch(a4){case
1:var
A=J9(b,23,V,U,y,s);break;case
2:b[6]=y;b[7]=s;var
A=6;break;case
3:b[6]=y;b[7]=s;var
A=7;break}var
k=A;q=2;break;case
36:if(f<=e)var
fC=h(b,j,f,e,e),bt=fC[1],it=fC[2],is=fC[3],ir=fC[4],hp=fC[5];else
var
bt=g(j,e),it=j,is=f,ir=e+1|0,hp=e;var
d6=0;if(93<=bt){var
iu=bt+ea|0;if(30<iu>>>0){if(32===iu)d6=1}else
if(29!==iu)d6=1}else
if(59!==bt)if(45<=bt){if(91!==bt)d6=1}else
if(33<=bt)switch(bt+m|0){case
1:var
iv=n(b,20,it,is,ir,hp);d6=2;break;case
7:case
8:case
11:break;default:d6=1}switch(d6){case
0:b[6]=hp;b[7]=hp;var
iv=20;break;case
1:var
gj=it,gi=is,cg=ir;for(;;){if(gi<=cg)var
ex=h(b,gj,gi,cg,cg),bc=ex[1],h2=ex[2],h1=ex[3],h0=ex[4],gk=ex[5];else
var
bc=g(gj,cg),h2=gj,h1=gi,h0=cg+1|0,gk=cg;var
d7=0;if(93<=bc){var
h3=bc+ea|0;if(30<h3>>>0){if(32===h3)d7=1}else
if(29!==h3)d7=1}else
if(59!==bc)if(45<=bc){if(91!==bc)d7=1}else
if(33<=bc)switch(bc+m|0){case
1:var
rG=n(b,12,h2,h1,h0,gk);d7=2;break;case
7:case
8:case
11:break;default:d7=1}switch(d7){case
0:b[6]=gk;b[7]=gk;var
rG=12;break;case
1:var
gj=h2,gi=h1,cg=h0;continue}var
iv=rG;break}break}var
k=iv;q=2;break;case
40:if(f<=e)var
iw=h(b,j,f,e,e),rI=iw[1],rH=iw[4],hq=iw[5];else
var
rI=g(j,e),rH=e+1|0,hq=e;var
r8=59===rI?(b[6]=rH,b[7]=hq,16):(b[6]=hq,b[7]=hq,0),k=r8;q=2;break;case
41:b[6]=e;b[7]=am;var
k=1;q=2;break;case
48:if(f<=e)var
fZ=h(b,j,f,e,e),rR=fZ[1],aN=fZ[2],aM=fZ[3],H=fZ[4],a0=fZ[5];else
var
rR=g(j,e),aN=j,aM=f,H=e+1|0,a0=e;var
hK=rR+m|0,J=0;if(57<hK>>>0){var
rS=hK+ae|0;if(35<rS>>>0)J=2;else{var
hU=0;switch(rS){case
4:var
rT=JV(b,2,aN,aM,H,a0);break;case
10:J=4;hU=1;break;case
29:if(aM<=H)var
f1=h(b,aN,aM,H,H),ab=f1[1],hN=f1[2],hM=f1[3],hL=f1[4],d3=f1[5];else
var
ab=g(aN,H),hN=aN,hM=aM,hL=H+1|0,d3=H;var
b1=0;if(as<=ab){if(E<=ab){if(D===ab)b1=1}else
if(z!==ab)b1=1}else
if(33<=ab){var
c_=0;if(71<=ab)if(91<=ab)switch(ab+S|0){case
0:case
2:c_=1;break;case
1:case
3:case
4:case
5:b1=1;c_=1;break}else{b1=1;c_=1}else
if(!(65<=ab))switch(ab+m|0){case
1:var
hO=n(b,20,hN,hM,hL,d3);b1=2;c_=1;break;case
7:case
8:case
11:case
26:c_=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:b1=1;c_=1}if(!c_){var
hO=JW(b,20,hN,hM,hL,d3);b1=2}}switch(b1){case
0:b[6]=d3;b[7]=d3;var
hO=20;break;case
1:var
hO=o(b,20,hN,hM,hL,d3);break}var
rT=hO;break;case
0:case
2:case
32:case
34:J=2;hU=1;break;default:J=3;hU=1}if(!hU){var
iG=rT;J=1}}}else
if(37<=hK)J=3;else
switch(hK){case
1:var
iG=n(b,2,aN,aM,H,a0);J=1;break;case
13:var
iG=f_(b,2,aN,aM,H,a0);J=1;break;case
36:J=4;break;case
7:case
8:case
11:case
26:J=2;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
f0=qJ(b,2,aN,aM,H,a0);break;default:J=3}switch(J){case
1:var
f0=iG;break;case
2:b[6]=a0;b[7]=a0;var
f0=2;break;case
4:var
f0=dh(b,2,aN,aM,H,a0);break;case
3:var
f0=o(b,2,aN,aM,H,a0);break}var
k=f0;q=2;break;case
59:if(f<=e)var
f2=h(b,j,f,e,e),rX=f2[1],rW=f2[2],rV=f2[3],rU=f2[4],hP=f2[5];else
var
rX=g(j,e),rW=j,rV=f,rU=e+1|0,hP=e;var
r9=59===rX?Ka(b,20,rW,rV,rU,hP):(b[6]=hP,b[7]=hP,20),k=r9;q=2;break;case
44:q=1;break;case
43:case
45:if(f<=e)var
fD=h(b,j,f,e,e),rJ=fD[1],F=fD[2],B=fD[3],l=fD[4],dK=fD[5];else
var
rJ=g(j,e),F=j,B=f,l=e+1|0,dK=e;var
hr=rJ+m|0,aO=0;if(57<hr>>>0){var
rK=hr+ae|0;if(35<rK>>>0)aO=2;else{var
iJ=0;switch(rK){case
14:if(B<=l)var
fE=h(b,F,B,l,l),v=fE[1],dM=fE[2],dL=fE[3],aR=fE[4],fF=fE[5];else
var
v=g(F,l),dM=F,dL=B,aR=l+1|0,fF=l;var
b2=0;if(94<=v){if(aK<=v){if(E!==v&&!(Z<=v))b2=1}else
if(b_===v){if(dL<=aR)var
fG=h(b,dM,dL,aR,aR),W=fG[1],dO=fG[2],dN=fG[3],aS=fG[4],fH=fG[5];else
var
W=g(dM,aR),dO=dM,dN=dL,aS=aR+1|0,fH=aR;var
b3=0;if(as<=W){if(E<=W){if(D===W)b3=1}else
if(z!==W)b3=1}else
if(59!==W)if(45<=W)if(91<=W)switch(W+S|0){case
11:if(dN<=aS)var
fI=h(b,dO,dN,aS,aS),bu=fI[1],iA=fI[2],iz=fI[3],iy=fI[4],fJ=fI[5];else
var
bu=g(dO,aS),iA=dO,iz=dN,iy=aS+1|0,fJ=aS;var
d8=0;if(93<=bu){var
iB=bu+ea|0;if(30<iB>>>0){if(32===iB)d8=1}else
if(29!==iB)d8=1}else
if(59!==bu)if(45<=bu){if(91!==bu)d8=1}else
if(33<=bu)switch(bu+m|0){case
1:var
iC=n(b,4,iA,iz,iy,fJ);d8=2;break;case
7:case
8:case
11:break;default:d8=1}switch(d8){case
0:b[6]=fJ;b[7]=fJ;var
iC=4;break;case
1:var
iC=o(b,4,iA,iz,iy,fJ);break}var
hu=iC;b3=2;break;case
0:case
2:break;default:b3=1}else
b3=1;else
if(33<=W)switch(W+m|0){case
1:var
hu=n(b,20,dO,dN,aS,fH);b3=2;break;case
7:case
8:case
11:break;default:b3=1}switch(b3){case
0:b[6]=fH;b[7]=fH;var
hu=20;break;case
1:var
hu=o(b,20,dO,dN,aS,fH);break}var
ht=hu;b2=2}else
if(!(z<=v))b2=1}else
if(60<=v){if(91!==v&&!(93<=v))b2=1}else
if(45<=v){if(!(59<=v))b2=1}else
if(33<=v)switch(v+m|0){case
1:var
ht=n(b,20,dM,dL,aR,fF);b2=2;break;case
7:case
8:case
11:break;default:b2=1}switch(b2){case
0:b[6]=fF;b[7]=fF;var
ht=20;break;case
1:var
ht=o(b,20,dM,dL,aR,fF);break}var
rL=ht;break;case
19:if(B<=l)var
fK=h(b,F,B,l,l),X=fK[1],dQ=fK[2],dP=fK[3],aT=fK[4],fL=fK[5];else
var
X=g(F,l),dQ=F,dP=B,aT=l+1|0,fL=l;var
b4=0;if(98<=X){if(E<=X){if(D===X)b4=1}else
if(z!==X)b4=1}else
if(59!==X)if(45<=X)if(91<=X)switch(X+S|0){case
6:if(dP<=aT)var
fM=h(b,dQ,dP,aT,aT),x=fM[1],dS=fM[2],dR=fM[3],aV=fM[4],fN=fM[5];else
var
x=g(dQ,aT),dS=dQ,dR=dP,aV=aT+1|0,fN=aT;var
b5=0;if(94<=x){if(aK<=x){if(E!==x&&!(Z<=x))b5=1}else
if(b_===x){if(dR<=aV)var
fO=h(b,dS,dR,aV,aV),dV=fO[1],dU=fO[2],dT=fO[3],aW=fO[4],fP=fO[5];else
var
dV=g(dS,aV),dU=dS,dT=dR,aW=aV+1|0,fP=aV;var
d9=0;if(94<=dV){if(E<=dV){if(D!==dV)d9=1}else
if(z===dV)d9=1}else{var
hx=dV+m|0;if(57<hx>>>0){if(59!==hx)d9=1}else
if(!(27<=hx)){var
iK=0;switch(hx){case
1:var
rM=n(b,4,dU,dT,aW,fP);break;case
25:if(dT<=aW)var
fQ=h(b,dU,dT,aW,aW),dY=fQ[1],dX=fQ[2],dW=fQ[3],aX=fQ[4],fR=fQ[5];else
var
dY=g(dU,aW),dX=dU,dW=dT,aX=aW+1|0,fR=aW;var
d_=0;if(94<=dY){if(E<=dY){if(D!==dY)d_=1}else
if(z===dY)d_=1}else{var
hy=dY+m|0;if(57<hy>>>0){if(59!==hy)d_=1}else
if(!(27<=hy)){var
iL=0;switch(hy){case
1:var
rN=n(b,20,dX,dW,aX,fR);break;case
15:if(dW<=aX)var
fS=h(b,dX,dW,aX,aX),cZ=fS[1],d0=fS[2],dZ=fS[3],aY=fS[4],fT=fS[5];else
var
cZ=g(dX,aX),d0=dX,dZ=dW,aY=aX+1|0,fT=aX;var
b6=0;if(91<=cZ){var
hz=cZ+ea|0;if(32<hz>>>0){if(-2===hz)b6=1}else
if(26<=hz)switch(hz-26|0){case
0:if(dZ<=aY)var
fU=h(b,d0,dZ,aY,aY),_=fU[1],hD=fU[2],hC=fU[3],hB=fU[4],fV=fU[5];else
var
_=g(d0,aY),hD=d0,hC=dZ,hB=aY+1|0,fV=aY;var
b7=0;if(as<=_){if(E<=_){if(D===_)b7=1}else
if(z!==_)b7=1}else
if(33<=_){var
c$=0;if(71<=_)if(91<=_)switch(_+S|0){case
0:case
2:c$=1;break;case
1:case
3:case
4:case
5:b7=1;c$=1;break}else{b7=1;c$=1}else
if(!(65<=_))switch(_+m|0){case
1:var
hE=n(b,20,hD,hC,hB,fV);b7=2;c$=1;break;case
7:case
8:case
11:case
26:c$=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:b7=1;c$=1}if(!c$){var
eg=hD,ef=hC,a7=hB;for(;;){if(ef<=a7)var
eh=h(b,eg,ef,a7,a7),a8=eh[1],ca=eh[2],b$=eh[3],ai=eh[4],ei=eh[5];else
var
a8=g(eg,a7),ca=eg,b$=ef,ai=a7+1|0,ei=a7;var
ah=0;if(65<=a8)if(91<=a8)if(Z<=a8)ah=1;else
switch(a8+S|0){case
4:if(b$<=ai)var
ej=h(b,ca,b$,ai,ai),L=ej[1],gb=ej[2],ga=ej[3],f$=ej[4],ek=ej[5];else
var
L=g(ca,ai),gb=ca,ga=b$,f$=ai+1|0,ek=ai;var
da=0;if(as<=L){if(E<=L){if(D===L)da=1}else
if(z!==L)da=1}else
if(33<=L){var
db=0;if(71<=L)if(91<=L)switch(L+S|0){case
0:case
2:db=1;break;case
1:case
3:case
4:case
5:da=1;db=1;break}else{da=1;db=1}else
if(!(65<=L))switch(L+m|0){case
1:var
d1=n(b,20,gb,ga,f$,ek);da=2;db=1;break;case
7:case
8:case
11:case
26:db=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:da=1;db=1}if(!db){var
eg=gb,ef=ga,a7=f$;continue}}switch(da){case
2:break;case
0:b[6]=ek;b[7]=ek;var
d1=20;break;default:var
d1=o(b,20,gb,ga,f$,ek)}break;case
0:case
2:case
32:case
34:ah=1;break;case
6:case
7:case
8:case
9:case
10:case
11:ah=3;break;default:ah=2}else
if(71<=a8)ah=2;else
ah=3;else
if(33<=a8)switch(a8+m|0){case
1:var
d1=n(b,4,ca,b$,ai,ei);break;case
7:case
8:case
11:case
26:ah=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:ah=3;break;default:ah=2}else
ah=1;switch(ah){case
1:b[6]=ei;b[7]=ei;var
d1=4;break;case
2:var
d1=o(b,4,ca,b$,ai,ei);break;case
3:var
eg=ca,ef=b$,a7=ai;continue}var
hE=d1;b7=2;break}}}switch(b7){case
0:b[6]=fV;b[7]=fV;var
hE=20;break;case
1:var
hE=o(b,20,hD,hC,hB,fV);break}var
hA=hE;b6=2;break;case
3:case
5:break;default:b6=1}else
b6=1}else
if(45<=cZ){if(59!==cZ)b6=1}else
if(33<=cZ)switch(cZ+m|0){case
1:var
hA=n(b,20,d0,dZ,aY,fT);b6=2;break;case
7:case
8:case
11:break;default:b6=1}switch(b6){case
0:b[6]=fT;b[7]=fT;var
hA=20;break;case
1:var
hA=o(b,20,d0,dZ,aY,fT);break}var
rN=hA;break;case
7:case
8:case
11:case
26:d_=1;iL=1;break;default:iL=1}if(!iL){var
iE=rN;d_=2}}}switch(d_){case
1:b[6]=fR;b[7]=fR;var
iE=20;break;case
0:var
iE=o(b,20,dX,dW,aX,fR);break}var
rM=iE;break;case
7:case
8:case
11:case
26:d9=1;iK=1;break;default:iK=1}if(!iK){var
iD=rM;d9=2}}}switch(d9){case
1:b[6]=fP;b[7]=fP;var
iD=4;break;case
0:var
iD=o(b,4,dU,dT,aW,fP);break}var
hw=iD;b5=2}else
if(!(z<=x))b5=1}else
if(60<=x){if(91!==x&&!(93<=x))b5=1}else
if(45<=x){if(!(59<=x))b5=1}else
if(33<=x)switch(x+m|0){case
1:var
hw=n(b,20,dS,dR,aV,fN);b5=2;break;case
7:case
8:case
11:break;default:b5=1}switch(b5){case
0:b[6]=fN;b[7]=fN;var
hw=20;break;case
1:var
hw=o(b,20,dS,dR,aV,fN);break}var
hv=hw;b4=2;break;case
0:case
2:break;default:b4=1}else
b4=1;else
if(33<=X)switch(X+m|0){case
1:var
hv=n(b,20,dQ,dP,aT,fL);b4=2;break;case
7:case
8:case
11:break;default:b4=1}switch(b4){case
0:b[6]=fL;b[7]=fL;var
hv=20;break;case
1:var
hv=o(b,20,dQ,dP,aT,fL);break}var
rL=hv;break;case
0:case
2:case
32:case
34:aO=2;iJ=1;break;default:aO=3;iJ=1}if(!iJ){var
ix=rL;aO=1}}}else
if(27<=hr)aO=3;else
switch(hr){case
1:var
ix=n(b,20,F,B,l,dK);aO=1;break;case
15:if(B<=l)var
fW=h(b,F,B,l,l),rO=fW[1],aL=fW[2],aJ=fW[3],G=fW[4],aZ=fW[5];else
var
rO=g(F,l),aL=F,aJ=B,G=l+1|0,aZ=l;var
hF=rO+m|0,K=0;if(57<hF>>>0){var
rP=hF+ae|0;if(35<rP>>>0)K=2;else{var
hV=0;switch(rP){case
4:var
rQ=JY(b,3,aL,aJ,G,aZ);break;case
10:K=4;hV=1;break;case
29:if(aJ<=G)var
fY=h(b,aL,aJ,G,G),$=fY[1],hI=fY[2],hH=fY[3],hG=fY[4],d2=fY[5];else
var
$=g(aL,G),hI=aL,hH=aJ,hG=G+1|0,d2=G;var
b8=0;if(as<=$){if(E<=$){if(D===$)b8=1}else
if(z!==$)b8=1}else
if(33<=$){var
dc=0;if(71<=$)if(91<=$)switch($+S|0){case
0:case
2:dc=1;break;case
1:case
3:case
4:case
5:b8=1;dc=1;break}else{b8=1;dc=1}else
if(!(65<=$))switch($+m|0){case
1:var
hJ=n(b,20,hI,hH,hG,d2);b8=2;dc=1;break;case
7:case
8:case
11:case
26:dc=1;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:break;default:b8=1;dc=1}if(!dc){var
hJ=JZ(b,20,hI,hH,hG,d2);b8=2}}switch(b8){case
0:b[6]=d2;b[7]=d2;var
hJ=20;break;case
1:var
hJ=o(b,20,hI,hH,hG,d2);break}var
rQ=hJ;break;case
0:case
2:case
32:case
34:K=2;hV=1;break;default:K=3;hV=1}if(!hV){var
iF=rQ;K=1}}}else
if(37<=hF)K=3;else
switch(hF){case
1:var
iF=n(b,3,aL,aJ,G,aZ);K=1;break;case
13:var
iF=f_(b,3,aL,aJ,G,aZ);K=1;break;case
36:K=4;break;case
7:case
8:case
11:case
26:K=2;break;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
fX=qN(b,3,aL,aJ,G,aZ);break;default:K=3}switch(K){case
1:var
fX=iF;break;case
2:b[6]=aZ;b[7]=aZ;var
fX=3;break;case
4:var
fX=dh(b,3,aL,aJ,G,aZ);break;case
3:var
fX=o(b,3,aL,aJ,G,aZ);break}var
ix=fX;aO=1;break;case
7:case
8:case
11:case
26:aO=2;break;case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:var
hs=qN(b,20,F,B,l,dK);break;default:aO=3}switch(aO){case
1:var
hs=ix;break;case
2:b[6]=dK;b[7]=dK;var
hs=20;break;case
3:var
hs=o(b,20,F,B,l,dK);break}var
k=hs;q=2;break;case
9:case
13:case
32:b[6]=e;b[7]=am;var
k=17;q=2;break;case
49:case
50:case
51:case
52:case
53:case
54:case
55:case
56:case
57:var
k=qJ(b,iO,j,f,e,am);q=2;break;case
33:case
35:case
37:case
38:case
39:case
42:case
46:case
47:case
58:break;default:b[6]=e;b[7]=am;var
k=21;q=2}switch(q){case
2:break;case
1:b[6]=e;b[7]=am;var
k=20;break;default:var
k=o(b,iO,j,f,e,am)}}if(hQ){b[6]=e;b[7]=am;var
k=23}var
eC=b[12];if(eC!==bx){b[11]=eC;b[12]=[0,eC[1],eC[2],eC[3],b[4]+b[6]|0]}if(23<k>>>0)throw[0,aU,Kc];switch(k){case
0:return 0;case
1:return 1;case
2:return[0,bS(b,b[5],b[6])];case
3:return[1,bS(b,b[5],b[6])];case
4:return[2,bS(b,b[5],b[6])];case
5:var
aP=bS(b,b[5],b[6]),h8=cd(u(aP)),di=1;for(;;){if(di<(u(aP)-1|0)){if(92===C(aP,di)){var
aQ=di+1|0,bd=C(aP,aQ),f3=0;if(40<=bd)if(b_<=bd)if(d$<=bd)f3=1;else
switch(bd-110|0){case
0:var
bf=10,be=aQ;break;case
4:var
bf=13,be=aQ;break;case
6:var
bf=9,be=aQ;break;case
7:var
eD=aQ+2|0,iN=u(aP),rY=0,r0=E;if(0<=eD&&!(iN<eD)){var
h9=iY(aP,iN,eD,r0);rY=1}if(!rY)var
h9=aa(u8);var
gl=ji([0,f6(i(Ke,bR(aP,eD,h9-eD|0))),0]);ed(h8,gl,0,u(gl)-1|0);var
bf=C(gl,u(gl)-1|0),be=h9;break;default:f3=1}else
if(92===bd)var
bf=92,be=aQ;else
f3=1;else
if(34===bd)var
bf=34,be=aQ;else
if(39<=bd)var
bf=39,be=aQ;else
f3=1;if(f3)var
iR=aQ+1|0,rZ=ec(1,C(aP,iR)),bf=df(f6(i(Kd,i(ec(1,bd),rZ)))),be=iR;var
iT=bf,iS=be}else
var
iT=C(aP,di),iS=di;a6(h8,iT);var
di=iS+1|0;continue}return[3,dg(h8)]}case
6:return bZ(b,Kf);case
7:return bZ(b,Kg);case
8:return qI(b[12],b,Kh);case
9:var
a=bS(b,b[5],b[6]),iU=r(a,Ki);if(0<=iU){if(!(0<iU))return[14,kO];var
iV=r(a,Kj);if(0<=iV){if(!(0<iV))return[31,oV];var
iW=r(a,Kk);if(0<=iW){if(!(0<iW))return 5;var
iX=r(a,Kl);if(0<=iX){if(!(0<iX))return[23,mQ];var
iZ=r(a,Km);if(0<=iZ){if(!(0<iZ))return[20,function(c,b,a){return mK(w(c,3),b,a)}];var
i0=r(a,Kn);if(0<=i0){if(!(0<i0))return[23,mS];if(!c(a,Ko))return[19,function(b,a){return mG(w(b,4),a)}];if(!c(a,Kp))return[21,function(c,b,a){return mM(w(c,1),b,a)}];if(!c(a,Kq))return[21,function(c,b,a){return mN(w(c,2),b,a)}];if(!c(a,Kr))return[21,function(c,b,a){return mO(w(c,3),b,a)}];if(!c(a,Ks))return[21,function(c,b,a){return mL(w(c,0),b,a)}];if(!c(a,Kt))return[23,mT]}else{if(!c(a,Kv))return[18,function(b,a){return mD(w(b,3),a)}];if(!c(a,Kw))return[18,function(b,a){return mF(w(b,3),a)}];if(!c(a,Kx))return[20,function(c,b,a){return mH(w(c,0),b,a)}];if(!c(a,Ky))return[18,function(b,a){return mA(w(b,0),a)}];if(!c(a,Kz))return[18,function(b,a){return mu(w(b,3),a)}];if(!c(a,KA))return[18,function(b,a){return mv(w(b,3),a)}];if(!c(a,KB))return[23,mP]}}else{var
i1=r(a,KC);if(0<=i1){if(!(0<i1))return[18,function(b,a){return mw(w(b,3),a)}];if(!c(a,KD))return[18,function(b,a){return mx(w(b,3),a)}];if(!c(a,KE))return[20,function(c,b,a){return mJ(w(c,2),b,a)}];if(!c(a,KF))return[18,function(b,a){return mC(w(b,2),a)}];if(!c(a,KG))return[18,function(b,a){return mE(w(b,2),a)}];if(!c(a,KH))return[18,function(b,a){return my(w(b,3),a)}];if(!c(a,KI))return[18,function(b,a){return mz(w(b,3),a)}]}else{if(!c(a,KJ))return[23,mR];if(!c(a,KK))return[26,mV];if(!c(a,KL))return[25,mU];if(!c(a,KM))return[22,function(e,h,g){var
b=au(function(a){return a[2]},h),f=f9(e);if(bj(b)!==f)throw[0,f7,AL];var
a=af(16);switch(e[0]){case
0:bw(function(c,b){return bM(a,c,d(Aq,d(ju,b)))},b);break;case
1:bw(function(c,b){return Yv(a,c*2|0,d(z9,d(js,b)))},b);break;case
2:bw(function(c,b){return hW(a,c*4|0,d(hX,b))},b);break;case
3:bw(function(c,b){return iM(a,c*8|0,d(hY,b))},b);break;case
4:bw(function(c,b){var
e=d(bk[7],b);return hW(a,c*4|0,d(bk[11],e))},b);break;default:bw(function(c,b){var
e=d(bl[7],b);return iM(a,c*8|0,d(bl[11],e))},b)}var
c=eb(a);return[0,jQ([0,g,c]),[0,c]]}];if(!c(a,KN))return[18,function(b,a){return mt(w(b,4),a)}];if(!c(a,KO))return[20,function(c,b,a){return mI(w(c,1),b,a)}];if(!c(a,KP))return[18,function(b,a){return mB(w(b,1),a)}]}}}else{var
i2=r(a,KQ);if(0<=i2){if(!(0<i2))return 65;var
i3=r(a,KR);if(0<=i3){if(!(0<i3))return 33;if(!c(a,KS))return 28;if(!c(a,KT))return 29;if(!c(a,KU))return 13;if(!c(a,KV))return 48;if(!c(a,KW))return 6;if(!c(a,KX))return KY}else{if(!c(a,KZ))return 9;if(!c(a,K0))return 47;if(!c(a,K1))return 53;if(!c(a,K2))return 32;if(!c(a,K3))return 31;if(!c(a,K4))return 27;if(!c(a,K5))return 30}}else{var
i4=r(a,K6);if(0<=i4){if(!(0<i4))return 43;if(!c(a,K7))return 42;if(!c(a,K8))return 44;if(!c(a,K9))return 41;if(!c(a,K_))return 66;if(!c(a,K$))return 50;if(!c(a,La))return 21}else{if(!c(a,Lb))return Lj;if(!c(a,Lc))return Li;if(!c(a,Ld))return 7;if(!c(a,Le))return 58;if(!c(a,Lf))return 76;if(!c(a,Lg))return 49;if(!c(a,Lh))return 64}}}}else{var
i5=r(a,Lk);if(0<=i5){if(!(0<i5))return[24,m3];var
i7=r(a,Ll);if(0<=i7){if(!(0<i7))return 75;var
i8=r(a,Lm);if(0<=i8){if(!(0<i8))return 55;if(!c(a,Ln))return 38;if(!c(a,Lo))return 37;if(!c(a,Lp))return 36;if(!c(a,Lq))return 39;if(!c(a,Lr))return 35;if(!c(a,Ls))return 62}else{if(!c(a,Lt))return 67;if(!c(a,Lu))return 59;if(!c(a,Lv))return 51;if(!c(a,Lw))return 22;if(!c(a,Lx))return 23;if(!c(a,Ly))return 24;if(!c(a,Lz))return 15}}else{var
i9=r(a,LA);if(0<=i9){if(!(0<i9))return[29,mY];if(!c(a,LB))return[24,np];if(!c(a,LC))return[24,nq];if(!c(a,LD))return[24,nr];if(!c(a,LE))return[24,mW];if(!c(a,LF))return 12;if(!c(a,LG))return 60}else{if(!c(a,LH))return[23,na];if(!c(a,LI))return[23,nt];if(!c(a,LJ))return[31,m1];if(!c(a,LK))return[27,nj];if(!c(a,LL))return[27,nk];if(!c(a,LM))return[27,nl];if(!c(a,LN))return 45}}}else{var
i_=r(a,LO);if(0<=i_){if(!(0<i_))return[30,m0];var
i$=r(a,LP);if(0<=i$){if(!(0<i$))return[24,m5];if(!c(a,LQ))return[24,nw];if(!c(a,LR))return[24,nx];if(!c(a,LS))return[24,nu];if(!c(a,LT))return[24,nv];if(!c(a,LU))return[24,nd];if(!c(a,LV))return[24,ne]}else{if(!c(a,LW))return[24,m_];if(!c(a,LX))return[24,m$];if(!c(a,LY))return[24,m8];if(!c(a,LZ))return[24,m9];if(!c(a,L0))return[24,m6];if(!c(a,L1))return[24,m7];if(!c(a,L2))return[24,m4]}}else{var
ja=r(a,L3);if(0<=ja){if(!(0<ja))return[24,nm];if(!c(a,L4))return[24,nn];if(!c(a,L5))return[24,no];if(!c(a,L6))return[26,nc];if(!c(a,L7))return[23,ny];if(!c(a,L8))return[28,nb];if(!c(a,L9))return[24,m2];if(!c(a,L_))return[30,mZ]}else{if(!c(a,L$))return[27,pb];if(!c(a,Ma))return[27,pc];if(!c(a,Mb))return[27,pd];if(!c(a,Mc))return[29,oT];if(!c(a,Md))return[24,o$];if(!c(a,Me))return Mg;if(!c(a,Mf))return[23,ns]}}}}}else{var
jb=r(a,Mh);if(0<=jb){if(!(0<jb))return[16,lD];var
jc=r(a,Mi);if(0<=jc){if(!(0<jc))return[17,l_];var
jd=r(a,Mj);if(0<=jd){if(!(0<jd))return[23,oZ];var
je=r(a,Mk);if(0<=je){if(!(0<je))return[24,o5];if(!c(a,Ml))return[24,o4];if(!c(a,Mm))return[24,o3];if(!c(a,Mn))return[24,o2];if(!c(a,Mo))return[24,pa];if(!c(a,Mp))return[24,o1];if(!c(a,Mq))return[23,o7]}else{if(!c(a,Mr))return[23,oW];if(!c(a,Ms))return[23,oY];if(!c(a,Mt))return[23,pf];if(!c(a,Mu))return[23,ph];if(!c(a,Mv))return[23,pe];if(!c(a,Mw))return[23,pg];if(!c(a,Mx))return[30,oU]}}else{var
jf=r(a,My);if(0<=jf){if(!(0<jf))return MF;if(!c(a,Mz))return[23,o6];if(!c(a,MA))return[24,o_];if(!c(a,MB))return[26,o9];if(!c(a,MC))return[28,o8];if(!c(a,MD))return[24,o0];if(!c(a,ME))return[23,oX]}else{if(!c(a,MG))return[17,l$];if(!c(a,MH))return[17,ma];if(!c(a,MI))return[17,mf];if(!c(a,MJ))return[17,mg];if(!c(a,MK))return[17,mh];if(!c(a,ML))return[17,mi];if(!c(a,MM))return[14,k3]}}}else{var
jg=r(a,MN);if(0<=jg){if(!(0<jg))return[13,kq];var
jh=r(a,MO);if(0<=jh){if(!(0<jh))return[14,k6];if(!c(a,MP))return[9,function(b,a){return j_(w(b,3),a)}];if(!c(a,MQ))return[8,function(b,a){return ke(w(b,1),a)}];if(!c(a,MR))return[8,function(b,a){return kf(w(b,2),a)}];if(!c(a,MS))return[8,function(b,a){return kd(w(b,0),a)}];if(!c(a,MT))return[14,kV];if(!c(a,MU))return[17,l9]}else{if(!c(a,MV))return[17,mq];if(!c(a,MW))return[14,kZ];if(!c(a,MX))return[14,k0];if(!c(a,MY))return[14,k7];if(!c(a,MZ))return[14,k8];if(!c(a,M0))return[14,k4];if(!c(a,M1))return[14,k5]}}else{var
jj=r(a,M2);if(0<=jj){if(!(0<jj))return[8,function(b,a){return j8(w(b,2),a)}];if(!c(a,M3))return[8,function(b,a){return j3(w(b,0),a)}];if(!c(a,M4))return[8,function(b,a){return j4(w(b,0),a)}];if(!c(a,M5))return[16,lz];if(!c(a,M6))return[16,lA];if(!c(a,M7))return[14,kW];if(!c(a,M8))return[16,ly];if(!c(a,M9))return[14,k2]}else{if(!c(a,M_))return[16,lE];if(!c(a,M$))return[16,lB];if(!c(a,Na))return[16,lC];if(!c(a,Nb))return[8,function(b,a){return jW(w(b,3),a)}];if(!c(a,Nc))return[8,function(b,a){return j5(w(b,1),a)}];if(!c(a,Nd))return[8,function(b,a){return j6(w(b,1),a)}];if(!c(a,Ne))return[8,function(b,a){return j7(w(b,2),a)}]}}}}else{var
jk=r(a,Nf);if(0<=jk){if(!(0<jk))return[24,oH];var
jl=r(a,Ng);if(0<=jl){if(!(0<jl))return[14,k1];var
jm=r(a,Nh);if(0<=jm){if(!(0<jm))return[13,lW];if(!c(a,Ni))return[13,lX];if(!c(a,Nj))return[13,lV];if(!c(a,Nk))return[17,l7];if(!c(a,Nl))return[17,l8];if(!c(a,Nm))return[16,lF];if(!c(a,Nn))return[16,lG]}else{if(!c(a,No))return[13,ko];if(!c(a,Np))return[12,function(a){var
b=d(hY,a[2]);return[0,jN([0,a[1],b]),[1,b]]}];if(!c(a,Nq))return[13,kp];if(!c(a,Nr))return[14,kX];if(!c(a,Ns))return[14,kY];if(!c(a,Nt))return[16,lx];if(!c(a,Nu))return[15,lm]}}else{var
jn=r(a,Nv);if(0<=jn){if(!(0<jn))return[24,oC];if(!c(a,Nw))return[23,oJ];if(!c(a,Nx))return[23,oK];if(!c(a,Ny))return[23,oL];if(!c(a,Nz))return[23,oM];if(!c(a,NA))return NC;if(!c(a,NB))return[14,kU]}else{if(!c(a,ND))return[24,oh];if(!c(a,NE))return[23,or];if(!c(a,NF))return[31,of];if(!c(a,NG))return[27,oy];if(!c(a,NH))return[27,oz];if(!c(a,NI))return[27,oA];if(!c(a,NJ))return[29,od]}}}else{var
jo=r(a,NK);if(0<=jo){if(!(0<jo))return[23,oN];var
jp=r(a,NL);if(0<=jp){if(!(0<jp))return[24,ol];if(!c(a,NM))return[24,oi];if(!c(a,NN))return[24,oj];if(!c(a,NO))return[24,oF];if(!c(a,NP))return[24,oG];if(!c(a,NQ))return[24,oD];if(!c(a,NR))return[24,oE]}else{if(!c(a,NS))return[23,oP];if(!c(a,NT))return[30,oe];if(!c(a,NU))return[24,oo];if(!c(a,NV))return[24,op];if(!c(a,NW))return[24,om];if(!c(a,NX))return[24,on];if(!c(a,NY))return[24,ok]}}else{var
jq=r(a,NZ);if(0<=jq){if(!(0<jq))return[23,oR];if(!c(a,N0))return[23,oS];if(!c(a,N1))return[23,ov];if(!c(a,N2))return[23,ox];if(!c(a,N3))return[23,ou];if(!c(a,N4))return[23,ow];if(!c(a,N5))return[23,oO];if(!c(a,N6))return[23,oQ]}else{if(!c(a,N7))return Oc;if(!c(a,N8))return[23,oq];if(!c(a,N9))return[24,oB];if(!c(a,N_))return[26,ot];if(!c(a,N$))return[28,os];if(!c(a,Oa))return[24,oI];if(!c(a,Ob))return[24,og]}}}}}}else{var
jr=r(a,Od);if(0<=jr){if(!(0<jr))return[23,pV];var
jt=r(a,Oe);if(0<=jt){if(!(0<jt))return[24,nE];var
jv=r(a,Of);if(0<=jv){if(!(0<jv))return[8,function(b,a){return j2(w(b,1),a)}];var
jw=r(a,Og);if(0<=jw){if(!(0<jw))return[14,kQ];var
jx=r(a,Oh);if(0<=jx){if(!(0<jx))return[17,l1];if(!c(a,Oi))return[17,l2];if(!c(a,Oj))return[17,l3];if(!c(a,Ok))return[17,l4];if(!c(a,Ol))return[17,l5];if(!c(a,Om))return[17,l6];if(!c(a,On))return[17,lY]}else{if(!c(a,Oo))return[14,kR];if(!c(a,Op))return[9,function(b,a){return j9(w(b,2),a)}];if(!c(a,Oq))return[8,function(b,a){return kc(w(b,1),a)}];if(!c(a,Or))return[8,function(b,a){return kb(w(b,0),a)}];if(!c(a,Os))return[14,kG];if(!c(a,Ot))return[17,lZ];if(!c(a,Ou))return[17,l0]}}else{var
jy=r(a,Ov);if(0<=jy){if(!(0<jy))return[13,kn];if(!c(a,Ow))return[17,mp];if(!c(a,Ox))return[14,kK];if(!c(a,Oy))return[14,kL];if(!c(a,Oz))return[14,kS];if(!c(a,OA))return[14,kT];if(!c(a,OB))return[14,kP]}else{if(!c(a,OC))return[8,function(b,a){return jZ(w(b,0),a)}];if(!c(a,OD))return[8,function(b,a){return j0(w(b,0),a)}];if(!c(a,OE))return[16,lp];if(!c(a,OF))return[16,lq];if(!c(a,OG))return[14,kH];if(!c(a,OH))return[16,lo];if(!c(a,OI))return[14,kN]}}}else{var
jz=r(a,OJ);if(0<=jz){if(!(0<jz))return[13,km];var
jA=r(a,OK);if(0<=jA){if(!(0<jA))return[16,lw];if(!c(a,OL))return[16,lt];if(!c(a,OM))return[16,lu];if(!c(a,ON))return[16,lr];if(!c(a,OO))return[16,ls];if(!c(a,OP))return[8,function(b,a){return jV(w(b,2),a)}];if(!c(a,OQ))return[8,function(b,a){return j1(w(b,1),a)}]}else{if(!c(a,OR))return[14,kI];if(!c(a,OS))return[14,kJ];if(!c(a,OT))return[16,ln];if(!c(a,OU))return[15,ll];if(!c(a,OV))return[13,lU];if(!c(a,OW))return[13,lT];if(!c(a,OX))return[16,lv]}}else{var
jB=r(a,OY);if(0<=jB){if(!(0<jB))return[24,nY];if(!c(a,OZ))return[24,nZ];if(!c(a,O0))return[24,n0];if(!c(a,O1))return O6;if(!c(a,O2))return[14,kF];if(!c(a,O3))return[14,kM];if(!c(a,O4))return[13,kl];if(!c(a,O5))return[12,function(a){var
b=d(hX,a[2]);return[0,ee([0,a[1],b]),[0,b]]}]}else{if(!c(a,O7))return[23,nN];if(!c(a,O8))return[24,oa];if(!c(a,O9))return[31,nC];if(!c(a,O_))return[27,nS];if(!c(a,O$))return[27,nT];if(!c(a,Pa))return[27,nU];if(!c(a,Pb))return[29,nz]}}}}else{var
jC=r(a,Pc);if(0<=jC){if(!(0<jC))return[23,n7];var
jD=r(a,Pd);if(0<=jD){if(!(0<jD))return[24,nL];var
jE=r(a,Pe);if(0<=jE){if(!(0<jE))return[24,n5];if(!c(a,Pf))return[24,n6];if(!c(a,Pg))return[24,n3];if(!c(a,Ph))return[24,n4];if(!c(a,Pi))return[24,n1];if(!c(a,Pj))return[24,nQ];if(!c(a,Pk))return[24,nR]}else{if(!c(a,Pl))return[24,nM];if(!c(a,Pm))return[24,nJ];if(!c(a,Pn))return[24,nK];if(!c(a,Po))return[24,nH];if(!c(a,Pp))return[24,nI];if(!c(a,Pq))return[24,nF];if(!c(a,Pr))return[24,nG]}}else{var
jF=r(a,Ps);if(0<=jF){if(!(0<jF))return[23,nh];if(!c(a,Pt))return[23,n9];if(!c(a,Pu))return[23,n$];if(!c(a,Pv))return[23,n8];if(!c(a,Pw))return[23,n_];if(!c(a,Px))return[30,nA];if(!c(a,Py))return[30,nB]}else{if(!c(a,Pz))return[28,nO];if(!c(a,PA))return[24,nD];if(!c(a,PB))return[23,ob];if(!c(a,PC))return[23,oc];if(!c(a,PD))return[23,ng];if(!c(a,PE))return[23,ni];if(!c(a,PF))return[23,nf]}}}else{var
jG=r(a,PG);if(0<=jG){if(!(0<jG))return[23,pT];var
jH=r(a,PH);if(0<=jH){if(!(0<jH))return 26;if(!c(a,PI))return PO;if(!c(a,PJ))return[23,n2];if(!c(a,PK))return[24,nV];if(!c(a,PL))return[24,nW];if(!c(a,PM))return[24,nX];if(!c(a,PN))return[26,nP]}else{if(!c(a,PP))return[24,pZ];if(!c(a,PQ))return[23,pW];if(!c(a,PR))return 46;if(!c(a,PS))return 2;if(!c(a,PT))return 68;if(!c(a,PU))return 52;if(!c(a,PV))return 25}}else{var
jI=r(a,PW);if(0<=jI){if(!(0<jI))return[24,pN];if(!c(a,PX))return[23,pX];if(!c(a,PY))return[23,pS];if(!c(a,PZ))return[24,p6];if(!c(a,P0))return[24,p5];if(!c(a,P1))return[23,p7];if(!c(a,P2))return[31,pL];if(!c(a,P3))return[29,pJ]}else{if(!c(a,P4))return[24,pR];if(!c(a,P5))return[24,pQ];if(!c(a,P6))return[24,pP];if(!c(a,P7))return[24,pO];if(!c(a,P8))return[24,p3];if(!c(a,P9))return[24,p2];if(!c(a,P_))return[24,p0]}}}}}else{var
jJ=r(a,P$);if(0<=jJ){if(!(0<jJ))return[23,pG];var
jK=r(a,Qa);if(0<=jK){if(!(0<jK))return[14,lk];var
jL=r(a,Qb);if(0<=jL){if(!(0<jL))return[17,mo];var
jM=r(a,Qc);if(0<=jM){if(!(0<jM))return[24,pY];if(!c(a,Qd))return[23,pU];if(!c(a,Qe))return[23,p8];if(!c(a,Qf))return[23,p9];if(!c(a,Qg))return[24,p1];if(!c(a,Qh))return[24,pM];if(!c(a,Qi))return[30,pK]}else{if(!c(a,Qj))return[17,ms];if(!c(a,Qk))return[13,kA];if(!c(a,Ql))return[9,function(b,a){return ka(w(b,3),a)}];if(!c(a,Qm))return[14,lf];if(!c(a,Qn))return[13,kD];if(!c(a,Qo))return Qq;if(!c(a,Qp))return[23,p4]}}else{var
jR=r(a,Qr);if(0<=jR){if(!(0<jR))return[16,lP];if(!c(a,Qs))return[14,lj];if(!c(a,Qt))return[14,li];if(!c(a,Qu))return[14,lg];if(!c(a,Qv))return[16,lO];if(!c(a,Qw))return[13,kE];if(!c(a,Qx))return[13,ky]}else{if(!c(a,Qy))return[14,lh];if(!c(a,Qz))return[16,lN];if(!c(a,QA))return[13,kC];if(!c(a,QB))return[16,lS];if(!c(a,QC))return[16,lR];if(!c(a,QD))return[16,lQ];if(!c(a,QE))return[8,function(b,a){return jY(w(b,3),a)}]}}}else{var
jS=r(a,QF);if(0<=jS){if(!(0<jS))return[24,pE];var
jT=r(a,QG);if(0<=jT){if(!(0<jT))return[14,le];if(!c(a,QH))return[13,kB];if(!c(a,QI))return[12,function(a){var
b=d(bl[7],a[2]);return[0,jP([0,a[1],b]),[3,b]]}];if(!c(a,QJ))return[17,mk];if(!c(a,QK))return[17,ml];if(!c(a,QL))return[17,mm];if(!c(a,QM))return[17,mn]}else{if(!c(a,QN))return[31,pk];if(!c(a,QO))return[29,pi];if(!c(a,QP))return[23,pt];if(!c(a,QQ))return[24,pz];if(!c(a,QR))return[23,pw];if(!c(a,QS))return QU;if(!c(a,QT))return[13,kz]}}else{var
jU=r(a,QV);if(0<=jU){if(!(0<jU))return[24,pn];if(!c(a,QW))return[24,pD];if(!c(a,QX))return[24,pC];if(!c(a,QY))return[24,pA];if(!c(a,QZ))return[24,pm];if(!c(a,Q0))return[23,px];if(!c(a,Q1))return[23,ps];if(!c(a,Q2))return[24,pF]}else{if(!c(a,Q3))return[24,pB];if(!c(a,Q4))return[24,pl];if(!c(a,Q5))return[30,pj];if(!c(a,Q6))return[23,pv];if(!c(a,Q7))return[24,pq];if(!c(a,Q8))return[24,pp];if(!c(a,Q9))return[24,po]}}}}else{var
kg=r(a,Q_);if(0<=kg){if(!(0<kg))return[17,mc];var
kh=r(a,Q$);if(0<=kh){if(!(0<kh))return[14,k$];var
ki=r(a,Ra);if(0<=ki){if(!(0<ki))return[13,kw];if(!c(a,Rb))return Rh;if(!c(a,Rc))return[23,pr];if(!c(a,Rd))return[24,py];if(!c(a,Re))return[23,pu];if(!c(a,Rf))return[23,pH];if(!c(a,Rg))return[23,pI]}else{if(!c(a,Ri))return[16,lI];if(!c(a,Rj))return[13,kx];if(!c(a,Rk))return[13,kr];if(!c(a,Rl))return[17,mr];if(!c(a,Rm))return[13,kt];if(!c(a,Rn))return[9,function(b,a){return j$(w(b,2),a)}];if(!c(a,Ro))return[14,k_]}}else{var
kj=r(a,Rp);if(0<=kj){if(!(0<kj))return[16,lM];if(!c(a,Rq))return[16,lL];if(!c(a,Rr))return[16,lK];if(!c(a,Rs))return[8,function(b,a){return jX(w(b,2),a)}];if(!c(a,Rt))return[16,lJ];if(!c(a,Ru))return[14,lc];if(!c(a,Rv))return[14,lb]}else{if(!c(a,Rw))return[17,md];if(!c(a,Rx))return[17,me];if(!c(a,Ry))return[14,ld];if(!c(a,Rz))return[17,mj];if(!c(a,RA))return[14,la];if(!c(a,RB))return[16,lH];if(!c(a,RC))return[13,kv]}}}else{var
kk=r(a,RD);if(0<=kk){if(!(0<kk))return 57;var
mX=r(a,RE);if(0<=mX){if(!(0<mX))return 3;if(!c(a,RF))return RL;if(!c(a,RG))return[13,ks];if(!c(a,RH))return[14,k9];if(!c(a,RI))return[13,ku];if(!c(a,RJ))return[12,function(a){var
b=d(bk[7],a[2]);return[0,jO([0,a[1],b]),[2,b]]}];if(!c(a,RK))return[17,mb]}else{if(!c(a,RM))return 8;if(!c(a,RN))return 54;if(!c(a,RO))return 34;if(!c(a,RP))return 14;if(!c(a,RQ))return 11;if(!c(a,RR))return 61;if(!c(a,RS))return 4}}else{var
p_=r(a,RT);if(0<=p_){if(!(0<p_))return 10;if(!c(a,RU))return 16;if(!c(a,RV))return 17;if(!c(a,RW))return 18;if(!c(a,RX))return 19;if(!c(a,RY))return 20;if(!c(a,RZ))return 56;if(!c(a,R0))return 40}else{if(!c(a,R1))return 74;if(!c(a,R2))return 70;if(!c(a,R3))return 69;if(!c(a,R4))return 72;if(!c(a,R5))return 73;if(!c(a,R6))return 71;if(!c(a,R7))return 63}}}}}}break;case
10:return[10,bS(b,b[5]+7|0,b[6])];case
11:return[11,bS(b,b[5]+6|0,b[6])];case
12:return[4,bS(b,b[5],b[6])];case
16:qQ(b[11],b);continue;case
20:break;case
21:return bZ(b,R8);case
22:return bZ(b,R9);case
23:return bZ(b,R_);case
13:case
19:return 77;case
14:case
18:i6(b);continue;default:continue}return bZ(b,i(Ku,f8(b[2],b[5],b[6]-b[5]|0)))}}function
Sc(h,b,g){switch(g){case
0:var
a=JU;break;case
1:var
a=JS;break;default:var
a=JT}var
c=b[12];b[12]=[0,h,c[2],c[3],c[4]];try{var
j=a(Kb,b);return j}catch(a){a=ap(a);if(a[1]===eI){var
d=a[2];if(e(d,ce))var
f=d;else
var
i=eK(b[12]),f=[0,eK(b[11]),i];throw[0,eI,f,a[3]]}throw a}}function
gH(b,a){return[1,[0,[0,b],[0,a,0]]]}function
qR(b,a){return[1,[0,b,[0,[0,a],0]]]}function
qS(a){return 0===a[0]?a[1]:cC(Se,au(qS,a[1]))}function
qT(b,c,a){if(0===a[0]){var
d=a[1];return[0,u(d),[0,d]]}var
e=a[1],m=a[2],n=b+2|0,f=iU(au(function(a){return qT(n,c,a)},m)),g=f[2],o=f[1],p=2,q=d8(function(b,a){return b+a|0},p,o),h=(u(e)+bj(g)|0)+q|0;if((b+h|0)<=c)var
k=Sg,j=Sf;else
var
l=ec(b,32),r=i(Sj,l),k=i(Sk,l),j=r;return[0,h,gH(Si,gH(e,qR(qR([1,au(function(a){return gH(k,a)},g)],j),Sh)))]}function
aS(a){return d(dk,d(et,a))}function
qU(b,a){return d(jb(b,Sm),a)}function
qV(b,a){if(34<=a){if(92===a)return aV(b,Sn);if(!(35<=a))return aV(b,So)}else{if(9===a)return aV(b,Sp);if(10===a)return aV(b,Sq)}if(32<=a&&!(Z<=a))return a6(b,a);return qU(b,a)}function
Sr(b,a){if(1<a-9>>>0){if(32<=a&&!(Z<=a))return qV(b,df(a));return d(jb(b,Ss),a)}return qV(b,df(a))}function
qW(e,c,b){var
a=cd(b5);a6(a,34);f(e,d(c,a),b);a6(a,34);return dg(a)}function
St(a){return qW(iX,qU,a)}function
gI(a){return qW(cb,Sr,a)}function
qX(a){var
b=a?[0,a[1],0]:a;return b}function
aT(b,a){return au(b,a)}function
cj(b,a){return fQ(b,a)}function
qY(b,a){return aT(b,qX(a))}function
aF(b,a){return[0,d(b,a)]}function
cN(a){return jw(a)}function
dy(a){return jx(a)}function
qZ(a){return jy(a)}function
Su(a){return gg(a)}function
dz(b,a){function
c(a){return aF(Su,a)}return 0===a?0:[0,[1,b,aT(c,a)],0]}function
q0(b,a){var
c=qY(b,a[2]);return cC(Sy,[0,d(b,a[1]),c])}function
q1(a){var
b=a[1];return 0===a[2]?aF(gg,b):[1,Sz,[0,aF(gg,b),0]]}function
cO(a){switch(a){case
0:return SA;case
1:return SB;case
2:return SC;default:return SD}}function
gJ(a){return 0===a?SE:SF}function
SG(b,a){return SH}function
SI(b,a){switch(a){case
0:return SJ;case
1:return SK;case
2:return SL;case
3:return SM;case
4:return SN;case
5:return SO;case
6:return SP;case
7:return SQ;case
8:return SR;default:return SS}}function
ST(b,a){if(typeof
a==="number")switch(a){case
0:return SU;case
1:return SV;default:return SW}return i(SY,i(cO(a[1]),SX))}function
SZ(b,a){switch(a){case
0:return S0;case
1:return S1;case
2:return S2;case
3:return S3;case
4:return S4;case
5:return S5;case
6:return S6;case
7:return S7;case
8:return S8;case
9:return S9;case
10:return S_;case
11:return S$;case
12:return Ta;case
13:return Tb;default:return Tc}}function
Td(b,a){switch(a){case
0:return Te;case
1:return Tf;case
2:return Tg;case
3:return Th;case
4:return Ti;case
5:return Tj;case
6:return Tk;case
7:return Tl;case
8:return Tm;case
9:return Tn;case
10:return To;default:return i(Tp,b)}}function
Tq(b,a){throw[0,d6,Tr]}function
Ts(b,a){switch(a){case
0:return Tt;case
1:return Tu;case
2:return Tv;case
3:return Tw;case
4:return Tx;default:return Ty}}function
Tz(b,a){switch(a){case
0:return TA;case
1:return TB;case
2:return TC;case
3:return TD;case
4:return TE;case
5:return TF;default:return TG}}function
TH(b,a){switch(a){case
0:return TI;case
1:return TJ;case
2:return TK;case
3:return TL;case
4:return TM;case
5:return TN;default:return TO}}function
TP(b,a){switch(a){case
0:return TQ;case
1:return TR;case
2:return TS;case
3:return TT;case
4:return TU;case
5:return TV;default:return i(TW,b)}}function
bd(a){if(c(a,TX)){if(c(a,TY)){if(c(a,TZ))throw[0,F,T0];return T1}return T2}return T3}function
q2(a){if(c(a,T4)){if(c(a,T5)){if(c(a,T6))throw[0,F,T7];return T8}return T9}return T_}function
gK(b,a){throw[0,d6,T$]}function
q3(b,a){return Ua}function
q4(b,a){switch(a){case
0:return Ub;case
1:return Uc;default:return Ud}}function
Ue(b,a){switch(a){case
0:return Uf;case
1:return Ug;case
2:return Uh;case
3:return Ui;case
4:return Uj;case
5:return Uk;default:return Ul}}function
q5(a,b){if(typeof
b==="number")switch(b){case
0:return Um;case
1:return Un;case
2:return Uo;case
3:return Up;case
4:return Uq;case
5:return Ur;case
6:return Us;case
7:return Ut;case
8:return Uu;case
9:return Uv;case
10:return Uw;case
11:return Ux;case
12:return i(Uz,i(bd(a),Uy));case
13:return UA;case
14:return i(UC,i(bd(a),UB));case
15:return i(UE,i(bd(a),UD));case
16:return i(UG,i(bd(a),UF));case
17:return i(UI,i(bd(a),UH));case
18:return UJ;case
19:return i(UL,i(q2(a),UK));default:return i(UN,i(q2(a),UM))}return i(UP,cC(UO,au(aS,b[1])))}function
UQ(b,a){switch(a){case
0:return UR;case
1:return US;case
2:return UT;case
3:return UU;case
4:return UV;case
5:return UW;case
6:return UX;default:return UY}}function
q6(b,a){switch(a){case
0:return UZ;case
1:return U0;case
2:return U1;case
3:return U2;case
4:return U3;case
5:return U4;case
6:return U5;case
7:return U6;case
8:return U7;default:return U8}}function
U9(b,a){switch(a){case
0:return U_;case
1:return U$;case
2:return Va;case
3:return Vb;case
4:return Vc;default:return Vd}}function
q7(a,b){switch(b){case
0:return i(Vf,i(bd(a),Ve));case
1:return i(Vh,i(bd(a),Vg));case
2:return i(Vj,i(bd(a),Vi));case
3:return i(Vl,i(bd(a),Vk));case
4:return i(Vn,i(bd(a),Vm));case
5:return i(Vp,i(bd(a),Vo));case
6:return Vq;case
7:return Vr;case
8:return Vs;default:return Vt}}function
Vu(a,b){switch(b){case
0:return Vv;case
1:return Vw;case
2:var
c=ca(a,Vy)?Vz:VB;return i(VA,i(c,Vx));default:var
d=ca(a,VD)?VE:VG;return i(VF,i(d,VC))}}function
q8(b,a){switch(a){case
0:return VH;case
1:return VI;default:return VJ}}function
q9(b,a){return VK}function
VL(a){return VM}function
VN(a){return VO}function
VP(a){switch(a){case
0:return VQ;case
1:return VR;case
2:return VS;default:return VT}}function
VU(a){return VV}function
gL(b,a){return VW}function
VX(c,a){var
b=i(VY,aS(a[1]));return i(VZ,i(gJ(a[2]),b))}function
q_(b,a){return i(V0,aS(a[1]))}function
gM(b,a){return i(V1,aS(a[1]))}function
dA(c,a){var
d=c[2],e=c[1];switch(a[0]){case
0:var
b=f(e,V8,a[1]);break;case
1:var
b=f(e,V_,a[1]);break;case
2:var
b=f(d,V$,a[1]);break;default:var
b=f(d,Wa,a[1])}var
g=i(V9,b);return i(cN(jA(a)),g)}function
eM(b,a){return i(Wb,d(b,a[1]))}function
bn(d,j){var
a=j[1],e=d[3],g=d[2],h=d[1];switch(a[0]){case
0:var
b=f(h,V2,a[1]);break;case
1:var
b=f(h,V3,a[1]);break;case
2:var
b=f(g,V4,a[1]);break;case
3:var
b=f(g,V5,a[1]);break;case
4:var
b=f(e,V6,a[1]);break;default:var
b=f(e,V7,a[1])}var
k=i(Wc,b);switch(a[0]){case
0:var
c=AM;break;case
1:var
c=AN;break;case
2:var
c=AO;break;case
3:var
c=AP;break;case
4:var
c=AQ;break;default:var
c=AR}return i(c,k)}var
Wd=[0,ST,Tz],We=[0,SZ,TH],Wf=[0,SG,Tq],Wg=[0,SI,Ts],Wh=[0,Td,TP],Wi=[0,q4,q4,Ue],Wj=[0,q5,q5,UQ],Wk=[0,q3,q3,gK],Wl=[0,q6,q6,U9],Wm=[0,q7,q7,Vu],Wn=[0,q8,q8,gK],Wo=[0,q9,q9,gK],Wp=[0,gL,gL,gL],Wq=[0,VX,q_,q_],Wr=[0,gM,gM,gM];function
b0(g,f,a,e){var
b=a[3],c=a[2],h=1<<c===e?Ws:i(Ww,aS(1<<c)),j=N(b,0)?Wt:i(Wv,d(dk,b)),k=i(Wu,i(g,i(j,h)));return i(d(f,a[1]),k)}function
q$(c,b){var
a=b[1],d=i(Wx,aS(b[2])),e=ew(a[4]);return i(b0(i(c,i(cO(a[4]),Wy)),dy,a,e),d)}function
L(a){return d(dk,a[2])}function
gN(a){return 0===a[0]?[0,[1,i(WB,L(a[1])),0],0]:dz(WC,qX(a[1]))}function
b1(C){var
a=C[2];if(typeof
a==="number")switch(a){case
0:var
b=WD;break;case
1:var
b=WE;break;case
2:var
b=WF;break;case
3:var
b=WG;break;case
4:var
b=WH;break;case
5:var
b=WI;break;case
6:var
b=WJ;break;case
7:var
b=WK;break;default:var
b=WL}else
switch(a[0]){case
0:var
m=a[1];if(m)var
n=m[1],D=n?[0,WN,dz(WM,n)]:WO,o=D;else
var
o=WP;var
b=o;break;case
1:var
E=aT(b1,a[2]),b=[0,WQ,t(gN(a[1]),E)];break;case
2:var
F=aT(b1,a[2]),b=[0,WR,t(gN(a[1]),F)];break;case
3:var
G=[0,[1,WS,aT(b1,a[3])],0],H=[0,[1,WT,aT(b1,a[2])],G],b=[0,WU,t(gN(a[1]),H)];break;case
4:var
b=[0,i(WV,L(a[1])),0];break;case
5:var
b=[0,i(WW,L(a[1])),0];break;case
6:var
b=[0,i(WY,cC(WX,aT(L,t(a[1],[0,a[2],0])))),0];break;case
7:var
b=[0,i(WZ,L(a[1])),0];break;case
8:var
I=[0,[1,i(W0,L(a[2])),0],0],b=[0,i(W1,L(a[1])),I];break;case
9:var
b=[0,i(W2,L(a[1])),0];break;case
10:var
b=[0,i(W3,L(a[1])),0];break;case
11:var
b=[0,i(W4,L(a[1])),0];break;case
12:var
b=[0,i(W5,L(a[1])),0];break;case
13:var
b=[0,i(W6,L(a[1])),0];break;case
14:var
b=[0,i(W7,L(a[1])),0];break;case
15:var
b=[0,i(W8,L(a[1])),0];break;case
16:var
b=[0,i(W9,L(a[1])),0];break;case
17:var
b=[0,i(W_,L(a[1])),0];break;case
18:var
b=[0,i(W$,L(a[1])),0];break;case
19:var
J=i(Xa,L(a[2])),b=[0,i(Xb,i(L(a[1]),J)),0];break;case
20:var
K=i(Xc,L(a[2])),b=[0,i(Xd,i(L(a[1]),K)),0];break;case
21:var
b=[0,i(Xe,L(a[1])),0];break;case
22:var
e=a[1],p=e[4],M=0;if(p)var
q=p[1],r=q[1],N=ew(r),O=gJ(q[2]),s=b0(i(Xf,i(cO(r),O)),cN,e,N);else
var
s=b0(Xg,cN,e,jv(e[1]));var
b=[0,s,M];break;case
23:var
f=a[1],u=f[4],P=0;if(u)var
v=u[1],Q=ew(v),w=b0(i(Xh,cO(v)),cN,f,Q);else
var
w=b0(Xi,cN,f,jv(f[1]));var
b=[0,w,P];break;case
24:var
j=a[1],x=j[4],R=0;if(x){var
y=x[1],g=y[2],k=y[1],S=ew(k);if(typeof
g==="number")var
z=0===g?i(cO(k),Xj):i(cO(k),Xl);else{var
T=gJ(g[2]);switch(g[1]){case
0:var
l=Xm;break;case
1:var
l=Xn;break;default:var
l=Xo}var
z=i(l,T)}var
A=b0(i(Xk,z),dy,j,S)}else
var
A=b0(Xp,dy,j,16);var
b=[0,A,R];break;case
25:var
b=[0,b0(Xq,dy,a[1],16),0];break;case
26:var
b=[0,q$(Xr,a[1]),0];break;case
27:var
b=[0,q$(Xs,a[1]),0];break;case
28:var
b=[0,i(Xt,L(a[1])),0];break;case
29:var
b=[0,i(Xu,L(a[1])),0];break;case
30:var
U=0,V=0===a[1]?Ay:Az,b=[0,Xv,[0,[0,V],U]];break;case
31:var
b=[0,i(Xw,L(a[1])),0];break;case
32:var
B=a[1],c=B[2],W=0;switch(c[0]){case
0:var
h=d(jl,c[1]);break;case
1:var
h=d(zN,c[1]);break;case
2:var
h=d(bk[8],c[1]);break;default:var
h=d(bl[8],c[1])}var
X=i(Xx,h),b=[0,i(i(cN(jA(B[2])),Wz),X),W];break;case
33:var
b=[0,dA(Wf,a[1]),0];break;case
34:var
b=[0,dA(Wg,a[1]),0];break;case
35:var
b=[0,dA(Wd,a[1]),0];break;case
36:var
b=[0,dA(We,a[1]),0];break;case
37:var
b=[0,dA(Wh,a[1]),0];break;case
38:var
Y=i(Xy,cC(AK,au(jl,d(AD[2],a[1][2][1])))),b=[0,i(i(dy(0),WA),Y),0];break;case
39:var
b=[0,bn(Wk,a[1]),0];break;case
40:var
b=[0,bn(Wl,a[1]),0];break;case
41:var
b=[0,bn(Wi,a[1]),0];break;case
42:var
b=[0,bn(Wj,a[1]),0];break;case
43:var
b=[0,bn(Wm,a[1]),0];break;case
44:var
b=[0,bn(Wn,a[1]),0];break;case
45:var
b=[0,bn(Wo,a[1]),0];break;case
46:var
b=[0,eM(VL,a[1]),0];break;case
47:var
b=[0,eM(VN,a[1]),0];break;case
48:var
b=[0,eM(VP,a[1]),0];break;case
49:var
b=[0,eM(VU,a[1]),0];break;case
50:var
b=[0,bn(Wp,a[1]),0];break;case
51:var
b=[0,bn(Wq,a[1]),0];break;default:var
b=[0,bn(Wr,a[1]),0]}return[1,b[1],b[2]]}function
ra(c,b){var
a=b[2];if(a&&!a[2])return b1(a[1]);return[1,c,aT(b1,b[2])]}function
rb(d,c,b){var
a=b[2][1],e=[0,aF(qZ,a[2]),0],f=i(XD,q0(dk,a[1]));return[1,i(XE,i(aS(d+c|0),f)),e]}function
rc(c,b,a){var
d=i(XF,q0(dk,a[2][1][1]));return[1,i(XG,i(aS(c+b|0),d)),0]}function
XH(a){if(0===a)return XI;throw[0,F,XJ]}function
XK(c){var
a=c[2];if(a){var
b=a[1][2];if(typeof
b!=="number"&&31===b[0]&&!a[2])return 1}return 0}function
XL(c){var
a=c[2];if(a){var
b=a[1][2],d=0;if(typeof
b==="number"||!(31===b[0]))d=1;else
if(!a[2])return aF(L,b[1])}throw[0,F,XM]}function
rd(e,d){var
a=d[2];if(typeof
a==="number"){var
b=0!==a?1:0,f=b?XN:b;return f}var
c=a[1],g=[0,ra(XO,a[2]),0],h=N(c[2],0)?0:[0,[1,e,[0,aF(L,c),0]],0];return t(h,g)}function
XP(g,f){var
a=f[2],b=a[2],c=a[1],h=0===c?1:0,e=0;if(h&&fR(XK,b)){var
j=aT(XL,b),d=[0,aF(XH,c),j];e=1}if(!e)var
l=aT(function(a){return ra(XS,a)},b),d=[0,aF(qZ,c),l];var
k=t(rd(XQ,a[3]),d);return[1,i(XR,aS(g)),k]}function
XT(h,g){var
a=g[2],d=a[1],f=16;function
c(a){var
b=fM(f,u(d)-a|0);if(0===b)return 0;var
e=c(a+b|0);return[0,bR(d,a,b),e]}var
b=c(0),e=aT(function(a){return aF(St,a)},b),j=t(rd(XU,a[2]),e);return[1,i(XV,aS(h)),j]}function
XW(d,c){var
a=c[2],b=dz(Sv,a[2]),e=[0,[1,Sx,t(dz(Sw,a[1]),b)],0];return[1,i(XX,aS(d)),e]}function
X2(d){var
c=d[2],a=c[2][2],e=0;switch(a[0]){case
0:var
b=[1,X3,[0,aF(L,a[1]),0]];break;case
1:var
b=[1,X5,[0,aF(L,a[1]),0]];break;case
2:var
b=[1,X6,[0,aF(L,a[1]),0]];break;default:var
b=[1,X7,[0,aF(L,a[1]),0]]}return[1,X4,[0,aF(gI,c[1]),[0,b,e]]]}function
X9(a){return[1,i(X_,L(a[2][1])),0]}function
Yb(D,C,B){var
a=q(Dh,[0,Yc,Y6(new
jf(C)),[0,0]]),e=[0,0],f=[0,0],g=[0,0],h=[0,0],b=a[2][9],c=aT(function(n){var
c=n[2],d=c[3],a=d[2],j=0;switch(a[0]){case
0:e[1]++;var
k=[0,[1,XY,[0,aF(L,a[1]),0]],0],b=[1,i(XZ,aS(e[1]-1|0)),k];break;case
1:f[1]++;var
b=rb(0,f[1]-1|0,[0,d[1],[0,a[1]]]);break;case
2:g[1]++;var
b=rc(0,g[1]-1|0,[0,d[1],[0,a[1]]]);break;default:h[1]++;var
m=[0,q1(a[1]),0],b=[1,i(X1,aS(h[1]-1|0)),m]}var
l=[0,aF(gI,c[2]),[0,b,j]];return[1,X0,[0,aF(gI,c[1]),l]]},b),d=cj(XT,a[2][8]),j=t(cj(XP,a[2][7]),d),k=t(qY(X9,a[2][6]),j),l=t(aT(X2,a[2][10]),k),m=a[2][5],n=e[1],o=t(cj(function(f,g){var
e=i(XC,aS(n+f|0)),a=g[2],b=aT(b1,a[3]),c=t(dz(Xz,a[2]),b),d=t([0,[1,i(XA,L(a[1])),0],0],c);return[1,i(XB,e),d]},m),l),p=a[2][2],r=h[1],s=t(cj(function(d,e){var
a=e[2],b=aT(b1,a[2][2]),c=[0,q1(a[1]),b];return[1,i(X8,aS(r+d|0)),c]},p),o),u=a[2][4],v=g[1],w=t(cj(function(a,b){return rc(v,a,b)},u),s),x=a[2][3],y=f[1],z=t(c,t(cj(function(a,b){return rb(y,a,b)},x),w)),A=t(cj(XW,a[2][1]),z);return fF(i(qS(qT(0,B,[1,i(Ya,X$),A])[2]),Sl))}var
Ye=uv(Yb);x9(Yf,{"encode":uv(function(bx,bv){var
ar=aN(bv),bu=0,ax=[0],ay=1,az=0,aA=0,aB=0,aC=0,aD=0,aE=u(ar),aF=ef(ar),L=Sc(Sd,[0,function(a){a[9]=1;return 0},aF,aE,aD,aC,aB,aA,az,ay,ax,i5,i5],bu)[2][2];switch(L[0]){case
0:var
c=L[1],n=[0,cd(8192),[0,0]],g=function(a){return jM(n,df(a&a_))},S=function(a){g(a&a_);return g(a>>>8|0)},v=function(a){S(a&b4);return S(a>>16)},U=function(c){var
a=c;for(;;){var
b=aZ(a4(a,Bc));if(cu(Bd,a)&&j(a,Be))return g(b);g(b|Y);var
a=iz(a,7);continue}},R=function(c){var
a=c;for(;;){var
b=aZ(a4(a,Bf));if(cu(Bg,a)&&j(a,Bh))return g(b);g(b|Y);var
a=c4(a,7);continue}},i=function(a){return U(a4(aH(a),Bj))},q=function(a){return R(aH(a))},V=function(a){return R(aH(a))},B=function(a){if(a!==a)f(jL[3],ce,Bk);return i(a)},G=function(a){B(u(a));return aV(n[1],a)},I=function(a){return G(ji(a))},r=function(b,a){return cb(b,a)},W=function(b,a){return a?d(b,a[1]):a},m=function(b,a){B(bj(a));return r(b,a)},_=function(b){var
a=dp(n);v(0);g(0);return a},$=function(b,a){if(268435455<a)throw[0,F,Bl];function
c(a){return df(a&a_)}dq(n,b,c(a|Y));dq(n,b+1|0,c(a>>>7|0|Y));dq(n,b+2|0,c(a>>>14|0|Y));dq(n,b+3|0,c(a>>>21|0|Y));return dq(n,b+4|0,c(a>>>28|0))},x=function(a){return 0===a?q(rY):q(h3)},y=function(a){switch(a[0]){case
0:switch(a[1]){case
0:return q(-1);case
1:return q(-2);case
2:return q(-3);default:return q(-4)}case
1:return q(-5);default:return x(a[1])}},aa=function(b,a){var
c=a[2],e=0!==c?1:0;U(a4(aH(e),Bi));d(b,a[1]);return W(b,c)},ad=function(a){x(a[2]);return aa(i,a[1])},ae=function(a){return aa(i,a[1])},af=function(a){y(a[1]);return 0===a[2]?g(0):g(1)},b=function(a){return g(a)},a=function(a){b(dU);return i(a)},C=function(a){return b(11)},h=function(a){i(a[2]);return i(a[3])},k=function(a){return i(a[2])},T=function(a){if(0===a[0])return V(a[1][2]);var
b=a[1];return b?y(b[1]):V(-64)},A=function(e){var
c=e[2];if(typeof
c==="number")switch(c){case
0:return b(0);case
1:return b(1);case
2:return b(26);case
3:return b(15);case
4:b(63);return g(0);case
5:b(64);return g(0);case
6:b(ac);i(11);return g(0);case
7:b(ac);i(10);g(0);return g(0);default:return b(e6)}else
switch(c[0]){case
0:var
ad=c[1];return ad?(b(28),m(y,ad[1])):b(27);case
1:b(2);T(c[1]);r(A,c[2]);return C(0);case
2:b(3);T(c[1]);r(A,c[2]);return C(0);case
3:var
ae=c[3];b(4);T(c[1]);r(A,c[2]);if(0!==ae)b(5);r(A,ae);return C(0);case
4:b(12);return k(c[1]);case
5:b(13);return k(c[1]);case
6:b(14);m(k,c[1]);return k(c[2]);case
7:b(16);return k(c[1]);case
8:b(17);k(c[2]);return k(c[1]);case
9:b(32);return k(c[1]);case
10:b(33);return k(c[1]);case
11:b(34);return k(c[1]);case
12:b(35);return k(c[1]);case
13:b(36);return k(c[1]);case
14:b(37);return k(c[1]);case
15:b(38);return k(c[1]);case
16:b(ac);i(16);return k(c[1]);case
17:b(ac);i(15);return k(c[1]);case
18:b(ac);i(17);return k(c[1]);case
19:b(ac);i(14);k(c[1]);return k(c[2]);case
20:b(ac);i(12);k(c[2]);return k(c[1]);case
21:b(ac);i(13);return k(c[1]);case
22:var
j=c[1],$=0;switch(j[1]){case
0:var
af=j[4];if(!af){b(40);return h(j)}var
U=af[1];switch(U[1]){case
0:return 0===U[2]?(b(44),h(j)):(b(45),h(j));case
1:return 0===U[2]?(b(46),h(j)):(b(47),h(j));case
2:return f(X,e[1],Bm);default:$=1}break;case
1:var
ag=j[4];if(!ag){b(41);return h(j)}var
S=ag[1];switch(S[1]){case
0:return 0===S[2]?(b(48),h(j)):(b(49),h(j));case
1:return 0===S[2]?(b(50),h(j)):(b(51),h(j));case
2:return 0===S[2]?(b(52),h(j)):(b(53),h(j));default:$=1}break;case
2:if(!j[4]){b(42);return h(j)}break;default:if(!j[4]){b(43);return h(j)}}return $?f(X,e[1],Bn):f(X,e[1],Bo);case
23:var
l=c[1],aa=0;switch(l[1]){case
0:var
ah=l[4];if(!ah){b(54);return h(l)}switch(ah[1]){case
0:b(58);return h(l);case
1:b(59);return h(l);case
2:return f(X,e[1],Bp);default:aa=1}break;case
1:var
ai=l[4];if(!ai){b(55);return h(l)}switch(ai[1]){case
0:b(60);return h(l);case
1:b(61);return h(l);case
2:b(62);return h(l);default:aa=1}break;case
2:if(!l[4]){b(56);return h(l)}break;default:if(!l[4]){b(57);return h(l)}}return aa?f(X,e[1],Bq):f(X,e[1],Br);case
24:var
o=c[1],aj=o[4];if(aj){var
F=aj[1];switch(F[1]){case
0:var
ak=F[2];if(typeof
ak==="number"&&0===ak){a(7);return h(o)}break;case
1:var
al=F[2];if(typeof
al==="number"&&0===al){a(8);return h(o)}break;case
2:var
am=F[2];if(typeof
am==="number")return 0===am?(a(9),h(o)):(a(92),h(o));break;default:var
w=F[2];if(typeof
w==="number")return 0===w?(a(10),h(o)):(a(93),h(o));switch(w[1]){case
0:return 0===w[2]?(a(1),h(o)):(a(2),h(o));case
1:return 0===w[2]?(a(3),h(o)):(a(4),h(o));default:return 0===w[2]?(a(5),h(o)):(a(6),h(o))}}return f(X,e[1],Bs)}a(0);return h(o);case
25:a(11);return h(c[1]);case
26:var
G=c[1],H=G[1];switch(H[4]){case
0:a(84);h(H);return g(G[2]);case
1:a(85);h(H);return g(G[2]);case
2:a(86);h(H);return g(G[2]);default:a(87);h(H);return g(G[2])}case
27:var
I=c[1],J=I[1];switch(J[4]){case
0:a(88);h(J);return g(I[2]);case
1:a(89);h(J);return g(I[2]);case
2:a(90);h(J);return g(I[2]);default:a(91);h(J);return g(I[2])}case
28:b(ac);i(8);k(c[1]);return g(0);case
29:b(ac);i(9);return k(c[1]);case
30:b(tg);return x(c[1]);case
31:b(210);return k(c[1]);case
32:var
K=c[1][2];switch(K[0]){case
0:b(65);return R(aH(K[1]));case
1:b(66);return R(K[1]);case
2:b(67);return v(d(bk[11],K[1]));default:b(68);var
ab=d(bl[11],K[1]);v(aZ(a4(ab,Bb)));return v(aZ(c4(ab,32)))}case
33:return 1===c[1][0]?b(80):b(69);case
34:var
L=c[1];switch(L[0]){case
0:switch(L[1]){case
0:return b(70);case
1:return b(71);case
2:return b(72);case
3:return b(73);case
4:return b(74);case
5:return b(75);case
6:return b(76);case
7:return b(77);case
8:return b(78);default:return b(79)}case
1:switch(L[1]){case
0:return b(81);case
1:return b(82);case
2:return b(83);case
3:return b(84);case
4:return b(85);case
5:return b(86);case
6:return b(87);case
7:return b(88);case
8:return b(89);default:return b(90)}case
2:switch(L[1]){case
0:return b(91);case
1:return b(92);case
2:return b(93);case
3:return b(94);case
4:return b(95);default:return b(96)}default:switch(L[1]){case
0:return b(97);case
1:return b(98);case
2:return b(99);case
3:return b(br);case
4:return b(dN);default:return b(cU)}}case
35:var
N=c[1];switch(N[0]){case
0:var
V=N[1];if(typeof
V==="number")switch(V){case
0:return b(as);case
1:return b(e5);default:return b(g8)}var
an=V[1];return 1===an?b(hi):0===an?b(cp):f(X,e[1],Bt);case
1:var
W=N[1];if(typeof
W==="number")switch(W){case
0:return b(eQ);case
1:return b(dY);default:return b(z)}switch(W[1]){case
0:return b(b9);case
1:return b(e2);case
2:return b(hv);default:return f(X,e[1],Bu)}case
2:switch(N[1]){case
0:return b(hS);case
1:return b(fh);case
2:return b(e1);case
3:return b(hx);case
4:return b(fc);case
5:return b(g9);default:return b(fg)}default:switch(N[1]){case
0:return b(154);case
1:return b(io);case
2:return b(e0);case
3:return b(hu);case
4:return b(dJ);case
5:return b(g7);default:return b(fi)}}case
36:var
O=c[1];switch(O[0]){case
0:switch(O[1]){case
0:return b(fs);case
1:return b(ia);case
2:return b(fd);case
3:return b(e3);case
4:return b(b_);case
5:return b(ik);case
6:return b(fw);case
7:return b(ic);case
8:return b(dS);case
9:return b(he);case
10:return b(dP);case
11:return b(ii);case
12:return b(d$);case
13:return b(hp);default:return b(b3)}case
1:switch(O[1]){case
0:return b(aK);case
1:return b(E);case
2:return b(D);case
3:return b(Z);case
4:return b(Y);case
5:return b(ha);case
6:return b(fn);case
7:return b(ht);case
8:return b(fm);case
9:return b(h0);case
10:return b(g2);case
11:return b(e$);case
12:return b(hJ);case
13:return b(fl);default:return b(hQ)}case
2:switch(O[1]){case
0:return b(ip);case
1:return b(e_);case
2:return b(g$);case
3:return b(h7);case
4:return b(fa);case
5:return b(g5);default:return b(fj)}default:switch(O[1]){case
0:return b(hn);case
1:return b(ft);case
2:return b(tN);case
3:return b(ir);case
4:return b(e4);case
5:return b(165);default:return b(166)}}case
37:var
P=c[1];switch(P[0]){case
0:switch(P[1]){case
0:return f(X,e[1],Bv);case
1:return f(X,e[1],Bw);case
2:return b(hj);case
3:return b(hg);case
4:return b(fb);case
5:return b(hw);case
6:return b(e9);case
7:b(ac);return i(0);case
8:b(ac);return i(1);case
9:b(ac);return i(2);case
10:b(ac);return i(3);default:return b(ho)}case
1:switch(P[1]){case
0:return b(id);case
1:return b(eX);case
2:return f(X,e[1],Bx);case
3:return b(h9);case
4:return b(175);case
5:return b(176);case
6:return b(eO);case
7:b(ac);return i(4);case
8:b(ac);return i(5);case
9:b(ac);return i(6);case
10:b(ac);return i(7);default:return b(hF)}case
2:switch(P[1]){case
0:return b(178);case
1:return b(179);case
2:return b(180);case
3:return b(iq);case
4:return f(X,e[1],By);case
5:return b(e7);default:return b(eT)}default:switch(P[1]){case
0:return b(hE);case
1:return b(fq);case
2:return b(ih);case
3:return b(fr);case
4:return b(187);case
5:return f(X,e[1],Bz);default:return b(hC)}}case
38:a(12);var
aw=c[1][2][1];return iX(function(a){return jM(n,a)},aw);case
39:switch(c[1][1][0]){case
1:return a(ht);case
2:return a(ir);case
3:return a(e2);default:return a(99)}case
40:var
p=c[1][1];switch(p[0]){case
0:switch(p[1]){case
0:return a(35);case
1:return a(36);case
2:return a(37);case
3:return a(38);case
4:return a(41);case
5:return a(42);case
6:return a(39);case
7:return a(40);case
8:return a(43);default:return a(44)}case
1:switch(p[1]){case
0:return a(45);case
1:return a(46);case
2:return a(47);case
3:return a(48);case
4:return a(51);case
5:return a(52);case
6:return a(49);case
7:return a(50);case
8:return a(53);default:return a(54)}case
2:switch(p[1]){case
0:return a(55);case
1:return a(56);case
2:return a(57);case
3:return a(58);case
4:return a(61);case
5:return a(62);case
6:return a(59);case
7:return a(60);case
8:return a(63);default:return a(64)}case
3:switch(p[1]){case
0:return a(eZ);case
1:return a(r9);case
2:return a(eU);case
3:return f(X,e[1],BA);case
4:return a(hM);case
5:return f(X,e[1],BB);case
6:return a(rf);case
7:return f(X,e[1],BC);case
8:return a(tQ);default:return f(X,e[1],BD)}case
4:switch(p[1]){case
0:return a(65);case
1:return a(66);case
2:return a(67);case
3:return a(69);case
4:return a(68);default:return a(70)}default:switch(p[1]){case
0:return a(71);case
1:return a(72);case
2:return a(73);case
3:return a(75);case
4:return a(74);default:return a(76)}}case
41:var
q=c[1][1];switch(q[0]){case
0:switch(q[1]){case
0:return a(96);case
1:return a(97);default:return a(98)}case
1:switch(q[1]){case
0:return a(Y);case
1:return a(ha);default:return f(X,e[1],BE)}case
2:switch(q[1]){case
0:return a(hn);case
1:return a(ft);default:return f(X,e[1],BF)}case
3:switch(q[1]){case
0:return a(cp);case
1:return a(hi);default:return f(X,e[1],BG)}case
4:switch(q[1]){case
0:return a(a$);case
1:return a(bE);case
2:return a(sX);case
3:return a(as);case
4:return a(e5);case
5:return a(g8);default:return a(fs)}default:switch(q[1]){case
0:return a(hf);case
1:return a(bF);case
2:return a(hk);case
3:return a(dP);case
4:return a(ii);case
5:return a(dY);default:return a(g$)}}case
42:var
s=c[1][1];switch(s[0]){case
0:var
_=s[1];if(typeof
_!=="number"){a(13);return cb(g,_[1])}switch(_){case
0:return a(b_);case
1:return a(ic);case
3:return a(d$);case
4:return a(hp);case
5:return a(b3);case
6:return a(eQ);case
7:return a(z);case
8:return a(ik);case
9:return a(fw);case
10:return a(dS);case
11:return a(he);case
18:return a(14);case
19:return a(dN);case
20:return a(cU)}break;case
1:var
ao=s[1];if(typeof
ao==="number")switch(ao){case
0:return a(hx);case
1:return a(fg);case
2:return a(h7);case
3:return a(fa);case
4:return a(g5);case
5:return a(fj);case
6:return a(io);case
7:return a(e0);case
8:return a(fc);case
9:return a(g9);case
10:return a(ip);case
11:return a(e_);case
13:return a(fn);case
14:return a(hu);case
15:return a(dJ);case
16:return a(g7);case
17:return a(fi);case
19:return a(h0);case
20:return a(g2)}break;case
2:var
ap=s[1];if(typeof
ap==="number")switch(ap){case
0:return a(h9);case
1:return a(eO);case
2:return a(iq);case
3:return a(e7);case
4:return a(hE);case
5:return a(fq);case
6:return a(ih);case
12:return a(fr);case
14:return a(ho);case
15:return a(hF);case
16:return a(eT);case
17:return a(hC)}break;case
3:var
aq=s[1];if(typeof
aq==="number")switch(aq){case
0:return a(s_);case
1:return a(e6);case
2:return a(sw);case
14:return a(g4);case
15:return a(st);case
16:return a(hy);case
17:return a(te)}break;case
4:switch(s[1]){case
0:return a(g_);case
1:return a(tZ);case
2:return a(ib);case
3:return a(sr);case
4:return a(hm);case
5:return a(r4);case
6:return a(h5);default:return a(ty)}default:switch(s[1]){case
0:return a(eW);case
1:return a(ij);case
2:return a(r1);case
3:return a(tx);case
4:return a(hV);case
5:return a(hb);case
6:return a(dM);default:return a(hL)}}return f(X,e[1],BH);case
43:var
B=c[1][1];switch(B[0]){case
0:return f(X,e[1],BI);case
1:switch(B[1]){case
0:return a(e$);case
1:return a(fl);case
2:return a(hJ);case
3:return a(hQ);case
4:return a(aK);case
5:return a(E);default:return f(X,e[1],BJ)}case
2:switch(B[1]){case
0:return a(hj);case
1:return a(fb);case
2:return a(hg);case
3:return a(hw);case
4:return a(D);case
5:return a(Z);case
6:return a(M);case
7:return a(tr);case
8:return a(ac);default:return a(dU)}case
3:switch(B[1]){case
0:return a(sT);case
1:return a(r8);case
2:return a(ie);case
3:return a(h6);default:return f(X,e[1],BK)}case
4:switch(B[1]){case
0:return a(94);case
1:return f(X,e[1],BL);case
2:return a(cl);default:return a(hG)}default:switch(B[1]){case
0:return f(X,e[1],BM);case
1:return a(95);case
2:return a(cn);default:return a(a_)}}case
44:var
Q=c[1][1];switch(Q[0]){case
1:switch(Q[1]){case
0:return a(fh);case
1:return a(hS);default:return a(e1)}case
2:switch(Q[1]){case
0:return a(e9);case
1:return a(id);default:return a(eX)}case
3:switch(Q[1]){case
0:return a(ry);case
1:return a(hs);default:return a(sZ)}default:switch(Q[1]){case
0:return a(ia);case
1:return a(fd);default:return a(e3)}}case
45:switch(c[1][1][0]){case
1:return a(fm);case
2:return a(e4);case
3:return a(hv);default:return a(br)}case
46:return a(83);case
47:return a(77);case
48:switch(c[1][1]){case
0:return a(78);case
1:return a(80);case
2:return a(81);default:return a(79)}case
49:return a(82);case
50:switch(c[1][1][0]){case
0:return a(15);case
1:return a(16);case
2:return a(17);case
3:return a(18);case
4:return a(19);default:return a(20)}case
51:var
t=c[1][1];switch(t[0]){case
0:var
ar=t[1],at=ar[1];return 0===ar[2]?(a(21),g(at)):(a(22),g(at));case
1:var
au=t[1],av=au[1];return 0===au[2]?(a(24),g(av)):(a(25),g(av));case
2:a(27);return g(t[1][1]);case
3:a(29);return g(t[1][1]);case
4:a(31);return g(t[1][1]);default:a(33);return g(t[1][1])}default:var
u=c[1][1];switch(u[0]){case
0:a(23);return g(u[1][1]);case
1:a(26);return g(u[1][1]);case
2:a(28);return g(u[1][1]);case
3:a(30);return g(u[1][1]);case
4:a(32);return g(u[1][1]);default:a(34);return g(u[1][1])}}},p=function(a){r(A,a[2]);return C(0)},o=function(e,c,b,a){if(a){g(e);var
f=_(0),h=dp(n);d(c,b);return $(f,dp(n)-h|0)}return a},aW=function(b){var
a=b[2];q(fv);m(y,a[1]);return m(y,a[2])},aY=function(c){var
b=c[2];I(b[1]);I(b[2]);var
a=b[3][2];switch(a[0]){case
0:g(0);return k(a[1]);case
1:g(1);return ad(a[1]);case
2:g(2);return ae(a[1]);default:g(3);return af(a[1])}},a1=function(a){return k(a[2][1])},a3=function(a){return ad(a[2][1])},a6=function(a){return ae(a[2][1])},a9=function(b){var
a=b[2];af(a[1]);return p(a[2])},bb=function(c){var
b=c[2];I(b[1]);var
a=b[2][2];switch(a[0]){case
0:g(0);return k(a[1]);case
1:g(1);return k(a[1]);case
2:g(2);return k(a[1]);default:g(3);return k(a[1])}},bd=function(a){return k(a[2][1])},bf=function(a){B(a[2]);return y(a[1])},bg=function(b){var
a=b[2],c=_(0),d=dp(n),e=a[2];m(bf,d9(function(b,a){if(a){var
c=a[1];if(N(b,c[1]))return[0,[0,b,c[2]+1|0],a[2]]}return[0,[0,b,1],a]},e,0));r(A,a[3]);C(0);return $(c,dp(n)-d|0)},J=function(a){return 0===a?1:0},K=function(a){if(0===a)return g(0);throw[0,F,BN]},bi=function(c){var
a=c[2];if(a){var
b=a[1][2];if(typeof
b!=="number"&&31===b[0]&&!a[2])return 1}return 0},H=function(c){var
a=c[2];if(a){var
b=a[1][2],d=0;if(typeof
b==="number"||!(31===b[0]))d=1;else
if(!a[2])return k(b[1])}throw[0,F,BO]},bm=function(n){var
e=n[2],f=e[3],a=e[2],b=e[1];if(J(b)&&fR(bi,a)){var
c=f[2];if(typeof
c==="number")return 0===c?(i(1),K(b),m(H,a)):(i(3),K(b),m(H,a));var
g=c[2],h=c[1];if(N(h[2],0)&&J(b)){i(0);p(g);return m(H,a)}i(2);k(h);p(g);K(b);return m(H,a)}var
d=f[2];if(typeof
d==="number")return 0===d?(i(5),x(b),m(p,a)):(i(7),x(b),m(p,a));var
j=d[2],l=d[1];if(N(l[2],0)&&J(b)){i(4);p(j);return m(p,a)}i(6);k(l);p(j);x(b);return m(p,a)},bo=function(h){var
c=h[2],d=c[2],b=c[1],a=d[2];if(typeof
a==="number")return 0===a?(i(1),G(b)):f(X,d[1],BP);var
e=a[2],g=a[1];return N(g[2],0)?(i(0),p(e),G(b)):(i(2),k(g),p(e),G(b))};v(s4);v(jK);var
ag=c[2][1],aX=0!==ag?1:0;o(1,function(a){return m(aW,a)},ag,aX);var
ah=c[2][9],a0=0!==ah?1:0;o(2,function(a){return m(aY,a)},ah,a0);var
ai=c[2][5],a2=0!==ai?1:0;o(3,function(a){return m(a1,a)},ai,a2);var
aj=c[2][3],a5=0!==aj?1:0;o(4,function(a){return m(a3,a)},aj,a5);var
ak=c[2][4],a8=0!==ak?1:0;o(5,function(a){return m(a6,a)},ak,a8);var
al=c[2][2],ba=0!==al?1:0;o(6,function(a){return m(a9,a)},al,ba);var
am=c[2][10],bc=0!==am?1:0;o(7,function(a){return m(bb,a)},am,bc);var
an=c[2][6],be=0!==an?1:0;o(8,function(a){return W(bd,a)},an,be);var
ao=c[2][7],bn=0!==ao?1:0;o(9,function(a){return m(bm,a)},ao,bn);var
bt=c[2][8],bq=ab[1],aG=a7(A8,c[2][10]),aI=a7(A9,c[2][9]),aJ=a7(A6,c[2][8]),aL=a7(A5,c[2][7]),aM=w(jh(A_,c[2][6]),l),aQ=a7(jH,c[2][5]),aR=a7(A4,c[2][4]),aS=a7(A3,c[2][3]),aT=a7(A2,c[2][2]),bs=e(aw(aw(aw(aw(aw(aw(aw(aw(aw(a7(A7,c[2][1]),aT),aS),aR),aQ),aM),aL),aJ),aI),aG)[7],bq);o(12,B,bj(bt),bs);var
ap=c[2][5],bh=0!==ap?1:0;o(10,function(a){return m(bg,a)},ap,bh);var
aq=c[2][8],bp=0!==aq?1:0;o(11,function(a){return m(bo,a)},aq,bp);var
Q=n[1],P=fT(Q[1],0,Q[2]),aU=n[2][1];cb(function(a){return bM(P,a[1],a[2])},aU);var
t=eb(P);break;case
1:var
t=L[2];break;default:var
t=aP(Yd)}var
at=new
x_(u(t)),O=u(t)-1|0,bw=new
jf(at),au=0;if(!(O<0)){var
s=au;for(;;){bw[s]=aO(t,s);var
av=s+1|0;if(O!==s){var
s=av;continue}break}}return at}),"decode":Ye});fP(0);return}(globalThis));
// This file was generated on Wed Nov 23, 2022 12:58 (UTC) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: MaiaScript.ebnf -backtrack -javascript -tree

function MaiaScript(string, parsingEventHandler)
{
  init(string, parsingEventHandler);

  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    l3 = 0; b3 = 0; e3 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? MaiaScript.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = MaiaScript.getTokenSet(- e.getState());
    }
    else
    {
      expected = [MaiaScript.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_Program = function()
  {
    eventHandler.startNonterminal("Program", e0);
    lookahead1W(33);                // END | EOF | Identifier | Character | String | Integer | Complex | Real |
                                    // Comment | WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
    switch (l1)
    {
    case 2:                         // EOF
      consume(2);                   // EOF
      break;
    default:
      for (;;)
      {
        lookahead1W(27);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        if (l1 == 1)                // END
        {
          break;
        }
        whitespace();
        parse_Expression();
      }
    }
    eventHandler.endNonterminal("Program", e0);
  };

  function parse_Expression()
  {
    eventHandler.startNonterminal("Expression", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 9987:                    // Identifier '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      }
      break;
    case 78:                        // '{'
      lookahead2W(35);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
      switch (lk)
      {
      case 462:                     // '{' Identifier
        lookahead3W(43);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 718:                     // '{' String
        lookahead3W(42);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' |
                                    // '|=' | '||' | '}' | '~'
        break;
      case 6478:                    // '{' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10574:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 590:                     // '{' Character
      case 846:                     // '{' Integer
      case 974:                     // '{' Complex
      case 1102:                    // '{' Real
        lookahead3W(41);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' |
                                    // '||' | '}' | '~'
        break;
      case 7886:                    // '{' 'f32'
      case 8014:                    // '{' 'f64'
      case 8526:                    // '{' 'i32'
      case 8654:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1230:                    // '{' Comment
      case 4814:                    // '{' ';'
      case 6990:                    // '{' 'break'
      case 7374:                    // '{' 'continue'
      case 10062:                   // '{' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1614:                    // '{' '!'
      case 3278:                    // '{' '+'
      case 3406:                    // '{' '++'
      case 3790:                    // '{' '-'
      case 3918:                    // '{' '--'
      case 10702:                   // '{' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8142:                    // '{' 'for'
      case 8270:                    // '{' 'foreach'
      case 8782:                    // '{' 'if'
      case 9422:                    // '{' 'switch'
      case 9550:                    // '{' 'test'
      case 9934:                    // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2638:                    // '{' '('
      case 7630:                    // '{' 'do'
      case 8398:                    // '{' 'global'
      case 8910:                    // '{' 'import'
      case 9038:                    // '{' 'include'
      case 9166:                    // '{' 'local'
      case 9294:                    // '{' 'return'
      case 9678:                    // '{' 'throw'
      case 9806:                    // '{' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 445:                     // 'f32' Identifier
      case 446:                     // 'f64' Identifier
      case 450:                     // 'i32' Identifier
      case 451:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 4                     // Character
     && lk != 5                     // String
     && lk != 6                     // Integer
     && lk != 7                     // Complex
     && lk != 8                     // Real
     && lk != 9                     // Comment
     && lk != 12                    // '!'
     && lk != 20                    // '('
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 37                    // ';'
     && lk != 50                    // '['
     && lk != 54                    // 'break'
     && lk != 57                    // 'continue'
     && lk != 59                    // 'do'
     && lk != 63                    // 'for'
     && lk != 64                    // 'foreach'
     && lk != 65                    // 'global'
     && lk != 68                    // 'if'
     && lk != 69                    // 'import'
     && lk != 70                    // 'include'
     && lk != 71                    // 'local'
     && lk != 72                    // 'return'
     && lk != 73                    // 'switch'
     && lk != 74                    // 'test'
     && lk != 75                    // 'throw'
     && lk != 76                    // 'try'
     && lk != 77                    // 'while'
     && lk != 83                    // '~'
     && lk != 131                   // Identifier END
     && lk != 387                   // Identifier Identifier
     && lk != 515                   // Identifier Character
     && lk != 643                   // Identifier String
     && lk != 771                   // Identifier Integer
     && lk != 899                   // Identifier Complex
     && lk != 1027                  // Identifier Real
     && lk != 1155                  // Identifier Comment
     && lk != 1539                  // Identifier '!'
     && lk != 1667                  // Identifier '!='
     && lk != 1923                  // Identifier '%'
     && lk != 2051                  // Identifier '%='
     && lk != 2179                  // Identifier '&'
     && lk != 2307                  // Identifier '&&'
     && lk != 2435                  // Identifier '&='
     && lk != 2691                  // Identifier ')'
     && lk != 2819                  // Identifier '*'
     && lk != 2947                  // Identifier '**'
     && lk != 3075                  // Identifier '*='
     && lk != 3203                  // Identifier '+'
     && lk != 3331                  // Identifier '++'
     && lk != 3459                  // Identifier '+='
     && lk != 3587                  // Identifier ','
     && lk != 3662                  // '{' ','
     && lk != 3715                  // Identifier '-'
     && lk != 3843                  // Identifier '--'
     && lk != 3971                  // Identifier '-='
     && lk != 4227                  // Identifier '/'
     && lk != 4355                  // Identifier '/='
     && lk != 4483                  // Identifier ':'
     && lk != 4611                  // Identifier ':='
     && lk != 4739                  // Identifier ';'
     && lk != 4867                  // Identifier '<'
     && lk != 4995                  // Identifier '<<'
     && lk != 5123                  // Identifier '<<='
     && lk != 5251                  // Identifier '<='
     && lk != 5379                  // Identifier '='
     && lk != 5507                  // Identifier '=='
     && lk != 5635                  // Identifier '>'
     && lk != 5763                  // Identifier '>='
     && lk != 5891                  // Identifier '>>'
     && lk != 6019                  // Identifier '>>='
     && lk != 6147                  // Identifier '?'
     && lk != 6275                  // Identifier '?='
     && lk != 6403                  // Identifier '['
     && lk != 6531                  // Identifier ']'
     && lk != 6659                  // Identifier '^'
     && lk != 6787                  // Identifier '^='
     && lk != 6915                  // Identifier 'break'
     && lk != 7043                  // Identifier 'case'
     && lk != 7171                  // Identifier 'catch'
     && lk != 7299                  // Identifier 'continue'
     && lk != 7427                  // Identifier 'default'
     && lk != 7555                  // Identifier 'do'
     && lk != 7683                  // Identifier 'else'
     && lk != 7811                  // Identifier 'f32'
     && lk != 7939                  // Identifier 'f64'
     && lk != 8067                  // Identifier 'for'
     && lk != 8195                  // Identifier 'foreach'
     && lk != 8323                  // Identifier 'global'
     && lk != 8451                  // Identifier 'i32'
     && lk != 8579                  // Identifier 'i64'
     && lk != 8707                  // Identifier 'if'
     && lk != 8835                  // Identifier 'import'
     && lk != 8963                  // Identifier 'include'
     && lk != 9091                  // Identifier 'local'
     && lk != 9219                  // Identifier 'return'
     && lk != 9347                  // Identifier 'switch'
     && lk != 9475                  // Identifier 'test'
     && lk != 9603                  // Identifier 'throw'
     && lk != 9731                  // Identifier 'try'
     && lk != 9859                  // Identifier 'while'
     && lk != 10115                 // Identifier '|'
     && lk != 10243                 // Identifier '|='
     && lk != 10371                 // Identifier '||'
     && lk != 10499                 // Identifier '}'
     && lk != 10627                 // Identifier '~'
     && lk != 16829                 // 'f32' Identifier END
     && lk != 16830                 // 'f64' Identifier END
     && lk != 16834                 // 'i32' Identifier END
     && lk != 16835                 // 'i64' Identifier END
     && lk != 49597                 // 'f32' Identifier Identifier
     && lk != 49598                 // 'f64' Identifier Identifier
     && lk != 49602                 // 'i32' Identifier Identifier
     && lk != 49603                 // 'i64' Identifier Identifier
     && lk != 49614                 // '{' Identifier Identifier
     && lk != 49742                 // '{' Character Identifier
     && lk != 49870                 // '{' String Identifier
     && lk != 49998                 // '{' Integer Identifier
     && lk != 50126                 // '{' Complex Identifier
     && lk != 50254                 // '{' Real Identifier
     && lk != 50382                 // '{' Comment Identifier
     && lk != 53966                 // '{' ';' Identifier
     && lk != 56142                 // '{' 'break' Identifier
     && lk != 56526                 // '{' 'continue' Identifier
     && lk != 65981                 // 'f32' Identifier Character
     && lk != 65982                 // 'f64' Identifier Character
     && lk != 65986                 // 'i32' Identifier Character
     && lk != 65987                 // 'i64' Identifier Character
     && lk != 65998                 // '{' Identifier Character
     && lk != 66126                 // '{' Character Character
     && lk != 66254                 // '{' String Character
     && lk != 66382                 // '{' Integer Character
     && lk != 66510                 // '{' Complex Character
     && lk != 66638                 // '{' Real Character
     && lk != 66766                 // '{' Comment Character
     && lk != 70350                 // '{' ';' Character
     && lk != 72526                 // '{' 'break' Character
     && lk != 72910                 // '{' 'continue' Character
     && lk != 82365                 // 'f32' Identifier String
     && lk != 82366                 // 'f64' Identifier String
     && lk != 82370                 // 'i32' Identifier String
     && lk != 82371                 // 'i64' Identifier String
     && lk != 82382                 // '{' Identifier String
     && lk != 82510                 // '{' Character String
     && lk != 82638                 // '{' String String
     && lk != 82766                 // '{' Integer String
     && lk != 82894                 // '{' Complex String
     && lk != 83022                 // '{' Real String
     && lk != 83150                 // '{' Comment String
     && lk != 86734                 // '{' ';' String
     && lk != 88910                 // '{' 'break' String
     && lk != 89294                 // '{' 'continue' String
     && lk != 98749                 // 'f32' Identifier Integer
     && lk != 98750                 // 'f64' Identifier Integer
     && lk != 98754                 // 'i32' Identifier Integer
     && lk != 98755                 // 'i64' Identifier Integer
     && lk != 98766                 // '{' Identifier Integer
     && lk != 98894                 // '{' Character Integer
     && lk != 99022                 // '{' String Integer
     && lk != 99150                 // '{' Integer Integer
     && lk != 99278                 // '{' Complex Integer
     && lk != 99406                 // '{' Real Integer
     && lk != 99534                 // '{' Comment Integer
     && lk != 103118                // '{' ';' Integer
     && lk != 105294                // '{' 'break' Integer
     && lk != 105678                // '{' 'continue' Integer
     && lk != 115133                // 'f32' Identifier Complex
     && lk != 115134                // 'f64' Identifier Complex
     && lk != 115138                // 'i32' Identifier Complex
     && lk != 115139                // 'i64' Identifier Complex
     && lk != 115150                // '{' Identifier Complex
     && lk != 115278                // '{' Character Complex
     && lk != 115406                // '{' String Complex
     && lk != 115534                // '{' Integer Complex
     && lk != 115662                // '{' Complex Complex
     && lk != 115790                // '{' Real Complex
     && lk != 115918                // '{' Comment Complex
     && lk != 119502                // '{' ';' Complex
     && lk != 121678                // '{' 'break' Complex
     && lk != 122062                // '{' 'continue' Complex
     && lk != 131517                // 'f32' Identifier Real
     && lk != 131518                // 'f64' Identifier Real
     && lk != 131522                // 'i32' Identifier Real
     && lk != 131523                // 'i64' Identifier Real
     && lk != 131534                // '{' Identifier Real
     && lk != 131662                // '{' Character Real
     && lk != 131790                // '{' String Real
     && lk != 131918                // '{' Integer Real
     && lk != 132046                // '{' Complex Real
     && lk != 132174                // '{' Real Real
     && lk != 132302                // '{' Comment Real
     && lk != 135886                // '{' ';' Real
     && lk != 138062                // '{' 'break' Real
     && lk != 138446                // '{' 'continue' Real
     && lk != 147901                // 'f32' Identifier Comment
     && lk != 147902                // 'f64' Identifier Comment
     && lk != 147906                // 'i32' Identifier Comment
     && lk != 147907                // 'i64' Identifier Comment
     && lk != 147918                // '{' Identifier Comment
     && lk != 148046                // '{' Character Comment
     && lk != 148174                // '{' String Comment
     && lk != 148302                // '{' Integer Comment
     && lk != 148430                // '{' Complex Comment
     && lk != 148558                // '{' Real Comment
     && lk != 148686                // '{' Comment Comment
     && lk != 152270                // '{' ';' Comment
     && lk != 154446                // '{' 'break' Comment
     && lk != 154830                // '{' 'continue' Comment
     && lk != 197053                // 'f32' Identifier '!'
     && lk != 197054                // 'f64' Identifier '!'
     && lk != 197058                // 'i32' Identifier '!'
     && lk != 197059                // 'i64' Identifier '!'
     && lk != 197070                // '{' Identifier '!'
     && lk != 197198                // '{' Character '!'
     && lk != 197326                // '{' String '!'
     && lk != 197454                // '{' Integer '!'
     && lk != 197582                // '{' Complex '!'
     && lk != 197710                // '{' Real '!'
     && lk != 197838                // '{' Comment '!'
     && lk != 201422                // '{' ';' '!'
     && lk != 203598                // '{' 'break' '!'
     && lk != 203982                // '{' 'continue' '!'
     && lk != 213437                // 'f32' Identifier '!='
     && lk != 213438                // 'f64' Identifier '!='
     && lk != 213442                // 'i32' Identifier '!='
     && lk != 213443                // 'i64' Identifier '!='
     && lk != 223566                // '{' '}' '!='
     && lk != 246205                // 'f32' Identifier '%'
     && lk != 246206                // 'f64' Identifier '%'
     && lk != 246210                // 'i32' Identifier '%'
     && lk != 246211                // 'i64' Identifier '%'
     && lk != 256334                // '{' '}' '%'
     && lk != 262589                // 'f32' Identifier '%='
     && lk != 262590                // 'f64' Identifier '%='
     && lk != 262594                // 'i32' Identifier '%='
     && lk != 262595                // 'i64' Identifier '%='
     && lk != 272718                // '{' '}' '%='
     && lk != 278973                // 'f32' Identifier '&'
     && lk != 278974                // 'f64' Identifier '&'
     && lk != 278978                // 'i32' Identifier '&'
     && lk != 278979                // 'i64' Identifier '&'
     && lk != 289102                // '{' '}' '&'
     && lk != 295357                // 'f32' Identifier '&&'
     && lk != 295358                // 'f64' Identifier '&&'
     && lk != 295362                // 'i32' Identifier '&&'
     && lk != 295363                // 'i64' Identifier '&&'
     && lk != 305486                // '{' '}' '&&'
     && lk != 311741                // 'f32' Identifier '&='
     && lk != 311742                // 'f64' Identifier '&='
     && lk != 311746                // 'i32' Identifier '&='
     && lk != 311747                // 'i64' Identifier '&='
     && lk != 321870                // '{' '}' '&='
     && lk != 328270                // '{' Character '('
     && lk != 328398                // '{' String '('
     && lk != 328526                // '{' Integer '('
     && lk != 328654                // '{' Complex '('
     && lk != 328782                // '{' Real '('
     && lk != 328910                // '{' Comment '('
     && lk != 332494                // '{' ';' '('
     && lk != 334670                // '{' 'break' '('
     && lk != 335054                // '{' 'continue' '('
     && lk != 344509                // 'f32' Identifier ')'
     && lk != 344510                // 'f64' Identifier ')'
     && lk != 344514                // 'i32' Identifier ')'
     && lk != 344515                // 'i64' Identifier ')'
     && lk != 360893                // 'f32' Identifier '*'
     && lk != 360894                // 'f64' Identifier '*'
     && lk != 360898                // 'i32' Identifier '*'
     && lk != 360899                // 'i64' Identifier '*'
     && lk != 371022                // '{' '}' '*'
     && lk != 377277                // 'f32' Identifier '**'
     && lk != 377278                // 'f64' Identifier '**'
     && lk != 377282                // 'i32' Identifier '**'
     && lk != 377283                // 'i64' Identifier '**'
     && lk != 387406                // '{' '}' '**'
     && lk != 393661                // 'f32' Identifier '*='
     && lk != 393662                // 'f64' Identifier '*='
     && lk != 393666                // 'i32' Identifier '*='
     && lk != 393667                // 'i64' Identifier '*='
     && lk != 403790                // '{' '}' '*='
     && lk != 410045                // 'f32' Identifier '+'
     && lk != 410046                // 'f64' Identifier '+'
     && lk != 410050                // 'i32' Identifier '+'
     && lk != 410051                // 'i64' Identifier '+'
     && lk != 410830                // '{' Comment '+'
     && lk != 414414                // '{' ';' '+'
     && lk != 416590                // '{' 'break' '+'
     && lk != 416974                // '{' 'continue' '+'
     && lk != 426429                // 'f32' Identifier '++'
     && lk != 426430                // 'f64' Identifier '++'
     && lk != 426434                // 'i32' Identifier '++'
     && lk != 426435                // 'i64' Identifier '++'
     && lk != 427214                // '{' Comment '++'
     && lk != 430798                // '{' ';' '++'
     && lk != 432974                // '{' 'break' '++'
     && lk != 433358                // '{' 'continue' '++'
     && lk != 442813                // 'f32' Identifier '+='
     && lk != 442814                // 'f64' Identifier '+='
     && lk != 442818                // 'i32' Identifier '+='
     && lk != 442819                // 'i64' Identifier '+='
     && lk != 452942                // '{' '}' '+='
     && lk != 459197                // 'f32' Identifier ','
     && lk != 459198                // 'f64' Identifier ','
     && lk != 459202                // 'i32' Identifier ','
     && lk != 459203                // 'i64' Identifier ','
     && lk != 459214                // '{' Identifier ','
     && lk != 459342                // '{' Character ','
     && lk != 459470                // '{' String ','
     && lk != 459598                // '{' Integer ','
     && lk != 459726                // '{' Complex ','
     && lk != 459854                // '{' Real ','
     && lk != 459982                // '{' Comment ','
     && lk != 463566                // '{' ';' ','
     && lk != 465742                // '{' 'break' ','
     && lk != 466126                // '{' 'continue' ','
     && lk != 468739                // Identifier '{' ','
     && lk != 475581                // 'f32' Identifier '-'
     && lk != 475582                // 'f64' Identifier '-'
     && lk != 475586                // 'i32' Identifier '-'
     && lk != 475587                // 'i64' Identifier '-'
     && lk != 476366                // '{' Comment '-'
     && lk != 479950                // '{' ';' '-'
     && lk != 482126                // '{' 'break' '-'
     && lk != 482510                // '{' 'continue' '-'
     && lk != 491965                // 'f32' Identifier '--'
     && lk != 491966                // 'f64' Identifier '--'
     && lk != 491970                // 'i32' Identifier '--'
     && lk != 491971                // 'i64' Identifier '--'
     && lk != 492750                // '{' Comment '--'
     && lk != 496334                // '{' ';' '--'
     && lk != 498510                // '{' 'break' '--'
     && lk != 498894                // '{' 'continue' '--'
     && lk != 508349                // 'f32' Identifier '-='
     && lk != 508350                // 'f64' Identifier '-='
     && lk != 508354                // 'i32' Identifier '-='
     && lk != 508355                // 'i64' Identifier '-='
     && lk != 518478                // '{' '}' '-='
     && lk != 541117                // 'f32' Identifier '/'
     && lk != 541118                // 'f64' Identifier '/'
     && lk != 541122                // 'i32' Identifier '/'
     && lk != 541123                // 'i64' Identifier '/'
     && lk != 551246                // '{' '}' '/'
     && lk != 557501                // 'f32' Identifier '/='
     && lk != 557502                // 'f64' Identifier '/='
     && lk != 557506                // 'i32' Identifier '/='
     && lk != 557507                // 'i64' Identifier '/='
     && lk != 567630                // '{' '}' '/='
     && lk != 573885                // 'f32' Identifier ':'
     && lk != 573886                // 'f64' Identifier ':'
     && lk != 573890                // 'i32' Identifier ':'
     && lk != 573891                // 'i64' Identifier ':'
     && lk != 573902                // '{' Identifier ':'
     && lk != 574158                // '{' String ':'
     && lk != 590269                // 'f32' Identifier ':='
     && lk != 590270                // 'f64' Identifier ':='
     && lk != 590274                // 'i32' Identifier ':='
     && lk != 590275                // 'i64' Identifier ':='
     && lk != 600398                // '{' '}' ':='
     && lk != 606653                // 'f32' Identifier ';'
     && lk != 606654                // 'f64' Identifier ';'
     && lk != 606658                // 'i32' Identifier ';'
     && lk != 606659                // 'i64' Identifier ';'
     && lk != 606670                // '{' Identifier ';'
     && lk != 606798                // '{' Character ';'
     && lk != 606926                // '{' String ';'
     && lk != 607054                // '{' Integer ';'
     && lk != 607182                // '{' Complex ';'
     && lk != 607310                // '{' Real ';'
     && lk != 607438                // '{' Comment ';'
     && lk != 611022                // '{' ';' ';'
     && lk != 613198                // '{' 'break' ';'
     && lk != 613582                // '{' 'continue' ';'
     && lk != 623037                // 'f32' Identifier '<'
     && lk != 623038                // 'f64' Identifier '<'
     && lk != 623042                // 'i32' Identifier '<'
     && lk != 623043                // 'i64' Identifier '<'
     && lk != 633166                // '{' '}' '<'
     && lk != 639421                // 'f32' Identifier '<<'
     && lk != 639422                // 'f64' Identifier '<<'
     && lk != 639426                // 'i32' Identifier '<<'
     && lk != 639427                // 'i64' Identifier '<<'
     && lk != 649550                // '{' '}' '<<'
     && lk != 655805                // 'f32' Identifier '<<='
     && lk != 655806                // 'f64' Identifier '<<='
     && lk != 655810                // 'i32' Identifier '<<='
     && lk != 655811                // 'i64' Identifier '<<='
     && lk != 665934                // '{' '}' '<<='
     && lk != 672189                // 'f32' Identifier '<='
     && lk != 672190                // 'f64' Identifier '<='
     && lk != 672194                // 'i32' Identifier '<='
     && lk != 672195                // 'i64' Identifier '<='
     && lk != 682318                // '{' '}' '<='
     && lk != 688573                // 'f32' Identifier '='
     && lk != 688574                // 'f64' Identifier '='
     && lk != 688578                // 'i32' Identifier '='
     && lk != 688579                // 'i64' Identifier '='
     && lk != 698702                // '{' '}' '='
     && lk != 704957                // 'f32' Identifier '=='
     && lk != 704958                // 'f64' Identifier '=='
     && lk != 704962                // 'i32' Identifier '=='
     && lk != 704963                // 'i64' Identifier '=='
     && lk != 715086                // '{' '}' '=='
     && lk != 721341                // 'f32' Identifier '>'
     && lk != 721342                // 'f64' Identifier '>'
     && lk != 721346                // 'i32' Identifier '>'
     && lk != 721347                // 'i64' Identifier '>'
     && lk != 731470                // '{' '}' '>'
     && lk != 737725                // 'f32' Identifier '>='
     && lk != 737726                // 'f64' Identifier '>='
     && lk != 737730                // 'i32' Identifier '>='
     && lk != 737731                // 'i64' Identifier '>='
     && lk != 747854                // '{' '}' '>='
     && lk != 754109                // 'f32' Identifier '>>'
     && lk != 754110                // 'f64' Identifier '>>'
     && lk != 754114                // 'i32' Identifier '>>'
     && lk != 754115                // 'i64' Identifier '>>'
     && lk != 764238                // '{' '}' '>>'
     && lk != 770493                // 'f32' Identifier '>>='
     && lk != 770494                // 'f64' Identifier '>>='
     && lk != 770498                // 'i32' Identifier '>>='
     && lk != 770499                // 'i64' Identifier '>>='
     && lk != 780622                // '{' '}' '>>='
     && lk != 786877                // 'f32' Identifier '?'
     && lk != 786878                // 'f64' Identifier '?'
     && lk != 786882                // 'i32' Identifier '?'
     && lk != 786883                // 'i64' Identifier '?'
     && lk != 797006                // '{' '}' '?'
     && lk != 803261                // 'f32' Identifier '?='
     && lk != 803262                // 'f64' Identifier '?='
     && lk != 803266                // 'i32' Identifier '?='
     && lk != 803267                // 'i64' Identifier '?='
     && lk != 813390                // '{' '}' '?='
     && lk != 819645                // 'f32' Identifier '['
     && lk != 819646                // 'f64' Identifier '['
     && lk != 819650                // 'i32' Identifier '['
     && lk != 819651                // 'i64' Identifier '['
     && lk != 819790                // '{' Character '['
     && lk != 819918                // '{' String '['
     && lk != 820046                // '{' Integer '['
     && lk != 820174                // '{' Complex '['
     && lk != 820302                // '{' Real '['
     && lk != 820430                // '{' Comment '['
     && lk != 824014                // '{' ';' '['
     && lk != 826190                // '{' 'break' '['
     && lk != 826574                // '{' 'continue' '['
     && lk != 836029                // 'f32' Identifier ']'
     && lk != 836030                // 'f64' Identifier ']'
     && lk != 836034                // 'i32' Identifier ']'
     && lk != 836035                // 'i64' Identifier ']'
     && lk != 852413                // 'f32' Identifier '^'
     && lk != 852414                // 'f64' Identifier '^'
     && lk != 852418                // 'i32' Identifier '^'
     && lk != 852419                // 'i64' Identifier '^'
     && lk != 862542                // '{' '}' '^'
     && lk != 868797                // 'f32' Identifier '^='
     && lk != 868798                // 'f64' Identifier '^='
     && lk != 868802                // 'i32' Identifier '^='
     && lk != 868803                // 'i64' Identifier '^='
     && lk != 878926                // '{' '}' '^='
     && lk != 885181                // 'f32' Identifier 'break'
     && lk != 885182                // 'f64' Identifier 'break'
     && lk != 885186                // 'i32' Identifier 'break'
     && lk != 885187                // 'i64' Identifier 'break'
     && lk != 885198                // '{' Identifier 'break'
     && lk != 885326                // '{' Character 'break'
     && lk != 885454                // '{' String 'break'
     && lk != 885582                // '{' Integer 'break'
     && lk != 885710                // '{' Complex 'break'
     && lk != 885838                // '{' Real 'break'
     && lk != 885966                // '{' Comment 'break'
     && lk != 889550                // '{' ';' 'break'
     && lk != 891726                // '{' 'break' 'break'
     && lk != 892110                // '{' 'continue' 'break'
     && lk != 901565                // 'f32' Identifier 'case'
     && lk != 901566                // 'f64' Identifier 'case'
     && lk != 901570                // 'i32' Identifier 'case'
     && lk != 901571                // 'i64' Identifier 'case'
     && lk != 917949                // 'f32' Identifier 'catch'
     && lk != 917950                // 'f64' Identifier 'catch'
     && lk != 917954                // 'i32' Identifier 'catch'
     && lk != 917955                // 'i64' Identifier 'catch'
     && lk != 934333                // 'f32' Identifier 'continue'
     && lk != 934334                // 'f64' Identifier 'continue'
     && lk != 934338                // 'i32' Identifier 'continue'
     && lk != 934339                // 'i64' Identifier 'continue'
     && lk != 934350                // '{' Identifier 'continue'
     && lk != 934478                // '{' Character 'continue'
     && lk != 934606                // '{' String 'continue'
     && lk != 934734                // '{' Integer 'continue'
     && lk != 934862                // '{' Complex 'continue'
     && lk != 934990                // '{' Real 'continue'
     && lk != 935118                // '{' Comment 'continue'
     && lk != 938702                // '{' ';' 'continue'
     && lk != 940878                // '{' 'break' 'continue'
     && lk != 941262                // '{' 'continue' 'continue'
     && lk != 950717                // 'f32' Identifier 'default'
     && lk != 950718                // 'f64' Identifier 'default'
     && lk != 950722                // 'i32' Identifier 'default'
     && lk != 950723                // 'i64' Identifier 'default'
     && lk != 967101                // 'f32' Identifier 'do'
     && lk != 967102                // 'f64' Identifier 'do'
     && lk != 967106                // 'i32' Identifier 'do'
     && lk != 967107                // 'i64' Identifier 'do'
     && lk != 967118                // '{' Identifier 'do'
     && lk != 967246                // '{' Character 'do'
     && lk != 967374                // '{' String 'do'
     && lk != 967502                // '{' Integer 'do'
     && lk != 967630                // '{' Complex 'do'
     && lk != 967758                // '{' Real 'do'
     && lk != 967886                // '{' Comment 'do'
     && lk != 971470                // '{' ';' 'do'
     && lk != 973646                // '{' 'break' 'do'
     && lk != 974030                // '{' 'continue' 'do'
     && lk != 983485                // 'f32' Identifier 'else'
     && lk != 983486                // 'f64' Identifier 'else'
     && lk != 983490                // 'i32' Identifier 'else'
     && lk != 983491                // 'i64' Identifier 'else'
     && lk != 999869                // 'f32' Identifier 'f32'
     && lk != 999870                // 'f64' Identifier 'f32'
     && lk != 999874                // 'i32' Identifier 'f32'
     && lk != 999875                // 'i64' Identifier 'f32'
     && lk != 999886                // '{' Identifier 'f32'
     && lk != 1000014               // '{' Character 'f32'
     && lk != 1000142               // '{' String 'f32'
     && lk != 1000270               // '{' Integer 'f32'
     && lk != 1000398               // '{' Complex 'f32'
     && lk != 1000526               // '{' Real 'f32'
     && lk != 1000654               // '{' Comment 'f32'
     && lk != 1004238               // '{' ';' 'f32'
     && lk != 1006414               // '{' 'break' 'f32'
     && lk != 1006798               // '{' 'continue' 'f32'
     && lk != 1016253               // 'f32' Identifier 'f64'
     && lk != 1016254               // 'f64' Identifier 'f64'
     && lk != 1016258               // 'i32' Identifier 'f64'
     && lk != 1016259               // 'i64' Identifier 'f64'
     && lk != 1016270               // '{' Identifier 'f64'
     && lk != 1016398               // '{' Character 'f64'
     && lk != 1016526               // '{' String 'f64'
     && lk != 1016654               // '{' Integer 'f64'
     && lk != 1016782               // '{' Complex 'f64'
     && lk != 1016910               // '{' Real 'f64'
     && lk != 1017038               // '{' Comment 'f64'
     && lk != 1020622               // '{' ';' 'f64'
     && lk != 1022798               // '{' 'break' 'f64'
     && lk != 1023182               // '{' 'continue' 'f64'
     && lk != 1032637               // 'f32' Identifier 'for'
     && lk != 1032638               // 'f64' Identifier 'for'
     && lk != 1032642               // 'i32' Identifier 'for'
     && lk != 1032643               // 'i64' Identifier 'for'
     && lk != 1032654               // '{' Identifier 'for'
     && lk != 1032782               // '{' Character 'for'
     && lk != 1032910               // '{' String 'for'
     && lk != 1033038               // '{' Integer 'for'
     && lk != 1033166               // '{' Complex 'for'
     && lk != 1033294               // '{' Real 'for'
     && lk != 1033422               // '{' Comment 'for'
     && lk != 1037006               // '{' ';' 'for'
     && lk != 1039182               // '{' 'break' 'for'
     && lk != 1039566               // '{' 'continue' 'for'
     && lk != 1049021               // 'f32' Identifier 'foreach'
     && lk != 1049022               // 'f64' Identifier 'foreach'
     && lk != 1049026               // 'i32' Identifier 'foreach'
     && lk != 1049027               // 'i64' Identifier 'foreach'
     && lk != 1049038               // '{' Identifier 'foreach'
     && lk != 1049166               // '{' Character 'foreach'
     && lk != 1049294               // '{' String 'foreach'
     && lk != 1049422               // '{' Integer 'foreach'
     && lk != 1049550               // '{' Complex 'foreach'
     && lk != 1049678               // '{' Real 'foreach'
     && lk != 1049806               // '{' Comment 'foreach'
     && lk != 1053390               // '{' ';' 'foreach'
     && lk != 1055566               // '{' 'break' 'foreach'
     && lk != 1055950               // '{' 'continue' 'foreach'
     && lk != 1065405               // 'f32' Identifier 'global'
     && lk != 1065406               // 'f64' Identifier 'global'
     && lk != 1065410               // 'i32' Identifier 'global'
     && lk != 1065411               // 'i64' Identifier 'global'
     && lk != 1065422               // '{' Identifier 'global'
     && lk != 1065550               // '{' Character 'global'
     && lk != 1065678               // '{' String 'global'
     && lk != 1065806               // '{' Integer 'global'
     && lk != 1065934               // '{' Complex 'global'
     && lk != 1066062               // '{' Real 'global'
     && lk != 1066190               // '{' Comment 'global'
     && lk != 1069774               // '{' ';' 'global'
     && lk != 1071950               // '{' 'break' 'global'
     && lk != 1072334               // '{' 'continue' 'global'
     && lk != 1081789               // 'f32' Identifier 'i32'
     && lk != 1081790               // 'f64' Identifier 'i32'
     && lk != 1081794               // 'i32' Identifier 'i32'
     && lk != 1081795               // 'i64' Identifier 'i32'
     && lk != 1081806               // '{' Identifier 'i32'
     && lk != 1081934               // '{' Character 'i32'
     && lk != 1082062               // '{' String 'i32'
     && lk != 1082190               // '{' Integer 'i32'
     && lk != 1082318               // '{' Complex 'i32'
     && lk != 1082446               // '{' Real 'i32'
     && lk != 1082574               // '{' Comment 'i32'
     && lk != 1086158               // '{' ';' 'i32'
     && lk != 1088334               // '{' 'break' 'i32'
     && lk != 1088718               // '{' 'continue' 'i32'
     && lk != 1098173               // 'f32' Identifier 'i64'
     && lk != 1098174               // 'f64' Identifier 'i64'
     && lk != 1098178               // 'i32' Identifier 'i64'
     && lk != 1098179               // 'i64' Identifier 'i64'
     && lk != 1098190               // '{' Identifier 'i64'
     && lk != 1098318               // '{' Character 'i64'
     && lk != 1098446               // '{' String 'i64'
     && lk != 1098574               // '{' Integer 'i64'
     && lk != 1098702               // '{' Complex 'i64'
     && lk != 1098830               // '{' Real 'i64'
     && lk != 1098958               // '{' Comment 'i64'
     && lk != 1102542               // '{' ';' 'i64'
     && lk != 1104718               // '{' 'break' 'i64'
     && lk != 1105102               // '{' 'continue' 'i64'
     && lk != 1114557               // 'f32' Identifier 'if'
     && lk != 1114558               // 'f64' Identifier 'if'
     && lk != 1114562               // 'i32' Identifier 'if'
     && lk != 1114563               // 'i64' Identifier 'if'
     && lk != 1114574               // '{' Identifier 'if'
     && lk != 1114702               // '{' Character 'if'
     && lk != 1114830               // '{' String 'if'
     && lk != 1114958               // '{' Integer 'if'
     && lk != 1115086               // '{' Complex 'if'
     && lk != 1115214               // '{' Real 'if'
     && lk != 1115342               // '{' Comment 'if'
     && lk != 1118926               // '{' ';' 'if'
     && lk != 1121102               // '{' 'break' 'if'
     && lk != 1121486               // '{' 'continue' 'if'
     && lk != 1130941               // 'f32' Identifier 'import'
     && lk != 1130942               // 'f64' Identifier 'import'
     && lk != 1130946               // 'i32' Identifier 'import'
     && lk != 1130947               // 'i64' Identifier 'import'
     && lk != 1130958               // '{' Identifier 'import'
     && lk != 1131086               // '{' Character 'import'
     && lk != 1131214               // '{' String 'import'
     && lk != 1131342               // '{' Integer 'import'
     && lk != 1131470               // '{' Complex 'import'
     && lk != 1131598               // '{' Real 'import'
     && lk != 1131726               // '{' Comment 'import'
     && lk != 1135310               // '{' ';' 'import'
     && lk != 1137486               // '{' 'break' 'import'
     && lk != 1137870               // '{' 'continue' 'import'
     && lk != 1147325               // 'f32' Identifier 'include'
     && lk != 1147326               // 'f64' Identifier 'include'
     && lk != 1147330               // 'i32' Identifier 'include'
     && lk != 1147331               // 'i64' Identifier 'include'
     && lk != 1147342               // '{' Identifier 'include'
     && lk != 1147470               // '{' Character 'include'
     && lk != 1147598               // '{' String 'include'
     && lk != 1147726               // '{' Integer 'include'
     && lk != 1147854               // '{' Complex 'include'
     && lk != 1147982               // '{' Real 'include'
     && lk != 1148110               // '{' Comment 'include'
     && lk != 1151694               // '{' ';' 'include'
     && lk != 1153870               // '{' 'break' 'include'
     && lk != 1154254               // '{' 'continue' 'include'
     && lk != 1163709               // 'f32' Identifier 'local'
     && lk != 1163710               // 'f64' Identifier 'local'
     && lk != 1163714               // 'i32' Identifier 'local'
     && lk != 1163715               // 'i64' Identifier 'local'
     && lk != 1163726               // '{' Identifier 'local'
     && lk != 1163854               // '{' Character 'local'
     && lk != 1163982               // '{' String 'local'
     && lk != 1164110               // '{' Integer 'local'
     && lk != 1164238               // '{' Complex 'local'
     && lk != 1164366               // '{' Real 'local'
     && lk != 1164494               // '{' Comment 'local'
     && lk != 1168078               // '{' ';' 'local'
     && lk != 1170254               // '{' 'break' 'local'
     && lk != 1170638               // '{' 'continue' 'local'
     && lk != 1180093               // 'f32' Identifier 'return'
     && lk != 1180094               // 'f64' Identifier 'return'
     && lk != 1180098               // 'i32' Identifier 'return'
     && lk != 1180099               // 'i64' Identifier 'return'
     && lk != 1180110               // '{' Identifier 'return'
     && lk != 1180238               // '{' Character 'return'
     && lk != 1180366               // '{' String 'return'
     && lk != 1180494               // '{' Integer 'return'
     && lk != 1180622               // '{' Complex 'return'
     && lk != 1180750               // '{' Real 'return'
     && lk != 1180878               // '{' Comment 'return'
     && lk != 1184462               // '{' ';' 'return'
     && lk != 1186638               // '{' 'break' 'return'
     && lk != 1187022               // '{' 'continue' 'return'
     && lk != 1196477               // 'f32' Identifier 'switch'
     && lk != 1196478               // 'f64' Identifier 'switch'
     && lk != 1196482               // 'i32' Identifier 'switch'
     && lk != 1196483               // 'i64' Identifier 'switch'
     && lk != 1196494               // '{' Identifier 'switch'
     && lk != 1196622               // '{' Character 'switch'
     && lk != 1196750               // '{' String 'switch'
     && lk != 1196878               // '{' Integer 'switch'
     && lk != 1197006               // '{' Complex 'switch'
     && lk != 1197134               // '{' Real 'switch'
     && lk != 1197262               // '{' Comment 'switch'
     && lk != 1200846               // '{' ';' 'switch'
     && lk != 1203022               // '{' 'break' 'switch'
     && lk != 1203406               // '{' 'continue' 'switch'
     && lk != 1212861               // 'f32' Identifier 'test'
     && lk != 1212862               // 'f64' Identifier 'test'
     && lk != 1212866               // 'i32' Identifier 'test'
     && lk != 1212867               // 'i64' Identifier 'test'
     && lk != 1212878               // '{' Identifier 'test'
     && lk != 1213006               // '{' Character 'test'
     && lk != 1213134               // '{' String 'test'
     && lk != 1213262               // '{' Integer 'test'
     && lk != 1213390               // '{' Complex 'test'
     && lk != 1213518               // '{' Real 'test'
     && lk != 1213646               // '{' Comment 'test'
     && lk != 1217230               // '{' ';' 'test'
     && lk != 1219406               // '{' 'break' 'test'
     && lk != 1219790               // '{' 'continue' 'test'
     && lk != 1229245               // 'f32' Identifier 'throw'
     && lk != 1229246               // 'f64' Identifier 'throw'
     && lk != 1229250               // 'i32' Identifier 'throw'
     && lk != 1229251               // 'i64' Identifier 'throw'
     && lk != 1229262               // '{' Identifier 'throw'
     && lk != 1229390               // '{' Character 'throw'
     && lk != 1229518               // '{' String 'throw'
     && lk != 1229646               // '{' Integer 'throw'
     && lk != 1229774               // '{' Complex 'throw'
     && lk != 1229902               // '{' Real 'throw'
     && lk != 1230030               // '{' Comment 'throw'
     && lk != 1233614               // '{' ';' 'throw'
     && lk != 1235790               // '{' 'break' 'throw'
     && lk != 1236174               // '{' 'continue' 'throw'
     && lk != 1245629               // 'f32' Identifier 'try'
     && lk != 1245630               // 'f64' Identifier 'try'
     && lk != 1245634               // 'i32' Identifier 'try'
     && lk != 1245635               // 'i64' Identifier 'try'
     && lk != 1245646               // '{' Identifier 'try'
     && lk != 1245774               // '{' Character 'try'
     && lk != 1245902               // '{' String 'try'
     && lk != 1246030               // '{' Integer 'try'
     && lk != 1246158               // '{' Complex 'try'
     && lk != 1246286               // '{' Real 'try'
     && lk != 1246414               // '{' Comment 'try'
     && lk != 1249998               // '{' ';' 'try'
     && lk != 1252174               // '{' 'break' 'try'
     && lk != 1252558               // '{' 'continue' 'try'
     && lk != 1262013               // 'f32' Identifier 'while'
     && lk != 1262014               // 'f64' Identifier 'while'
     && lk != 1262018               // 'i32' Identifier 'while'
     && lk != 1262019               // 'i64' Identifier 'while'
     && lk != 1262030               // '{' Identifier 'while'
     && lk != 1262158               // '{' Character 'while'
     && lk != 1262286               // '{' String 'while'
     && lk != 1262414               // '{' Integer 'while'
     && lk != 1262542               // '{' Complex 'while'
     && lk != 1262670               // '{' Real 'while'
     && lk != 1262798               // '{' Comment 'while'
     && lk != 1266382               // '{' ';' 'while'
     && lk != 1268558               // '{' 'break' 'while'
     && lk != 1268942               // '{' 'continue' 'while'
     && lk != 1278397               // 'f32' Identifier '{'
     && lk != 1278398               // 'f64' Identifier '{'
     && lk != 1278402               // 'i32' Identifier '{'
     && lk != 1278403               // 'i64' Identifier '{'
     && lk != 1278542               // '{' Character '{'
     && lk != 1278670               // '{' String '{'
     && lk != 1278798               // '{' Integer '{'
     && lk != 1278926               // '{' Complex '{'
     && lk != 1279054               // '{' Real '{'
     && lk != 1279182               // '{' Comment '{'
     && lk != 1282766               // '{' ';' '{'
     && lk != 1284942               // '{' 'break' '{'
     && lk != 1285326               // '{' 'continue' '{'
     && lk != 1294781               // 'f32' Identifier '|'
     && lk != 1294782               // 'f64' Identifier '|'
     && lk != 1294786               // 'i32' Identifier '|'
     && lk != 1294787               // 'i64' Identifier '|'
     && lk != 1304910               // '{' '}' '|'
     && lk != 1311165               // 'f32' Identifier '|='
     && lk != 1311166               // 'f64' Identifier '|='
     && lk != 1311170               // 'i32' Identifier '|='
     && lk != 1311171               // 'i64' Identifier '|='
     && lk != 1321294               // '{' '}' '|='
     && lk != 1327549               // 'f32' Identifier '||'
     && lk != 1327550               // 'f64' Identifier '||'
     && lk != 1327554               // 'i32' Identifier '||'
     && lk != 1327555               // 'i64' Identifier '||'
     && lk != 1337678               // '{' '}' '||'
     && lk != 1343933               // 'f32' Identifier '}'
     && lk != 1343934               // 'f64' Identifier '}'
     && lk != 1343938               // 'i32' Identifier '}'
     && lk != 1343939               // 'i64' Identifier '}'
     && lk != 1360317               // 'f32' Identifier '~'
     && lk != 1360318               // 'f64' Identifier '~'
     && lk != 1360322               // 'i32' Identifier '~'
     && lk != 1360323               // 'i64' Identifier '~'
     && lk != 1360334               // '{' Identifier '~'
     && lk != 1360462               // '{' Character '~'
     && lk != 1360590               // '{' String '~'
     && lk != 1360718               // '{' Integer '~'
     && lk != 1360846               // '{' Complex '~'
     && lk != 1360974               // '{' Real '~'
     && lk != 1361102               // '{' Comment '~'
     && lk != 1364686               // '{' ';' '~'
     && lk != 1366862               // '{' 'break' '~'
     && lk != 1367246)              // '{' 'continue' '~'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Block();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Statement();
            lk = -3;
          }
          catch (p3A)
          {
            lk = -4;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(0, e0, lk);
      }
    }
    switch (lk)
    {
    case 9:                         // Comment
      consume(9);                   // Comment
      break;
    case -2:
    case 49614:                     // '{' Identifier Identifier
    case 49742:                     // '{' Character Identifier
    case 49870:                     // '{' String Identifier
    case 49998:                     // '{' Integer Identifier
    case 50126:                     // '{' Complex Identifier
    case 50254:                     // '{' Real Identifier
    case 50382:                     // '{' Comment Identifier
    case 53966:                     // '{' ';' Identifier
    case 56142:                     // '{' 'break' Identifier
    case 56526:                     // '{' 'continue' Identifier
    case 65998:                     // '{' Identifier Character
    case 66126:                     // '{' Character Character
    case 66254:                     // '{' String Character
    case 66382:                     // '{' Integer Character
    case 66510:                     // '{' Complex Character
    case 66638:                     // '{' Real Character
    case 66766:                     // '{' Comment Character
    case 70350:                     // '{' ';' Character
    case 72526:                     // '{' 'break' Character
    case 72910:                     // '{' 'continue' Character
    case 82382:                     // '{' Identifier String
    case 82510:                     // '{' Character String
    case 82638:                     // '{' String String
    case 82766:                     // '{' Integer String
    case 82894:                     // '{' Complex String
    case 83022:                     // '{' Real String
    case 83150:                     // '{' Comment String
    case 86734:                     // '{' ';' String
    case 88910:                     // '{' 'break' String
    case 89294:                     // '{' 'continue' String
    case 98766:                     // '{' Identifier Integer
    case 98894:                     // '{' Character Integer
    case 99022:                     // '{' String Integer
    case 99150:                     // '{' Integer Integer
    case 99278:                     // '{' Complex Integer
    case 99406:                     // '{' Real Integer
    case 99534:                     // '{' Comment Integer
    case 103118:                    // '{' ';' Integer
    case 105294:                    // '{' 'break' Integer
    case 105678:                    // '{' 'continue' Integer
    case 115150:                    // '{' Identifier Complex
    case 115278:                    // '{' Character Complex
    case 115406:                    // '{' String Complex
    case 115534:                    // '{' Integer Complex
    case 115662:                    // '{' Complex Complex
    case 115790:                    // '{' Real Complex
    case 115918:                    // '{' Comment Complex
    case 119502:                    // '{' ';' Complex
    case 121678:                    // '{' 'break' Complex
    case 122062:                    // '{' 'continue' Complex
    case 131534:                    // '{' Identifier Real
    case 131662:                    // '{' Character Real
    case 131790:                    // '{' String Real
    case 131918:                    // '{' Integer Real
    case 132046:                    // '{' Complex Real
    case 132174:                    // '{' Real Real
    case 132302:                    // '{' Comment Real
    case 135886:                    // '{' ';' Real
    case 138062:                    // '{' 'break' Real
    case 138446:                    // '{' 'continue' Real
    case 147918:                    // '{' Identifier Comment
    case 148046:                    // '{' Character Comment
    case 148174:                    // '{' String Comment
    case 148302:                    // '{' Integer Comment
    case 148430:                    // '{' Complex Comment
    case 148558:                    // '{' Real Comment
    case 148686:                    // '{' Comment Comment
    case 152270:                    // '{' ';' Comment
    case 154446:                    // '{' 'break' Comment
    case 154830:                    // '{' 'continue' Comment
    case 197070:                    // '{' Identifier '!'
    case 197198:                    // '{' Character '!'
    case 197326:                    // '{' String '!'
    case 197454:                    // '{' Integer '!'
    case 197582:                    // '{' Complex '!'
    case 197710:                    // '{' Real '!'
    case 197838:                    // '{' Comment '!'
    case 201422:                    // '{' ';' '!'
    case 203598:                    // '{' 'break' '!'
    case 203982:                    // '{' 'continue' '!'
    case 328270:                    // '{' Character '('
    case 328398:                    // '{' String '('
    case 328526:                    // '{' Integer '('
    case 328654:                    // '{' Complex '('
    case 328782:                    // '{' Real '('
    case 328910:                    // '{' Comment '('
    case 332494:                    // '{' ';' '('
    case 334670:                    // '{' 'break' '('
    case 335054:                    // '{' 'continue' '('
    case 410830:                    // '{' Comment '+'
    case 414414:                    // '{' ';' '+'
    case 416590:                    // '{' 'break' '+'
    case 416974:                    // '{' 'continue' '+'
    case 427214:                    // '{' Comment '++'
    case 430798:                    // '{' ';' '++'
    case 432974:                    // '{' 'break' '++'
    case 433358:                    // '{' 'continue' '++'
    case 476366:                    // '{' Comment '-'
    case 479950:                    // '{' ';' '-'
    case 482126:                    // '{' 'break' '-'
    case 482510:                    // '{' 'continue' '-'
    case 492750:                    // '{' Comment '--'
    case 496334:                    // '{' ';' '--'
    case 498510:                    // '{' 'break' '--'
    case 498894:                    // '{' 'continue' '--'
    case 606670:                    // '{' Identifier ';'
    case 606798:                    // '{' Character ';'
    case 606926:                    // '{' String ';'
    case 607054:                    // '{' Integer ';'
    case 607182:                    // '{' Complex ';'
    case 607310:                    // '{' Real ';'
    case 607438:                    // '{' Comment ';'
    case 611022:                    // '{' ';' ';'
    case 613198:                    // '{' 'break' ';'
    case 613582:                    // '{' 'continue' ';'
    case 819790:                    // '{' Character '['
    case 819918:                    // '{' String '['
    case 820046:                    // '{' Integer '['
    case 820174:                    // '{' Complex '['
    case 820302:                    // '{' Real '['
    case 820430:                    // '{' Comment '['
    case 824014:                    // '{' ';' '['
    case 826190:                    // '{' 'break' '['
    case 826574:                    // '{' 'continue' '['
    case 885198:                    // '{' Identifier 'break'
    case 885326:                    // '{' Character 'break'
    case 885454:                    // '{' String 'break'
    case 885582:                    // '{' Integer 'break'
    case 885710:                    // '{' Complex 'break'
    case 885838:                    // '{' Real 'break'
    case 885966:                    // '{' Comment 'break'
    case 889550:                    // '{' ';' 'break'
    case 891726:                    // '{' 'break' 'break'
    case 892110:                    // '{' 'continue' 'break'
    case 934350:                    // '{' Identifier 'continue'
    case 934478:                    // '{' Character 'continue'
    case 934606:                    // '{' String 'continue'
    case 934734:                    // '{' Integer 'continue'
    case 934862:                    // '{' Complex 'continue'
    case 934990:                    // '{' Real 'continue'
    case 935118:                    // '{' Comment 'continue'
    case 938702:                    // '{' ';' 'continue'
    case 940878:                    // '{' 'break' 'continue'
    case 941262:                    // '{' 'continue' 'continue'
    case 967118:                    // '{' Identifier 'do'
    case 967246:                    // '{' Character 'do'
    case 967374:                    // '{' String 'do'
    case 967502:                    // '{' Integer 'do'
    case 967630:                    // '{' Complex 'do'
    case 967758:                    // '{' Real 'do'
    case 967886:                    // '{' Comment 'do'
    case 971470:                    // '{' ';' 'do'
    case 973646:                    // '{' 'break' 'do'
    case 974030:                    // '{' 'continue' 'do'
    case 999886:                    // '{' Identifier 'f32'
    case 1000014:                   // '{' Character 'f32'
    case 1000142:                   // '{' String 'f32'
    case 1000270:                   // '{' Integer 'f32'
    case 1000398:                   // '{' Complex 'f32'
    case 1000526:                   // '{' Real 'f32'
    case 1000654:                   // '{' Comment 'f32'
    case 1004238:                   // '{' ';' 'f32'
    case 1006414:                   // '{' 'break' 'f32'
    case 1006798:                   // '{' 'continue' 'f32'
    case 1016270:                   // '{' Identifier 'f64'
    case 1016398:                   // '{' Character 'f64'
    case 1016526:                   // '{' String 'f64'
    case 1016654:                   // '{' Integer 'f64'
    case 1016782:                   // '{' Complex 'f64'
    case 1016910:                   // '{' Real 'f64'
    case 1017038:                   // '{' Comment 'f64'
    case 1020622:                   // '{' ';' 'f64'
    case 1022798:                   // '{' 'break' 'f64'
    case 1023182:                   // '{' 'continue' 'f64'
    case 1032654:                   // '{' Identifier 'for'
    case 1032782:                   // '{' Character 'for'
    case 1032910:                   // '{' String 'for'
    case 1033038:                   // '{' Integer 'for'
    case 1033166:                   // '{' Complex 'for'
    case 1033294:                   // '{' Real 'for'
    case 1033422:                   // '{' Comment 'for'
    case 1037006:                   // '{' ';' 'for'
    case 1039182:                   // '{' 'break' 'for'
    case 1039566:                   // '{' 'continue' 'for'
    case 1049038:                   // '{' Identifier 'foreach'
    case 1049166:                   // '{' Character 'foreach'
    case 1049294:                   // '{' String 'foreach'
    case 1049422:                   // '{' Integer 'foreach'
    case 1049550:                   // '{' Complex 'foreach'
    case 1049678:                   // '{' Real 'foreach'
    case 1049806:                   // '{' Comment 'foreach'
    case 1053390:                   // '{' ';' 'foreach'
    case 1055566:                   // '{' 'break' 'foreach'
    case 1055950:                   // '{' 'continue' 'foreach'
    case 1065422:                   // '{' Identifier 'global'
    case 1065550:                   // '{' Character 'global'
    case 1065678:                   // '{' String 'global'
    case 1065806:                   // '{' Integer 'global'
    case 1065934:                   // '{' Complex 'global'
    case 1066062:                   // '{' Real 'global'
    case 1066190:                   // '{' Comment 'global'
    case 1069774:                   // '{' ';' 'global'
    case 1071950:                   // '{' 'break' 'global'
    case 1072334:                   // '{' 'continue' 'global'
    case 1081806:                   // '{' Identifier 'i32'
    case 1081934:                   // '{' Character 'i32'
    case 1082062:                   // '{' String 'i32'
    case 1082190:                   // '{' Integer 'i32'
    case 1082318:                   // '{' Complex 'i32'
    case 1082446:                   // '{' Real 'i32'
    case 1082574:                   // '{' Comment 'i32'
    case 1086158:                   // '{' ';' 'i32'
    case 1088334:                   // '{' 'break' 'i32'
    case 1088718:                   // '{' 'continue' 'i32'
    case 1098190:                   // '{' Identifier 'i64'
    case 1098318:                   // '{' Character 'i64'
    case 1098446:                   // '{' String 'i64'
    case 1098574:                   // '{' Integer 'i64'
    case 1098702:                   // '{' Complex 'i64'
    case 1098830:                   // '{' Real 'i64'
    case 1098958:                   // '{' Comment 'i64'
    case 1102542:                   // '{' ';' 'i64'
    case 1104718:                   // '{' 'break' 'i64'
    case 1105102:                   // '{' 'continue' 'i64'
    case 1114574:                   // '{' Identifier 'if'
    case 1114702:                   // '{' Character 'if'
    case 1114830:                   // '{' String 'if'
    case 1114958:                   // '{' Integer 'if'
    case 1115086:                   // '{' Complex 'if'
    case 1115214:                   // '{' Real 'if'
    case 1115342:                   // '{' Comment 'if'
    case 1118926:                   // '{' ';' 'if'
    case 1121102:                   // '{' 'break' 'if'
    case 1121486:                   // '{' 'continue' 'if'
    case 1130958:                   // '{' Identifier 'import'
    case 1131086:                   // '{' Character 'import'
    case 1131214:                   // '{' String 'import'
    case 1131342:                   // '{' Integer 'import'
    case 1131470:                   // '{' Complex 'import'
    case 1131598:                   // '{' Real 'import'
    case 1131726:                   // '{' Comment 'import'
    case 1135310:                   // '{' ';' 'import'
    case 1137486:                   // '{' 'break' 'import'
    case 1137870:                   // '{' 'continue' 'import'
    case 1147342:                   // '{' Identifier 'include'
    case 1147470:                   // '{' Character 'include'
    case 1147598:                   // '{' String 'include'
    case 1147726:                   // '{' Integer 'include'
    case 1147854:                   // '{' Complex 'include'
    case 1147982:                   // '{' Real 'include'
    case 1148110:                   // '{' Comment 'include'
    case 1151694:                   // '{' ';' 'include'
    case 1153870:                   // '{' 'break' 'include'
    case 1154254:                   // '{' 'continue' 'include'
    case 1163726:                   // '{' Identifier 'local'
    case 1163854:                   // '{' Character 'local'
    case 1163982:                   // '{' String 'local'
    case 1164110:                   // '{' Integer 'local'
    case 1164238:                   // '{' Complex 'local'
    case 1164366:                   // '{' Real 'local'
    case 1164494:                   // '{' Comment 'local'
    case 1168078:                   // '{' ';' 'local'
    case 1170254:                   // '{' 'break' 'local'
    case 1170638:                   // '{' 'continue' 'local'
    case 1180110:                   // '{' Identifier 'return'
    case 1180238:                   // '{' Character 'return'
    case 1180366:                   // '{' String 'return'
    case 1180494:                   // '{' Integer 'return'
    case 1180622:                   // '{' Complex 'return'
    case 1180750:                   // '{' Real 'return'
    case 1180878:                   // '{' Comment 'return'
    case 1184462:                   // '{' ';' 'return'
    case 1186638:                   // '{' 'break' 'return'
    case 1187022:                   // '{' 'continue' 'return'
    case 1196494:                   // '{' Identifier 'switch'
    case 1196622:                   // '{' Character 'switch'
    case 1196750:                   // '{' String 'switch'
    case 1196878:                   // '{' Integer 'switch'
    case 1197006:                   // '{' Complex 'switch'
    case 1197134:                   // '{' Real 'switch'
    case 1197262:                   // '{' Comment 'switch'
    case 1200846:                   // '{' ';' 'switch'
    case 1203022:                   // '{' 'break' 'switch'
    case 1203406:                   // '{' 'continue' 'switch'
    case 1212878:                   // '{' Identifier 'test'
    case 1213006:                   // '{' Character 'test'
    case 1213134:                   // '{' String 'test'
    case 1213262:                   // '{' Integer 'test'
    case 1213390:                   // '{' Complex 'test'
    case 1213518:                   // '{' Real 'test'
    case 1213646:                   // '{' Comment 'test'
    case 1217230:                   // '{' ';' 'test'
    case 1219406:                   // '{' 'break' 'test'
    case 1219790:                   // '{' 'continue' 'test'
    case 1229262:                   // '{' Identifier 'throw'
    case 1229390:                   // '{' Character 'throw'
    case 1229518:                   // '{' String 'throw'
    case 1229646:                   // '{' Integer 'throw'
    case 1229774:                   // '{' Complex 'throw'
    case 1229902:                   // '{' Real 'throw'
    case 1230030:                   // '{' Comment 'throw'
    case 1233614:                   // '{' ';' 'throw'
    case 1235790:                   // '{' 'break' 'throw'
    case 1236174:                   // '{' 'continue' 'throw'
    case 1245646:                   // '{' Identifier 'try'
    case 1245774:                   // '{' Character 'try'
    case 1245902:                   // '{' String 'try'
    case 1246030:                   // '{' Integer 'try'
    case 1246158:                   // '{' Complex 'try'
    case 1246286:                   // '{' Real 'try'
    case 1246414:                   // '{' Comment 'try'
    case 1249998:                   // '{' ';' 'try'
    case 1252174:                   // '{' 'break' 'try'
    case 1252558:                   // '{' 'continue' 'try'
    case 1262030:                   // '{' Identifier 'while'
    case 1262158:                   // '{' Character 'while'
    case 1262286:                   // '{' String 'while'
    case 1262414:                   // '{' Integer 'while'
    case 1262542:                   // '{' Complex 'while'
    case 1262670:                   // '{' Real 'while'
    case 1262798:                   // '{' Comment 'while'
    case 1266382:                   // '{' ';' 'while'
    case 1268558:                   // '{' 'break' 'while'
    case 1268942:                   // '{' 'continue' 'while'
    case 1278542:                   // '{' Character '{'
    case 1278670:                   // '{' String '{'
    case 1278798:                   // '{' Integer '{'
    case 1278926:                   // '{' Complex '{'
    case 1279054:                   // '{' Real '{'
    case 1279182:                   // '{' Comment '{'
    case 1282766:                   // '{' ';' '{'
    case 1284942:                   // '{' 'break' '{'
    case 1285326:                   // '{' 'continue' '{'
    case 1360334:                   // '{' Identifier '~'
    case 1360462:                   // '{' Character '~'
    case 1360590:                   // '{' String '~'
    case 1360718:                   // '{' Integer '~'
    case 1360846:                   // '{' Complex '~'
    case 1360974:                   // '{' Real '~'
    case 1361102:                   // '{' Comment '~'
    case 1364686:                   // '{' ';' '~'
    case 1366862:                   // '{' 'break' '~'
    case 1367246:                   // '{' 'continue' '~'
      parse_Block();
      break;
    case -3:
    case 37:                        // ';'
    case 54:                        // 'break'
    case 57:                        // 'continue'
    case 59:                        // 'do'
    case 63:                        // 'for'
    case 64:                        // 'foreach'
    case 65:                        // 'global'
    case 68:                        // 'if'
    case 69:                        // 'import'
    case 70:                        // 'include'
    case 71:                        // 'local'
    case 72:                        // 'return'
    case 73:                        // 'switch'
    case 74:                        // 'test'
    case 75:                        // 'throw'
    case 76:                        // 'try'
    case 77:                        // 'while'
      parse_Statement();
      break;
    default:
      parse_Operation();
    }
    eventHandler.endNonterminal("Expression", e0);
  }

  function try_Expression()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 9987:                    // Identifier '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      }
      break;
    case 78:                        // '{'
      lookahead2W(35);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
      switch (lk)
      {
      case 462:                     // '{' Identifier
        lookahead3W(43);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'f32' |
                                    // 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '|' | '|=' | '||' | '}' | '~'
        break;
      case 718:                     // '{' String
        lookahead3W(42);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' |
                                    // '?' | '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'f32' | 'f64' |
                                    // 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' |
                                    // 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' |
                                    // '|=' | '||' | '}' | '~'
        break;
      case 6478:                    // '{' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10574:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 590:                     // '{' Character
      case 846:                     // '{' Integer
      case 974:                     // '{' Complex
      case 1102:                    // '{' Real
        lookahead3W(41);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' |
                                    // 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' |
                                    // 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' |
                                    // '||' | '}' | '~'
        break;
      case 7886:                    // '{' 'f32'
      case 8014:                    // '{' 'f64'
      case 8526:                    // '{' 'i32'
      case 8654:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1230:                    // '{' Comment
      case 4814:                    // '{' ';'
      case 6990:                    // '{' 'break'
      case 7374:                    // '{' 'continue'
      case 10062:                   // '{' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1614:                    // '{' '!'
      case 3278:                    // '{' '+'
      case 3406:                    // '{' '++'
      case 3790:                    // '{' '-'
      case 3918:                    // '{' '--'
      case 10702:                   // '{' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8142:                    // '{' 'for'
      case 8270:                    // '{' 'foreach'
      case 8782:                    // '{' 'if'
      case 9422:                    // '{' 'switch'
      case 9550:                    // '{' 'test'
      case 9934:                    // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2638:                    // '{' '('
      case 7630:                    // '{' 'do'
      case 8398:                    // '{' 'global'
      case 8910:                    // '{' 'import'
      case 9038:                    // '{' 'include'
      case 9166:                    // '{' 'local'
      case 9294:                    // '{' 'return'
      case 9678:                    // '{' 'throw'
      case 9806:                    // '{' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 445:                     // 'f32' Identifier
      case 446:                     // 'f64' Identifier
      case 450:                     // 'i32' Identifier
      case 451:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 4                     // Character
     && lk != 5                     // String
     && lk != 6                     // Integer
     && lk != 7                     // Complex
     && lk != 8                     // Real
     && lk != 9                     // Comment
     && lk != 12                    // '!'
     && lk != 20                    // '('
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 37                    // ';'
     && lk != 50                    // '['
     && lk != 54                    // 'break'
     && lk != 57                    // 'continue'
     && lk != 59                    // 'do'
     && lk != 63                    // 'for'
     && lk != 64                    // 'foreach'
     && lk != 65                    // 'global'
     && lk != 68                    // 'if'
     && lk != 69                    // 'import'
     && lk != 70                    // 'include'
     && lk != 71                    // 'local'
     && lk != 72                    // 'return'
     && lk != 73                    // 'switch'
     && lk != 74                    // 'test'
     && lk != 75                    // 'throw'
     && lk != 76                    // 'try'
     && lk != 77                    // 'while'
     && lk != 83                    // '~'
     && lk != 131                   // Identifier END
     && lk != 387                   // Identifier Identifier
     && lk != 515                   // Identifier Character
     && lk != 643                   // Identifier String
     && lk != 771                   // Identifier Integer
     && lk != 899                   // Identifier Complex
     && lk != 1027                  // Identifier Real
     && lk != 1155                  // Identifier Comment
     && lk != 1539                  // Identifier '!'
     && lk != 1667                  // Identifier '!='
     && lk != 1923                  // Identifier '%'
     && lk != 2051                  // Identifier '%='
     && lk != 2179                  // Identifier '&'
     && lk != 2307                  // Identifier '&&'
     && lk != 2435                  // Identifier '&='
     && lk != 2691                  // Identifier ')'
     && lk != 2819                  // Identifier '*'
     && lk != 2947                  // Identifier '**'
     && lk != 3075                  // Identifier '*='
     && lk != 3203                  // Identifier '+'
     && lk != 3331                  // Identifier '++'
     && lk != 3459                  // Identifier '+='
     && lk != 3587                  // Identifier ','
     && lk != 3662                  // '{' ','
     && lk != 3715                  // Identifier '-'
     && lk != 3843                  // Identifier '--'
     && lk != 3971                  // Identifier '-='
     && lk != 4227                  // Identifier '/'
     && lk != 4355                  // Identifier '/='
     && lk != 4483                  // Identifier ':'
     && lk != 4611                  // Identifier ':='
     && lk != 4739                  // Identifier ';'
     && lk != 4867                  // Identifier '<'
     && lk != 4995                  // Identifier '<<'
     && lk != 5123                  // Identifier '<<='
     && lk != 5251                  // Identifier '<='
     && lk != 5379                  // Identifier '='
     && lk != 5507                  // Identifier '=='
     && lk != 5635                  // Identifier '>'
     && lk != 5763                  // Identifier '>='
     && lk != 5891                  // Identifier '>>'
     && lk != 6019                  // Identifier '>>='
     && lk != 6147                  // Identifier '?'
     && lk != 6275                  // Identifier '?='
     && lk != 6403                  // Identifier '['
     && lk != 6531                  // Identifier ']'
     && lk != 6659                  // Identifier '^'
     && lk != 6787                  // Identifier '^='
     && lk != 6915                  // Identifier 'break'
     && lk != 7043                  // Identifier 'case'
     && lk != 7171                  // Identifier 'catch'
     && lk != 7299                  // Identifier 'continue'
     && lk != 7427                  // Identifier 'default'
     && lk != 7555                  // Identifier 'do'
     && lk != 7683                  // Identifier 'else'
     && lk != 7811                  // Identifier 'f32'
     && lk != 7939                  // Identifier 'f64'
     && lk != 8067                  // Identifier 'for'
     && lk != 8195                  // Identifier 'foreach'
     && lk != 8323                  // Identifier 'global'
     && lk != 8451                  // Identifier 'i32'
     && lk != 8579                  // Identifier 'i64'
     && lk != 8707                  // Identifier 'if'
     && lk != 8835                  // Identifier 'import'
     && lk != 8963                  // Identifier 'include'
     && lk != 9091                  // Identifier 'local'
     && lk != 9219                  // Identifier 'return'
     && lk != 9347                  // Identifier 'switch'
     && lk != 9475                  // Identifier 'test'
     && lk != 9603                  // Identifier 'throw'
     && lk != 9731                  // Identifier 'try'
     && lk != 9859                  // Identifier 'while'
     && lk != 10115                 // Identifier '|'
     && lk != 10243                 // Identifier '|='
     && lk != 10371                 // Identifier '||'
     && lk != 10499                 // Identifier '}'
     && lk != 10627                 // Identifier '~'
     && lk != 16829                 // 'f32' Identifier END
     && lk != 16830                 // 'f64' Identifier END
     && lk != 16834                 // 'i32' Identifier END
     && lk != 16835                 // 'i64' Identifier END
     && lk != 49597                 // 'f32' Identifier Identifier
     && lk != 49598                 // 'f64' Identifier Identifier
     && lk != 49602                 // 'i32' Identifier Identifier
     && lk != 49603                 // 'i64' Identifier Identifier
     && lk != 49614                 // '{' Identifier Identifier
     && lk != 49742                 // '{' Character Identifier
     && lk != 49870                 // '{' String Identifier
     && lk != 49998                 // '{' Integer Identifier
     && lk != 50126                 // '{' Complex Identifier
     && lk != 50254                 // '{' Real Identifier
     && lk != 50382                 // '{' Comment Identifier
     && lk != 53966                 // '{' ';' Identifier
     && lk != 56142                 // '{' 'break' Identifier
     && lk != 56526                 // '{' 'continue' Identifier
     && lk != 65981                 // 'f32' Identifier Character
     && lk != 65982                 // 'f64' Identifier Character
     && lk != 65986                 // 'i32' Identifier Character
     && lk != 65987                 // 'i64' Identifier Character
     && lk != 65998                 // '{' Identifier Character
     && lk != 66126                 // '{' Character Character
     && lk != 66254                 // '{' String Character
     && lk != 66382                 // '{' Integer Character
     && lk != 66510                 // '{' Complex Character
     && lk != 66638                 // '{' Real Character
     && lk != 66766                 // '{' Comment Character
     && lk != 70350                 // '{' ';' Character
     && lk != 72526                 // '{' 'break' Character
     && lk != 72910                 // '{' 'continue' Character
     && lk != 82365                 // 'f32' Identifier String
     && lk != 82366                 // 'f64' Identifier String
     && lk != 82370                 // 'i32' Identifier String
     && lk != 82371                 // 'i64' Identifier String
     && lk != 82382                 // '{' Identifier String
     && lk != 82510                 // '{' Character String
     && lk != 82638                 // '{' String String
     && lk != 82766                 // '{' Integer String
     && lk != 82894                 // '{' Complex String
     && lk != 83022                 // '{' Real String
     && lk != 83150                 // '{' Comment String
     && lk != 86734                 // '{' ';' String
     && lk != 88910                 // '{' 'break' String
     && lk != 89294                 // '{' 'continue' String
     && lk != 98749                 // 'f32' Identifier Integer
     && lk != 98750                 // 'f64' Identifier Integer
     && lk != 98754                 // 'i32' Identifier Integer
     && lk != 98755                 // 'i64' Identifier Integer
     && lk != 98766                 // '{' Identifier Integer
     && lk != 98894                 // '{' Character Integer
     && lk != 99022                 // '{' String Integer
     && lk != 99150                 // '{' Integer Integer
     && lk != 99278                 // '{' Complex Integer
     && lk != 99406                 // '{' Real Integer
     && lk != 99534                 // '{' Comment Integer
     && lk != 103118                // '{' ';' Integer
     && lk != 105294                // '{' 'break' Integer
     && lk != 105678                // '{' 'continue' Integer
     && lk != 115133                // 'f32' Identifier Complex
     && lk != 115134                // 'f64' Identifier Complex
     && lk != 115138                // 'i32' Identifier Complex
     && lk != 115139                // 'i64' Identifier Complex
     && lk != 115150                // '{' Identifier Complex
     && lk != 115278                // '{' Character Complex
     && lk != 115406                // '{' String Complex
     && lk != 115534                // '{' Integer Complex
     && lk != 115662                // '{' Complex Complex
     && lk != 115790                // '{' Real Complex
     && lk != 115918                // '{' Comment Complex
     && lk != 119502                // '{' ';' Complex
     && lk != 121678                // '{' 'break' Complex
     && lk != 122062                // '{' 'continue' Complex
     && lk != 131517                // 'f32' Identifier Real
     && lk != 131518                // 'f64' Identifier Real
     && lk != 131522                // 'i32' Identifier Real
     && lk != 131523                // 'i64' Identifier Real
     && lk != 131534                // '{' Identifier Real
     && lk != 131662                // '{' Character Real
     && lk != 131790                // '{' String Real
     && lk != 131918                // '{' Integer Real
     && lk != 132046                // '{' Complex Real
     && lk != 132174                // '{' Real Real
     && lk != 132302                // '{' Comment Real
     && lk != 135886                // '{' ';' Real
     && lk != 138062                // '{' 'break' Real
     && lk != 138446                // '{' 'continue' Real
     && lk != 147901                // 'f32' Identifier Comment
     && lk != 147902                // 'f64' Identifier Comment
     && lk != 147906                // 'i32' Identifier Comment
     && lk != 147907                // 'i64' Identifier Comment
     && lk != 147918                // '{' Identifier Comment
     && lk != 148046                // '{' Character Comment
     && lk != 148174                // '{' String Comment
     && lk != 148302                // '{' Integer Comment
     && lk != 148430                // '{' Complex Comment
     && lk != 148558                // '{' Real Comment
     && lk != 148686                // '{' Comment Comment
     && lk != 152270                // '{' ';' Comment
     && lk != 154446                // '{' 'break' Comment
     && lk != 154830                // '{' 'continue' Comment
     && lk != 197053                // 'f32' Identifier '!'
     && lk != 197054                // 'f64' Identifier '!'
     && lk != 197058                // 'i32' Identifier '!'
     && lk != 197059                // 'i64' Identifier '!'
     && lk != 197070                // '{' Identifier '!'
     && lk != 197198                // '{' Character '!'
     && lk != 197326                // '{' String '!'
     && lk != 197454                // '{' Integer '!'
     && lk != 197582                // '{' Complex '!'
     && lk != 197710                // '{' Real '!'
     && lk != 197838                // '{' Comment '!'
     && lk != 201422                // '{' ';' '!'
     && lk != 203598                // '{' 'break' '!'
     && lk != 203982                // '{' 'continue' '!'
     && lk != 213437                // 'f32' Identifier '!='
     && lk != 213438                // 'f64' Identifier '!='
     && lk != 213442                // 'i32' Identifier '!='
     && lk != 213443                // 'i64' Identifier '!='
     && lk != 223566                // '{' '}' '!='
     && lk != 246205                // 'f32' Identifier '%'
     && lk != 246206                // 'f64' Identifier '%'
     && lk != 246210                // 'i32' Identifier '%'
     && lk != 246211                // 'i64' Identifier '%'
     && lk != 256334                // '{' '}' '%'
     && lk != 262589                // 'f32' Identifier '%='
     && lk != 262590                // 'f64' Identifier '%='
     && lk != 262594                // 'i32' Identifier '%='
     && lk != 262595                // 'i64' Identifier '%='
     && lk != 272718                // '{' '}' '%='
     && lk != 278973                // 'f32' Identifier '&'
     && lk != 278974                // 'f64' Identifier '&'
     && lk != 278978                // 'i32' Identifier '&'
     && lk != 278979                // 'i64' Identifier '&'
     && lk != 289102                // '{' '}' '&'
     && lk != 295357                // 'f32' Identifier '&&'
     && lk != 295358                // 'f64' Identifier '&&'
     && lk != 295362                // 'i32' Identifier '&&'
     && lk != 295363                // 'i64' Identifier '&&'
     && lk != 305486                // '{' '}' '&&'
     && lk != 311741                // 'f32' Identifier '&='
     && lk != 311742                // 'f64' Identifier '&='
     && lk != 311746                // 'i32' Identifier '&='
     && lk != 311747                // 'i64' Identifier '&='
     && lk != 321870                // '{' '}' '&='
     && lk != 328270                // '{' Character '('
     && lk != 328398                // '{' String '('
     && lk != 328526                // '{' Integer '('
     && lk != 328654                // '{' Complex '('
     && lk != 328782                // '{' Real '('
     && lk != 328910                // '{' Comment '('
     && lk != 332494                // '{' ';' '('
     && lk != 334670                // '{' 'break' '('
     && lk != 335054                // '{' 'continue' '('
     && lk != 344509                // 'f32' Identifier ')'
     && lk != 344510                // 'f64' Identifier ')'
     && lk != 344514                // 'i32' Identifier ')'
     && lk != 344515                // 'i64' Identifier ')'
     && lk != 360893                // 'f32' Identifier '*'
     && lk != 360894                // 'f64' Identifier '*'
     && lk != 360898                // 'i32' Identifier '*'
     && lk != 360899                // 'i64' Identifier '*'
     && lk != 371022                // '{' '}' '*'
     && lk != 377277                // 'f32' Identifier '**'
     && lk != 377278                // 'f64' Identifier '**'
     && lk != 377282                // 'i32' Identifier '**'
     && lk != 377283                // 'i64' Identifier '**'
     && lk != 387406                // '{' '}' '**'
     && lk != 393661                // 'f32' Identifier '*='
     && lk != 393662                // 'f64' Identifier '*='
     && lk != 393666                // 'i32' Identifier '*='
     && lk != 393667                // 'i64' Identifier '*='
     && lk != 403790                // '{' '}' '*='
     && lk != 410045                // 'f32' Identifier '+'
     && lk != 410046                // 'f64' Identifier '+'
     && lk != 410050                // 'i32' Identifier '+'
     && lk != 410051                // 'i64' Identifier '+'
     && lk != 410830                // '{' Comment '+'
     && lk != 414414                // '{' ';' '+'
     && lk != 416590                // '{' 'break' '+'
     && lk != 416974                // '{' 'continue' '+'
     && lk != 426429                // 'f32' Identifier '++'
     && lk != 426430                // 'f64' Identifier '++'
     && lk != 426434                // 'i32' Identifier '++'
     && lk != 426435                // 'i64' Identifier '++'
     && lk != 427214                // '{' Comment '++'
     && lk != 430798                // '{' ';' '++'
     && lk != 432974                // '{' 'break' '++'
     && lk != 433358                // '{' 'continue' '++'
     && lk != 442813                // 'f32' Identifier '+='
     && lk != 442814                // 'f64' Identifier '+='
     && lk != 442818                // 'i32' Identifier '+='
     && lk != 442819                // 'i64' Identifier '+='
     && lk != 452942                // '{' '}' '+='
     && lk != 459197                // 'f32' Identifier ','
     && lk != 459198                // 'f64' Identifier ','
     && lk != 459202                // 'i32' Identifier ','
     && lk != 459203                // 'i64' Identifier ','
     && lk != 459214                // '{' Identifier ','
     && lk != 459342                // '{' Character ','
     && lk != 459470                // '{' String ','
     && lk != 459598                // '{' Integer ','
     && lk != 459726                // '{' Complex ','
     && lk != 459854                // '{' Real ','
     && lk != 459982                // '{' Comment ','
     && lk != 463566                // '{' ';' ','
     && lk != 465742                // '{' 'break' ','
     && lk != 466126                // '{' 'continue' ','
     && lk != 468739                // Identifier '{' ','
     && lk != 475581                // 'f32' Identifier '-'
     && lk != 475582                // 'f64' Identifier '-'
     && lk != 475586                // 'i32' Identifier '-'
     && lk != 475587                // 'i64' Identifier '-'
     && lk != 476366                // '{' Comment '-'
     && lk != 479950                // '{' ';' '-'
     && lk != 482126                // '{' 'break' '-'
     && lk != 482510                // '{' 'continue' '-'
     && lk != 491965                // 'f32' Identifier '--'
     && lk != 491966                // 'f64' Identifier '--'
     && lk != 491970                // 'i32' Identifier '--'
     && lk != 491971                // 'i64' Identifier '--'
     && lk != 492750                // '{' Comment '--'
     && lk != 496334                // '{' ';' '--'
     && lk != 498510                // '{' 'break' '--'
     && lk != 498894                // '{' 'continue' '--'
     && lk != 508349                // 'f32' Identifier '-='
     && lk != 508350                // 'f64' Identifier '-='
     && lk != 508354                // 'i32' Identifier '-='
     && lk != 508355                // 'i64' Identifier '-='
     && lk != 518478                // '{' '}' '-='
     && lk != 541117                // 'f32' Identifier '/'
     && lk != 541118                // 'f64' Identifier '/'
     && lk != 541122                // 'i32' Identifier '/'
     && lk != 541123                // 'i64' Identifier '/'
     && lk != 551246                // '{' '}' '/'
     && lk != 557501                // 'f32' Identifier '/='
     && lk != 557502                // 'f64' Identifier '/='
     && lk != 557506                // 'i32' Identifier '/='
     && lk != 557507                // 'i64' Identifier '/='
     && lk != 567630                // '{' '}' '/='
     && lk != 573885                // 'f32' Identifier ':'
     && lk != 573886                // 'f64' Identifier ':'
     && lk != 573890                // 'i32' Identifier ':'
     && lk != 573891                // 'i64' Identifier ':'
     && lk != 573902                // '{' Identifier ':'
     && lk != 574158                // '{' String ':'
     && lk != 590269                // 'f32' Identifier ':='
     && lk != 590270                // 'f64' Identifier ':='
     && lk != 590274                // 'i32' Identifier ':='
     && lk != 590275                // 'i64' Identifier ':='
     && lk != 600398                // '{' '}' ':='
     && lk != 606653                // 'f32' Identifier ';'
     && lk != 606654                // 'f64' Identifier ';'
     && lk != 606658                // 'i32' Identifier ';'
     && lk != 606659                // 'i64' Identifier ';'
     && lk != 606670                // '{' Identifier ';'
     && lk != 606798                // '{' Character ';'
     && lk != 606926                // '{' String ';'
     && lk != 607054                // '{' Integer ';'
     && lk != 607182                // '{' Complex ';'
     && lk != 607310                // '{' Real ';'
     && lk != 607438                // '{' Comment ';'
     && lk != 611022                // '{' ';' ';'
     && lk != 613198                // '{' 'break' ';'
     && lk != 613582                // '{' 'continue' ';'
     && lk != 623037                // 'f32' Identifier '<'
     && lk != 623038                // 'f64' Identifier '<'
     && lk != 623042                // 'i32' Identifier '<'
     && lk != 623043                // 'i64' Identifier '<'
     && lk != 633166                // '{' '}' '<'
     && lk != 639421                // 'f32' Identifier '<<'
     && lk != 639422                // 'f64' Identifier '<<'
     && lk != 639426                // 'i32' Identifier '<<'
     && lk != 639427                // 'i64' Identifier '<<'
     && lk != 649550                // '{' '}' '<<'
     && lk != 655805                // 'f32' Identifier '<<='
     && lk != 655806                // 'f64' Identifier '<<='
     && lk != 655810                // 'i32' Identifier '<<='
     && lk != 655811                // 'i64' Identifier '<<='
     && lk != 665934                // '{' '}' '<<='
     && lk != 672189                // 'f32' Identifier '<='
     && lk != 672190                // 'f64' Identifier '<='
     && lk != 672194                // 'i32' Identifier '<='
     && lk != 672195                // 'i64' Identifier '<='
     && lk != 682318                // '{' '}' '<='
     && lk != 688573                // 'f32' Identifier '='
     && lk != 688574                // 'f64' Identifier '='
     && lk != 688578                // 'i32' Identifier '='
     && lk != 688579                // 'i64' Identifier '='
     && lk != 698702                // '{' '}' '='
     && lk != 704957                // 'f32' Identifier '=='
     && lk != 704958                // 'f64' Identifier '=='
     && lk != 704962                // 'i32' Identifier '=='
     && lk != 704963                // 'i64' Identifier '=='
     && lk != 715086                // '{' '}' '=='
     && lk != 721341                // 'f32' Identifier '>'
     && lk != 721342                // 'f64' Identifier '>'
     && lk != 721346                // 'i32' Identifier '>'
     && lk != 721347                // 'i64' Identifier '>'
     && lk != 731470                // '{' '}' '>'
     && lk != 737725                // 'f32' Identifier '>='
     && lk != 737726                // 'f64' Identifier '>='
     && lk != 737730                // 'i32' Identifier '>='
     && lk != 737731                // 'i64' Identifier '>='
     && lk != 747854                // '{' '}' '>='
     && lk != 754109                // 'f32' Identifier '>>'
     && lk != 754110                // 'f64' Identifier '>>'
     && lk != 754114                // 'i32' Identifier '>>'
     && lk != 754115                // 'i64' Identifier '>>'
     && lk != 764238                // '{' '}' '>>'
     && lk != 770493                // 'f32' Identifier '>>='
     && lk != 770494                // 'f64' Identifier '>>='
     && lk != 770498                // 'i32' Identifier '>>='
     && lk != 770499                // 'i64' Identifier '>>='
     && lk != 780622                // '{' '}' '>>='
     && lk != 786877                // 'f32' Identifier '?'
     && lk != 786878                // 'f64' Identifier '?'
     && lk != 786882                // 'i32' Identifier '?'
     && lk != 786883                // 'i64' Identifier '?'
     && lk != 797006                // '{' '}' '?'
     && lk != 803261                // 'f32' Identifier '?='
     && lk != 803262                // 'f64' Identifier '?='
     && lk != 803266                // 'i32' Identifier '?='
     && lk != 803267                // 'i64' Identifier '?='
     && lk != 813390                // '{' '}' '?='
     && lk != 819645                // 'f32' Identifier '['
     && lk != 819646                // 'f64' Identifier '['
     && lk != 819650                // 'i32' Identifier '['
     && lk != 819651                // 'i64' Identifier '['
     && lk != 819790                // '{' Character '['
     && lk != 819918                // '{' String '['
     && lk != 820046                // '{' Integer '['
     && lk != 820174                // '{' Complex '['
     && lk != 820302                // '{' Real '['
     && lk != 820430                // '{' Comment '['
     && lk != 824014                // '{' ';' '['
     && lk != 826190                // '{' 'break' '['
     && lk != 826574                // '{' 'continue' '['
     && lk != 836029                // 'f32' Identifier ']'
     && lk != 836030                // 'f64' Identifier ']'
     && lk != 836034                // 'i32' Identifier ']'
     && lk != 836035                // 'i64' Identifier ']'
     && lk != 852413                // 'f32' Identifier '^'
     && lk != 852414                // 'f64' Identifier '^'
     && lk != 852418                // 'i32' Identifier '^'
     && lk != 852419                // 'i64' Identifier '^'
     && lk != 862542                // '{' '}' '^'
     && lk != 868797                // 'f32' Identifier '^='
     && lk != 868798                // 'f64' Identifier '^='
     && lk != 868802                // 'i32' Identifier '^='
     && lk != 868803                // 'i64' Identifier '^='
     && lk != 878926                // '{' '}' '^='
     && lk != 885181                // 'f32' Identifier 'break'
     && lk != 885182                // 'f64' Identifier 'break'
     && lk != 885186                // 'i32' Identifier 'break'
     && lk != 885187                // 'i64' Identifier 'break'
     && lk != 885198                // '{' Identifier 'break'
     && lk != 885326                // '{' Character 'break'
     && lk != 885454                // '{' String 'break'
     && lk != 885582                // '{' Integer 'break'
     && lk != 885710                // '{' Complex 'break'
     && lk != 885838                // '{' Real 'break'
     && lk != 885966                // '{' Comment 'break'
     && lk != 889550                // '{' ';' 'break'
     && lk != 891726                // '{' 'break' 'break'
     && lk != 892110                // '{' 'continue' 'break'
     && lk != 901565                // 'f32' Identifier 'case'
     && lk != 901566                // 'f64' Identifier 'case'
     && lk != 901570                // 'i32' Identifier 'case'
     && lk != 901571                // 'i64' Identifier 'case'
     && lk != 917949                // 'f32' Identifier 'catch'
     && lk != 917950                // 'f64' Identifier 'catch'
     && lk != 917954                // 'i32' Identifier 'catch'
     && lk != 917955                // 'i64' Identifier 'catch'
     && lk != 934333                // 'f32' Identifier 'continue'
     && lk != 934334                // 'f64' Identifier 'continue'
     && lk != 934338                // 'i32' Identifier 'continue'
     && lk != 934339                // 'i64' Identifier 'continue'
     && lk != 934350                // '{' Identifier 'continue'
     && lk != 934478                // '{' Character 'continue'
     && lk != 934606                // '{' String 'continue'
     && lk != 934734                // '{' Integer 'continue'
     && lk != 934862                // '{' Complex 'continue'
     && lk != 934990                // '{' Real 'continue'
     && lk != 935118                // '{' Comment 'continue'
     && lk != 938702                // '{' ';' 'continue'
     && lk != 940878                // '{' 'break' 'continue'
     && lk != 941262                // '{' 'continue' 'continue'
     && lk != 950717                // 'f32' Identifier 'default'
     && lk != 950718                // 'f64' Identifier 'default'
     && lk != 950722                // 'i32' Identifier 'default'
     && lk != 950723                // 'i64' Identifier 'default'
     && lk != 967101                // 'f32' Identifier 'do'
     && lk != 967102                // 'f64' Identifier 'do'
     && lk != 967106                // 'i32' Identifier 'do'
     && lk != 967107                // 'i64' Identifier 'do'
     && lk != 967118                // '{' Identifier 'do'
     && lk != 967246                // '{' Character 'do'
     && lk != 967374                // '{' String 'do'
     && lk != 967502                // '{' Integer 'do'
     && lk != 967630                // '{' Complex 'do'
     && lk != 967758                // '{' Real 'do'
     && lk != 967886                // '{' Comment 'do'
     && lk != 971470                // '{' ';' 'do'
     && lk != 973646                // '{' 'break' 'do'
     && lk != 974030                // '{' 'continue' 'do'
     && lk != 983485                // 'f32' Identifier 'else'
     && lk != 983486                // 'f64' Identifier 'else'
     && lk != 983490                // 'i32' Identifier 'else'
     && lk != 983491                // 'i64' Identifier 'else'
     && lk != 999869                // 'f32' Identifier 'f32'
     && lk != 999870                // 'f64' Identifier 'f32'
     && lk != 999874                // 'i32' Identifier 'f32'
     && lk != 999875                // 'i64' Identifier 'f32'
     && lk != 999886                // '{' Identifier 'f32'
     && lk != 1000014               // '{' Character 'f32'
     && lk != 1000142               // '{' String 'f32'
     && lk != 1000270               // '{' Integer 'f32'
     && lk != 1000398               // '{' Complex 'f32'
     && lk != 1000526               // '{' Real 'f32'
     && lk != 1000654               // '{' Comment 'f32'
     && lk != 1004238               // '{' ';' 'f32'
     && lk != 1006414               // '{' 'break' 'f32'
     && lk != 1006798               // '{' 'continue' 'f32'
     && lk != 1016253               // 'f32' Identifier 'f64'
     && lk != 1016254               // 'f64' Identifier 'f64'
     && lk != 1016258               // 'i32' Identifier 'f64'
     && lk != 1016259               // 'i64' Identifier 'f64'
     && lk != 1016270               // '{' Identifier 'f64'
     && lk != 1016398               // '{' Character 'f64'
     && lk != 1016526               // '{' String 'f64'
     && lk != 1016654               // '{' Integer 'f64'
     && lk != 1016782               // '{' Complex 'f64'
     && lk != 1016910               // '{' Real 'f64'
     && lk != 1017038               // '{' Comment 'f64'
     && lk != 1020622               // '{' ';' 'f64'
     && lk != 1022798               // '{' 'break' 'f64'
     && lk != 1023182               // '{' 'continue' 'f64'
     && lk != 1032637               // 'f32' Identifier 'for'
     && lk != 1032638               // 'f64' Identifier 'for'
     && lk != 1032642               // 'i32' Identifier 'for'
     && lk != 1032643               // 'i64' Identifier 'for'
     && lk != 1032654               // '{' Identifier 'for'
     && lk != 1032782               // '{' Character 'for'
     && lk != 1032910               // '{' String 'for'
     && lk != 1033038               // '{' Integer 'for'
     && lk != 1033166               // '{' Complex 'for'
     && lk != 1033294               // '{' Real 'for'
     && lk != 1033422               // '{' Comment 'for'
     && lk != 1037006               // '{' ';' 'for'
     && lk != 1039182               // '{' 'break' 'for'
     && lk != 1039566               // '{' 'continue' 'for'
     && lk != 1049021               // 'f32' Identifier 'foreach'
     && lk != 1049022               // 'f64' Identifier 'foreach'
     && lk != 1049026               // 'i32' Identifier 'foreach'
     && lk != 1049027               // 'i64' Identifier 'foreach'
     && lk != 1049038               // '{' Identifier 'foreach'
     && lk != 1049166               // '{' Character 'foreach'
     && lk != 1049294               // '{' String 'foreach'
     && lk != 1049422               // '{' Integer 'foreach'
     && lk != 1049550               // '{' Complex 'foreach'
     && lk != 1049678               // '{' Real 'foreach'
     && lk != 1049806               // '{' Comment 'foreach'
     && lk != 1053390               // '{' ';' 'foreach'
     && lk != 1055566               // '{' 'break' 'foreach'
     && lk != 1055950               // '{' 'continue' 'foreach'
     && lk != 1065405               // 'f32' Identifier 'global'
     && lk != 1065406               // 'f64' Identifier 'global'
     && lk != 1065410               // 'i32' Identifier 'global'
     && lk != 1065411               // 'i64' Identifier 'global'
     && lk != 1065422               // '{' Identifier 'global'
     && lk != 1065550               // '{' Character 'global'
     && lk != 1065678               // '{' String 'global'
     && lk != 1065806               // '{' Integer 'global'
     && lk != 1065934               // '{' Complex 'global'
     && lk != 1066062               // '{' Real 'global'
     && lk != 1066190               // '{' Comment 'global'
     && lk != 1069774               // '{' ';' 'global'
     && lk != 1071950               // '{' 'break' 'global'
     && lk != 1072334               // '{' 'continue' 'global'
     && lk != 1081789               // 'f32' Identifier 'i32'
     && lk != 1081790               // 'f64' Identifier 'i32'
     && lk != 1081794               // 'i32' Identifier 'i32'
     && lk != 1081795               // 'i64' Identifier 'i32'
     && lk != 1081806               // '{' Identifier 'i32'
     && lk != 1081934               // '{' Character 'i32'
     && lk != 1082062               // '{' String 'i32'
     && lk != 1082190               // '{' Integer 'i32'
     && lk != 1082318               // '{' Complex 'i32'
     && lk != 1082446               // '{' Real 'i32'
     && lk != 1082574               // '{' Comment 'i32'
     && lk != 1086158               // '{' ';' 'i32'
     && lk != 1088334               // '{' 'break' 'i32'
     && lk != 1088718               // '{' 'continue' 'i32'
     && lk != 1098173               // 'f32' Identifier 'i64'
     && lk != 1098174               // 'f64' Identifier 'i64'
     && lk != 1098178               // 'i32' Identifier 'i64'
     && lk != 1098179               // 'i64' Identifier 'i64'
     && lk != 1098190               // '{' Identifier 'i64'
     && lk != 1098318               // '{' Character 'i64'
     && lk != 1098446               // '{' String 'i64'
     && lk != 1098574               // '{' Integer 'i64'
     && lk != 1098702               // '{' Complex 'i64'
     && lk != 1098830               // '{' Real 'i64'
     && lk != 1098958               // '{' Comment 'i64'
     && lk != 1102542               // '{' ';' 'i64'
     && lk != 1104718               // '{' 'break' 'i64'
     && lk != 1105102               // '{' 'continue' 'i64'
     && lk != 1114557               // 'f32' Identifier 'if'
     && lk != 1114558               // 'f64' Identifier 'if'
     && lk != 1114562               // 'i32' Identifier 'if'
     && lk != 1114563               // 'i64' Identifier 'if'
     && lk != 1114574               // '{' Identifier 'if'
     && lk != 1114702               // '{' Character 'if'
     && lk != 1114830               // '{' String 'if'
     && lk != 1114958               // '{' Integer 'if'
     && lk != 1115086               // '{' Complex 'if'
     && lk != 1115214               // '{' Real 'if'
     && lk != 1115342               // '{' Comment 'if'
     && lk != 1118926               // '{' ';' 'if'
     && lk != 1121102               // '{' 'break' 'if'
     && lk != 1121486               // '{' 'continue' 'if'
     && lk != 1130941               // 'f32' Identifier 'import'
     && lk != 1130942               // 'f64' Identifier 'import'
     && lk != 1130946               // 'i32' Identifier 'import'
     && lk != 1130947               // 'i64' Identifier 'import'
     && lk != 1130958               // '{' Identifier 'import'
     && lk != 1131086               // '{' Character 'import'
     && lk != 1131214               // '{' String 'import'
     && lk != 1131342               // '{' Integer 'import'
     && lk != 1131470               // '{' Complex 'import'
     && lk != 1131598               // '{' Real 'import'
     && lk != 1131726               // '{' Comment 'import'
     && lk != 1135310               // '{' ';' 'import'
     && lk != 1137486               // '{' 'break' 'import'
     && lk != 1137870               // '{' 'continue' 'import'
     && lk != 1147325               // 'f32' Identifier 'include'
     && lk != 1147326               // 'f64' Identifier 'include'
     && lk != 1147330               // 'i32' Identifier 'include'
     && lk != 1147331               // 'i64' Identifier 'include'
     && lk != 1147342               // '{' Identifier 'include'
     && lk != 1147470               // '{' Character 'include'
     && lk != 1147598               // '{' String 'include'
     && lk != 1147726               // '{' Integer 'include'
     && lk != 1147854               // '{' Complex 'include'
     && lk != 1147982               // '{' Real 'include'
     && lk != 1148110               // '{' Comment 'include'
     && lk != 1151694               // '{' ';' 'include'
     && lk != 1153870               // '{' 'break' 'include'
     && lk != 1154254               // '{' 'continue' 'include'
     && lk != 1163709               // 'f32' Identifier 'local'
     && lk != 1163710               // 'f64' Identifier 'local'
     && lk != 1163714               // 'i32' Identifier 'local'
     && lk != 1163715               // 'i64' Identifier 'local'
     && lk != 1163726               // '{' Identifier 'local'
     && lk != 1163854               // '{' Character 'local'
     && lk != 1163982               // '{' String 'local'
     && lk != 1164110               // '{' Integer 'local'
     && lk != 1164238               // '{' Complex 'local'
     && lk != 1164366               // '{' Real 'local'
     && lk != 1164494               // '{' Comment 'local'
     && lk != 1168078               // '{' ';' 'local'
     && lk != 1170254               // '{' 'break' 'local'
     && lk != 1170638               // '{' 'continue' 'local'
     && lk != 1180093               // 'f32' Identifier 'return'
     && lk != 1180094               // 'f64' Identifier 'return'
     && lk != 1180098               // 'i32' Identifier 'return'
     && lk != 1180099               // 'i64' Identifier 'return'
     && lk != 1180110               // '{' Identifier 'return'
     && lk != 1180238               // '{' Character 'return'
     && lk != 1180366               // '{' String 'return'
     && lk != 1180494               // '{' Integer 'return'
     && lk != 1180622               // '{' Complex 'return'
     && lk != 1180750               // '{' Real 'return'
     && lk != 1180878               // '{' Comment 'return'
     && lk != 1184462               // '{' ';' 'return'
     && lk != 1186638               // '{' 'break' 'return'
     && lk != 1187022               // '{' 'continue' 'return'
     && lk != 1196477               // 'f32' Identifier 'switch'
     && lk != 1196478               // 'f64' Identifier 'switch'
     && lk != 1196482               // 'i32' Identifier 'switch'
     && lk != 1196483               // 'i64' Identifier 'switch'
     && lk != 1196494               // '{' Identifier 'switch'
     && lk != 1196622               // '{' Character 'switch'
     && lk != 1196750               // '{' String 'switch'
     && lk != 1196878               // '{' Integer 'switch'
     && lk != 1197006               // '{' Complex 'switch'
     && lk != 1197134               // '{' Real 'switch'
     && lk != 1197262               // '{' Comment 'switch'
     && lk != 1200846               // '{' ';' 'switch'
     && lk != 1203022               // '{' 'break' 'switch'
     && lk != 1203406               // '{' 'continue' 'switch'
     && lk != 1212861               // 'f32' Identifier 'test'
     && lk != 1212862               // 'f64' Identifier 'test'
     && lk != 1212866               // 'i32' Identifier 'test'
     && lk != 1212867               // 'i64' Identifier 'test'
     && lk != 1212878               // '{' Identifier 'test'
     && lk != 1213006               // '{' Character 'test'
     && lk != 1213134               // '{' String 'test'
     && lk != 1213262               // '{' Integer 'test'
     && lk != 1213390               // '{' Complex 'test'
     && lk != 1213518               // '{' Real 'test'
     && lk != 1213646               // '{' Comment 'test'
     && lk != 1217230               // '{' ';' 'test'
     && lk != 1219406               // '{' 'break' 'test'
     && lk != 1219790               // '{' 'continue' 'test'
     && lk != 1229245               // 'f32' Identifier 'throw'
     && lk != 1229246               // 'f64' Identifier 'throw'
     && lk != 1229250               // 'i32' Identifier 'throw'
     && lk != 1229251               // 'i64' Identifier 'throw'
     && lk != 1229262               // '{' Identifier 'throw'
     && lk != 1229390               // '{' Character 'throw'
     && lk != 1229518               // '{' String 'throw'
     && lk != 1229646               // '{' Integer 'throw'
     && lk != 1229774               // '{' Complex 'throw'
     && lk != 1229902               // '{' Real 'throw'
     && lk != 1230030               // '{' Comment 'throw'
     && lk != 1233614               // '{' ';' 'throw'
     && lk != 1235790               // '{' 'break' 'throw'
     && lk != 1236174               // '{' 'continue' 'throw'
     && lk != 1245629               // 'f32' Identifier 'try'
     && lk != 1245630               // 'f64' Identifier 'try'
     && lk != 1245634               // 'i32' Identifier 'try'
     && lk != 1245635               // 'i64' Identifier 'try'
     && lk != 1245646               // '{' Identifier 'try'
     && lk != 1245774               // '{' Character 'try'
     && lk != 1245902               // '{' String 'try'
     && lk != 1246030               // '{' Integer 'try'
     && lk != 1246158               // '{' Complex 'try'
     && lk != 1246286               // '{' Real 'try'
     && lk != 1246414               // '{' Comment 'try'
     && lk != 1249998               // '{' ';' 'try'
     && lk != 1252174               // '{' 'break' 'try'
     && lk != 1252558               // '{' 'continue' 'try'
     && lk != 1262013               // 'f32' Identifier 'while'
     && lk != 1262014               // 'f64' Identifier 'while'
     && lk != 1262018               // 'i32' Identifier 'while'
     && lk != 1262019               // 'i64' Identifier 'while'
     && lk != 1262030               // '{' Identifier 'while'
     && lk != 1262158               // '{' Character 'while'
     && lk != 1262286               // '{' String 'while'
     && lk != 1262414               // '{' Integer 'while'
     && lk != 1262542               // '{' Complex 'while'
     && lk != 1262670               // '{' Real 'while'
     && lk != 1262798               // '{' Comment 'while'
     && lk != 1266382               // '{' ';' 'while'
     && lk != 1268558               // '{' 'break' 'while'
     && lk != 1268942               // '{' 'continue' 'while'
     && lk != 1278397               // 'f32' Identifier '{'
     && lk != 1278398               // 'f64' Identifier '{'
     && lk != 1278402               // 'i32' Identifier '{'
     && lk != 1278403               // 'i64' Identifier '{'
     && lk != 1278542               // '{' Character '{'
     && lk != 1278670               // '{' String '{'
     && lk != 1278798               // '{' Integer '{'
     && lk != 1278926               // '{' Complex '{'
     && lk != 1279054               // '{' Real '{'
     && lk != 1279182               // '{' Comment '{'
     && lk != 1282766               // '{' ';' '{'
     && lk != 1284942               // '{' 'break' '{'
     && lk != 1285326               // '{' 'continue' '{'
     && lk != 1294781               // 'f32' Identifier '|'
     && lk != 1294782               // 'f64' Identifier '|'
     && lk != 1294786               // 'i32' Identifier '|'
     && lk != 1294787               // 'i64' Identifier '|'
     && lk != 1304910               // '{' '}' '|'
     && lk != 1311165               // 'f32' Identifier '|='
     && lk != 1311166               // 'f64' Identifier '|='
     && lk != 1311170               // 'i32' Identifier '|='
     && lk != 1311171               // 'i64' Identifier '|='
     && lk != 1321294               // '{' '}' '|='
     && lk != 1327549               // 'f32' Identifier '||'
     && lk != 1327550               // 'f64' Identifier '||'
     && lk != 1327554               // 'i32' Identifier '||'
     && lk != 1327555               // 'i64' Identifier '||'
     && lk != 1337678               // '{' '}' '||'
     && lk != 1343933               // 'f32' Identifier '}'
     && lk != 1343934               // 'f64' Identifier '}'
     && lk != 1343938               // 'i32' Identifier '}'
     && lk != 1343939               // 'i64' Identifier '}'
     && lk != 1360317               // 'f32' Identifier '~'
     && lk != 1360318               // 'f64' Identifier '~'
     && lk != 1360322               // 'i32' Identifier '~'
     && lk != 1360323               // 'i64' Identifier '~'
     && lk != 1360334               // '{' Identifier '~'
     && lk != 1360462               // '{' Character '~'
     && lk != 1360590               // '{' String '~'
     && lk != 1360718               // '{' Integer '~'
     && lk != 1360846               // '{' Complex '~'
     && lk != 1360974               // '{' Real '~'
     && lk != 1361102               // '{' Comment '~'
     && lk != 1364686               // '{' ';' '~'
     && lk != 1366862               // '{' 'break' '~'
     && lk != 1367246)              // '{' 'continue' '~'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Block();
          memoize(0, e0A, -2);
          lk = -5;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Statement();
            memoize(0, e0A, -3);
            lk = -5;
          }
          catch (p3A)
          {
            lk = -4;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(0, e0A, -4);
          }
        }
      }
    }
    switch (lk)
    {
    case 9:                         // Comment
      consumeT(9);                  // Comment
      break;
    case -2:
    case 49614:                     // '{' Identifier Identifier
    case 49742:                     // '{' Character Identifier
    case 49870:                     // '{' String Identifier
    case 49998:                     // '{' Integer Identifier
    case 50126:                     // '{' Complex Identifier
    case 50254:                     // '{' Real Identifier
    case 50382:                     // '{' Comment Identifier
    case 53966:                     // '{' ';' Identifier
    case 56142:                     // '{' 'break' Identifier
    case 56526:                     // '{' 'continue' Identifier
    case 65998:                     // '{' Identifier Character
    case 66126:                     // '{' Character Character
    case 66254:                     // '{' String Character
    case 66382:                     // '{' Integer Character
    case 66510:                     // '{' Complex Character
    case 66638:                     // '{' Real Character
    case 66766:                     // '{' Comment Character
    case 70350:                     // '{' ';' Character
    case 72526:                     // '{' 'break' Character
    case 72910:                     // '{' 'continue' Character
    case 82382:                     // '{' Identifier String
    case 82510:                     // '{' Character String
    case 82638:                     // '{' String String
    case 82766:                     // '{' Integer String
    case 82894:                     // '{' Complex String
    case 83022:                     // '{' Real String
    case 83150:                     // '{' Comment String
    case 86734:                     // '{' ';' String
    case 88910:                     // '{' 'break' String
    case 89294:                     // '{' 'continue' String
    case 98766:                     // '{' Identifier Integer
    case 98894:                     // '{' Character Integer
    case 99022:                     // '{' String Integer
    case 99150:                     // '{' Integer Integer
    case 99278:                     // '{' Complex Integer
    case 99406:                     // '{' Real Integer
    case 99534:                     // '{' Comment Integer
    case 103118:                    // '{' ';' Integer
    case 105294:                    // '{' 'break' Integer
    case 105678:                    // '{' 'continue' Integer
    case 115150:                    // '{' Identifier Complex
    case 115278:                    // '{' Character Complex
    case 115406:                    // '{' String Complex
    case 115534:                    // '{' Integer Complex
    case 115662:                    // '{' Complex Complex
    case 115790:                    // '{' Real Complex
    case 115918:                    // '{' Comment Complex
    case 119502:                    // '{' ';' Complex
    case 121678:                    // '{' 'break' Complex
    case 122062:                    // '{' 'continue' Complex
    case 131534:                    // '{' Identifier Real
    case 131662:                    // '{' Character Real
    case 131790:                    // '{' String Real
    case 131918:                    // '{' Integer Real
    case 132046:                    // '{' Complex Real
    case 132174:                    // '{' Real Real
    case 132302:                    // '{' Comment Real
    case 135886:                    // '{' ';' Real
    case 138062:                    // '{' 'break' Real
    case 138446:                    // '{' 'continue' Real
    case 147918:                    // '{' Identifier Comment
    case 148046:                    // '{' Character Comment
    case 148174:                    // '{' String Comment
    case 148302:                    // '{' Integer Comment
    case 148430:                    // '{' Complex Comment
    case 148558:                    // '{' Real Comment
    case 148686:                    // '{' Comment Comment
    case 152270:                    // '{' ';' Comment
    case 154446:                    // '{' 'break' Comment
    case 154830:                    // '{' 'continue' Comment
    case 197070:                    // '{' Identifier '!'
    case 197198:                    // '{' Character '!'
    case 197326:                    // '{' String '!'
    case 197454:                    // '{' Integer '!'
    case 197582:                    // '{' Complex '!'
    case 197710:                    // '{' Real '!'
    case 197838:                    // '{' Comment '!'
    case 201422:                    // '{' ';' '!'
    case 203598:                    // '{' 'break' '!'
    case 203982:                    // '{' 'continue' '!'
    case 328270:                    // '{' Character '('
    case 328398:                    // '{' String '('
    case 328526:                    // '{' Integer '('
    case 328654:                    // '{' Complex '('
    case 328782:                    // '{' Real '('
    case 328910:                    // '{' Comment '('
    case 332494:                    // '{' ';' '('
    case 334670:                    // '{' 'break' '('
    case 335054:                    // '{' 'continue' '('
    case 410830:                    // '{' Comment '+'
    case 414414:                    // '{' ';' '+'
    case 416590:                    // '{' 'break' '+'
    case 416974:                    // '{' 'continue' '+'
    case 427214:                    // '{' Comment '++'
    case 430798:                    // '{' ';' '++'
    case 432974:                    // '{' 'break' '++'
    case 433358:                    // '{' 'continue' '++'
    case 476366:                    // '{' Comment '-'
    case 479950:                    // '{' ';' '-'
    case 482126:                    // '{' 'break' '-'
    case 482510:                    // '{' 'continue' '-'
    case 492750:                    // '{' Comment '--'
    case 496334:                    // '{' ';' '--'
    case 498510:                    // '{' 'break' '--'
    case 498894:                    // '{' 'continue' '--'
    case 606670:                    // '{' Identifier ';'
    case 606798:                    // '{' Character ';'
    case 606926:                    // '{' String ';'
    case 607054:                    // '{' Integer ';'
    case 607182:                    // '{' Complex ';'
    case 607310:                    // '{' Real ';'
    case 607438:                    // '{' Comment ';'
    case 611022:                    // '{' ';' ';'
    case 613198:                    // '{' 'break' ';'
    case 613582:                    // '{' 'continue' ';'
    case 819790:                    // '{' Character '['
    case 819918:                    // '{' String '['
    case 820046:                    // '{' Integer '['
    case 820174:                    // '{' Complex '['
    case 820302:                    // '{' Real '['
    case 820430:                    // '{' Comment '['
    case 824014:                    // '{' ';' '['
    case 826190:                    // '{' 'break' '['
    case 826574:                    // '{' 'continue' '['
    case 885198:                    // '{' Identifier 'break'
    case 885326:                    // '{' Character 'break'
    case 885454:                    // '{' String 'break'
    case 885582:                    // '{' Integer 'break'
    case 885710:                    // '{' Complex 'break'
    case 885838:                    // '{' Real 'break'
    case 885966:                    // '{' Comment 'break'
    case 889550:                    // '{' ';' 'break'
    case 891726:                    // '{' 'break' 'break'
    case 892110:                    // '{' 'continue' 'break'
    case 934350:                    // '{' Identifier 'continue'
    case 934478:                    // '{' Character 'continue'
    case 934606:                    // '{' String 'continue'
    case 934734:                    // '{' Integer 'continue'
    case 934862:                    // '{' Complex 'continue'
    case 934990:                    // '{' Real 'continue'
    case 935118:                    // '{' Comment 'continue'
    case 938702:                    // '{' ';' 'continue'
    case 940878:                    // '{' 'break' 'continue'
    case 941262:                    // '{' 'continue' 'continue'
    case 967118:                    // '{' Identifier 'do'
    case 967246:                    // '{' Character 'do'
    case 967374:                    // '{' String 'do'
    case 967502:                    // '{' Integer 'do'
    case 967630:                    // '{' Complex 'do'
    case 967758:                    // '{' Real 'do'
    case 967886:                    // '{' Comment 'do'
    case 971470:                    // '{' ';' 'do'
    case 973646:                    // '{' 'break' 'do'
    case 974030:                    // '{' 'continue' 'do'
    case 999886:                    // '{' Identifier 'f32'
    case 1000014:                   // '{' Character 'f32'
    case 1000142:                   // '{' String 'f32'
    case 1000270:                   // '{' Integer 'f32'
    case 1000398:                   // '{' Complex 'f32'
    case 1000526:                   // '{' Real 'f32'
    case 1000654:                   // '{' Comment 'f32'
    case 1004238:                   // '{' ';' 'f32'
    case 1006414:                   // '{' 'break' 'f32'
    case 1006798:                   // '{' 'continue' 'f32'
    case 1016270:                   // '{' Identifier 'f64'
    case 1016398:                   // '{' Character 'f64'
    case 1016526:                   // '{' String 'f64'
    case 1016654:                   // '{' Integer 'f64'
    case 1016782:                   // '{' Complex 'f64'
    case 1016910:                   // '{' Real 'f64'
    case 1017038:                   // '{' Comment 'f64'
    case 1020622:                   // '{' ';' 'f64'
    case 1022798:                   // '{' 'break' 'f64'
    case 1023182:                   // '{' 'continue' 'f64'
    case 1032654:                   // '{' Identifier 'for'
    case 1032782:                   // '{' Character 'for'
    case 1032910:                   // '{' String 'for'
    case 1033038:                   // '{' Integer 'for'
    case 1033166:                   // '{' Complex 'for'
    case 1033294:                   // '{' Real 'for'
    case 1033422:                   // '{' Comment 'for'
    case 1037006:                   // '{' ';' 'for'
    case 1039182:                   // '{' 'break' 'for'
    case 1039566:                   // '{' 'continue' 'for'
    case 1049038:                   // '{' Identifier 'foreach'
    case 1049166:                   // '{' Character 'foreach'
    case 1049294:                   // '{' String 'foreach'
    case 1049422:                   // '{' Integer 'foreach'
    case 1049550:                   // '{' Complex 'foreach'
    case 1049678:                   // '{' Real 'foreach'
    case 1049806:                   // '{' Comment 'foreach'
    case 1053390:                   // '{' ';' 'foreach'
    case 1055566:                   // '{' 'break' 'foreach'
    case 1055950:                   // '{' 'continue' 'foreach'
    case 1065422:                   // '{' Identifier 'global'
    case 1065550:                   // '{' Character 'global'
    case 1065678:                   // '{' String 'global'
    case 1065806:                   // '{' Integer 'global'
    case 1065934:                   // '{' Complex 'global'
    case 1066062:                   // '{' Real 'global'
    case 1066190:                   // '{' Comment 'global'
    case 1069774:                   // '{' ';' 'global'
    case 1071950:                   // '{' 'break' 'global'
    case 1072334:                   // '{' 'continue' 'global'
    case 1081806:                   // '{' Identifier 'i32'
    case 1081934:                   // '{' Character 'i32'
    case 1082062:                   // '{' String 'i32'
    case 1082190:                   // '{' Integer 'i32'
    case 1082318:                   // '{' Complex 'i32'
    case 1082446:                   // '{' Real 'i32'
    case 1082574:                   // '{' Comment 'i32'
    case 1086158:                   // '{' ';' 'i32'
    case 1088334:                   // '{' 'break' 'i32'
    case 1088718:                   // '{' 'continue' 'i32'
    case 1098190:                   // '{' Identifier 'i64'
    case 1098318:                   // '{' Character 'i64'
    case 1098446:                   // '{' String 'i64'
    case 1098574:                   // '{' Integer 'i64'
    case 1098702:                   // '{' Complex 'i64'
    case 1098830:                   // '{' Real 'i64'
    case 1098958:                   // '{' Comment 'i64'
    case 1102542:                   // '{' ';' 'i64'
    case 1104718:                   // '{' 'break' 'i64'
    case 1105102:                   // '{' 'continue' 'i64'
    case 1114574:                   // '{' Identifier 'if'
    case 1114702:                   // '{' Character 'if'
    case 1114830:                   // '{' String 'if'
    case 1114958:                   // '{' Integer 'if'
    case 1115086:                   // '{' Complex 'if'
    case 1115214:                   // '{' Real 'if'
    case 1115342:                   // '{' Comment 'if'
    case 1118926:                   // '{' ';' 'if'
    case 1121102:                   // '{' 'break' 'if'
    case 1121486:                   // '{' 'continue' 'if'
    case 1130958:                   // '{' Identifier 'import'
    case 1131086:                   // '{' Character 'import'
    case 1131214:                   // '{' String 'import'
    case 1131342:                   // '{' Integer 'import'
    case 1131470:                   // '{' Complex 'import'
    case 1131598:                   // '{' Real 'import'
    case 1131726:                   // '{' Comment 'import'
    case 1135310:                   // '{' ';' 'import'
    case 1137486:                   // '{' 'break' 'import'
    case 1137870:                   // '{' 'continue' 'import'
    case 1147342:                   // '{' Identifier 'include'
    case 1147470:                   // '{' Character 'include'
    case 1147598:                   // '{' String 'include'
    case 1147726:                   // '{' Integer 'include'
    case 1147854:                   // '{' Complex 'include'
    case 1147982:                   // '{' Real 'include'
    case 1148110:                   // '{' Comment 'include'
    case 1151694:                   // '{' ';' 'include'
    case 1153870:                   // '{' 'break' 'include'
    case 1154254:                   // '{' 'continue' 'include'
    case 1163726:                   // '{' Identifier 'local'
    case 1163854:                   // '{' Character 'local'
    case 1163982:                   // '{' String 'local'
    case 1164110:                   // '{' Integer 'local'
    case 1164238:                   // '{' Complex 'local'
    case 1164366:                   // '{' Real 'local'
    case 1164494:                   // '{' Comment 'local'
    case 1168078:                   // '{' ';' 'local'
    case 1170254:                   // '{' 'break' 'local'
    case 1170638:                   // '{' 'continue' 'local'
    case 1180110:                   // '{' Identifier 'return'
    case 1180238:                   // '{' Character 'return'
    case 1180366:                   // '{' String 'return'
    case 1180494:                   // '{' Integer 'return'
    case 1180622:                   // '{' Complex 'return'
    case 1180750:                   // '{' Real 'return'
    case 1180878:                   // '{' Comment 'return'
    case 1184462:                   // '{' ';' 'return'
    case 1186638:                   // '{' 'break' 'return'
    case 1187022:                   // '{' 'continue' 'return'
    case 1196494:                   // '{' Identifier 'switch'
    case 1196622:                   // '{' Character 'switch'
    case 1196750:                   // '{' String 'switch'
    case 1196878:                   // '{' Integer 'switch'
    case 1197006:                   // '{' Complex 'switch'
    case 1197134:                   // '{' Real 'switch'
    case 1197262:                   // '{' Comment 'switch'
    case 1200846:                   // '{' ';' 'switch'
    case 1203022:                   // '{' 'break' 'switch'
    case 1203406:                   // '{' 'continue' 'switch'
    case 1212878:                   // '{' Identifier 'test'
    case 1213006:                   // '{' Character 'test'
    case 1213134:                   // '{' String 'test'
    case 1213262:                   // '{' Integer 'test'
    case 1213390:                   // '{' Complex 'test'
    case 1213518:                   // '{' Real 'test'
    case 1213646:                   // '{' Comment 'test'
    case 1217230:                   // '{' ';' 'test'
    case 1219406:                   // '{' 'break' 'test'
    case 1219790:                   // '{' 'continue' 'test'
    case 1229262:                   // '{' Identifier 'throw'
    case 1229390:                   // '{' Character 'throw'
    case 1229518:                   // '{' String 'throw'
    case 1229646:                   // '{' Integer 'throw'
    case 1229774:                   // '{' Complex 'throw'
    case 1229902:                   // '{' Real 'throw'
    case 1230030:                   // '{' Comment 'throw'
    case 1233614:                   // '{' ';' 'throw'
    case 1235790:                   // '{' 'break' 'throw'
    case 1236174:                   // '{' 'continue' 'throw'
    case 1245646:                   // '{' Identifier 'try'
    case 1245774:                   // '{' Character 'try'
    case 1245902:                   // '{' String 'try'
    case 1246030:                   // '{' Integer 'try'
    case 1246158:                   // '{' Complex 'try'
    case 1246286:                   // '{' Real 'try'
    case 1246414:                   // '{' Comment 'try'
    case 1249998:                   // '{' ';' 'try'
    case 1252174:                   // '{' 'break' 'try'
    case 1252558:                   // '{' 'continue' 'try'
    case 1262030:                   // '{' Identifier 'while'
    case 1262158:                   // '{' Character 'while'
    case 1262286:                   // '{' String 'while'
    case 1262414:                   // '{' Integer 'while'
    case 1262542:                   // '{' Complex 'while'
    case 1262670:                   // '{' Real 'while'
    case 1262798:                   // '{' Comment 'while'
    case 1266382:                   // '{' ';' 'while'
    case 1268558:                   // '{' 'break' 'while'
    case 1268942:                   // '{' 'continue' 'while'
    case 1278542:                   // '{' Character '{'
    case 1278670:                   // '{' String '{'
    case 1278798:                   // '{' Integer '{'
    case 1278926:                   // '{' Complex '{'
    case 1279054:                   // '{' Real '{'
    case 1279182:                   // '{' Comment '{'
    case 1282766:                   // '{' ';' '{'
    case 1284942:                   // '{' 'break' '{'
    case 1285326:                   // '{' 'continue' '{'
    case 1360334:                   // '{' Identifier '~'
    case 1360462:                   // '{' Character '~'
    case 1360590:                   // '{' String '~'
    case 1360718:                   // '{' Integer '~'
    case 1360846:                   // '{' Complex '~'
    case 1360974:                   // '{' Real '~'
    case 1361102:                   // '{' Comment '~'
    case 1364686:                   // '{' ';' '~'
    case 1366862:                   // '{' 'break' '~'
    case 1367246:                   // '{' 'continue' '~'
      try_Block();
      break;
    case -3:
    case 37:                        // ';'
    case 54:                        // 'break'
    case 57:                        // 'continue'
    case 59:                        // 'do'
    case 63:                        // 'for'
    case 64:                        // 'foreach'
    case 65:                        // 'global'
    case 68:                        // 'if'
    case 69:                        // 'import'
    case 70:                        // 'include'
    case 71:                        // 'local'
    case 72:                        // 'return'
    case 73:                        // 'switch'
    case 74:                        // 'test'
    case 75:                        // 'throw'
    case 76:                        // 'try'
    case 77:                        // 'while'
      try_Statement();
      break;
    case -5:
      break;
    default:
      try_Operation();
    }
  }

  function parse_Block()
  {
    eventHandler.startNonterminal("Block", e0);
    consume(78);                    // '{'
    for (;;)
    {
      lookahead1W(30);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '}' | '~'
      if (l1 == 82)                 // '}'
      {
        break;
      }
      whitespace();
      parse_Expression();
    }
    consume(82);                    // '}'
    eventHandler.endNonterminal("Block", e0);
  }

  function try_Block()
  {
    consumeT(78);                   // '{'
    for (;;)
    {
      lookahead1W(30);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '}' | '~'
      if (l1 == 82)                 // '}'
      {
        break;
      }
      try_Expression();
    }
    consumeT(82);                   // '}'
  }

  function parse_Operation()
  {
    eventHandler.startNonterminal("Operation", e0);
    parse_VariableAssignment();
    eventHandler.endNonterminal("Operation", e0);
  }

  function try_Operation()
  {
    try_VariableAssignment();
  }

  function parse_VariableAssignment()
  {
    eventHandler.startNonterminal("VariableAssignment", e0);
    parse_ConditionalExpression();
    for (;;)
    {
      switch (l1)
      {
      case 16:                      // '%='
      case 19:                      // '&='
      case 24:                      // '*='
      case 27:                      // '+='
      case 31:                      // '-='
      case 34:                      // '/='
      case 36:                      // ':='
      case 40:                      // '<<='
      case 42:                      // '='
      case 47:                      // '>>='
      case 49:                      // '?='
      case 53:                      // '^='
      case 80:                      // '|='
        lookahead2W(23);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
        switch (lk)
        {
        case 400:                   // '%=' Identifier
        case 403:                   // '&=' Identifier
        case 408:                   // '*=' Identifier
        case 411:                   // '+=' Identifier
        case 415:                   // '-=' Identifier
        case 418:                   // '/=' Identifier
        case 420:                   // ':=' Identifier
        case 424:                   // '<<=' Identifier
        case 426:                   // '=' Identifier
        case 431:                   // '>>=' Identifier
        case 433:                   // '?=' Identifier
        case 437:                   // '^=' Identifier
        case 464:                   // '|=' Identifier
          lookahead3W(45);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        case 2576:                  // '%=' '('
        case 2579:                  // '&=' '('
        case 2584:                  // '*=' '('
        case 2587:                  // '+=' '('
        case 2591:                  // '-=' '('
        case 2594:                  // '/=' '('
        case 2596:                  // ':=' '('
        case 2600:                  // '<<=' '('
        case 2602:                  // '=' '('
        case 2607:                  // '>>=' '('
        case 2609:                  // '?=' '('
        case 2613:                  // '^=' '('
        case 2640:                  // '|=' '('
          lookahead3W(25);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 6416:                  // '%=' '['
        case 6419:                  // '&=' '['
        case 6424:                  // '*=' '['
        case 6427:                  // '+=' '['
        case 6431:                  // '-=' '['
        case 6434:                  // '/=' '['
        case 6436:                  // ':=' '['
        case 6440:                  // '<<=' '['
        case 6442:                  // '=' '['
        case 6447:                  // '>>=' '['
        case 6449:                  // '?=' '['
        case 6453:                  // '^=' '['
        case 6480:                  // '|=' '['
          lookahead3W(29);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 10000:                 // '%=' '{'
        case 10003:                 // '&=' '{'
        case 10008:                 // '*=' '{'
        case 10011:                 // '+=' '{'
        case 10015:                 // '-=' '{'
        case 10018:                 // '/=' '{'
        case 10020:                 // ':=' '{'
        case 10024:                 // '<<=' '{'
        case 10026:                 // '=' '{'
        case 10031:                 // '>>=' '{'
        case 10033:                 // '?=' '{'
        case 10037:                 // '^=' '{'
        case 10064:                 // '|=' '{'
          lookahead3W(35);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
          break;
        case 7824:                  // '%=' 'f32'
        case 7952:                  // '%=' 'f64'
        case 8464:                  // '%=' 'i32'
        case 8592:                  // '%=' 'i64'
        case 7827:                  // '&=' 'f32'
        case 7955:                  // '&=' 'f64'
        case 8467:                  // '&=' 'i32'
        case 8595:                  // '&=' 'i64'
        case 7832:                  // '*=' 'f32'
        case 7960:                  // '*=' 'f64'
        case 8472:                  // '*=' 'i32'
        case 8600:                  // '*=' 'i64'
        case 7835:                  // '+=' 'f32'
        case 7963:                  // '+=' 'f64'
        case 8475:                  // '+=' 'i32'
        case 8603:                  // '+=' 'i64'
        case 7839:                  // '-=' 'f32'
        case 7967:                  // '-=' 'f64'
        case 8479:                  // '-=' 'i32'
        case 8607:                  // '-=' 'i64'
        case 7842:                  // '/=' 'f32'
        case 7970:                  // '/=' 'f64'
        case 8482:                  // '/=' 'i32'
        case 8610:                  // '/=' 'i64'
        case 7844:                  // ':=' 'f32'
        case 7972:                  // ':=' 'f64'
        case 8484:                  // ':=' 'i32'
        case 8612:                  // ':=' 'i64'
        case 7848:                  // '<<=' 'f32'
        case 7976:                  // '<<=' 'f64'
        case 8488:                  // '<<=' 'i32'
        case 8616:                  // '<<=' 'i64'
        case 7850:                  // '=' 'f32'
        case 7978:                  // '=' 'f64'
        case 8490:                  // '=' 'i32'
        case 8618:                  // '=' 'i64'
        case 7855:                  // '>>=' 'f32'
        case 7983:                  // '>>=' 'f64'
        case 8495:                  // '>>=' 'i32'
        case 8623:                  // '>>=' 'i64'
        case 7857:                  // '?=' 'f32'
        case 7985:                  // '?=' 'f64'
        case 8497:                  // '?=' 'i32'
        case 8625:                  // '?=' 'i64'
        case 7861:                  // '^=' 'f32'
        case 7989:                  // '^=' 'f64'
        case 8501:                  // '^=' 'i32'
        case 8629:                  // '^=' 'i64'
        case 7888:                  // '|=' 'f32'
        case 8016:                  // '|=' 'f64'
        case 8528:                  // '|=' 'i32'
        case 8656:                  // '|=' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 528:                   // '%=' Character
        case 656:                   // '%=' String
        case 784:                   // '%=' Integer
        case 912:                   // '%=' Complex
        case 1040:                  // '%=' Real
        case 531:                   // '&=' Character
        case 659:                   // '&=' String
        case 787:                   // '&=' Integer
        case 915:                   // '&=' Complex
        case 1043:                  // '&=' Real
        case 536:                   // '*=' Character
        case 664:                   // '*=' String
        case 792:                   // '*=' Integer
        case 920:                   // '*=' Complex
        case 1048:                  // '*=' Real
        case 539:                   // '+=' Character
        case 667:                   // '+=' String
        case 795:                   // '+=' Integer
        case 923:                   // '+=' Complex
        case 1051:                  // '+=' Real
        case 543:                   // '-=' Character
        case 671:                   // '-=' String
        case 799:                   // '-=' Integer
        case 927:                   // '-=' Complex
        case 1055:                  // '-=' Real
        case 546:                   // '/=' Character
        case 674:                   // '/=' String
        case 802:                   // '/=' Integer
        case 930:                   // '/=' Complex
        case 1058:                  // '/=' Real
        case 548:                   // ':=' Character
        case 676:                   // ':=' String
        case 804:                   // ':=' Integer
        case 932:                   // ':=' Complex
        case 1060:                  // ':=' Real
        case 552:                   // '<<=' Character
        case 680:                   // '<<=' String
        case 808:                   // '<<=' Integer
        case 936:                   // '<<=' Complex
        case 1064:                  // '<<=' Real
        case 554:                   // '=' Character
        case 682:                   // '=' String
        case 810:                   // '=' Integer
        case 938:                   // '=' Complex
        case 1066:                  // '=' Real
        case 559:                   // '>>=' Character
        case 687:                   // '>>=' String
        case 815:                   // '>>=' Integer
        case 943:                   // '>>=' Complex
        case 1071:                  // '>>=' Real
        case 561:                   // '?=' Character
        case 689:                   // '?=' String
        case 817:                   // '?=' Integer
        case 945:                   // '?=' Complex
        case 1073:                  // '?=' Real
        case 565:                   // '^=' Character
        case 693:                   // '^=' String
        case 821:                   // '^=' Integer
        case 949:                   // '^=' Complex
        case 1077:                  // '^=' Real
        case 592:                   // '|=' Character
        case 720:                   // '|=' String
        case 848:                   // '|=' Integer
        case 976:                   // '|=' Complex
        case 1104:                  // '|=' Real
          lookahead3W(44);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        case 1552:                  // '%=' '!'
        case 3216:                  // '%=' '+'
        case 3344:                  // '%=' '++'
        case 3728:                  // '%=' '-'
        case 3856:                  // '%=' '--'
        case 10640:                 // '%=' '~'
        case 1555:                  // '&=' '!'
        case 3219:                  // '&=' '+'
        case 3347:                  // '&=' '++'
        case 3731:                  // '&=' '-'
        case 3859:                  // '&=' '--'
        case 10643:                 // '&=' '~'
        case 1560:                  // '*=' '!'
        case 3224:                  // '*=' '+'
        case 3352:                  // '*=' '++'
        case 3736:                  // '*=' '-'
        case 3864:                  // '*=' '--'
        case 10648:                 // '*=' '~'
        case 1563:                  // '+=' '!'
        case 3227:                  // '+=' '+'
        case 3355:                  // '+=' '++'
        case 3739:                  // '+=' '-'
        case 3867:                  // '+=' '--'
        case 10651:                 // '+=' '~'
        case 1567:                  // '-=' '!'
        case 3231:                  // '-=' '+'
        case 3359:                  // '-=' '++'
        case 3743:                  // '-=' '-'
        case 3871:                  // '-=' '--'
        case 10655:                 // '-=' '~'
        case 1570:                  // '/=' '!'
        case 3234:                  // '/=' '+'
        case 3362:                  // '/=' '++'
        case 3746:                  // '/=' '-'
        case 3874:                  // '/=' '--'
        case 10658:                 // '/=' '~'
        case 1572:                  // ':=' '!'
        case 3236:                  // ':=' '+'
        case 3364:                  // ':=' '++'
        case 3748:                  // ':=' '-'
        case 3876:                  // ':=' '--'
        case 10660:                 // ':=' '~'
        case 1576:                  // '<<=' '!'
        case 3240:                  // '<<=' '+'
        case 3368:                  // '<<=' '++'
        case 3752:                  // '<<=' '-'
        case 3880:                  // '<<=' '--'
        case 10664:                 // '<<=' '~'
        case 1578:                  // '=' '!'
        case 3242:                  // '=' '+'
        case 3370:                  // '=' '++'
        case 3754:                  // '=' '-'
        case 3882:                  // '=' '--'
        case 10666:                 // '=' '~'
        case 1583:                  // '>>=' '!'
        case 3247:                  // '>>=' '+'
        case 3375:                  // '>>=' '++'
        case 3759:                  // '>>=' '-'
        case 3887:                  // '>>=' '--'
        case 10671:                 // '>>=' '~'
        case 1585:                  // '?=' '!'
        case 3249:                  // '?=' '+'
        case 3377:                  // '?=' '++'
        case 3761:                  // '?=' '-'
        case 3889:                  // '?=' '--'
        case 10673:                 // '?=' '~'
        case 1589:                  // '^=' '!'
        case 3253:                  // '^=' '+'
        case 3381:                  // '^=' '++'
        case 3765:                  // '^=' '-'
        case 3893:                  // '^=' '--'
        case 10677:                 // '^=' '~'
        case 1616:                  // '|=' '!'
        case 3280:                  // '|=' '+'
        case 3408:                  // '|=' '++'
        case 3792:                  // '|=' '-'
        case 3920:                  // '|=' '--'
        case 10704:                 // '|=' '~'
          lookahead3W(22);          // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Character
       && lk != 5                   // String
       && lk != 6                   // Integer
       && lk != 7                   // Complex
       && lk != 8                   // Real
       && lk != 9                   // Comment
       && lk != 12                  // '!'
       && lk != 20                  // '('
       && lk != 21                  // ')'
       && lk != 25                  // '+'
       && lk != 26                  // '++'
       && lk != 28                  // ','
       && lk != 29                  // '-'
       && lk != 30                  // '--'
       && lk != 35                  // ':'
       && lk != 37                  // ';'
       && lk != 50                  // '['
       && lk != 51                  // ']'
       && lk != 54                  // 'break'
       && lk != 55                  // 'case'
       && lk != 56                  // 'catch'
       && lk != 57                  // 'continue'
       && lk != 58                  // 'default'
       && lk != 59                  // 'do'
       && lk != 60                  // 'else'
       && lk != 61                  // 'f32'
       && lk != 62                  // 'f64'
       && lk != 63                  // 'for'
       && lk != 64                  // 'foreach'
       && lk != 65                  // 'global'
       && lk != 66                  // 'i32'
       && lk != 67                  // 'i64'
       && lk != 68                  // 'if'
       && lk != 69                  // 'import'
       && lk != 70                  // 'include'
       && lk != 71                  // 'local'
       && lk != 72                  // 'return'
       && lk != 73                  // 'switch'
       && lk != 74                  // 'test'
       && lk != 75                  // 'throw'
       && lk != 76                  // 'try'
       && lk != 77                  // 'while'
       && lk != 78                  // '{'
       && lk != 82                  // '}'
       && lk != 83)                 // '~'
      {
        lk = memoized(1, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 42:                // '='
              consumeT(42);         // '='
              break;
            case 24:                // '*='
              consumeT(24);         // '*='
              break;
            case 34:                // '/='
              consumeT(34);         // '/='
              break;
            case 16:                // '%='
              consumeT(16);         // '%='
              break;
            case 27:                // '+='
              consumeT(27);         // '+='
              break;
            case 31:                // '-='
              consumeT(31);         // '-='
              break;
            case 40:                // '<<='
              consumeT(40);         // '<<='
              break;
            case 47:                // '>>='
              consumeT(47);         // '>>='
              break;
            case 19:                // '&='
              consumeT(19);         // '&='
              break;
            case 53:                // '^='
              consumeT(53);         // '^='
              break;
            case 80:                // '|='
              consumeT(80);         // '|='
              break;
            case 49:                // '?='
              consumeT(49);         // '?='
              break;
            default:
              consumeT(36);         // ':='
            }
            lookahead1W(23);        // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
            try_ConditionalExpression();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(1, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '='
        consume(42);                // '='
        break;
      case 24:                      // '*='
        consume(24);                // '*='
        break;
      case 34:                      // '/='
        consume(34);                // '/='
        break;
      case 16:                      // '%='
        consume(16);                // '%='
        break;
      case 27:                      // '+='
        consume(27);                // '+='
        break;
      case 31:                      // '-='
        consume(31);                // '-='
        break;
      case 40:                      // '<<='
        consume(40);                // '<<='
        break;
      case 47:                      // '>>='
        consume(47);                // '>>='
        break;
      case 19:                      // '&='
        consume(19);                // '&='
        break;
      case 53:                      // '^='
        consume(53);                // '^='
        break;
      case 80:                      // '|='
        consume(80);                // '|='
        break;
      case 49:                      // '?='
        consume(49);                // '?='
        break;
      default:
        consume(36);                // ':='
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_ConditionalExpression();
    }
    eventHandler.endNonterminal("VariableAssignment", e0);
  }

  function try_VariableAssignment()
  {
    try_ConditionalExpression();
    for (;;)
    {
      switch (l1)
      {
      case 16:                      // '%='
      case 19:                      // '&='
      case 24:                      // '*='
      case 27:                      // '+='
      case 31:                      // '-='
      case 34:                      // '/='
      case 36:                      // ':='
      case 40:                      // '<<='
      case 42:                      // '='
      case 47:                      // '>>='
      case 49:                      // '?='
      case 53:                      // '^='
      case 80:                      // '|='
        lookahead2W(23);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
        switch (lk)
        {
        case 400:                   // '%=' Identifier
        case 403:                   // '&=' Identifier
        case 408:                   // '*=' Identifier
        case 411:                   // '+=' Identifier
        case 415:                   // '-=' Identifier
        case 418:                   // '/=' Identifier
        case 420:                   // ':=' Identifier
        case 424:                   // '<<=' Identifier
        case 426:                   // '=' Identifier
        case 431:                   // '>>=' Identifier
        case 433:                   // '?=' Identifier
        case 437:                   // '^=' Identifier
        case 464:                   // '|=' Identifier
          lookahead3W(45);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        case 2576:                  // '%=' '('
        case 2579:                  // '&=' '('
        case 2584:                  // '*=' '('
        case 2587:                  // '+=' '('
        case 2591:                  // '-=' '('
        case 2594:                  // '/=' '('
        case 2596:                  // ':=' '('
        case 2600:                  // '<<=' '('
        case 2602:                  // '=' '('
        case 2607:                  // '>>=' '('
        case 2609:                  // '?=' '('
        case 2613:                  // '^=' '('
        case 2640:                  // '|=' '('
          lookahead3W(25);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 6416:                  // '%=' '['
        case 6419:                  // '&=' '['
        case 6424:                  // '*=' '['
        case 6427:                  // '+=' '['
        case 6431:                  // '-=' '['
        case 6434:                  // '/=' '['
        case 6436:                  // ':=' '['
        case 6440:                  // '<<=' '['
        case 6442:                  // '=' '['
        case 6447:                  // '>>=' '['
        case 6449:                  // '?=' '['
        case 6453:                  // '^=' '['
        case 6480:                  // '|=' '['
          lookahead3W(29);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 10000:                 // '%=' '{'
        case 10003:                 // '&=' '{'
        case 10008:                 // '*=' '{'
        case 10011:                 // '+=' '{'
        case 10015:                 // '-=' '{'
        case 10018:                 // '/=' '{'
        case 10020:                 // ':=' '{'
        case 10024:                 // '<<=' '{'
        case 10026:                 // '=' '{'
        case 10031:                 // '>>=' '{'
        case 10033:                 // '?=' '{'
        case 10037:                 // '^=' '{'
        case 10064:                 // '|=' '{'
          lookahead3W(35);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
          break;
        case 7824:                  // '%=' 'f32'
        case 7952:                  // '%=' 'f64'
        case 8464:                  // '%=' 'i32'
        case 8592:                  // '%=' 'i64'
        case 7827:                  // '&=' 'f32'
        case 7955:                  // '&=' 'f64'
        case 8467:                  // '&=' 'i32'
        case 8595:                  // '&=' 'i64'
        case 7832:                  // '*=' 'f32'
        case 7960:                  // '*=' 'f64'
        case 8472:                  // '*=' 'i32'
        case 8600:                  // '*=' 'i64'
        case 7835:                  // '+=' 'f32'
        case 7963:                  // '+=' 'f64'
        case 8475:                  // '+=' 'i32'
        case 8603:                  // '+=' 'i64'
        case 7839:                  // '-=' 'f32'
        case 7967:                  // '-=' 'f64'
        case 8479:                  // '-=' 'i32'
        case 8607:                  // '-=' 'i64'
        case 7842:                  // '/=' 'f32'
        case 7970:                  // '/=' 'f64'
        case 8482:                  // '/=' 'i32'
        case 8610:                  // '/=' 'i64'
        case 7844:                  // ':=' 'f32'
        case 7972:                  // ':=' 'f64'
        case 8484:                  // ':=' 'i32'
        case 8612:                  // ':=' 'i64'
        case 7848:                  // '<<=' 'f32'
        case 7976:                  // '<<=' 'f64'
        case 8488:                  // '<<=' 'i32'
        case 8616:                  // '<<=' 'i64'
        case 7850:                  // '=' 'f32'
        case 7978:                  // '=' 'f64'
        case 8490:                  // '=' 'i32'
        case 8618:                  // '=' 'i64'
        case 7855:                  // '>>=' 'f32'
        case 7983:                  // '>>=' 'f64'
        case 8495:                  // '>>=' 'i32'
        case 8623:                  // '>>=' 'i64'
        case 7857:                  // '?=' 'f32'
        case 7985:                  // '?=' 'f64'
        case 8497:                  // '?=' 'i32'
        case 8625:                  // '?=' 'i64'
        case 7861:                  // '^=' 'f32'
        case 7989:                  // '^=' 'f64'
        case 8501:                  // '^=' 'i32'
        case 8629:                  // '^=' 'i64'
        case 7888:                  // '|=' 'f32'
        case 8016:                  // '|=' 'f64'
        case 8528:                  // '|=' 'i32'
        case 8656:                  // '|=' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 528:                   // '%=' Character
        case 656:                   // '%=' String
        case 784:                   // '%=' Integer
        case 912:                   // '%=' Complex
        case 1040:                  // '%=' Real
        case 531:                   // '&=' Character
        case 659:                   // '&=' String
        case 787:                   // '&=' Integer
        case 915:                   // '&=' Complex
        case 1043:                  // '&=' Real
        case 536:                   // '*=' Character
        case 664:                   // '*=' String
        case 792:                   // '*=' Integer
        case 920:                   // '*=' Complex
        case 1048:                  // '*=' Real
        case 539:                   // '+=' Character
        case 667:                   // '+=' String
        case 795:                   // '+=' Integer
        case 923:                   // '+=' Complex
        case 1051:                  // '+=' Real
        case 543:                   // '-=' Character
        case 671:                   // '-=' String
        case 799:                   // '-=' Integer
        case 927:                   // '-=' Complex
        case 1055:                  // '-=' Real
        case 546:                   // '/=' Character
        case 674:                   // '/=' String
        case 802:                   // '/=' Integer
        case 930:                   // '/=' Complex
        case 1058:                  // '/=' Real
        case 548:                   // ':=' Character
        case 676:                   // ':=' String
        case 804:                   // ':=' Integer
        case 932:                   // ':=' Complex
        case 1060:                  // ':=' Real
        case 552:                   // '<<=' Character
        case 680:                   // '<<=' String
        case 808:                   // '<<=' Integer
        case 936:                   // '<<=' Complex
        case 1064:                  // '<<=' Real
        case 554:                   // '=' Character
        case 682:                   // '=' String
        case 810:                   // '=' Integer
        case 938:                   // '=' Complex
        case 1066:                  // '=' Real
        case 559:                   // '>>=' Character
        case 687:                   // '>>=' String
        case 815:                   // '>>=' Integer
        case 943:                   // '>>=' Complex
        case 1071:                  // '>>=' Real
        case 561:                   // '?=' Character
        case 689:                   // '?=' String
        case 817:                   // '?=' Integer
        case 945:                   // '?=' Complex
        case 1073:                  // '?=' Real
        case 565:                   // '^=' Character
        case 693:                   // '^=' String
        case 821:                   // '^=' Integer
        case 949:                   // '^=' Complex
        case 1077:                  // '^=' Real
        case 592:                   // '|=' Character
        case 720:                   // '|=' String
        case 848:                   // '|=' Integer
        case 976:                   // '|=' Complex
        case 1104:                  // '|=' Real
          lookahead3W(44);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        case 1552:                  // '%=' '!'
        case 3216:                  // '%=' '+'
        case 3344:                  // '%=' '++'
        case 3728:                  // '%=' '-'
        case 3856:                  // '%=' '--'
        case 10640:                 // '%=' '~'
        case 1555:                  // '&=' '!'
        case 3219:                  // '&=' '+'
        case 3347:                  // '&=' '++'
        case 3731:                  // '&=' '-'
        case 3859:                  // '&=' '--'
        case 10643:                 // '&=' '~'
        case 1560:                  // '*=' '!'
        case 3224:                  // '*=' '+'
        case 3352:                  // '*=' '++'
        case 3736:                  // '*=' '-'
        case 3864:                  // '*=' '--'
        case 10648:                 // '*=' '~'
        case 1563:                  // '+=' '!'
        case 3227:                  // '+=' '+'
        case 3355:                  // '+=' '++'
        case 3739:                  // '+=' '-'
        case 3867:                  // '+=' '--'
        case 10651:                 // '+=' '~'
        case 1567:                  // '-=' '!'
        case 3231:                  // '-=' '+'
        case 3359:                  // '-=' '++'
        case 3743:                  // '-=' '-'
        case 3871:                  // '-=' '--'
        case 10655:                 // '-=' '~'
        case 1570:                  // '/=' '!'
        case 3234:                  // '/=' '+'
        case 3362:                  // '/=' '++'
        case 3746:                  // '/=' '-'
        case 3874:                  // '/=' '--'
        case 10658:                 // '/=' '~'
        case 1572:                  // ':=' '!'
        case 3236:                  // ':=' '+'
        case 3364:                  // ':=' '++'
        case 3748:                  // ':=' '-'
        case 3876:                  // ':=' '--'
        case 10660:                 // ':=' '~'
        case 1576:                  // '<<=' '!'
        case 3240:                  // '<<=' '+'
        case 3368:                  // '<<=' '++'
        case 3752:                  // '<<=' '-'
        case 3880:                  // '<<=' '--'
        case 10664:                 // '<<=' '~'
        case 1578:                  // '=' '!'
        case 3242:                  // '=' '+'
        case 3370:                  // '=' '++'
        case 3754:                  // '=' '-'
        case 3882:                  // '=' '--'
        case 10666:                 // '=' '~'
        case 1583:                  // '>>=' '!'
        case 3247:                  // '>>=' '+'
        case 3375:                  // '>>=' '++'
        case 3759:                  // '>>=' '-'
        case 3887:                  // '>>=' '--'
        case 10671:                 // '>>=' '~'
        case 1585:                  // '?=' '!'
        case 3249:                  // '?=' '+'
        case 3377:                  // '?=' '++'
        case 3761:                  // '?=' '-'
        case 3889:                  // '?=' '--'
        case 10673:                 // '?=' '~'
        case 1589:                  // '^=' '!'
        case 3253:                  // '^=' '+'
        case 3381:                  // '^=' '++'
        case 3765:                  // '^=' '-'
        case 3893:                  // '^=' '--'
        case 10677:                 // '^=' '~'
        case 1616:                  // '|=' '!'
        case 3280:                  // '|=' '+'
        case 3408:                  // '|=' '++'
        case 3792:                  // '|=' '-'
        case 3920:                  // '|=' '--'
        case 10704:                 // '|=' '~'
          lookahead3W(22);          // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Character
       && lk != 5                   // String
       && lk != 6                   // Integer
       && lk != 7                   // Complex
       && lk != 8                   // Real
       && lk != 9                   // Comment
       && lk != 12                  // '!'
       && lk != 20                  // '('
       && lk != 21                  // ')'
       && lk != 25                  // '+'
       && lk != 26                  // '++'
       && lk != 28                  // ','
       && lk != 29                  // '-'
       && lk != 30                  // '--'
       && lk != 35                  // ':'
       && lk != 37                  // ';'
       && lk != 50                  // '['
       && lk != 51                  // ']'
       && lk != 54                  // 'break'
       && lk != 55                  // 'case'
       && lk != 56                  // 'catch'
       && lk != 57                  // 'continue'
       && lk != 58                  // 'default'
       && lk != 59                  // 'do'
       && lk != 60                  // 'else'
       && lk != 61                  // 'f32'
       && lk != 62                  // 'f64'
       && lk != 63                  // 'for'
       && lk != 64                  // 'foreach'
       && lk != 65                  // 'global'
       && lk != 66                  // 'i32'
       && lk != 67                  // 'i64'
       && lk != 68                  // 'if'
       && lk != 69                  // 'import'
       && lk != 70                  // 'include'
       && lk != 71                  // 'local'
       && lk != 72                  // 'return'
       && lk != 73                  // 'switch'
       && lk != 74                  // 'test'
       && lk != 75                  // 'throw'
       && lk != 76                  // 'try'
       && lk != 77                  // 'while'
       && lk != 78                  // '{'
       && lk != 82                  // '}'
       && lk != 83)                 // '~'
      {
        lk = memoized(1, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 42:                // '='
              consumeT(42);         // '='
              break;
            case 24:                // '*='
              consumeT(24);         // '*='
              break;
            case 34:                // '/='
              consumeT(34);         // '/='
              break;
            case 16:                // '%='
              consumeT(16);         // '%='
              break;
            case 27:                // '+='
              consumeT(27);         // '+='
              break;
            case 31:                // '-='
              consumeT(31);         // '-='
              break;
            case 40:                // '<<='
              consumeT(40);         // '<<='
              break;
            case 47:                // '>>='
              consumeT(47);         // '>>='
              break;
            case 19:                // '&='
              consumeT(19);         // '&='
              break;
            case 53:                // '^='
              consumeT(53);         // '^='
              break;
            case 80:                // '|='
              consumeT(80);         // '|='
              break;
            case 49:                // '?='
              consumeT(49);         // '?='
              break;
            default:
              consumeT(36);         // ':='
            }
            lookahead1W(23);        // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
            try_ConditionalExpression();
            memoize(1, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(1, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '='
        consumeT(42);               // '='
        break;
      case 24:                      // '*='
        consumeT(24);               // '*='
        break;
      case 34:                      // '/='
        consumeT(34);               // '/='
        break;
      case 16:                      // '%='
        consumeT(16);               // '%='
        break;
      case 27:                      // '+='
        consumeT(27);               // '+='
        break;
      case 31:                      // '-='
        consumeT(31);               // '-='
        break;
      case 40:                      // '<<='
        consumeT(40);               // '<<='
        break;
      case 47:                      // '>>='
        consumeT(47);               // '>>='
        break;
      case 19:                      // '&='
        consumeT(19);               // '&='
        break;
      case 53:                      // '^='
        consumeT(53);               // '^='
        break;
      case 80:                      // '|='
        consumeT(80);               // '|='
        break;
      case 49:                      // '?='
        consumeT(49);               // '?='
        break;
      default:
        consumeT(36);               // ':='
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_ConditionalExpression();
    }
  }

  function parse_ConditionalExpression()
  {
    eventHandler.startNonterminal("ConditionalExpression", e0);
    parse_LogicalORExpression();
    if (l1 == 48)                   // '?'
    {
      consume(48);                  // '?'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_VariableAssignment();
      consume(35);                  // ':'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_VariableAssignment();
    }
    eventHandler.endNonterminal("ConditionalExpression", e0);
  }

  function try_ConditionalExpression()
  {
    try_LogicalORExpression();
    if (l1 == 48)                   // '?'
    {
      consumeT(48);                 // '?'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_VariableAssignment();
      consumeT(35);                 // ':'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_VariableAssignment();
    }
  }

  function parse_LogicalORExpression()
  {
    eventHandler.startNonterminal("LogicalORExpression", e0);
    parse_LogicalANDExpression();
    for (;;)
    {
      if (l1 != 81)                 // '||'
      {
        break;
      }
      consume(81);                  // '||'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_LogicalANDExpression();
    }
    eventHandler.endNonterminal("LogicalORExpression", e0);
  }

  function try_LogicalORExpression()
  {
    try_LogicalANDExpression();
    for (;;)
    {
      if (l1 != 81)                 // '||'
      {
        break;
      }
      consumeT(81);                 // '||'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_LogicalANDExpression();
    }
  }

  function parse_LogicalANDExpression()
  {
    eventHandler.startNonterminal("LogicalANDExpression", e0);
    parse_BitwiseORExpression();
    for (;;)
    {
      if (l1 != 18)                 // '&&'
      {
        break;
      }
      consume(18);                  // '&&'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_BitwiseORExpression();
    }
    eventHandler.endNonterminal("LogicalANDExpression", e0);
  }

  function try_LogicalANDExpression()
  {
    try_BitwiseORExpression();
    for (;;)
    {
      if (l1 != 18)                 // '&&'
      {
        break;
      }
      consumeT(18);                 // '&&'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_BitwiseORExpression();
    }
  }

  function parse_BitwiseORExpression()
  {
    eventHandler.startNonterminal("BitwiseORExpression", e0);
    parse_BitwiseXORExpression();
    for (;;)
    {
      if (l1 != 79)                 // '|'
      {
        break;
      }
      consume(79);                  // '|'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_BitwiseXORExpression();
    }
    eventHandler.endNonterminal("BitwiseORExpression", e0);
  }

  function try_BitwiseORExpression()
  {
    try_BitwiseXORExpression();
    for (;;)
    {
      if (l1 != 79)                 // '|'
      {
        break;
      }
      consumeT(79);                 // '|'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_BitwiseXORExpression();
    }
  }

  function parse_BitwiseXORExpression()
  {
    eventHandler.startNonterminal("BitwiseXORExpression", e0);
    parse_BitwiseANDExpression();
    for (;;)
    {
      if (l1 != 52)                 // '^'
      {
        break;
      }
      consume(52);                  // '^'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_BitwiseANDExpression();
    }
    eventHandler.endNonterminal("BitwiseXORExpression", e0);
  }

  function try_BitwiseXORExpression()
  {
    try_BitwiseANDExpression();
    for (;;)
    {
      if (l1 != 52)                 // '^'
      {
        break;
      }
      consumeT(52);                 // '^'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_BitwiseANDExpression();
    }
  }

  function parse_BitwiseANDExpression()
  {
    eventHandler.startNonterminal("BitwiseANDExpression", e0);
    parse_EqualityExpression();
    for (;;)
    {
      if (l1 != 17)                 // '&'
      {
        break;
      }
      consume(17);                  // '&'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_EqualityExpression();
    }
    eventHandler.endNonterminal("BitwiseANDExpression", e0);
  }

  function try_BitwiseANDExpression()
  {
    try_EqualityExpression();
    for (;;)
    {
      if (l1 != 17)                 // '&'
      {
        break;
      }
      consumeT(17);                 // '&'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_EqualityExpression();
    }
  }

  function parse_EqualityExpression()
  {
    eventHandler.startNonterminal("EqualityExpression", e0);
    parse_RelationalExpression();
    for (;;)
    {
      if (l1 != 13                  // '!='
       && l1 != 43)                 // '=='
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '=='
        consume(43);                // '=='
        break;
      default:
        consume(13);                // '!='
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_RelationalExpression();
    }
    eventHandler.endNonterminal("EqualityExpression", e0);
  }

  function try_EqualityExpression()
  {
    try_RelationalExpression();
    for (;;)
    {
      if (l1 != 13                  // '!='
       && l1 != 43)                 // '=='
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '=='
        consumeT(43);               // '=='
        break;
      default:
        consumeT(13);               // '!='
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_RelationalExpression();
    }
  }

  function parse_RelationalExpression()
  {
    eventHandler.startNonterminal("RelationalExpression", e0);
    parse_ShiftExpression();
    for (;;)
    {
      if (l1 != 38                  // '<'
       && l1 != 41                  // '<='
       && l1 != 44                  // '>'
       && l1 != 45)                 // '>='
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '<'
        consume(38);                // '<'
        break;
      case 44:                      // '>'
        consume(44);                // '>'
        break;
      case 41:                      // '<='
        consume(41);                // '<='
        break;
      default:
        consume(45);                // '>='
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_ShiftExpression();
    }
    eventHandler.endNonterminal("RelationalExpression", e0);
  }

  function try_RelationalExpression()
  {
    try_ShiftExpression();
    for (;;)
    {
      if (l1 != 38                  // '<'
       && l1 != 41                  // '<='
       && l1 != 44                  // '>'
       && l1 != 45)                 // '>='
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '<'
        consumeT(38);               // '<'
        break;
      case 44:                      // '>'
        consumeT(44);               // '>'
        break;
      case 41:                      // '<='
        consumeT(41);               // '<='
        break;
      default:
        consumeT(45);               // '>='
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_ShiftExpression();
    }
  }

  function parse_ShiftExpression()
  {
    eventHandler.startNonterminal("ShiftExpression", e0);
    parse_AdditiveExpression();
    for (;;)
    {
      if (l1 != 39                  // '<<'
       && l1 != 46)                 // '>>'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '<<'
        consume(39);                // '<<'
        break;
      default:
        consume(46);                // '>>'
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_AdditiveExpression();
    }
    eventHandler.endNonterminal("ShiftExpression", e0);
  }

  function try_ShiftExpression()
  {
    try_AdditiveExpression();
    for (;;)
    {
      if (l1 != 39                  // '<<'
       && l1 != 46)                 // '>>'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '<<'
        consumeT(39);               // '<<'
        break;
      default:
        consumeT(46);               // '>>'
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_AdditiveExpression();
    }
  }

  function parse_AdditiveExpression()
  {
    eventHandler.startNonterminal("AdditiveExpression", e0);
    parse_PowerExpression();
    for (;;)
    {
      switch (l1)
      {
      case 25:                      // '+'
      case 29:                      // '-'
        lookahead2W(23);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
        switch (lk)
        {
        case 409:                   // '+' Identifier
        case 413:                   // '-' Identifier
          lookahead3W(45);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        case 2585:                  // '+' '('
        case 2589:                  // '-' '('
          lookahead3W(25);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 6425:                  // '+' '['
        case 6429:                  // '-' '['
          lookahead3W(29);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 10009:                 // '+' '{'
        case 10013:                 // '-' '{'
          lookahead3W(35);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
          break;
        case 7833:                  // '+' 'f32'
        case 7961:                  // '+' 'f64'
        case 8473:                  // '+' 'i32'
        case 8601:                  // '+' 'i64'
        case 7837:                  // '-' 'f32'
        case 7965:                  // '-' 'f64'
        case 8477:                  // '-' 'i32'
        case 8605:                  // '-' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 537:                   // '+' Character
        case 665:                   // '+' String
        case 793:                   // '+' Integer
        case 921:                   // '+' Complex
        case 1049:                  // '+' Real
        case 541:                   // '-' Character
        case 669:                   // '-' String
        case 797:                   // '-' Integer
        case 925:                   // '-' Complex
        case 1053:                  // '-' Real
          lookahead3W(44);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Character
       && lk != 5                   // String
       && lk != 6                   // Integer
       && lk != 7                   // Complex
       && lk != 8                   // Real
       && lk != 9                   // Comment
       && lk != 12                  // '!'
       && lk != 13                  // '!='
       && lk != 16                  // '%='
       && lk != 17                  // '&'
       && lk != 18                  // '&&'
       && lk != 19                  // '&='
       && lk != 20                  // '('
       && lk != 21                  // ')'
       && lk != 24                  // '*='
       && lk != 26                  // '++'
       && lk != 27                  // '+='
       && lk != 28                  // ','
       && lk != 30                  // '--'
       && lk != 31                  // '-='
       && lk != 34                  // '/='
       && lk != 35                  // ':'
       && lk != 36                  // ':='
       && lk != 37                  // ';'
       && lk != 38                  // '<'
       && lk != 39                  // '<<'
       && lk != 40                  // '<<='
       && lk != 41                  // '<='
       && lk != 42                  // '='
       && lk != 43                  // '=='
       && lk != 44                  // '>'
       && lk != 45                  // '>='
       && lk != 46                  // '>>'
       && lk != 47                  // '>>='
       && lk != 48                  // '?'
       && lk != 49                  // '?='
       && lk != 50                  // '['
       && lk != 51                  // ']'
       && lk != 52                  // '^'
       && lk != 53                  // '^='
       && lk != 54                  // 'break'
       && lk != 55                  // 'case'
       && lk != 56                  // 'catch'
       && lk != 57                  // 'continue'
       && lk != 58                  // 'default'
       && lk != 59                  // 'do'
       && lk != 60                  // 'else'
       && lk != 61                  // 'f32'
       && lk != 62                  // 'f64'
       && lk != 63                  // 'for'
       && lk != 64                  // 'foreach'
       && lk != 65                  // 'global'
       && lk != 66                  // 'i32'
       && lk != 67                  // 'i64'
       && lk != 68                  // 'if'
       && lk != 69                  // 'import'
       && lk != 70                  // 'include'
       && lk != 71                  // 'local'
       && lk != 72                  // 'return'
       && lk != 73                  // 'switch'
       && lk != 74                  // 'test'
       && lk != 75                  // 'throw'
       && lk != 76                  // 'try'
       && lk != 77                  // 'while'
       && lk != 78                  // '{'
       && lk != 79                  // '|'
       && lk != 80                  // '|='
       && lk != 81                  // '||'
       && lk != 82                  // '}'
       && lk != 83                  // '~'
       && lk != 1561                // '+' '!'
       && lk != 1565                // '-' '!'
       && lk != 3225                // '+' '+'
       && lk != 3229                // '-' '+'
       && lk != 3353                // '+' '++'
       && lk != 3357                // '-' '++'
       && lk != 3737                // '+' '-'
       && lk != 3741                // '-' '-'
       && lk != 3865                // '+' '--'
       && lk != 3869                // '-' '--'
       && lk != 10649               // '+' '~'
       && lk != 10653               // '-' '~'
       && lk != 344473              // '+' Identifier ')'
       && lk != 344477              // '-' Identifier ')'
       && lk != 344601              // '+' Character ')'
       && lk != 344605              // '-' Character ')'
       && lk != 344729              // '+' String ')'
       && lk != 344733              // '-' String ')'
       && lk != 344857              // '+' Integer ')'
       && lk != 344861              // '-' Integer ')'
       && lk != 344985              // '+' Complex ')'
       && lk != 344989              // '-' Complex ')'
       && lk != 345113              // '+' Real ')'
       && lk != 345117              // '-' Real ')'
       && lk != 459161              // '+' Identifier ','
       && lk != 459165              // '-' Identifier ','
       && lk != 459289              // '+' Character ','
       && lk != 459293              // '-' Character ','
       && lk != 459417              // '+' String ','
       && lk != 459421              // '-' String ','
       && lk != 459545              // '+' Integer ','
       && lk != 459549              // '-' Integer ','
       && lk != 459673              // '+' Complex ','
       && lk != 459677              // '-' Complex ','
       && lk != 459801              // '+' Real ','
       && lk != 459805              // '-' Real ','
       && lk != 573849              // '+' Identifier ':'
       && lk != 573853              // '-' Identifier ':'
       && lk != 573977              // '+' Character ':'
       && lk != 573981              // '-' Character ':'
       && lk != 574105              // '+' String ':'
       && lk != 574109              // '-' String ':'
       && lk != 574233              // '+' Integer ':'
       && lk != 574237              // '-' Integer ':'
       && lk != 574361              // '+' Complex ':'
       && lk != 574365              // '-' Complex ':'
       && lk != 574489              // '+' Real ':'
       && lk != 574493              // '-' Real ':'
       && lk != 835993              // '+' Identifier ']'
       && lk != 835997              // '-' Identifier ']'
       && lk != 836121              // '+' Character ']'
       && lk != 836125              // '-' Character ']'
       && lk != 836249              // '+' String ']'
       && lk != 836253              // '-' String ']'
       && lk != 836377              // '+' Integer ']'
       && lk != 836381              // '-' Integer ']'
       && lk != 836505              // '+' Complex ']'
       && lk != 836509              // '-' Complex ']'
       && lk != 836633              // '+' Real ']'
       && lk != 836637              // '-' Real ']'
       && lk != 917913              // '+' Identifier 'catch'
       && lk != 917917              // '-' Identifier 'catch'
       && lk != 918041              // '+' Character 'catch'
       && lk != 918045              // '-' Character 'catch'
       && lk != 918169              // '+' String 'catch'
       && lk != 918173              // '-' String 'catch'
       && lk != 918297              // '+' Integer 'catch'
       && lk != 918301              // '-' Integer 'catch'
       && lk != 918425              // '+' Complex 'catch'
       && lk != 918429              // '-' Complex 'catch'
       && lk != 918553              // '+' Real 'catch'
       && lk != 918557              // '-' Real 'catch'
       && lk != 983449              // '+' Identifier 'else'
       && lk != 983453              // '-' Identifier 'else'
       && lk != 983577              // '+' Character 'else'
       && lk != 983581              // '-' Character 'else'
       && lk != 983705              // '+' String 'else'
       && lk != 983709              // '-' String 'else'
       && lk != 983833              // '+' Integer 'else'
       && lk != 983837              // '-' Integer 'else'
       && lk != 983961              // '+' Complex 'else'
       && lk != 983965              // '-' Complex 'else'
       && lk != 984089              // '+' Real 'else'
       && lk != 984093)             // '-' Real 'else'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 25:                // '+'
              consumeT(25);         // '+'
              break;
            default:
              consumeT(29);         // '-'
            }
            lookahead1W(23);        // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
            try_PowerExpression();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(2, e0, lk);
        }
      }
      if (lk == -2
       || lk == 1                   // END
       || lk == 3                   // Identifier
       || lk == 4                   // Character
       || lk == 5                   // String
       || lk == 6                   // Integer
       || lk == 7                   // Complex
       || lk == 8                   // Real
       || lk == 9                   // Comment
       || lk == 12                  // '!'
       || lk == 13                  // '!='
       || lk == 16                  // '%='
       || lk == 17                  // '&'
       || lk == 18                  // '&&'
       || lk == 19                  // '&='
       || lk == 20                  // '('
       || lk == 21                  // ')'
       || lk == 24                  // '*='
       || lk == 26                  // '++'
       || lk == 27                  // '+='
       || lk == 28                  // ','
       || lk == 30                  // '--'
       || lk == 31                  // '-='
       || lk == 34                  // '/='
       || lk == 35                  // ':'
       || lk == 36                  // ':='
       || lk == 37                  // ';'
       || lk == 38                  // '<'
       || lk == 39                  // '<<'
       || lk == 40                  // '<<='
       || lk == 41                  // '<='
       || lk == 42                  // '='
       || lk == 43                  // '=='
       || lk == 44                  // '>'
       || lk == 45                  // '>='
       || lk == 46                  // '>>'
       || lk == 47                  // '>>='
       || lk == 48                  // '?'
       || lk == 49                  // '?='
       || lk == 50                  // '['
       || lk == 51                  // ']'
       || lk == 52                  // '^'
       || lk == 53                  // '^='
       || lk == 54                  // 'break'
       || lk == 55                  // 'case'
       || lk == 56                  // 'catch'
       || lk == 57                  // 'continue'
       || lk == 58                  // 'default'
       || lk == 59                  // 'do'
       || lk == 60                  // 'else'
       || lk == 61                  // 'f32'
       || lk == 62                  // 'f64'
       || lk == 63                  // 'for'
       || lk == 64                  // 'foreach'
       || lk == 65                  // 'global'
       || lk == 66                  // 'i32'
       || lk == 67                  // 'i64'
       || lk == 68                  // 'if'
       || lk == 69                  // 'import'
       || lk == 70                  // 'include'
       || lk == 71                  // 'local'
       || lk == 72                  // 'return'
       || lk == 73                  // 'switch'
       || lk == 74                  // 'test'
       || lk == 75                  // 'throw'
       || lk == 76                  // 'try'
       || lk == 77                  // 'while'
       || lk == 78                  // '{'
       || lk == 79                  // '|'
       || lk == 80                  // '|='
       || lk == 81                  // '||'
       || lk == 82                  // '}'
       || lk == 83)                 // '~'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // '+'
        consume(25);                // '+'
        break;
      default:
        consume(29);                // '-'
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_PowerExpression();
    }
    eventHandler.endNonterminal("AdditiveExpression", e0);
  }

  function try_AdditiveExpression()
  {
    try_PowerExpression();
    for (;;)
    {
      switch (l1)
      {
      case 25:                      // '+'
      case 29:                      // '-'
        lookahead2W(23);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
        switch (lk)
        {
        case 409:                   // '+' Identifier
        case 413:                   // '-' Identifier
          lookahead3W(45);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        case 2585:                  // '+' '('
        case 2589:                  // '-' '('
          lookahead3W(25);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 6425:                  // '+' '['
        case 6429:                  // '-' '['
          lookahead3W(29);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 10009:                 // '+' '{'
        case 10013:                 // '-' '{'
          lookahead3W(35);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
          break;
        case 7833:                  // '+' 'f32'
        case 7961:                  // '+' 'f64'
        case 8473:                  // '+' 'i32'
        case 8601:                  // '+' 'i64'
        case 7837:                  // '-' 'f32'
        case 7965:                  // '-' 'f64'
        case 8477:                  // '-' 'i32'
        case 8605:                  // '-' 'i64'
          lookahead3W(0);           // Identifier | WhiteSpace^token
          break;
        case 537:                   // '+' Character
        case 665:                   // '+' String
        case 793:                   // '+' Integer
        case 921:                   // '+' Complex
        case 1049:                  // '+' Real
        case 541:                   // '-' Character
        case 669:                   // '-' String
        case 797:                   // '-' Integer
        case 925:                   // '-' Complex
        case 1053:                  // '-' Real
          lookahead3W(44);          // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // END
       && lk != 3                   // Identifier
       && lk != 4                   // Character
       && lk != 5                   // String
       && lk != 6                   // Integer
       && lk != 7                   // Complex
       && lk != 8                   // Real
       && lk != 9                   // Comment
       && lk != 12                  // '!'
       && lk != 13                  // '!='
       && lk != 16                  // '%='
       && lk != 17                  // '&'
       && lk != 18                  // '&&'
       && lk != 19                  // '&='
       && lk != 20                  // '('
       && lk != 21                  // ')'
       && lk != 24                  // '*='
       && lk != 26                  // '++'
       && lk != 27                  // '+='
       && lk != 28                  // ','
       && lk != 30                  // '--'
       && lk != 31                  // '-='
       && lk != 34                  // '/='
       && lk != 35                  // ':'
       && lk != 36                  // ':='
       && lk != 37                  // ';'
       && lk != 38                  // '<'
       && lk != 39                  // '<<'
       && lk != 40                  // '<<='
       && lk != 41                  // '<='
       && lk != 42                  // '='
       && lk != 43                  // '=='
       && lk != 44                  // '>'
       && lk != 45                  // '>='
       && lk != 46                  // '>>'
       && lk != 47                  // '>>='
       && lk != 48                  // '?'
       && lk != 49                  // '?='
       && lk != 50                  // '['
       && lk != 51                  // ']'
       && lk != 52                  // '^'
       && lk != 53                  // '^='
       && lk != 54                  // 'break'
       && lk != 55                  // 'case'
       && lk != 56                  // 'catch'
       && lk != 57                  // 'continue'
       && lk != 58                  // 'default'
       && lk != 59                  // 'do'
       && lk != 60                  // 'else'
       && lk != 61                  // 'f32'
       && lk != 62                  // 'f64'
       && lk != 63                  // 'for'
       && lk != 64                  // 'foreach'
       && lk != 65                  // 'global'
       && lk != 66                  // 'i32'
       && lk != 67                  // 'i64'
       && lk != 68                  // 'if'
       && lk != 69                  // 'import'
       && lk != 70                  // 'include'
       && lk != 71                  // 'local'
       && lk != 72                  // 'return'
       && lk != 73                  // 'switch'
       && lk != 74                  // 'test'
       && lk != 75                  // 'throw'
       && lk != 76                  // 'try'
       && lk != 77                  // 'while'
       && lk != 78                  // '{'
       && lk != 79                  // '|'
       && lk != 80                  // '|='
       && lk != 81                  // '||'
       && lk != 82                  // '}'
       && lk != 83                  // '~'
       && lk != 1561                // '+' '!'
       && lk != 1565                // '-' '!'
       && lk != 3225                // '+' '+'
       && lk != 3229                // '-' '+'
       && lk != 3353                // '+' '++'
       && lk != 3357                // '-' '++'
       && lk != 3737                // '+' '-'
       && lk != 3741                // '-' '-'
       && lk != 3865                // '+' '--'
       && lk != 3869                // '-' '--'
       && lk != 10649               // '+' '~'
       && lk != 10653               // '-' '~'
       && lk != 344473              // '+' Identifier ')'
       && lk != 344477              // '-' Identifier ')'
       && lk != 344601              // '+' Character ')'
       && lk != 344605              // '-' Character ')'
       && lk != 344729              // '+' String ')'
       && lk != 344733              // '-' String ')'
       && lk != 344857              // '+' Integer ')'
       && lk != 344861              // '-' Integer ')'
       && lk != 344985              // '+' Complex ')'
       && lk != 344989              // '-' Complex ')'
       && lk != 345113              // '+' Real ')'
       && lk != 345117              // '-' Real ')'
       && lk != 459161              // '+' Identifier ','
       && lk != 459165              // '-' Identifier ','
       && lk != 459289              // '+' Character ','
       && lk != 459293              // '-' Character ','
       && lk != 459417              // '+' String ','
       && lk != 459421              // '-' String ','
       && lk != 459545              // '+' Integer ','
       && lk != 459549              // '-' Integer ','
       && lk != 459673              // '+' Complex ','
       && lk != 459677              // '-' Complex ','
       && lk != 459801              // '+' Real ','
       && lk != 459805              // '-' Real ','
       && lk != 573849              // '+' Identifier ':'
       && lk != 573853              // '-' Identifier ':'
       && lk != 573977              // '+' Character ':'
       && lk != 573981              // '-' Character ':'
       && lk != 574105              // '+' String ':'
       && lk != 574109              // '-' String ':'
       && lk != 574233              // '+' Integer ':'
       && lk != 574237              // '-' Integer ':'
       && lk != 574361              // '+' Complex ':'
       && lk != 574365              // '-' Complex ':'
       && lk != 574489              // '+' Real ':'
       && lk != 574493              // '-' Real ':'
       && lk != 835993              // '+' Identifier ']'
       && lk != 835997              // '-' Identifier ']'
       && lk != 836121              // '+' Character ']'
       && lk != 836125              // '-' Character ']'
       && lk != 836249              // '+' String ']'
       && lk != 836253              // '-' String ']'
       && lk != 836377              // '+' Integer ']'
       && lk != 836381              // '-' Integer ']'
       && lk != 836505              // '+' Complex ']'
       && lk != 836509              // '-' Complex ']'
       && lk != 836633              // '+' Real ']'
       && lk != 836637              // '-' Real ']'
       && lk != 917913              // '+' Identifier 'catch'
       && lk != 917917              // '-' Identifier 'catch'
       && lk != 918041              // '+' Character 'catch'
       && lk != 918045              // '-' Character 'catch'
       && lk != 918169              // '+' String 'catch'
       && lk != 918173              // '-' String 'catch'
       && lk != 918297              // '+' Integer 'catch'
       && lk != 918301              // '-' Integer 'catch'
       && lk != 918425              // '+' Complex 'catch'
       && lk != 918429              // '-' Complex 'catch'
       && lk != 918553              // '+' Real 'catch'
       && lk != 918557              // '-' Real 'catch'
       && lk != 983449              // '+' Identifier 'else'
       && lk != 983453              // '-' Identifier 'else'
       && lk != 983577              // '+' Character 'else'
       && lk != 983581              // '-' Character 'else'
       && lk != 983705              // '+' String 'else'
       && lk != 983709              // '-' String 'else'
       && lk != 983833              // '+' Integer 'else'
       && lk != 983837              // '-' Integer 'else'
       && lk != 983961              // '+' Complex 'else'
       && lk != 983965              // '-' Complex 'else'
       && lk != 984089              // '+' Real 'else'
       && lk != 984093)             // '-' Real 'else'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            switch (l1)
            {
            case 25:                // '+'
              consumeT(25);         // '+'
              break;
            default:
              consumeT(29);         // '-'
            }
            lookahead1W(23);        // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
            try_PowerExpression();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk == -2
       || lk == 1                   // END
       || lk == 3                   // Identifier
       || lk == 4                   // Character
       || lk == 5                   // String
       || lk == 6                   // Integer
       || lk == 7                   // Complex
       || lk == 8                   // Real
       || lk == 9                   // Comment
       || lk == 12                  // '!'
       || lk == 13                  // '!='
       || lk == 16                  // '%='
       || lk == 17                  // '&'
       || lk == 18                  // '&&'
       || lk == 19                  // '&='
       || lk == 20                  // '('
       || lk == 21                  // ')'
       || lk == 24                  // '*='
       || lk == 26                  // '++'
       || lk == 27                  // '+='
       || lk == 28                  // ','
       || lk == 30                  // '--'
       || lk == 31                  // '-='
       || lk == 34                  // '/='
       || lk == 35                  // ':'
       || lk == 36                  // ':='
       || lk == 37                  // ';'
       || lk == 38                  // '<'
       || lk == 39                  // '<<'
       || lk == 40                  // '<<='
       || lk == 41                  // '<='
       || lk == 42                  // '='
       || lk == 43                  // '=='
       || lk == 44                  // '>'
       || lk == 45                  // '>='
       || lk == 46                  // '>>'
       || lk == 47                  // '>>='
       || lk == 48                  // '?'
       || lk == 49                  // '?='
       || lk == 50                  // '['
       || lk == 51                  // ']'
       || lk == 52                  // '^'
       || lk == 53                  // '^='
       || lk == 54                  // 'break'
       || lk == 55                  // 'case'
       || lk == 56                  // 'catch'
       || lk == 57                  // 'continue'
       || lk == 58                  // 'default'
       || lk == 59                  // 'do'
       || lk == 60                  // 'else'
       || lk == 61                  // 'f32'
       || lk == 62                  // 'f64'
       || lk == 63                  // 'for'
       || lk == 64                  // 'foreach'
       || lk == 65                  // 'global'
       || lk == 66                  // 'i32'
       || lk == 67                  // 'i64'
       || lk == 68                  // 'if'
       || lk == 69                  // 'import'
       || lk == 70                  // 'include'
       || lk == 71                  // 'local'
       || lk == 72                  // 'return'
       || lk == 73                  // 'switch'
       || lk == 74                  // 'test'
       || lk == 75                  // 'throw'
       || lk == 76                  // 'try'
       || lk == 77                  // 'while'
       || lk == 78                  // '{'
       || lk == 79                  // '|'
       || lk == 80                  // '|='
       || lk == 81                  // '||'
       || lk == 82                  // '}'
       || lk == 83)                 // '~'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // '+'
        consumeT(25);               // '+'
        break;
      default:
        consumeT(29);               // '-'
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_PowerExpression();
    }
  }

  function parse_PowerExpression()
  {
    eventHandler.startNonterminal("PowerExpression", e0);
    parse_MultiplicativeExpression();
    for (;;)
    {
      if (l1 != 23)                 // '**'
      {
        break;
      }
      consume(23);                  // '**'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_MultiplicativeExpression();
    }
    eventHandler.endNonterminal("PowerExpression", e0);
  }

  function try_PowerExpression()
  {
    try_MultiplicativeExpression();
    for (;;)
    {
      if (l1 != 23)                 // '**'
      {
        break;
      }
      consumeT(23);                 // '**'
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_MultiplicativeExpression();
    }
  }

  function parse_MultiplicativeExpression()
  {
    eventHandler.startNonterminal("MultiplicativeExpression", e0);
    parse_UnaryExpression();
    for (;;)
    {
      lookahead1W(44);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      if (l1 != 15                  // '%'
       && l1 != 22                  // '*'
       && l1 != 33)                 // '/'
      {
        break;
      }
      switch (l1)
      {
      case 22:                      // '*'
        consume(22);                // '*'
        break;
      case 33:                      // '/'
        consume(33);                // '/'
        break;
      default:
        consume(15);                // '%'
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      whitespace();
      parse_UnaryExpression();
    }
    eventHandler.endNonterminal("MultiplicativeExpression", e0);
  }

  function try_MultiplicativeExpression()
  {
    try_UnaryExpression();
    for (;;)
    {
      lookahead1W(44);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      if (l1 != 15                  // '%'
       && l1 != 22                  // '*'
       && l1 != 33)                 // '/'
      {
        break;
      }
      switch (l1)
      {
      case 22:                      // '*'
        consumeT(22);               // '*'
        break;
      case 33:                      // '/'
        consumeT(33);               // '/'
        break;
      default:
        consumeT(15);               // '%'
      }
      lookahead1W(23);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '!' | '(' | '+' | '++' | '-' | '--' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{' |
                                    // '~'
      try_UnaryExpression();
    }
  }

  function parse_UnaryExpression()
  {
    eventHandler.startNonterminal("UnaryExpression", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 6403:                    // Identifier '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 3331:                    // Identifier '++'
      case 3843:                    // Identifier '--'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    case 20:                        // '('
      lookahead2W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 404:                     // '(' Identifier
        lookahead3W(37);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' |
                                    // '[' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 6420:                    // '(' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10004:                   // '(' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1172:                    // '(' Comment
      case 4756:                    // '(' ';'
      case 6932:                    // '(' 'break'
      case 7316:                    // '(' 'continue'
        lookahead3W(4);             // WhiteSpace^token | ')'
        break;
      case 7828:                    // '(' 'f32'
      case 7956:                    // '(' 'f64'
      case 8468:                    // '(' 'i32'
      case 8596:                    // '(' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 532:                     // '(' Character
      case 660:                     // '(' String
      case 788:                     // '(' Integer
      case 916:                     // '(' Complex
      case 1044:                    // '(' Real
        lookahead3W(24);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||'
        break;
      case 1556:                    // '(' '!'
      case 3220:                    // '(' '+'
      case 3348:                    // '(' '++'
      case 3732:                    // '(' '-'
      case 3860:                    // '(' '--'
      case 10644:                   // '(' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8084:                    // '(' 'for'
      case 8212:                    // '(' 'foreach'
      case 8724:                    // '(' 'if'
      case 9364:                    // '(' 'switch'
      case 9492:                    // '(' 'test'
      case 9876:                    // '(' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2580:                    // '(' '('
      case 7572:                    // '(' 'do'
      case 8340:                    // '(' 'global'
      case 8852:                    // '(' 'import'
      case 8980:                    // '(' 'include'
      case 9108:                    // '(' 'local'
      case 9236:                    // '(' 'return'
      case 9620:                    // '(' 'throw'
      case 9748:                    // '(' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 50:                        // '['
      lookahead2W(29);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 434:                     // '[' Identifier
        lookahead3W(39);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 4786:                    // '[' ';'
        lookahead3W(34);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 6450:                    // '[' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 6578:                    // '[' ']'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 10034:                   // '[' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1202:                    // '[' Comment
      case 6962:                    // '[' 'break'
      case 7346:                    // '[' 'continue'
        lookahead3W(21);            // WhiteSpace^token | ',' | ';' | ']'
        break;
      case 7858:                    // '[' 'f32'
      case 7986:                    // '[' 'f64'
      case 8498:                    // '[' 'i32'
      case 8626:                    // '[' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 562:                     // '[' Character
      case 690:                     // '[' String
      case 818:                     // '[' Integer
      case 946:                     // '[' Complex
      case 1074:                    // '[' Real
        lookahead3W(32);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
        break;
      case 1586:                    // '[' '!'
      case 3250:                    // '[' '+'
      case 3378:                    // '[' '++'
      case 3762:                    // '[' '-'
      case 3890:                    // '[' '--'
      case 10674:                   // '[' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8114:                    // '[' 'for'
      case 8242:                    // '[' 'foreach'
      case 8754:                    // '[' 'if'
      case 9394:                    // '[' 'switch'
      case 9522:                    // '[' 'test'
      case 9906:                    // '[' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2610:                    // '[' '('
      case 7602:                    // '[' 'do'
      case 8370:                    // '[' 'global'
      case 8882:                    // '[' 'import'
      case 9010:                    // '[' 'include'
      case 9138:                    // '[' 'local'
      case 9266:                    // '[' 'return'
      case 9650:                    // '[' 'throw'
      case 9778:                    // '[' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 78:                        // '{'
      lookahead2W(35);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
      switch (lk)
      {
      case 462:                     // '{' Identifier
        lookahead3W(38);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
        break;
      case 718:                     // '{' String
        lookahead3W(31);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
        break;
      case 6478:                    // '{' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10062:                   // '{' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 10574:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 590:                     // '{' Character
      case 846:                     // '{' Integer
      case 974:                     // '{' Complex
      case 1102:                    // '{' Real
        lookahead3W(26);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||' | '}'
        break;
      case 1230:                    // '{' Comment
      case 4814:                    // '{' ';'
      case 6990:                    // '{' 'break'
      case 7374:                    // '{' 'continue'
        lookahead3W(17);            // WhiteSpace^token | ',' | '}'
        break;
      case 7886:                    // '{' 'f32'
      case 8014:                    // '{' 'f64'
      case 8526:                    // '{' 'i32'
      case 8654:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1614:                    // '{' '!'
      case 3278:                    // '{' '+'
      case 3406:                    // '{' '++'
      case 3790:                    // '{' '-'
      case 3918:                    // '{' '--'
      case 10702:                   // '{' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8142:                    // '{' 'for'
      case 8270:                    // '{' 'foreach'
      case 8782:                    // '{' 'if'
      case 9422:                    // '{' 'switch'
      case 9550:                    // '{' 'test'
      case 9934:                    // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2638:                    // '{' '('
      case 3662:                    // '{' ','
      case 7630:                    // '{' 'do'
      case 8398:                    // '{' 'global'
      case 8910:                    // '{' 'import'
      case 9038:                    // '{' 'include'
      case 9166:                    // '{' 'local'
      case 9294:                    // '{' 'return'
      case 9678:                    // '{' 'throw'
      case 9806:                    // '{' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 445:                     // 'f32' Identifier
      case 446:                     // 'f64' Identifier
      case 450:                     // 'i32' Identifier
      case 451:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    case 4:                         // Character
    case 5:                         // String
    case 6:                         // Integer
    case 7:                         // Complex
    case 8:                         // Real
      lookahead2W(44);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 3332:                    // Character '++'
      case 3844:                    // Character '--'
      case 3333:                    // String '++'
      case 3845:                    // String '--'
      case 3334:                    // Integer '++'
      case 3846:                    // Integer '--'
      case 3335:                    // Complex '++'
      case 3847:                    // Complex '--'
      case 3336:                    // Real '++'
      case 3848:                    // Real '--'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 12                    // '!'
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 83                    // '~'
     && lk != 131                   // Identifier END
     && lk != 132                   // Character END
     && lk != 133                   // String END
     && lk != 134                   // Integer END
     && lk != 135                   // Complex END
     && lk != 136                   // Real END
     && lk != 387                   // Identifier Identifier
     && lk != 388                   // Character Identifier
     && lk != 389                   // String Identifier
     && lk != 390                   // Integer Identifier
     && lk != 391                   // Complex Identifier
     && lk != 392                   // Real Identifier
     && lk != 515                   // Identifier Character
     && lk != 516                   // Character Character
     && lk != 517                   // String Character
     && lk != 518                   // Integer Character
     && lk != 519                   // Complex Character
     && lk != 520                   // Real Character
     && lk != 643                   // Identifier String
     && lk != 644                   // Character String
     && lk != 645                   // String String
     && lk != 646                   // Integer String
     && lk != 647                   // Complex String
     && lk != 648                   // Real String
     && lk != 771                   // Identifier Integer
     && lk != 772                   // Character Integer
     && lk != 773                   // String Integer
     && lk != 774                   // Integer Integer
     && lk != 775                   // Complex Integer
     && lk != 776                   // Real Integer
     && lk != 899                   // Identifier Complex
     && lk != 900                   // Character Complex
     && lk != 901                   // String Complex
     && lk != 902                   // Integer Complex
     && lk != 903                   // Complex Complex
     && lk != 904                   // Real Complex
     && lk != 1027                  // Identifier Real
     && lk != 1028                  // Character Real
     && lk != 1029                  // String Real
     && lk != 1030                  // Integer Real
     && lk != 1031                  // Complex Real
     && lk != 1032                  // Real Real
     && lk != 1155                  // Identifier Comment
     && lk != 1156                  // Character Comment
     && lk != 1157                  // String Comment
     && lk != 1158                  // Integer Comment
     && lk != 1159                  // Complex Comment
     && lk != 1160                  // Real Comment
     && lk != 1539                  // Identifier '!'
     && lk != 1540                  // Character '!'
     && lk != 1541                  // String '!'
     && lk != 1542                  // Integer '!'
     && lk != 1543                  // Complex '!'
     && lk != 1544                  // Real '!'
     && lk != 1667                  // Identifier '!='
     && lk != 1668                  // Character '!='
     && lk != 1669                  // String '!='
     && lk != 1670                  // Integer '!='
     && lk != 1671                  // Complex '!='
     && lk != 1672                  // Real '!='
     && lk != 1923                  // Identifier '%'
     && lk != 1924                  // Character '%'
     && lk != 1925                  // String '%'
     && lk != 1926                  // Integer '%'
     && lk != 1927                  // Complex '%'
     && lk != 1928                  // Real '%'
     && lk != 2051                  // Identifier '%='
     && lk != 2052                  // Character '%='
     && lk != 2053                  // String '%='
     && lk != 2054                  // Integer '%='
     && lk != 2055                  // Complex '%='
     && lk != 2056                  // Real '%='
     && lk != 2179                  // Identifier '&'
     && lk != 2180                  // Character '&'
     && lk != 2181                  // String '&'
     && lk != 2182                  // Integer '&'
     && lk != 2183                  // Complex '&'
     && lk != 2184                  // Real '&'
     && lk != 2307                  // Identifier '&&'
     && lk != 2308                  // Character '&&'
     && lk != 2309                  // String '&&'
     && lk != 2310                  // Integer '&&'
     && lk != 2311                  // Complex '&&'
     && lk != 2312                  // Real '&&'
     && lk != 2435                  // Identifier '&='
     && lk != 2436                  // Character '&='
     && lk != 2437                  // String '&='
     && lk != 2438                  // Integer '&='
     && lk != 2439                  // Complex '&='
     && lk != 2440                  // Real '&='
     && lk != 2564                  // Character '('
     && lk != 2565                  // String '('
     && lk != 2566                  // Integer '('
     && lk != 2567                  // Complex '('
     && lk != 2568                  // Real '('
     && lk != 2691                  // Identifier ')'
     && lk != 2692                  // Character ')'
     && lk != 2693                  // String ')'
     && lk != 2694                  // Integer ')'
     && lk != 2695                  // Complex ')'
     && lk != 2696                  // Real ')'
     && lk != 2819                  // Identifier '*'
     && lk != 2820                  // Character '*'
     && lk != 2821                  // String '*'
     && lk != 2822                  // Integer '*'
     && lk != 2823                  // Complex '*'
     && lk != 2824                  // Real '*'
     && lk != 2947                  // Identifier '**'
     && lk != 2948                  // Character '**'
     && lk != 2949                  // String '**'
     && lk != 2950                  // Integer '**'
     && lk != 2951                  // Complex '**'
     && lk != 2952                  // Real '**'
     && lk != 3075                  // Identifier '*='
     && lk != 3076                  // Character '*='
     && lk != 3077                  // String '*='
     && lk != 3078                  // Integer '*='
     && lk != 3079                  // Complex '*='
     && lk != 3080                  // Real '*='
     && lk != 3203                  // Identifier '+'
     && lk != 3204                  // Character '+'
     && lk != 3205                  // String '+'
     && lk != 3206                  // Integer '+'
     && lk != 3207                  // Complex '+'
     && lk != 3208                  // Real '+'
     && lk != 3459                  // Identifier '+='
     && lk != 3460                  // Character '+='
     && lk != 3461                  // String '+='
     && lk != 3462                  // Integer '+='
     && lk != 3463                  // Complex '+='
     && lk != 3464                  // Real '+='
     && lk != 3587                  // Identifier ','
     && lk != 3588                  // Character ','
     && lk != 3589                  // String ','
     && lk != 3590                  // Integer ','
     && lk != 3591                  // Complex ','
     && lk != 3592                  // Real ','
     && lk != 3715                  // Identifier '-'
     && lk != 3716                  // Character '-'
     && lk != 3717                  // String '-'
     && lk != 3718                  // Integer '-'
     && lk != 3719                  // Complex '-'
     && lk != 3720                  // Real '-'
     && lk != 3971                  // Identifier '-='
     && lk != 3972                  // Character '-='
     && lk != 3973                  // String '-='
     && lk != 3974                  // Integer '-='
     && lk != 3975                  // Complex '-='
     && lk != 3976                  // Real '-='
     && lk != 4227                  // Identifier '/'
     && lk != 4228                  // Character '/'
     && lk != 4229                  // String '/'
     && lk != 4230                  // Integer '/'
     && lk != 4231                  // Complex '/'
     && lk != 4232                  // Real '/'
     && lk != 4355                  // Identifier '/='
     && lk != 4356                  // Character '/='
     && lk != 4357                  // String '/='
     && lk != 4358                  // Integer '/='
     && lk != 4359                  // Complex '/='
     && lk != 4360                  // Real '/='
     && lk != 4483                  // Identifier ':'
     && lk != 4484                  // Character ':'
     && lk != 4485                  // String ':'
     && lk != 4486                  // Integer ':'
     && lk != 4487                  // Complex ':'
     && lk != 4488                  // Real ':'
     && lk != 4611                  // Identifier ':='
     && lk != 4612                  // Character ':='
     && lk != 4613                  // String ':='
     && lk != 4614                  // Integer ':='
     && lk != 4615                  // Complex ':='
     && lk != 4616                  // Real ':='
     && lk != 4739                  // Identifier ';'
     && lk != 4740                  // Character ';'
     && lk != 4741                  // String ';'
     && lk != 4742                  // Integer ';'
     && lk != 4743                  // Complex ';'
     && lk != 4744                  // Real ';'
     && lk != 4867                  // Identifier '<'
     && lk != 4868                  // Character '<'
     && lk != 4869                  // String '<'
     && lk != 4870                  // Integer '<'
     && lk != 4871                  // Complex '<'
     && lk != 4872                  // Real '<'
     && lk != 4995                  // Identifier '<<'
     && lk != 4996                  // Character '<<'
     && lk != 4997                  // String '<<'
     && lk != 4998                  // Integer '<<'
     && lk != 4999                  // Complex '<<'
     && lk != 5000                  // Real '<<'
     && lk != 5123                  // Identifier '<<='
     && lk != 5124                  // Character '<<='
     && lk != 5125                  // String '<<='
     && lk != 5126                  // Integer '<<='
     && lk != 5127                  // Complex '<<='
     && lk != 5128                  // Real '<<='
     && lk != 5251                  // Identifier '<='
     && lk != 5252                  // Character '<='
     && lk != 5253                  // String '<='
     && lk != 5254                  // Integer '<='
     && lk != 5255                  // Complex '<='
     && lk != 5256                  // Real '<='
     && lk != 5379                  // Identifier '='
     && lk != 5380                  // Character '='
     && lk != 5381                  // String '='
     && lk != 5382                  // Integer '='
     && lk != 5383                  // Complex '='
     && lk != 5384                  // Real '='
     && lk != 5507                  // Identifier '=='
     && lk != 5508                  // Character '=='
     && lk != 5509                  // String '=='
     && lk != 5510                  // Integer '=='
     && lk != 5511                  // Complex '=='
     && lk != 5512                  // Real '=='
     && lk != 5635                  // Identifier '>'
     && lk != 5636                  // Character '>'
     && lk != 5637                  // String '>'
     && lk != 5638                  // Integer '>'
     && lk != 5639                  // Complex '>'
     && lk != 5640                  // Real '>'
     && lk != 5763                  // Identifier '>='
     && lk != 5764                  // Character '>='
     && lk != 5765                  // String '>='
     && lk != 5766                  // Integer '>='
     && lk != 5767                  // Complex '>='
     && lk != 5768                  // Real '>='
     && lk != 5891                  // Identifier '>>'
     && lk != 5892                  // Character '>>'
     && lk != 5893                  // String '>>'
     && lk != 5894                  // Integer '>>'
     && lk != 5895                  // Complex '>>'
     && lk != 5896                  // Real '>>'
     && lk != 6019                  // Identifier '>>='
     && lk != 6020                  // Character '>>='
     && lk != 6021                  // String '>>='
     && lk != 6022                  // Integer '>>='
     && lk != 6023                  // Complex '>>='
     && lk != 6024                  // Real '>>='
     && lk != 6147                  // Identifier '?'
     && lk != 6148                  // Character '?'
     && lk != 6149                  // String '?'
     && lk != 6150                  // Integer '?'
     && lk != 6151                  // Complex '?'
     && lk != 6152                  // Real '?'
     && lk != 6275                  // Identifier '?='
     && lk != 6276                  // Character '?='
     && lk != 6277                  // String '?='
     && lk != 6278                  // Integer '?='
     && lk != 6279                  // Complex '?='
     && lk != 6280                  // Real '?='
     && lk != 6404                  // Character '['
     && lk != 6405                  // String '['
     && lk != 6406                  // Integer '['
     && lk != 6407                  // Complex '['
     && lk != 6408                  // Real '['
     && lk != 6531                  // Identifier ']'
     && lk != 6532                  // Character ']'
     && lk != 6533                  // String ']'
     && lk != 6534                  // Integer ']'
     && lk != 6535                  // Complex ']'
     && lk != 6536                  // Real ']'
     && lk != 6659                  // Identifier '^'
     && lk != 6660                  // Character '^'
     && lk != 6661                  // String '^'
     && lk != 6662                  // Integer '^'
     && lk != 6663                  // Complex '^'
     && lk != 6664                  // Real '^'
     && lk != 6787                  // Identifier '^='
     && lk != 6788                  // Character '^='
     && lk != 6789                  // String '^='
     && lk != 6790                  // Integer '^='
     && lk != 6791                  // Complex '^='
     && lk != 6792                  // Real '^='
     && lk != 6915                  // Identifier 'break'
     && lk != 6916                  // Character 'break'
     && lk != 6917                  // String 'break'
     && lk != 6918                  // Integer 'break'
     && lk != 6919                  // Complex 'break'
     && lk != 6920                  // Real 'break'
     && lk != 7043                  // Identifier 'case'
     && lk != 7044                  // Character 'case'
     && lk != 7045                  // String 'case'
     && lk != 7046                  // Integer 'case'
     && lk != 7047                  // Complex 'case'
     && lk != 7048                  // Real 'case'
     && lk != 7171                  // Identifier 'catch'
     && lk != 7172                  // Character 'catch'
     && lk != 7173                  // String 'catch'
     && lk != 7174                  // Integer 'catch'
     && lk != 7175                  // Complex 'catch'
     && lk != 7176                  // Real 'catch'
     && lk != 7299                  // Identifier 'continue'
     && lk != 7300                  // Character 'continue'
     && lk != 7301                  // String 'continue'
     && lk != 7302                  // Integer 'continue'
     && lk != 7303                  // Complex 'continue'
     && lk != 7304                  // Real 'continue'
     && lk != 7427                  // Identifier 'default'
     && lk != 7428                  // Character 'default'
     && lk != 7429                  // String 'default'
     && lk != 7430                  // Integer 'default'
     && lk != 7431                  // Complex 'default'
     && lk != 7432                  // Real 'default'
     && lk != 7555                  // Identifier 'do'
     && lk != 7556                  // Character 'do'
     && lk != 7557                  // String 'do'
     && lk != 7558                  // Integer 'do'
     && lk != 7559                  // Complex 'do'
     && lk != 7560                  // Real 'do'
     && lk != 7683                  // Identifier 'else'
     && lk != 7684                  // Character 'else'
     && lk != 7685                  // String 'else'
     && lk != 7686                  // Integer 'else'
     && lk != 7687                  // Complex 'else'
     && lk != 7688                  // Real 'else'
     && lk != 7811                  // Identifier 'f32'
     && lk != 7812                  // Character 'f32'
     && lk != 7813                  // String 'f32'
     && lk != 7814                  // Integer 'f32'
     && lk != 7815                  // Complex 'f32'
     && lk != 7816                  // Real 'f32'
     && lk != 7939                  // Identifier 'f64'
     && lk != 7940                  // Character 'f64'
     && lk != 7941                  // String 'f64'
     && lk != 7942                  // Integer 'f64'
     && lk != 7943                  // Complex 'f64'
     && lk != 7944                  // Real 'f64'
     && lk != 8067                  // Identifier 'for'
     && lk != 8068                  // Character 'for'
     && lk != 8069                  // String 'for'
     && lk != 8070                  // Integer 'for'
     && lk != 8071                  // Complex 'for'
     && lk != 8072                  // Real 'for'
     && lk != 8195                  // Identifier 'foreach'
     && lk != 8196                  // Character 'foreach'
     && lk != 8197                  // String 'foreach'
     && lk != 8198                  // Integer 'foreach'
     && lk != 8199                  // Complex 'foreach'
     && lk != 8200                  // Real 'foreach'
     && lk != 8323                  // Identifier 'global'
     && lk != 8324                  // Character 'global'
     && lk != 8325                  // String 'global'
     && lk != 8326                  // Integer 'global'
     && lk != 8327                  // Complex 'global'
     && lk != 8328                  // Real 'global'
     && lk != 8451                  // Identifier 'i32'
     && lk != 8452                  // Character 'i32'
     && lk != 8453                  // String 'i32'
     && lk != 8454                  // Integer 'i32'
     && lk != 8455                  // Complex 'i32'
     && lk != 8456                  // Real 'i32'
     && lk != 8579                  // Identifier 'i64'
     && lk != 8580                  // Character 'i64'
     && lk != 8581                  // String 'i64'
     && lk != 8582                  // Integer 'i64'
     && lk != 8583                  // Complex 'i64'
     && lk != 8584                  // Real 'i64'
     && lk != 8707                  // Identifier 'if'
     && lk != 8708                  // Character 'if'
     && lk != 8709                  // String 'if'
     && lk != 8710                  // Integer 'if'
     && lk != 8711                  // Complex 'if'
     && lk != 8712                  // Real 'if'
     && lk != 8835                  // Identifier 'import'
     && lk != 8836                  // Character 'import'
     && lk != 8837                  // String 'import'
     && lk != 8838                  // Integer 'import'
     && lk != 8839                  // Complex 'import'
     && lk != 8840                  // Real 'import'
     && lk != 8963                  // Identifier 'include'
     && lk != 8964                  // Character 'include'
     && lk != 8965                  // String 'include'
     && lk != 8966                  // Integer 'include'
     && lk != 8967                  // Complex 'include'
     && lk != 8968                  // Real 'include'
     && lk != 9091                  // Identifier 'local'
     && lk != 9092                  // Character 'local'
     && lk != 9093                  // String 'local'
     && lk != 9094                  // Integer 'local'
     && lk != 9095                  // Complex 'local'
     && lk != 9096                  // Real 'local'
     && lk != 9219                  // Identifier 'return'
     && lk != 9220                  // Character 'return'
     && lk != 9221                  // String 'return'
     && lk != 9222                  // Integer 'return'
     && lk != 9223                  // Complex 'return'
     && lk != 9224                  // Real 'return'
     && lk != 9347                  // Identifier 'switch'
     && lk != 9348                  // Character 'switch'
     && lk != 9349                  // String 'switch'
     && lk != 9350                  // Integer 'switch'
     && lk != 9351                  // Complex 'switch'
     && lk != 9352                  // Real 'switch'
     && lk != 9475                  // Identifier 'test'
     && lk != 9476                  // Character 'test'
     && lk != 9477                  // String 'test'
     && lk != 9478                  // Integer 'test'
     && lk != 9479                  // Complex 'test'
     && lk != 9480                  // Real 'test'
     && lk != 9603                  // Identifier 'throw'
     && lk != 9604                  // Character 'throw'
     && lk != 9605                  // String 'throw'
     && lk != 9606                  // Integer 'throw'
     && lk != 9607                  // Complex 'throw'
     && lk != 9608                  // Real 'throw'
     && lk != 9731                  // Identifier 'try'
     && lk != 9732                  // Character 'try'
     && lk != 9733                  // String 'try'
     && lk != 9734                  // Integer 'try'
     && lk != 9735                  // Complex 'try'
     && lk != 9736                  // Real 'try'
     && lk != 9859                  // Identifier 'while'
     && lk != 9860                  // Character 'while'
     && lk != 9861                  // String 'while'
     && lk != 9862                  // Integer 'while'
     && lk != 9863                  // Complex 'while'
     && lk != 9864                  // Real 'while'
     && lk != 9987                  // Identifier '{'
     && lk != 9988                  // Character '{'
     && lk != 9989                  // String '{'
     && lk != 9990                  // Integer '{'
     && lk != 9991                  // Complex '{'
     && lk != 9992                  // Real '{'
     && lk != 10115                 // Identifier '|'
     && lk != 10116                 // Character '|'
     && lk != 10117                 // String '|'
     && lk != 10118                 // Integer '|'
     && lk != 10119                 // Complex '|'
     && lk != 10120                 // Real '|'
     && lk != 10243                 // Identifier '|='
     && lk != 10244                 // Character '|='
     && lk != 10245                 // String '|='
     && lk != 10246                 // Integer '|='
     && lk != 10247                 // Complex '|='
     && lk != 10248                 // Real '|='
     && lk != 10371                 // Identifier '||'
     && lk != 10372                 // Character '||'
     && lk != 10373                 // String '||'
     && lk != 10374                 // Integer '||'
     && lk != 10375                 // Complex '||'
     && lk != 10376                 // Real '||'
     && lk != 10499                 // Identifier '}'
     && lk != 10500                 // Character '}'
     && lk != 10501                 // String '}'
     && lk != 10502                 // Integer '}'
     && lk != 10503                 // Complex '}'
     && lk != 10504                 // Real '}'
     && lk != 10627                 // Identifier '~'
     && lk != 10628                 // Character '~'
     && lk != 10629                 // String '~'
     && lk != 10630                 // Integer '~'
     && lk != 10631                 // Complex '~'
     && lk != 10632                 // Real '~'
     && lk != 16829                 // 'f32' Identifier END
     && lk != 16830                 // 'f64' Identifier END
     && lk != 16834                 // 'i32' Identifier END
     && lk != 16835                 // 'i64' Identifier END
     && lk != 19715                 // Identifier '++' END
     && lk != 19716                 // Character '++' END
     && lk != 19717                 // String '++' END
     && lk != 19718                 // Integer '++' END
     && lk != 19719                 // Complex '++' END
     && lk != 19720                 // Real '++' END
     && lk != 20227                 // Identifier '--' END
     && lk != 20228                 // Character '--' END
     && lk != 20229                 // String '--' END
     && lk != 20230                 // Integer '--' END
     && lk != 20231                 // Complex '--' END
     && lk != 20232                 // Real '--' END
     && lk != 22962                 // '[' ']' END
     && lk != 26958                 // '{' '}' END
     && lk != 49597                 // 'f32' Identifier Identifier
     && lk != 49598                 // 'f64' Identifier Identifier
     && lk != 49602                 // 'i32' Identifier Identifier
     && lk != 49603                 // 'i64' Identifier Identifier
     && lk != 55730                 // '[' ']' Identifier
     && lk != 59726                 // '{' '}' Identifier
     && lk != 65981                 // 'f32' Identifier Character
     && lk != 65982                 // 'f64' Identifier Character
     && lk != 65986                 // 'i32' Identifier Character
     && lk != 65987                 // 'i64' Identifier Character
     && lk != 72114                 // '[' ']' Character
     && lk != 76110                 // '{' '}' Character
     && lk != 82365                 // 'f32' Identifier String
     && lk != 82366                 // 'f64' Identifier String
     && lk != 82370                 // 'i32' Identifier String
     && lk != 82371                 // 'i64' Identifier String
     && lk != 88498                 // '[' ']' String
     && lk != 92494                 // '{' '}' String
     && lk != 98749                 // 'f32' Identifier Integer
     && lk != 98750                 // 'f64' Identifier Integer
     && lk != 98754                 // 'i32' Identifier Integer
     && lk != 98755                 // 'i64' Identifier Integer
     && lk != 104882                // '[' ']' Integer
     && lk != 108878                // '{' '}' Integer
     && lk != 115133                // 'f32' Identifier Complex
     && lk != 115134                // 'f64' Identifier Complex
     && lk != 115138                // 'i32' Identifier Complex
     && lk != 115139                // 'i64' Identifier Complex
     && lk != 121266                // '[' ']' Complex
     && lk != 125262                // '{' '}' Complex
     && lk != 131517                // 'f32' Identifier Real
     && lk != 131518                // 'f64' Identifier Real
     && lk != 131522                // 'i32' Identifier Real
     && lk != 131523                // 'i64' Identifier Real
     && lk != 137650                // '[' ']' Real
     && lk != 141646                // '{' '}' Real
     && lk != 147901                // 'f32' Identifier Comment
     && lk != 147902                // 'f64' Identifier Comment
     && lk != 147906                // 'i32' Identifier Comment
     && lk != 147907                // 'i64' Identifier Comment
     && lk != 150787                // Identifier '++' Comment
     && lk != 150788                // Character '++' Comment
     && lk != 150789                // String '++' Comment
     && lk != 150790                // Integer '++' Comment
     && lk != 150791                // Complex '++' Comment
     && lk != 150792                // Real '++' Comment
     && lk != 151299                // Identifier '--' Comment
     && lk != 151300                // Character '--' Comment
     && lk != 151301                // String '--' Comment
     && lk != 151302                // Integer '--' Comment
     && lk != 151303                // Complex '--' Comment
     && lk != 151304                // Real '--' Comment
     && lk != 154034                // '[' ']' Comment
     && lk != 158030                // '{' '}' Comment
     && lk != 197053                // 'f32' Identifier '!'
     && lk != 197054                // 'f64' Identifier '!'
     && lk != 197058                // 'i32' Identifier '!'
     && lk != 197059                // 'i64' Identifier '!'
     && lk != 199939                // Identifier '++' '!'
     && lk != 199940                // Character '++' '!'
     && lk != 199941                // String '++' '!'
     && lk != 199942                // Integer '++' '!'
     && lk != 199943                // Complex '++' '!'
     && lk != 199944                // Real '++' '!'
     && lk != 200451                // Identifier '--' '!'
     && lk != 200452                // Character '--' '!'
     && lk != 200453                // String '--' '!'
     && lk != 200454                // Integer '--' '!'
     && lk != 200455                // Complex '--' '!'
     && lk != 200456                // Real '--' '!'
     && lk != 203186                // '[' ']' '!'
     && lk != 207182                // '{' '}' '!'
     && lk != 213437                // 'f32' Identifier '!='
     && lk != 213438                // 'f64' Identifier '!='
     && lk != 213442                // 'i32' Identifier '!='
     && lk != 213443                // 'i64' Identifier '!='
     && lk != 216323                // Identifier '++' '!='
     && lk != 216324                // Character '++' '!='
     && lk != 216325                // String '++' '!='
     && lk != 216326                // Integer '++' '!='
     && lk != 216327                // Complex '++' '!='
     && lk != 216328                // Real '++' '!='
     && lk != 216835                // Identifier '--' '!='
     && lk != 216836                // Character '--' '!='
     && lk != 216837                // String '--' '!='
     && lk != 216838                // Integer '--' '!='
     && lk != 216839                // Complex '--' '!='
     && lk != 216840                // Real '--' '!='
     && lk != 219570                // '[' ']' '!='
     && lk != 223566                // '{' '}' '!='
     && lk != 246205                // 'f32' Identifier '%'
     && lk != 246206                // 'f64' Identifier '%'
     && lk != 246210                // 'i32' Identifier '%'
     && lk != 246211                // 'i64' Identifier '%'
     && lk != 249091                // Identifier '++' '%'
     && lk != 249092                // Character '++' '%'
     && lk != 249093                // String '++' '%'
     && lk != 249094                // Integer '++' '%'
     && lk != 249095                // Complex '++' '%'
     && lk != 249096                // Real '++' '%'
     && lk != 249603                // Identifier '--' '%'
     && lk != 249604                // Character '--' '%'
     && lk != 249605                // String '--' '%'
     && lk != 249606                // Integer '--' '%'
     && lk != 249607                // Complex '--' '%'
     && lk != 249608                // Real '--' '%'
     && lk != 252338                // '[' ']' '%'
     && lk != 256334                // '{' '}' '%'
     && lk != 262589                // 'f32' Identifier '%='
     && lk != 262590                // 'f64' Identifier '%='
     && lk != 262594                // 'i32' Identifier '%='
     && lk != 262595                // 'i64' Identifier '%='
     && lk != 265475                // Identifier '++' '%='
     && lk != 265476                // Character '++' '%='
     && lk != 265477                // String '++' '%='
     && lk != 265478                // Integer '++' '%='
     && lk != 265479                // Complex '++' '%='
     && lk != 265480                // Real '++' '%='
     && lk != 265987                // Identifier '--' '%='
     && lk != 265988                // Character '--' '%='
     && lk != 265989                // String '--' '%='
     && lk != 265990                // Integer '--' '%='
     && lk != 265991                // Complex '--' '%='
     && lk != 265992                // Real '--' '%='
     && lk != 268722                // '[' ']' '%='
     && lk != 272718                // '{' '}' '%='
     && lk != 278973                // 'f32' Identifier '&'
     && lk != 278974                // 'f64' Identifier '&'
     && lk != 278978                // 'i32' Identifier '&'
     && lk != 278979                // 'i64' Identifier '&'
     && lk != 281859                // Identifier '++' '&'
     && lk != 281860                // Character '++' '&'
     && lk != 281861                // String '++' '&'
     && lk != 281862                // Integer '++' '&'
     && lk != 281863                // Complex '++' '&'
     && lk != 281864                // Real '++' '&'
     && lk != 282371                // Identifier '--' '&'
     && lk != 282372                // Character '--' '&'
     && lk != 282373                // String '--' '&'
     && lk != 282374                // Integer '--' '&'
     && lk != 282375                // Complex '--' '&'
     && lk != 282376                // Real '--' '&'
     && lk != 285106                // '[' ']' '&'
     && lk != 289102                // '{' '}' '&'
     && lk != 295357                // 'f32' Identifier '&&'
     && lk != 295358                // 'f64' Identifier '&&'
     && lk != 295362                // 'i32' Identifier '&&'
     && lk != 295363                // 'i64' Identifier '&&'
     && lk != 298243                // Identifier '++' '&&'
     && lk != 298244                // Character '++' '&&'
     && lk != 298245                // String '++' '&&'
     && lk != 298246                // Integer '++' '&&'
     && lk != 298247                // Complex '++' '&&'
     && lk != 298248                // Real '++' '&&'
     && lk != 298755                // Identifier '--' '&&'
     && lk != 298756                // Character '--' '&&'
     && lk != 298757                // String '--' '&&'
     && lk != 298758                // Integer '--' '&&'
     && lk != 298759                // Complex '--' '&&'
     && lk != 298760                // Real '--' '&&'
     && lk != 301490                // '[' ']' '&&'
     && lk != 305486                // '{' '}' '&&'
     && lk != 311741                // 'f32' Identifier '&='
     && lk != 311742                // 'f64' Identifier '&='
     && lk != 311746                // 'i32' Identifier '&='
     && lk != 311747                // 'i64' Identifier '&='
     && lk != 314627                // Identifier '++' '&='
     && lk != 314628                // Character '++' '&='
     && lk != 314629                // String '++' '&='
     && lk != 314630                // Integer '++' '&='
     && lk != 314631                // Complex '++' '&='
     && lk != 314632                // Real '++' '&='
     && lk != 315139                // Identifier '--' '&='
     && lk != 315140                // Character '--' '&='
     && lk != 315141                // String '--' '&='
     && lk != 315142                // Integer '--' '&='
     && lk != 315143                // Complex '--' '&='
     && lk != 315144                // Real '--' '&='
     && lk != 317874                // '[' ']' '&='
     && lk != 321870                // '{' '}' '&='
     && lk != 334258                // '[' ']' '('
     && lk != 338254                // '{' '}' '('
     && lk != 344509                // 'f32' Identifier ')'
     && lk != 344510                // 'f64' Identifier ')'
     && lk != 344514                // 'i32' Identifier ')'
     && lk != 344515                // 'i64' Identifier ')'
     && lk != 347395                // Identifier '++' ')'
     && lk != 347396                // Character '++' ')'
     && lk != 347397                // String '++' ')'
     && lk != 347398                // Integer '++' ')'
     && lk != 347399                // Complex '++' ')'
     && lk != 347400                // Real '++' ')'
     && lk != 347907                // Identifier '--' ')'
     && lk != 347908                // Character '--' ')'
     && lk != 347909                // String '--' ')'
     && lk != 347910                // Integer '--' ')'
     && lk != 347911                // Complex '--' ')'
     && lk != 347912                // Real '--' ')'
     && lk != 350642                // '[' ']' ')'
     && lk != 354638                // '{' '}' ')'
     && lk != 360893                // 'f32' Identifier '*'
     && lk != 360894                // 'f64' Identifier '*'
     && lk != 360898                // 'i32' Identifier '*'
     && lk != 360899                // 'i64' Identifier '*'
     && lk != 363779                // Identifier '++' '*'
     && lk != 363780                // Character '++' '*'
     && lk != 363781                // String '++' '*'
     && lk != 363782                // Integer '++' '*'
     && lk != 363783                // Complex '++' '*'
     && lk != 363784                // Real '++' '*'
     && lk != 364291                // Identifier '--' '*'
     && lk != 364292                // Character '--' '*'
     && lk != 364293                // String '--' '*'
     && lk != 364294                // Integer '--' '*'
     && lk != 364295                // Complex '--' '*'
     && lk != 364296                // Real '--' '*'
     && lk != 367026                // '[' ']' '*'
     && lk != 371022                // '{' '}' '*'
     && lk != 377277                // 'f32' Identifier '**'
     && lk != 377278                // 'f64' Identifier '**'
     && lk != 377282                // 'i32' Identifier '**'
     && lk != 377283                // 'i64' Identifier '**'
     && lk != 380163                // Identifier '++' '**'
     && lk != 380164                // Character '++' '**'
     && lk != 380165                // String '++' '**'
     && lk != 380166                // Integer '++' '**'
     && lk != 380167                // Complex '++' '**'
     && lk != 380168                // Real '++' '**'
     && lk != 380675                // Identifier '--' '**'
     && lk != 380676                // Character '--' '**'
     && lk != 380677                // String '--' '**'
     && lk != 380678                // Integer '--' '**'
     && lk != 380679                // Complex '--' '**'
     && lk != 380680                // Real '--' '**'
     && lk != 383410                // '[' ']' '**'
     && lk != 387406                // '{' '}' '**'
     && lk != 393661                // 'f32' Identifier '*='
     && lk != 393662                // 'f64' Identifier '*='
     && lk != 393666                // 'i32' Identifier '*='
     && lk != 393667                // 'i64' Identifier '*='
     && lk != 396547                // Identifier '++' '*='
     && lk != 396548                // Character '++' '*='
     && lk != 396549                // String '++' '*='
     && lk != 396550                // Integer '++' '*='
     && lk != 396551                // Complex '++' '*='
     && lk != 396552                // Real '++' '*='
     && lk != 397059                // Identifier '--' '*='
     && lk != 397060                // Character '--' '*='
     && lk != 397061                // String '--' '*='
     && lk != 397062                // Integer '--' '*='
     && lk != 397063                // Complex '--' '*='
     && lk != 397064                // Real '--' '*='
     && lk != 399794                // '[' ']' '*='
     && lk != 403790                // '{' '}' '*='
     && lk != 410045                // 'f32' Identifier '+'
     && lk != 410046                // 'f64' Identifier '+'
     && lk != 410050                // 'i32' Identifier '+'
     && lk != 410051                // 'i64' Identifier '+'
     && lk != 412931                // Identifier '++' '+'
     && lk != 412932                // Character '++' '+'
     && lk != 412933                // String '++' '+'
     && lk != 412934                // Integer '++' '+'
     && lk != 412935                // Complex '++' '+'
     && lk != 412936                // Real '++' '+'
     && lk != 413443                // Identifier '--' '+'
     && lk != 413444                // Character '--' '+'
     && lk != 413445                // String '--' '+'
     && lk != 413446                // Integer '--' '+'
     && lk != 413447                // Complex '--' '+'
     && lk != 413448                // Real '--' '+'
     && lk != 416178                // '[' ']' '+'
     && lk != 420174                // '{' '}' '+'
     && lk != 429315                // Identifier '++' '++'
     && lk != 429316                // Character '++' '++'
     && lk != 429317                // String '++' '++'
     && lk != 429318                // Integer '++' '++'
     && lk != 429319                // Complex '++' '++'
     && lk != 429320                // Real '++' '++'
     && lk != 429827                // Identifier '--' '++'
     && lk != 429828                // Character '--' '++'
     && lk != 429829                // String '--' '++'
     && lk != 429830                // Integer '--' '++'
     && lk != 429831                // Complex '--' '++'
     && lk != 429832                // Real '--' '++'
     && lk != 442813                // 'f32' Identifier '+='
     && lk != 442814                // 'f64' Identifier '+='
     && lk != 442818                // 'i32' Identifier '+='
     && lk != 442819                // 'i64' Identifier '+='
     && lk != 445699                // Identifier '++' '+='
     && lk != 445700                // Character '++' '+='
     && lk != 445701                // String '++' '+='
     && lk != 445702                // Integer '++' '+='
     && lk != 445703                // Complex '++' '+='
     && lk != 445704                // Real '++' '+='
     && lk != 446211                // Identifier '--' '+='
     && lk != 446212                // Character '--' '+='
     && lk != 446213                // String '--' '+='
     && lk != 446214                // Integer '--' '+='
     && lk != 446215                // Complex '--' '+='
     && lk != 446216                // Real '--' '+='
     && lk != 448946                // '[' ']' '+='
     && lk != 452942                // '{' '}' '+='
     && lk != 459197                // 'f32' Identifier ','
     && lk != 459198                // 'f64' Identifier ','
     && lk != 459202                // 'i32' Identifier ','
     && lk != 459203                // 'i64' Identifier ','
     && lk != 462083                // Identifier '++' ','
     && lk != 462084                // Character '++' ','
     && lk != 462085                // String '++' ','
     && lk != 462086                // Integer '++' ','
     && lk != 462087                // Complex '++' ','
     && lk != 462088                // Real '++' ','
     && lk != 462595                // Identifier '--' ','
     && lk != 462596                // Character '--' ','
     && lk != 462597                // String '--' ','
     && lk != 462598                // Integer '--' ','
     && lk != 462599                // Complex '--' ','
     && lk != 462600                // Real '--' ','
     && lk != 465330                // '[' ']' ','
     && lk != 469326                // '{' '}' ','
     && lk != 475581                // 'f32' Identifier '-'
     && lk != 475582                // 'f64' Identifier '-'
     && lk != 475586                // 'i32' Identifier '-'
     && lk != 475587                // 'i64' Identifier '-'
     && lk != 478467                // Identifier '++' '-'
     && lk != 478468                // Character '++' '-'
     && lk != 478469                // String '++' '-'
     && lk != 478470                // Integer '++' '-'
     && lk != 478471                // Complex '++' '-'
     && lk != 478472                // Real '++' '-'
     && lk != 478979                // Identifier '--' '-'
     && lk != 478980                // Character '--' '-'
     && lk != 478981                // String '--' '-'
     && lk != 478982                // Integer '--' '-'
     && lk != 478983                // Complex '--' '-'
     && lk != 478984                // Real '--' '-'
     && lk != 481714                // '[' ']' '-'
     && lk != 485710                // '{' '}' '-'
     && lk != 494851                // Identifier '++' '--'
     && lk != 494852                // Character '++' '--'
     && lk != 494853                // String '++' '--'
     && lk != 494854                // Integer '++' '--'
     && lk != 494855                // Complex '++' '--'
     && lk != 494856                // Real '++' '--'
     && lk != 495363                // Identifier '--' '--'
     && lk != 495364                // Character '--' '--'
     && lk != 495365                // String '--' '--'
     && lk != 495366                // Integer '--' '--'
     && lk != 495367                // Complex '--' '--'
     && lk != 495368                // Real '--' '--'
     && lk != 508349                // 'f32' Identifier '-='
     && lk != 508350                // 'f64' Identifier '-='
     && lk != 508354                // 'i32' Identifier '-='
     && lk != 508355                // 'i64' Identifier '-='
     && lk != 511235                // Identifier '++' '-='
     && lk != 511236                // Character '++' '-='
     && lk != 511237                // String '++' '-='
     && lk != 511238                // Integer '++' '-='
     && lk != 511239                // Complex '++' '-='
     && lk != 511240                // Real '++' '-='
     && lk != 511747                // Identifier '--' '-='
     && lk != 511748                // Character '--' '-='
     && lk != 511749                // String '--' '-='
     && lk != 511750                // Integer '--' '-='
     && lk != 511751                // Complex '--' '-='
     && lk != 511752                // Real '--' '-='
     && lk != 514482                // '[' ']' '-='
     && lk != 518478                // '{' '}' '-='
     && lk != 541117                // 'f32' Identifier '/'
     && lk != 541118                // 'f64' Identifier '/'
     && lk != 541122                // 'i32' Identifier '/'
     && lk != 541123                // 'i64' Identifier '/'
     && lk != 544003                // Identifier '++' '/'
     && lk != 544004                // Character '++' '/'
     && lk != 544005                // String '++' '/'
     && lk != 544006                // Integer '++' '/'
     && lk != 544007                // Complex '++' '/'
     && lk != 544008                // Real '++' '/'
     && lk != 544515                // Identifier '--' '/'
     && lk != 544516                // Character '--' '/'
     && lk != 544517                // String '--' '/'
     && lk != 544518                // Integer '--' '/'
     && lk != 544519                // Complex '--' '/'
     && lk != 544520                // Real '--' '/'
     && lk != 547250                // '[' ']' '/'
     && lk != 551246                // '{' '}' '/'
     && lk != 557501                // 'f32' Identifier '/='
     && lk != 557502                // 'f64' Identifier '/='
     && lk != 557506                // 'i32' Identifier '/='
     && lk != 557507                // 'i64' Identifier '/='
     && lk != 560387                // Identifier '++' '/='
     && lk != 560388                // Character '++' '/='
     && lk != 560389                // String '++' '/='
     && lk != 560390                // Integer '++' '/='
     && lk != 560391                // Complex '++' '/='
     && lk != 560392                // Real '++' '/='
     && lk != 560899                // Identifier '--' '/='
     && lk != 560900                // Character '--' '/='
     && lk != 560901                // String '--' '/='
     && lk != 560902                // Integer '--' '/='
     && lk != 560903                // Complex '--' '/='
     && lk != 560904                // Real '--' '/='
     && lk != 563634                // '[' ']' '/='
     && lk != 567630                // '{' '}' '/='
     && lk != 573885                // 'f32' Identifier ':'
     && lk != 573886                // 'f64' Identifier ':'
     && lk != 573890                // 'i32' Identifier ':'
     && lk != 573891                // 'i64' Identifier ':'
     && lk != 576771                // Identifier '++' ':'
     && lk != 576772                // Character '++' ':'
     && lk != 576773                // String '++' ':'
     && lk != 576774                // Integer '++' ':'
     && lk != 576775                // Complex '++' ':'
     && lk != 576776                // Real '++' ':'
     && lk != 577283                // Identifier '--' ':'
     && lk != 577284                // Character '--' ':'
     && lk != 577285                // String '--' ':'
     && lk != 577286                // Integer '--' ':'
     && lk != 577287                // Complex '--' ':'
     && lk != 577288                // Real '--' ':'
     && lk != 580018                // '[' ']' ':'
     && lk != 584014                // '{' '}' ':'
     && lk != 590269                // 'f32' Identifier ':='
     && lk != 590270                // 'f64' Identifier ':='
     && lk != 590274                // 'i32' Identifier ':='
     && lk != 590275                // 'i64' Identifier ':='
     && lk != 593155                // Identifier '++' ':='
     && lk != 593156                // Character '++' ':='
     && lk != 593157                // String '++' ':='
     && lk != 593158                // Integer '++' ':='
     && lk != 593159                // Complex '++' ':='
     && lk != 593160                // Real '++' ':='
     && lk != 593667                // Identifier '--' ':='
     && lk != 593668                // Character '--' ':='
     && lk != 593669                // String '--' ':='
     && lk != 593670                // Integer '--' ':='
     && lk != 593671                // Complex '--' ':='
     && lk != 593672                // Real '--' ':='
     && lk != 596402                // '[' ']' ':='
     && lk != 600398                // '{' '}' ':='
     && lk != 606653                // 'f32' Identifier ';'
     && lk != 606654                // 'f64' Identifier ';'
     && lk != 606658                // 'i32' Identifier ';'
     && lk != 606659                // 'i64' Identifier ';'
     && lk != 609539                // Identifier '++' ';'
     && lk != 609540                // Character '++' ';'
     && lk != 609541                // String '++' ';'
     && lk != 609542                // Integer '++' ';'
     && lk != 609543                // Complex '++' ';'
     && lk != 609544                // Real '++' ';'
     && lk != 610051                // Identifier '--' ';'
     && lk != 610052                // Character '--' ';'
     && lk != 610053                // String '--' ';'
     && lk != 610054                // Integer '--' ';'
     && lk != 610055                // Complex '--' ';'
     && lk != 610056                // Real '--' ';'
     && lk != 612786                // '[' ']' ';'
     && lk != 616782                // '{' '}' ';'
     && lk != 623037                // 'f32' Identifier '<'
     && lk != 623038                // 'f64' Identifier '<'
     && lk != 623042                // 'i32' Identifier '<'
     && lk != 623043                // 'i64' Identifier '<'
     && lk != 625923                // Identifier '++' '<'
     && lk != 625924                // Character '++' '<'
     && lk != 625925                // String '++' '<'
     && lk != 625926                // Integer '++' '<'
     && lk != 625927                // Complex '++' '<'
     && lk != 625928                // Real '++' '<'
     && lk != 626435                // Identifier '--' '<'
     && lk != 626436                // Character '--' '<'
     && lk != 626437                // String '--' '<'
     && lk != 626438                // Integer '--' '<'
     && lk != 626439                // Complex '--' '<'
     && lk != 626440                // Real '--' '<'
     && lk != 629170                // '[' ']' '<'
     && lk != 633166                // '{' '}' '<'
     && lk != 639421                // 'f32' Identifier '<<'
     && lk != 639422                // 'f64' Identifier '<<'
     && lk != 639426                // 'i32' Identifier '<<'
     && lk != 639427                // 'i64' Identifier '<<'
     && lk != 642307                // Identifier '++' '<<'
     && lk != 642308                // Character '++' '<<'
     && lk != 642309                // String '++' '<<'
     && lk != 642310                // Integer '++' '<<'
     && lk != 642311                // Complex '++' '<<'
     && lk != 642312                // Real '++' '<<'
     && lk != 642819                // Identifier '--' '<<'
     && lk != 642820                // Character '--' '<<'
     && lk != 642821                // String '--' '<<'
     && lk != 642822                // Integer '--' '<<'
     && lk != 642823                // Complex '--' '<<'
     && lk != 642824                // Real '--' '<<'
     && lk != 645554                // '[' ']' '<<'
     && lk != 649550                // '{' '}' '<<'
     && lk != 655805                // 'f32' Identifier '<<='
     && lk != 655806                // 'f64' Identifier '<<='
     && lk != 655810                // 'i32' Identifier '<<='
     && lk != 655811                // 'i64' Identifier '<<='
     && lk != 658691                // Identifier '++' '<<='
     && lk != 658692                // Character '++' '<<='
     && lk != 658693                // String '++' '<<='
     && lk != 658694                // Integer '++' '<<='
     && lk != 658695                // Complex '++' '<<='
     && lk != 658696                // Real '++' '<<='
     && lk != 659203                // Identifier '--' '<<='
     && lk != 659204                // Character '--' '<<='
     && lk != 659205                // String '--' '<<='
     && lk != 659206                // Integer '--' '<<='
     && lk != 659207                // Complex '--' '<<='
     && lk != 659208                // Real '--' '<<='
     && lk != 661938                // '[' ']' '<<='
     && lk != 665934                // '{' '}' '<<='
     && lk != 672189                // 'f32' Identifier '<='
     && lk != 672190                // 'f64' Identifier '<='
     && lk != 672194                // 'i32' Identifier '<='
     && lk != 672195                // 'i64' Identifier '<='
     && lk != 675075                // Identifier '++' '<='
     && lk != 675076                // Character '++' '<='
     && lk != 675077                // String '++' '<='
     && lk != 675078                // Integer '++' '<='
     && lk != 675079                // Complex '++' '<='
     && lk != 675080                // Real '++' '<='
     && lk != 675587                // Identifier '--' '<='
     && lk != 675588                // Character '--' '<='
     && lk != 675589                // String '--' '<='
     && lk != 675590                // Integer '--' '<='
     && lk != 675591                // Complex '--' '<='
     && lk != 675592                // Real '--' '<='
     && lk != 678322                // '[' ']' '<='
     && lk != 682318                // '{' '}' '<='
     && lk != 688573                // 'f32' Identifier '='
     && lk != 688574                // 'f64' Identifier '='
     && lk != 688578                // 'i32' Identifier '='
     && lk != 688579                // 'i64' Identifier '='
     && lk != 691459                // Identifier '++' '='
     && lk != 691460                // Character '++' '='
     && lk != 691461                // String '++' '='
     && lk != 691462                // Integer '++' '='
     && lk != 691463                // Complex '++' '='
     && lk != 691464                // Real '++' '='
     && lk != 691971                // Identifier '--' '='
     && lk != 691972                // Character '--' '='
     && lk != 691973                // String '--' '='
     && lk != 691974                // Integer '--' '='
     && lk != 691975                // Complex '--' '='
     && lk != 691976                // Real '--' '='
     && lk != 694706                // '[' ']' '='
     && lk != 698702                // '{' '}' '='
     && lk != 704957                // 'f32' Identifier '=='
     && lk != 704958                // 'f64' Identifier '=='
     && lk != 704962                // 'i32' Identifier '=='
     && lk != 704963                // 'i64' Identifier '=='
     && lk != 707843                // Identifier '++' '=='
     && lk != 707844                // Character '++' '=='
     && lk != 707845                // String '++' '=='
     && lk != 707846                // Integer '++' '=='
     && lk != 707847                // Complex '++' '=='
     && lk != 707848                // Real '++' '=='
     && lk != 708355                // Identifier '--' '=='
     && lk != 708356                // Character '--' '=='
     && lk != 708357                // String '--' '=='
     && lk != 708358                // Integer '--' '=='
     && lk != 708359                // Complex '--' '=='
     && lk != 708360                // Real '--' '=='
     && lk != 711090                // '[' ']' '=='
     && lk != 715086                // '{' '}' '=='
     && lk != 721341                // 'f32' Identifier '>'
     && lk != 721342                // 'f64' Identifier '>'
     && lk != 721346                // 'i32' Identifier '>'
     && lk != 721347                // 'i64' Identifier '>'
     && lk != 724227                // Identifier '++' '>'
     && lk != 724228                // Character '++' '>'
     && lk != 724229                // String '++' '>'
     && lk != 724230                // Integer '++' '>'
     && lk != 724231                // Complex '++' '>'
     && lk != 724232                // Real '++' '>'
     && lk != 724739                // Identifier '--' '>'
     && lk != 724740                // Character '--' '>'
     && lk != 724741                // String '--' '>'
     && lk != 724742                // Integer '--' '>'
     && lk != 724743                // Complex '--' '>'
     && lk != 724744                // Real '--' '>'
     && lk != 727474                // '[' ']' '>'
     && lk != 731470                // '{' '}' '>'
     && lk != 737725                // 'f32' Identifier '>='
     && lk != 737726                // 'f64' Identifier '>='
     && lk != 737730                // 'i32' Identifier '>='
     && lk != 737731                // 'i64' Identifier '>='
     && lk != 740611                // Identifier '++' '>='
     && lk != 740612                // Character '++' '>='
     && lk != 740613                // String '++' '>='
     && lk != 740614                // Integer '++' '>='
     && lk != 740615                // Complex '++' '>='
     && lk != 740616                // Real '++' '>='
     && lk != 741123                // Identifier '--' '>='
     && lk != 741124                // Character '--' '>='
     && lk != 741125                // String '--' '>='
     && lk != 741126                // Integer '--' '>='
     && lk != 741127                // Complex '--' '>='
     && lk != 741128                // Real '--' '>='
     && lk != 743858                // '[' ']' '>='
     && lk != 747854                // '{' '}' '>='
     && lk != 754109                // 'f32' Identifier '>>'
     && lk != 754110                // 'f64' Identifier '>>'
     && lk != 754114                // 'i32' Identifier '>>'
     && lk != 754115                // 'i64' Identifier '>>'
     && lk != 756995                // Identifier '++' '>>'
     && lk != 756996                // Character '++' '>>'
     && lk != 756997                // String '++' '>>'
     && lk != 756998                // Integer '++' '>>'
     && lk != 756999                // Complex '++' '>>'
     && lk != 757000                // Real '++' '>>'
     && lk != 757507                // Identifier '--' '>>'
     && lk != 757508                // Character '--' '>>'
     && lk != 757509                // String '--' '>>'
     && lk != 757510                // Integer '--' '>>'
     && lk != 757511                // Complex '--' '>>'
     && lk != 757512                // Real '--' '>>'
     && lk != 760242                // '[' ']' '>>'
     && lk != 764238                // '{' '}' '>>'
     && lk != 770493                // 'f32' Identifier '>>='
     && lk != 770494                // 'f64' Identifier '>>='
     && lk != 770498                // 'i32' Identifier '>>='
     && lk != 770499                // 'i64' Identifier '>>='
     && lk != 773379                // Identifier '++' '>>='
     && lk != 773380                // Character '++' '>>='
     && lk != 773381                // String '++' '>>='
     && lk != 773382                // Integer '++' '>>='
     && lk != 773383                // Complex '++' '>>='
     && lk != 773384                // Real '++' '>>='
     && lk != 773891                // Identifier '--' '>>='
     && lk != 773892                // Character '--' '>>='
     && lk != 773893                // String '--' '>>='
     && lk != 773894                // Integer '--' '>>='
     && lk != 773895                // Complex '--' '>>='
     && lk != 773896                // Real '--' '>>='
     && lk != 776626                // '[' ']' '>>='
     && lk != 780622                // '{' '}' '>>='
     && lk != 786877                // 'f32' Identifier '?'
     && lk != 786878                // 'f64' Identifier '?'
     && lk != 786882                // 'i32' Identifier '?'
     && lk != 786883                // 'i64' Identifier '?'
     && lk != 789763                // Identifier '++' '?'
     && lk != 789764                // Character '++' '?'
     && lk != 789765                // String '++' '?'
     && lk != 789766                // Integer '++' '?'
     && lk != 789767                // Complex '++' '?'
     && lk != 789768                // Real '++' '?'
     && lk != 790275                // Identifier '--' '?'
     && lk != 790276                // Character '--' '?'
     && lk != 790277                // String '--' '?'
     && lk != 790278                // Integer '--' '?'
     && lk != 790279                // Complex '--' '?'
     && lk != 790280                // Real '--' '?'
     && lk != 793010                // '[' ']' '?'
     && lk != 797006                // '{' '}' '?'
     && lk != 803261                // 'f32' Identifier '?='
     && lk != 803262                // 'f64' Identifier '?='
     && lk != 803266                // 'i32' Identifier '?='
     && lk != 803267                // 'i64' Identifier '?='
     && lk != 806147                // Identifier '++' '?='
     && lk != 806148                // Character '++' '?='
     && lk != 806149                // String '++' '?='
     && lk != 806150                // Integer '++' '?='
     && lk != 806151                // Complex '++' '?='
     && lk != 806152                // Real '++' '?='
     && lk != 806659                // Identifier '--' '?='
     && lk != 806660                // Character '--' '?='
     && lk != 806661                // String '--' '?='
     && lk != 806662                // Integer '--' '?='
     && lk != 806663                // Complex '--' '?='
     && lk != 806664                // Real '--' '?='
     && lk != 809394                // '[' ']' '?='
     && lk != 813390                // '{' '}' '?='
     && lk != 825778                // '[' ']' '['
     && lk != 829774                // '{' '}' '['
     && lk != 836029                // 'f32' Identifier ']'
     && lk != 836030                // 'f64' Identifier ']'
     && lk != 836034                // 'i32' Identifier ']'
     && lk != 836035                // 'i64' Identifier ']'
     && lk != 838915                // Identifier '++' ']'
     && lk != 838916                // Character '++' ']'
     && lk != 838917                // String '++' ']'
     && lk != 838918                // Integer '++' ']'
     && lk != 838919                // Complex '++' ']'
     && lk != 838920                // Real '++' ']'
     && lk != 839427                // Identifier '--' ']'
     && lk != 839428                // Character '--' ']'
     && lk != 839429                // String '--' ']'
     && lk != 839430                // Integer '--' ']'
     && lk != 839431                // Complex '--' ']'
     && lk != 839432                // Real '--' ']'
     && lk != 842162                // '[' ']' ']'
     && lk != 846158                // '{' '}' ']'
     && lk != 852413                // 'f32' Identifier '^'
     && lk != 852414                // 'f64' Identifier '^'
     && lk != 852418                // 'i32' Identifier '^'
     && lk != 852419                // 'i64' Identifier '^'
     && lk != 855299                // Identifier '++' '^'
     && lk != 855300                // Character '++' '^'
     && lk != 855301                // String '++' '^'
     && lk != 855302                // Integer '++' '^'
     && lk != 855303                // Complex '++' '^'
     && lk != 855304                // Real '++' '^'
     && lk != 855811                // Identifier '--' '^'
     && lk != 855812                // Character '--' '^'
     && lk != 855813                // String '--' '^'
     && lk != 855814                // Integer '--' '^'
     && lk != 855815                // Complex '--' '^'
     && lk != 855816                // Real '--' '^'
     && lk != 858546                // '[' ']' '^'
     && lk != 862542                // '{' '}' '^'
     && lk != 868797                // 'f32' Identifier '^='
     && lk != 868798                // 'f64' Identifier '^='
     && lk != 868802                // 'i32' Identifier '^='
     && lk != 868803                // 'i64' Identifier '^='
     && lk != 871683                // Identifier '++' '^='
     && lk != 871684                // Character '++' '^='
     && lk != 871685                // String '++' '^='
     && lk != 871686                // Integer '++' '^='
     && lk != 871687                // Complex '++' '^='
     && lk != 871688                // Real '++' '^='
     && lk != 872195                // Identifier '--' '^='
     && lk != 872196                // Character '--' '^='
     && lk != 872197                // String '--' '^='
     && lk != 872198                // Integer '--' '^='
     && lk != 872199                // Complex '--' '^='
     && lk != 872200                // Real '--' '^='
     && lk != 874930                // '[' ']' '^='
     && lk != 878926                // '{' '}' '^='
     && lk != 885181                // 'f32' Identifier 'break'
     && lk != 885182                // 'f64' Identifier 'break'
     && lk != 885186                // 'i32' Identifier 'break'
     && lk != 885187                // 'i64' Identifier 'break'
     && lk != 888067                // Identifier '++' 'break'
     && lk != 888068                // Character '++' 'break'
     && lk != 888069                // String '++' 'break'
     && lk != 888070                // Integer '++' 'break'
     && lk != 888071                // Complex '++' 'break'
     && lk != 888072                // Real '++' 'break'
     && lk != 888579                // Identifier '--' 'break'
     && lk != 888580                // Character '--' 'break'
     && lk != 888581                // String '--' 'break'
     && lk != 888582                // Integer '--' 'break'
     && lk != 888583                // Complex '--' 'break'
     && lk != 888584                // Real '--' 'break'
     && lk != 891314                // '[' ']' 'break'
     && lk != 895310                // '{' '}' 'break'
     && lk != 901565                // 'f32' Identifier 'case'
     && lk != 901566                // 'f64' Identifier 'case'
     && lk != 901570                // 'i32' Identifier 'case'
     && lk != 901571                // 'i64' Identifier 'case'
     && lk != 904451                // Identifier '++' 'case'
     && lk != 904452                // Character '++' 'case'
     && lk != 904453                // String '++' 'case'
     && lk != 904454                // Integer '++' 'case'
     && lk != 904455                // Complex '++' 'case'
     && lk != 904456                // Real '++' 'case'
     && lk != 904963                // Identifier '--' 'case'
     && lk != 904964                // Character '--' 'case'
     && lk != 904965                // String '--' 'case'
     && lk != 904966                // Integer '--' 'case'
     && lk != 904967                // Complex '--' 'case'
     && lk != 904968                // Real '--' 'case'
     && lk != 907698                // '[' ']' 'case'
     && lk != 911694                // '{' '}' 'case'
     && lk != 917949                // 'f32' Identifier 'catch'
     && lk != 917950                // 'f64' Identifier 'catch'
     && lk != 917954                // 'i32' Identifier 'catch'
     && lk != 917955                // 'i64' Identifier 'catch'
     && lk != 920835                // Identifier '++' 'catch'
     && lk != 920836                // Character '++' 'catch'
     && lk != 920837                // String '++' 'catch'
     && lk != 920838                // Integer '++' 'catch'
     && lk != 920839                // Complex '++' 'catch'
     && lk != 920840                // Real '++' 'catch'
     && lk != 921347                // Identifier '--' 'catch'
     && lk != 921348                // Character '--' 'catch'
     && lk != 921349                // String '--' 'catch'
     && lk != 921350                // Integer '--' 'catch'
     && lk != 921351                // Complex '--' 'catch'
     && lk != 921352                // Real '--' 'catch'
     && lk != 924082                // '[' ']' 'catch'
     && lk != 928078                // '{' '}' 'catch'
     && lk != 934333                // 'f32' Identifier 'continue'
     && lk != 934334                // 'f64' Identifier 'continue'
     && lk != 934338                // 'i32' Identifier 'continue'
     && lk != 934339                // 'i64' Identifier 'continue'
     && lk != 937219                // Identifier '++' 'continue'
     && lk != 937220                // Character '++' 'continue'
     && lk != 937221                // String '++' 'continue'
     && lk != 937222                // Integer '++' 'continue'
     && lk != 937223                // Complex '++' 'continue'
     && lk != 937224                // Real '++' 'continue'
     && lk != 937731                // Identifier '--' 'continue'
     && lk != 937732                // Character '--' 'continue'
     && lk != 937733                // String '--' 'continue'
     && lk != 937734                // Integer '--' 'continue'
     && lk != 937735                // Complex '--' 'continue'
     && lk != 937736                // Real '--' 'continue'
     && lk != 940466                // '[' ']' 'continue'
     && lk != 944462                // '{' '}' 'continue'
     && lk != 950717                // 'f32' Identifier 'default'
     && lk != 950718                // 'f64' Identifier 'default'
     && lk != 950722                // 'i32' Identifier 'default'
     && lk != 950723                // 'i64' Identifier 'default'
     && lk != 953603                // Identifier '++' 'default'
     && lk != 953604                // Character '++' 'default'
     && lk != 953605                // String '++' 'default'
     && lk != 953606                // Integer '++' 'default'
     && lk != 953607                // Complex '++' 'default'
     && lk != 953608                // Real '++' 'default'
     && lk != 954115                // Identifier '--' 'default'
     && lk != 954116                // Character '--' 'default'
     && lk != 954117                // String '--' 'default'
     && lk != 954118                // Integer '--' 'default'
     && lk != 954119                // Complex '--' 'default'
     && lk != 954120                // Real '--' 'default'
     && lk != 956850                // '[' ']' 'default'
     && lk != 960846                // '{' '}' 'default'
     && lk != 967101                // 'f32' Identifier 'do'
     && lk != 967102                // 'f64' Identifier 'do'
     && lk != 967106                // 'i32' Identifier 'do'
     && lk != 967107                // 'i64' Identifier 'do'
     && lk != 969987                // Identifier '++' 'do'
     && lk != 969988                // Character '++' 'do'
     && lk != 969989                // String '++' 'do'
     && lk != 969990                // Integer '++' 'do'
     && lk != 969991                // Complex '++' 'do'
     && lk != 969992                // Real '++' 'do'
     && lk != 970499                // Identifier '--' 'do'
     && lk != 970500                // Character '--' 'do'
     && lk != 970501                // String '--' 'do'
     && lk != 970502                // Integer '--' 'do'
     && lk != 970503                // Complex '--' 'do'
     && lk != 970504                // Real '--' 'do'
     && lk != 973234                // '[' ']' 'do'
     && lk != 977230                // '{' '}' 'do'
     && lk != 983485                // 'f32' Identifier 'else'
     && lk != 983486                // 'f64' Identifier 'else'
     && lk != 983490                // 'i32' Identifier 'else'
     && lk != 983491                // 'i64' Identifier 'else'
     && lk != 986371                // Identifier '++' 'else'
     && lk != 986372                // Character '++' 'else'
     && lk != 986373                // String '++' 'else'
     && lk != 986374                // Integer '++' 'else'
     && lk != 986375                // Complex '++' 'else'
     && lk != 986376                // Real '++' 'else'
     && lk != 986883                // Identifier '--' 'else'
     && lk != 986884                // Character '--' 'else'
     && lk != 986885                // String '--' 'else'
     && lk != 986886                // Integer '--' 'else'
     && lk != 986887                // Complex '--' 'else'
     && lk != 986888                // Real '--' 'else'
     && lk != 989618                // '[' ']' 'else'
     && lk != 993614                // '{' '}' 'else'
     && lk != 999869                // 'f32' Identifier 'f32'
     && lk != 999870                // 'f64' Identifier 'f32'
     && lk != 999874                // 'i32' Identifier 'f32'
     && lk != 999875                // 'i64' Identifier 'f32'
     && lk != 1006002               // '[' ']' 'f32'
     && lk != 1009998               // '{' '}' 'f32'
     && lk != 1016253               // 'f32' Identifier 'f64'
     && lk != 1016254               // 'f64' Identifier 'f64'
     && lk != 1016258               // 'i32' Identifier 'f64'
     && lk != 1016259               // 'i64' Identifier 'f64'
     && lk != 1022386               // '[' ']' 'f64'
     && lk != 1026382               // '{' '}' 'f64'
     && lk != 1032637               // 'f32' Identifier 'for'
     && lk != 1032638               // 'f64' Identifier 'for'
     && lk != 1032642               // 'i32' Identifier 'for'
     && lk != 1032643               // 'i64' Identifier 'for'
     && lk != 1035523               // Identifier '++' 'for'
     && lk != 1035524               // Character '++' 'for'
     && lk != 1035525               // String '++' 'for'
     && lk != 1035526               // Integer '++' 'for'
     && lk != 1035527               // Complex '++' 'for'
     && lk != 1035528               // Real '++' 'for'
     && lk != 1036035               // Identifier '--' 'for'
     && lk != 1036036               // Character '--' 'for'
     && lk != 1036037               // String '--' 'for'
     && lk != 1036038               // Integer '--' 'for'
     && lk != 1036039               // Complex '--' 'for'
     && lk != 1036040               // Real '--' 'for'
     && lk != 1038770               // '[' ']' 'for'
     && lk != 1042766               // '{' '}' 'for'
     && lk != 1049021               // 'f32' Identifier 'foreach'
     && lk != 1049022               // 'f64' Identifier 'foreach'
     && lk != 1049026               // 'i32' Identifier 'foreach'
     && lk != 1049027               // 'i64' Identifier 'foreach'
     && lk != 1051907               // Identifier '++' 'foreach'
     && lk != 1051908               // Character '++' 'foreach'
     && lk != 1051909               // String '++' 'foreach'
     && lk != 1051910               // Integer '++' 'foreach'
     && lk != 1051911               // Complex '++' 'foreach'
     && lk != 1051912               // Real '++' 'foreach'
     && lk != 1052419               // Identifier '--' 'foreach'
     && lk != 1052420               // Character '--' 'foreach'
     && lk != 1052421               // String '--' 'foreach'
     && lk != 1052422               // Integer '--' 'foreach'
     && lk != 1052423               // Complex '--' 'foreach'
     && lk != 1052424               // Real '--' 'foreach'
     && lk != 1055154               // '[' ']' 'foreach'
     && lk != 1059150               // '{' '}' 'foreach'
     && lk != 1065405               // 'f32' Identifier 'global'
     && lk != 1065406               // 'f64' Identifier 'global'
     && lk != 1065410               // 'i32' Identifier 'global'
     && lk != 1065411               // 'i64' Identifier 'global'
     && lk != 1068291               // Identifier '++' 'global'
     && lk != 1068292               // Character '++' 'global'
     && lk != 1068293               // String '++' 'global'
     && lk != 1068294               // Integer '++' 'global'
     && lk != 1068295               // Complex '++' 'global'
     && lk != 1068296               // Real '++' 'global'
     && lk != 1068803               // Identifier '--' 'global'
     && lk != 1068804               // Character '--' 'global'
     && lk != 1068805               // String '--' 'global'
     && lk != 1068806               // Integer '--' 'global'
     && lk != 1068807               // Complex '--' 'global'
     && lk != 1068808               // Real '--' 'global'
     && lk != 1071538               // '[' ']' 'global'
     && lk != 1075534               // '{' '}' 'global'
     && lk != 1081789               // 'f32' Identifier 'i32'
     && lk != 1081790               // 'f64' Identifier 'i32'
     && lk != 1081794               // 'i32' Identifier 'i32'
     && lk != 1081795               // 'i64' Identifier 'i32'
     && lk != 1087922               // '[' ']' 'i32'
     && lk != 1091918               // '{' '}' 'i32'
     && lk != 1098173               // 'f32' Identifier 'i64'
     && lk != 1098174               // 'f64' Identifier 'i64'
     && lk != 1098178               // 'i32' Identifier 'i64'
     && lk != 1098179               // 'i64' Identifier 'i64'
     && lk != 1104306               // '[' ']' 'i64'
     && lk != 1108302               // '{' '}' 'i64'
     && lk != 1114557               // 'f32' Identifier 'if'
     && lk != 1114558               // 'f64' Identifier 'if'
     && lk != 1114562               // 'i32' Identifier 'if'
     && lk != 1114563               // 'i64' Identifier 'if'
     && lk != 1117443               // Identifier '++' 'if'
     && lk != 1117444               // Character '++' 'if'
     && lk != 1117445               // String '++' 'if'
     && lk != 1117446               // Integer '++' 'if'
     && lk != 1117447               // Complex '++' 'if'
     && lk != 1117448               // Real '++' 'if'
     && lk != 1117955               // Identifier '--' 'if'
     && lk != 1117956               // Character '--' 'if'
     && lk != 1117957               // String '--' 'if'
     && lk != 1117958               // Integer '--' 'if'
     && lk != 1117959               // Complex '--' 'if'
     && lk != 1117960               // Real '--' 'if'
     && lk != 1120690               // '[' ']' 'if'
     && lk != 1124686               // '{' '}' 'if'
     && lk != 1130941               // 'f32' Identifier 'import'
     && lk != 1130942               // 'f64' Identifier 'import'
     && lk != 1130946               // 'i32' Identifier 'import'
     && lk != 1130947               // 'i64' Identifier 'import'
     && lk != 1133827               // Identifier '++' 'import'
     && lk != 1133828               // Character '++' 'import'
     && lk != 1133829               // String '++' 'import'
     && lk != 1133830               // Integer '++' 'import'
     && lk != 1133831               // Complex '++' 'import'
     && lk != 1133832               // Real '++' 'import'
     && lk != 1134339               // Identifier '--' 'import'
     && lk != 1134340               // Character '--' 'import'
     && lk != 1134341               // String '--' 'import'
     && lk != 1134342               // Integer '--' 'import'
     && lk != 1134343               // Complex '--' 'import'
     && lk != 1134344               // Real '--' 'import'
     && lk != 1137074               // '[' ']' 'import'
     && lk != 1141070               // '{' '}' 'import'
     && lk != 1147325               // 'f32' Identifier 'include'
     && lk != 1147326               // 'f64' Identifier 'include'
     && lk != 1147330               // 'i32' Identifier 'include'
     && lk != 1147331               // 'i64' Identifier 'include'
     && lk != 1150211               // Identifier '++' 'include'
     && lk != 1150212               // Character '++' 'include'
     && lk != 1150213               // String '++' 'include'
     && lk != 1150214               // Integer '++' 'include'
     && lk != 1150215               // Complex '++' 'include'
     && lk != 1150216               // Real '++' 'include'
     && lk != 1150723               // Identifier '--' 'include'
     && lk != 1150724               // Character '--' 'include'
     && lk != 1150725               // String '--' 'include'
     && lk != 1150726               // Integer '--' 'include'
     && lk != 1150727               // Complex '--' 'include'
     && lk != 1150728               // Real '--' 'include'
     && lk != 1153458               // '[' ']' 'include'
     && lk != 1157454               // '{' '}' 'include'
     && lk != 1163709               // 'f32' Identifier 'local'
     && lk != 1163710               // 'f64' Identifier 'local'
     && lk != 1163714               // 'i32' Identifier 'local'
     && lk != 1163715               // 'i64' Identifier 'local'
     && lk != 1166595               // Identifier '++' 'local'
     && lk != 1166596               // Character '++' 'local'
     && lk != 1166597               // String '++' 'local'
     && lk != 1166598               // Integer '++' 'local'
     && lk != 1166599               // Complex '++' 'local'
     && lk != 1166600               // Real '++' 'local'
     && lk != 1167107               // Identifier '--' 'local'
     && lk != 1167108               // Character '--' 'local'
     && lk != 1167109               // String '--' 'local'
     && lk != 1167110               // Integer '--' 'local'
     && lk != 1167111               // Complex '--' 'local'
     && lk != 1167112               // Real '--' 'local'
     && lk != 1169842               // '[' ']' 'local'
     && lk != 1173838               // '{' '}' 'local'
     && lk != 1180093               // 'f32' Identifier 'return'
     && lk != 1180094               // 'f64' Identifier 'return'
     && lk != 1180098               // 'i32' Identifier 'return'
     && lk != 1180099               // 'i64' Identifier 'return'
     && lk != 1182979               // Identifier '++' 'return'
     && lk != 1182980               // Character '++' 'return'
     && lk != 1182981               // String '++' 'return'
     && lk != 1182982               // Integer '++' 'return'
     && lk != 1182983               // Complex '++' 'return'
     && lk != 1182984               // Real '++' 'return'
     && lk != 1183491               // Identifier '--' 'return'
     && lk != 1183492               // Character '--' 'return'
     && lk != 1183493               // String '--' 'return'
     && lk != 1183494               // Integer '--' 'return'
     && lk != 1183495               // Complex '--' 'return'
     && lk != 1183496               // Real '--' 'return'
     && lk != 1186226               // '[' ']' 'return'
     && lk != 1190222               // '{' '}' 'return'
     && lk != 1196477               // 'f32' Identifier 'switch'
     && lk != 1196478               // 'f64' Identifier 'switch'
     && lk != 1196482               // 'i32' Identifier 'switch'
     && lk != 1196483               // 'i64' Identifier 'switch'
     && lk != 1199363               // Identifier '++' 'switch'
     && lk != 1199364               // Character '++' 'switch'
     && lk != 1199365               // String '++' 'switch'
     && lk != 1199366               // Integer '++' 'switch'
     && lk != 1199367               // Complex '++' 'switch'
     && lk != 1199368               // Real '++' 'switch'
     && lk != 1199875               // Identifier '--' 'switch'
     && lk != 1199876               // Character '--' 'switch'
     && lk != 1199877               // String '--' 'switch'
     && lk != 1199878               // Integer '--' 'switch'
     && lk != 1199879               // Complex '--' 'switch'
     && lk != 1199880               // Real '--' 'switch'
     && lk != 1202610               // '[' ']' 'switch'
     && lk != 1206606               // '{' '}' 'switch'
     && lk != 1212861               // 'f32' Identifier 'test'
     && lk != 1212862               // 'f64' Identifier 'test'
     && lk != 1212866               // 'i32' Identifier 'test'
     && lk != 1212867               // 'i64' Identifier 'test'
     && lk != 1215747               // Identifier '++' 'test'
     && lk != 1215748               // Character '++' 'test'
     && lk != 1215749               // String '++' 'test'
     && lk != 1215750               // Integer '++' 'test'
     && lk != 1215751               // Complex '++' 'test'
     && lk != 1215752               // Real '++' 'test'
     && lk != 1216259               // Identifier '--' 'test'
     && lk != 1216260               // Character '--' 'test'
     && lk != 1216261               // String '--' 'test'
     && lk != 1216262               // Integer '--' 'test'
     && lk != 1216263               // Complex '--' 'test'
     && lk != 1216264               // Real '--' 'test'
     && lk != 1218994               // '[' ']' 'test'
     && lk != 1222990               // '{' '}' 'test'
     && lk != 1229245               // 'f32' Identifier 'throw'
     && lk != 1229246               // 'f64' Identifier 'throw'
     && lk != 1229250               // 'i32' Identifier 'throw'
     && lk != 1229251               // 'i64' Identifier 'throw'
     && lk != 1232131               // Identifier '++' 'throw'
     && lk != 1232132               // Character '++' 'throw'
     && lk != 1232133               // String '++' 'throw'
     && lk != 1232134               // Integer '++' 'throw'
     && lk != 1232135               // Complex '++' 'throw'
     && lk != 1232136               // Real '++' 'throw'
     && lk != 1232643               // Identifier '--' 'throw'
     && lk != 1232644               // Character '--' 'throw'
     && lk != 1232645               // String '--' 'throw'
     && lk != 1232646               // Integer '--' 'throw'
     && lk != 1232647               // Complex '--' 'throw'
     && lk != 1232648               // Real '--' 'throw'
     && lk != 1235378               // '[' ']' 'throw'
     && lk != 1239374               // '{' '}' 'throw'
     && lk != 1245629               // 'f32' Identifier 'try'
     && lk != 1245630               // 'f64' Identifier 'try'
     && lk != 1245634               // 'i32' Identifier 'try'
     && lk != 1245635               // 'i64' Identifier 'try'
     && lk != 1248515               // Identifier '++' 'try'
     && lk != 1248516               // Character '++' 'try'
     && lk != 1248517               // String '++' 'try'
     && lk != 1248518               // Integer '++' 'try'
     && lk != 1248519               // Complex '++' 'try'
     && lk != 1248520               // Real '++' 'try'
     && lk != 1249027               // Identifier '--' 'try'
     && lk != 1249028               // Character '--' 'try'
     && lk != 1249029               // String '--' 'try'
     && lk != 1249030               // Integer '--' 'try'
     && lk != 1249031               // Complex '--' 'try'
     && lk != 1249032               // Real '--' 'try'
     && lk != 1251762               // '[' ']' 'try'
     && lk != 1255758               // '{' '}' 'try'
     && lk != 1262013               // 'f32' Identifier 'while'
     && lk != 1262014               // 'f64' Identifier 'while'
     && lk != 1262018               // 'i32' Identifier 'while'
     && lk != 1262019               // 'i64' Identifier 'while'
     && lk != 1264899               // Identifier '++' 'while'
     && lk != 1264900               // Character '++' 'while'
     && lk != 1264901               // String '++' 'while'
     && lk != 1264902               // Integer '++' 'while'
     && lk != 1264903               // Complex '++' 'while'
     && lk != 1264904               // Real '++' 'while'
     && lk != 1265411               // Identifier '--' 'while'
     && lk != 1265412               // Character '--' 'while'
     && lk != 1265413               // String '--' 'while'
     && lk != 1265414               // Integer '--' 'while'
     && lk != 1265415               // Complex '--' 'while'
     && lk != 1265416               // Real '--' 'while'
     && lk != 1268146               // '[' ']' 'while'
     && lk != 1272142               // '{' '}' 'while'
     && lk != 1278397               // 'f32' Identifier '{'
     && lk != 1278398               // 'f64' Identifier '{'
     && lk != 1278402               // 'i32' Identifier '{'
     && lk != 1278403               // 'i64' Identifier '{'
     && lk != 1284530               // '[' ']' '{'
     && lk != 1288526               // '{' '}' '{'
     && lk != 1294781               // 'f32' Identifier '|'
     && lk != 1294782               // 'f64' Identifier '|'
     && lk != 1294786               // 'i32' Identifier '|'
     && lk != 1294787               // 'i64' Identifier '|'
     && lk != 1297667               // Identifier '++' '|'
     && lk != 1297668               // Character '++' '|'
     && lk != 1297669               // String '++' '|'
     && lk != 1297670               // Integer '++' '|'
     && lk != 1297671               // Complex '++' '|'
     && lk != 1297672               // Real '++' '|'
     && lk != 1298179               // Identifier '--' '|'
     && lk != 1298180               // Character '--' '|'
     && lk != 1298181               // String '--' '|'
     && lk != 1298182               // Integer '--' '|'
     && lk != 1298183               // Complex '--' '|'
     && lk != 1298184               // Real '--' '|'
     && lk != 1300914               // '[' ']' '|'
     && lk != 1304910               // '{' '}' '|'
     && lk != 1311165               // 'f32' Identifier '|='
     && lk != 1311166               // 'f64' Identifier '|='
     && lk != 1311170               // 'i32' Identifier '|='
     && lk != 1311171               // 'i64' Identifier '|='
     && lk != 1314051               // Identifier '++' '|='
     && lk != 1314052               // Character '++' '|='
     && lk != 1314053               // String '++' '|='
     && lk != 1314054               // Integer '++' '|='
     && lk != 1314055               // Complex '++' '|='
     && lk != 1314056               // Real '++' '|='
     && lk != 1314563               // Identifier '--' '|='
     && lk != 1314564               // Character '--' '|='
     && lk != 1314565               // String '--' '|='
     && lk != 1314566               // Integer '--' '|='
     && lk != 1314567               // Complex '--' '|='
     && lk != 1314568               // Real '--' '|='
     && lk != 1317298               // '[' ']' '|='
     && lk != 1321294               // '{' '}' '|='
     && lk != 1327549               // 'f32' Identifier '||'
     && lk != 1327550               // 'f64' Identifier '||'
     && lk != 1327554               // 'i32' Identifier '||'
     && lk != 1327555               // 'i64' Identifier '||'
     && lk != 1330435               // Identifier '++' '||'
     && lk != 1330436               // Character '++' '||'
     && lk != 1330437               // String '++' '||'
     && lk != 1330438               // Integer '++' '||'
     && lk != 1330439               // Complex '++' '||'
     && lk != 1330440               // Real '++' '||'
     && lk != 1330947               // Identifier '--' '||'
     && lk != 1330948               // Character '--' '||'
     && lk != 1330949               // String '--' '||'
     && lk != 1330950               // Integer '--' '||'
     && lk != 1330951               // Complex '--' '||'
     && lk != 1330952               // Real '--' '||'
     && lk != 1333682               // '[' ']' '||'
     && lk != 1337678               // '{' '}' '||'
     && lk != 1343933               // 'f32' Identifier '}'
     && lk != 1343934               // 'f64' Identifier '}'
     && lk != 1343938               // 'i32' Identifier '}'
     && lk != 1343939               // 'i64' Identifier '}'
     && lk != 1346819               // Identifier '++' '}'
     && lk != 1346820               // Character '++' '}'
     && lk != 1346821               // String '++' '}'
     && lk != 1346822               // Integer '++' '}'
     && lk != 1346823               // Complex '++' '}'
     && lk != 1346824               // Real '++' '}'
     && lk != 1347331               // Identifier '--' '}'
     && lk != 1347332               // Character '--' '}'
     && lk != 1347333               // String '--' '}'
     && lk != 1347334               // Integer '--' '}'
     && lk != 1347335               // Complex '--' '}'
     && lk != 1347336               // Real '--' '}'
     && lk != 1350066               // '[' ']' '}'
     && lk != 1354062               // '{' '}' '}'
     && lk != 1360317               // 'f32' Identifier '~'
     && lk != 1360318               // 'f64' Identifier '~'
     && lk != 1360322               // 'i32' Identifier '~'
     && lk != 1360323               // 'i64' Identifier '~'
     && lk != 1363203               // Identifier '++' '~'
     && lk != 1363204               // Character '++' '~'
     && lk != 1363205               // String '++' '~'
     && lk != 1363206               // Integer '++' '~'
     && lk != 1363207               // Complex '++' '~'
     && lk != 1363208               // Real '++' '~'
     && lk != 1363715               // Identifier '--' '~'
     && lk != 1363716               // Character '--' '~'
     && lk != 1363717               // String '--' '~'
     && lk != 1363718               // Integer '--' '~'
     && lk != 1363719               // Complex '--' '~'
     && lk != 1363720               // Real '--' '~'
     && lk != 1366450               // '[' ']' '~'
     && lk != 1370446)              // '{' '}' '~'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Primary();
          lookahead1W(5);           // WhiteSpace^token | '++'
          consumeT(26);             // '++'
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Primary();
            lookahead1W(6);         // WhiteSpace^token | '--'
            consumeT(30);           // '--'
            lk = -2;
          }
          catch (p2A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 19715:                     // Identifier '++' END
    case 19716:                     // Character '++' END
    case 19717:                     // String '++' END
    case 19718:                     // Integer '++' END
    case 19719:                     // Complex '++' END
    case 19720:                     // Real '++' END
    case 150787:                    // Identifier '++' Comment
    case 150788:                    // Character '++' Comment
    case 150789:                    // String '++' Comment
    case 150790:                    // Integer '++' Comment
    case 150791:                    // Complex '++' Comment
    case 150792:                    // Real '++' Comment
    case 199939:                    // Identifier '++' '!'
    case 199940:                    // Character '++' '!'
    case 199941:                    // String '++' '!'
    case 199942:                    // Integer '++' '!'
    case 199943:                    // Complex '++' '!'
    case 199944:                    // Real '++' '!'
    case 216323:                    // Identifier '++' '!='
    case 216324:                    // Character '++' '!='
    case 216325:                    // String '++' '!='
    case 216326:                    // Integer '++' '!='
    case 216327:                    // Complex '++' '!='
    case 216328:                    // Real '++' '!='
    case 249091:                    // Identifier '++' '%'
    case 249092:                    // Character '++' '%'
    case 249093:                    // String '++' '%'
    case 249094:                    // Integer '++' '%'
    case 249095:                    // Complex '++' '%'
    case 249096:                    // Real '++' '%'
    case 265475:                    // Identifier '++' '%='
    case 265476:                    // Character '++' '%='
    case 265477:                    // String '++' '%='
    case 265478:                    // Integer '++' '%='
    case 265479:                    // Complex '++' '%='
    case 265480:                    // Real '++' '%='
    case 281859:                    // Identifier '++' '&'
    case 281860:                    // Character '++' '&'
    case 281861:                    // String '++' '&'
    case 281862:                    // Integer '++' '&'
    case 281863:                    // Complex '++' '&'
    case 281864:                    // Real '++' '&'
    case 298243:                    // Identifier '++' '&&'
    case 298244:                    // Character '++' '&&'
    case 298245:                    // String '++' '&&'
    case 298246:                    // Integer '++' '&&'
    case 298247:                    // Complex '++' '&&'
    case 298248:                    // Real '++' '&&'
    case 314627:                    // Identifier '++' '&='
    case 314628:                    // Character '++' '&='
    case 314629:                    // String '++' '&='
    case 314630:                    // Integer '++' '&='
    case 314631:                    // Complex '++' '&='
    case 314632:                    // Real '++' '&='
    case 347395:                    // Identifier '++' ')'
    case 347396:                    // Character '++' ')'
    case 347397:                    // String '++' ')'
    case 347398:                    // Integer '++' ')'
    case 347399:                    // Complex '++' ')'
    case 347400:                    // Real '++' ')'
    case 363779:                    // Identifier '++' '*'
    case 363780:                    // Character '++' '*'
    case 363781:                    // String '++' '*'
    case 363782:                    // Integer '++' '*'
    case 363783:                    // Complex '++' '*'
    case 363784:                    // Real '++' '*'
    case 380163:                    // Identifier '++' '**'
    case 380164:                    // Character '++' '**'
    case 380165:                    // String '++' '**'
    case 380166:                    // Integer '++' '**'
    case 380167:                    // Complex '++' '**'
    case 380168:                    // Real '++' '**'
    case 396547:                    // Identifier '++' '*='
    case 396548:                    // Character '++' '*='
    case 396549:                    // String '++' '*='
    case 396550:                    // Integer '++' '*='
    case 396551:                    // Complex '++' '*='
    case 396552:                    // Real '++' '*='
    case 412931:                    // Identifier '++' '+'
    case 412932:                    // Character '++' '+'
    case 412933:                    // String '++' '+'
    case 412934:                    // Integer '++' '+'
    case 412935:                    // Complex '++' '+'
    case 412936:                    // Real '++' '+'
    case 429315:                    // Identifier '++' '++'
    case 429316:                    // Character '++' '++'
    case 429317:                    // String '++' '++'
    case 429318:                    // Integer '++' '++'
    case 429319:                    // Complex '++' '++'
    case 429320:                    // Real '++' '++'
    case 445699:                    // Identifier '++' '+='
    case 445700:                    // Character '++' '+='
    case 445701:                    // String '++' '+='
    case 445702:                    // Integer '++' '+='
    case 445703:                    // Complex '++' '+='
    case 445704:                    // Real '++' '+='
    case 462083:                    // Identifier '++' ','
    case 462084:                    // Character '++' ','
    case 462085:                    // String '++' ','
    case 462086:                    // Integer '++' ','
    case 462087:                    // Complex '++' ','
    case 462088:                    // Real '++' ','
    case 478467:                    // Identifier '++' '-'
    case 478468:                    // Character '++' '-'
    case 478469:                    // String '++' '-'
    case 478470:                    // Integer '++' '-'
    case 478471:                    // Complex '++' '-'
    case 478472:                    // Real '++' '-'
    case 494851:                    // Identifier '++' '--'
    case 494852:                    // Character '++' '--'
    case 494853:                    // String '++' '--'
    case 494854:                    // Integer '++' '--'
    case 494855:                    // Complex '++' '--'
    case 494856:                    // Real '++' '--'
    case 511235:                    // Identifier '++' '-='
    case 511236:                    // Character '++' '-='
    case 511237:                    // String '++' '-='
    case 511238:                    // Integer '++' '-='
    case 511239:                    // Complex '++' '-='
    case 511240:                    // Real '++' '-='
    case 544003:                    // Identifier '++' '/'
    case 544004:                    // Character '++' '/'
    case 544005:                    // String '++' '/'
    case 544006:                    // Integer '++' '/'
    case 544007:                    // Complex '++' '/'
    case 544008:                    // Real '++' '/'
    case 560387:                    // Identifier '++' '/='
    case 560388:                    // Character '++' '/='
    case 560389:                    // String '++' '/='
    case 560390:                    // Integer '++' '/='
    case 560391:                    // Complex '++' '/='
    case 560392:                    // Real '++' '/='
    case 576771:                    // Identifier '++' ':'
    case 576772:                    // Character '++' ':'
    case 576773:                    // String '++' ':'
    case 576774:                    // Integer '++' ':'
    case 576775:                    // Complex '++' ':'
    case 576776:                    // Real '++' ':'
    case 593155:                    // Identifier '++' ':='
    case 593156:                    // Character '++' ':='
    case 593157:                    // String '++' ':='
    case 593158:                    // Integer '++' ':='
    case 593159:                    // Complex '++' ':='
    case 593160:                    // Real '++' ':='
    case 609539:                    // Identifier '++' ';'
    case 609540:                    // Character '++' ';'
    case 609541:                    // String '++' ';'
    case 609542:                    // Integer '++' ';'
    case 609543:                    // Complex '++' ';'
    case 609544:                    // Real '++' ';'
    case 625923:                    // Identifier '++' '<'
    case 625924:                    // Character '++' '<'
    case 625925:                    // String '++' '<'
    case 625926:                    // Integer '++' '<'
    case 625927:                    // Complex '++' '<'
    case 625928:                    // Real '++' '<'
    case 642307:                    // Identifier '++' '<<'
    case 642308:                    // Character '++' '<<'
    case 642309:                    // String '++' '<<'
    case 642310:                    // Integer '++' '<<'
    case 642311:                    // Complex '++' '<<'
    case 642312:                    // Real '++' '<<'
    case 658691:                    // Identifier '++' '<<='
    case 658692:                    // Character '++' '<<='
    case 658693:                    // String '++' '<<='
    case 658694:                    // Integer '++' '<<='
    case 658695:                    // Complex '++' '<<='
    case 658696:                    // Real '++' '<<='
    case 675075:                    // Identifier '++' '<='
    case 675076:                    // Character '++' '<='
    case 675077:                    // String '++' '<='
    case 675078:                    // Integer '++' '<='
    case 675079:                    // Complex '++' '<='
    case 675080:                    // Real '++' '<='
    case 691459:                    // Identifier '++' '='
    case 691460:                    // Character '++' '='
    case 691461:                    // String '++' '='
    case 691462:                    // Integer '++' '='
    case 691463:                    // Complex '++' '='
    case 691464:                    // Real '++' '='
    case 707843:                    // Identifier '++' '=='
    case 707844:                    // Character '++' '=='
    case 707845:                    // String '++' '=='
    case 707846:                    // Integer '++' '=='
    case 707847:                    // Complex '++' '=='
    case 707848:                    // Real '++' '=='
    case 724227:                    // Identifier '++' '>'
    case 724228:                    // Character '++' '>'
    case 724229:                    // String '++' '>'
    case 724230:                    // Integer '++' '>'
    case 724231:                    // Complex '++' '>'
    case 724232:                    // Real '++' '>'
    case 740611:                    // Identifier '++' '>='
    case 740612:                    // Character '++' '>='
    case 740613:                    // String '++' '>='
    case 740614:                    // Integer '++' '>='
    case 740615:                    // Complex '++' '>='
    case 740616:                    // Real '++' '>='
    case 756995:                    // Identifier '++' '>>'
    case 756996:                    // Character '++' '>>'
    case 756997:                    // String '++' '>>'
    case 756998:                    // Integer '++' '>>'
    case 756999:                    // Complex '++' '>>'
    case 757000:                    // Real '++' '>>'
    case 773379:                    // Identifier '++' '>>='
    case 773380:                    // Character '++' '>>='
    case 773381:                    // String '++' '>>='
    case 773382:                    // Integer '++' '>>='
    case 773383:                    // Complex '++' '>>='
    case 773384:                    // Real '++' '>>='
    case 789763:                    // Identifier '++' '?'
    case 789764:                    // Character '++' '?'
    case 789765:                    // String '++' '?'
    case 789766:                    // Integer '++' '?'
    case 789767:                    // Complex '++' '?'
    case 789768:                    // Real '++' '?'
    case 806147:                    // Identifier '++' '?='
    case 806148:                    // Character '++' '?='
    case 806149:                    // String '++' '?='
    case 806150:                    // Integer '++' '?='
    case 806151:                    // Complex '++' '?='
    case 806152:                    // Real '++' '?='
    case 838915:                    // Identifier '++' ']'
    case 838916:                    // Character '++' ']'
    case 838917:                    // String '++' ']'
    case 838918:                    // Integer '++' ']'
    case 838919:                    // Complex '++' ']'
    case 838920:                    // Real '++' ']'
    case 855299:                    // Identifier '++' '^'
    case 855300:                    // Character '++' '^'
    case 855301:                    // String '++' '^'
    case 855302:                    // Integer '++' '^'
    case 855303:                    // Complex '++' '^'
    case 855304:                    // Real '++' '^'
    case 871683:                    // Identifier '++' '^='
    case 871684:                    // Character '++' '^='
    case 871685:                    // String '++' '^='
    case 871686:                    // Integer '++' '^='
    case 871687:                    // Complex '++' '^='
    case 871688:                    // Real '++' '^='
    case 888067:                    // Identifier '++' 'break'
    case 888068:                    // Character '++' 'break'
    case 888069:                    // String '++' 'break'
    case 888070:                    // Integer '++' 'break'
    case 888071:                    // Complex '++' 'break'
    case 888072:                    // Real '++' 'break'
    case 904451:                    // Identifier '++' 'case'
    case 904452:                    // Character '++' 'case'
    case 904453:                    // String '++' 'case'
    case 904454:                    // Integer '++' 'case'
    case 904455:                    // Complex '++' 'case'
    case 904456:                    // Real '++' 'case'
    case 920835:                    // Identifier '++' 'catch'
    case 920836:                    // Character '++' 'catch'
    case 920837:                    // String '++' 'catch'
    case 920838:                    // Integer '++' 'catch'
    case 920839:                    // Complex '++' 'catch'
    case 920840:                    // Real '++' 'catch'
    case 937219:                    // Identifier '++' 'continue'
    case 937220:                    // Character '++' 'continue'
    case 937221:                    // String '++' 'continue'
    case 937222:                    // Integer '++' 'continue'
    case 937223:                    // Complex '++' 'continue'
    case 937224:                    // Real '++' 'continue'
    case 953603:                    // Identifier '++' 'default'
    case 953604:                    // Character '++' 'default'
    case 953605:                    // String '++' 'default'
    case 953606:                    // Integer '++' 'default'
    case 953607:                    // Complex '++' 'default'
    case 953608:                    // Real '++' 'default'
    case 969987:                    // Identifier '++' 'do'
    case 969988:                    // Character '++' 'do'
    case 969989:                    // String '++' 'do'
    case 969990:                    // Integer '++' 'do'
    case 969991:                    // Complex '++' 'do'
    case 969992:                    // Real '++' 'do'
    case 986371:                    // Identifier '++' 'else'
    case 986372:                    // Character '++' 'else'
    case 986373:                    // String '++' 'else'
    case 986374:                    // Integer '++' 'else'
    case 986375:                    // Complex '++' 'else'
    case 986376:                    // Real '++' 'else'
    case 1035523:                   // Identifier '++' 'for'
    case 1035524:                   // Character '++' 'for'
    case 1035525:                   // String '++' 'for'
    case 1035526:                   // Integer '++' 'for'
    case 1035527:                   // Complex '++' 'for'
    case 1035528:                   // Real '++' 'for'
    case 1051907:                   // Identifier '++' 'foreach'
    case 1051908:                   // Character '++' 'foreach'
    case 1051909:                   // String '++' 'foreach'
    case 1051910:                   // Integer '++' 'foreach'
    case 1051911:                   // Complex '++' 'foreach'
    case 1051912:                   // Real '++' 'foreach'
    case 1068291:                   // Identifier '++' 'global'
    case 1068292:                   // Character '++' 'global'
    case 1068293:                   // String '++' 'global'
    case 1068294:                   // Integer '++' 'global'
    case 1068295:                   // Complex '++' 'global'
    case 1068296:                   // Real '++' 'global'
    case 1117443:                   // Identifier '++' 'if'
    case 1117444:                   // Character '++' 'if'
    case 1117445:                   // String '++' 'if'
    case 1117446:                   // Integer '++' 'if'
    case 1117447:                   // Complex '++' 'if'
    case 1117448:                   // Real '++' 'if'
    case 1133827:                   // Identifier '++' 'import'
    case 1133828:                   // Character '++' 'import'
    case 1133829:                   // String '++' 'import'
    case 1133830:                   // Integer '++' 'import'
    case 1133831:                   // Complex '++' 'import'
    case 1133832:                   // Real '++' 'import'
    case 1150211:                   // Identifier '++' 'include'
    case 1150212:                   // Character '++' 'include'
    case 1150213:                   // String '++' 'include'
    case 1150214:                   // Integer '++' 'include'
    case 1150215:                   // Complex '++' 'include'
    case 1150216:                   // Real '++' 'include'
    case 1166595:                   // Identifier '++' 'local'
    case 1166596:                   // Character '++' 'local'
    case 1166597:                   // String '++' 'local'
    case 1166598:                   // Integer '++' 'local'
    case 1166599:                   // Complex '++' 'local'
    case 1166600:                   // Real '++' 'local'
    case 1182979:                   // Identifier '++' 'return'
    case 1182980:                   // Character '++' 'return'
    case 1182981:                   // String '++' 'return'
    case 1182982:                   // Integer '++' 'return'
    case 1182983:                   // Complex '++' 'return'
    case 1182984:                   // Real '++' 'return'
    case 1199363:                   // Identifier '++' 'switch'
    case 1199364:                   // Character '++' 'switch'
    case 1199365:                   // String '++' 'switch'
    case 1199366:                   // Integer '++' 'switch'
    case 1199367:                   // Complex '++' 'switch'
    case 1199368:                   // Real '++' 'switch'
    case 1215747:                   // Identifier '++' 'test'
    case 1215748:                   // Character '++' 'test'
    case 1215749:                   // String '++' 'test'
    case 1215750:                   // Integer '++' 'test'
    case 1215751:                   // Complex '++' 'test'
    case 1215752:                   // Real '++' 'test'
    case 1232131:                   // Identifier '++' 'throw'
    case 1232132:                   // Character '++' 'throw'
    case 1232133:                   // String '++' 'throw'
    case 1232134:                   // Integer '++' 'throw'
    case 1232135:                   // Complex '++' 'throw'
    case 1232136:                   // Real '++' 'throw'
    case 1248515:                   // Identifier '++' 'try'
    case 1248516:                   // Character '++' 'try'
    case 1248517:                   // String '++' 'try'
    case 1248518:                   // Integer '++' 'try'
    case 1248519:                   // Complex '++' 'try'
    case 1248520:                   // Real '++' 'try'
    case 1264899:                   // Identifier '++' 'while'
    case 1264900:                   // Character '++' 'while'
    case 1264901:                   // String '++' 'while'
    case 1264902:                   // Integer '++' 'while'
    case 1264903:                   // Complex '++' 'while'
    case 1264904:                   // Real '++' 'while'
    case 1297667:                   // Identifier '++' '|'
    case 1297668:                   // Character '++' '|'
    case 1297669:                   // String '++' '|'
    case 1297670:                   // Integer '++' '|'
    case 1297671:                   // Complex '++' '|'
    case 1297672:                   // Real '++' '|'
    case 1314051:                   // Identifier '++' '|='
    case 1314052:                   // Character '++' '|='
    case 1314053:                   // String '++' '|='
    case 1314054:                   // Integer '++' '|='
    case 1314055:                   // Complex '++' '|='
    case 1314056:                   // Real '++' '|='
    case 1330435:                   // Identifier '++' '||'
    case 1330436:                   // Character '++' '||'
    case 1330437:                   // String '++' '||'
    case 1330438:                   // Integer '++' '||'
    case 1330439:                   // Complex '++' '||'
    case 1330440:                   // Real '++' '||'
    case 1346819:                   // Identifier '++' '}'
    case 1346820:                   // Character '++' '}'
    case 1346821:                   // String '++' '}'
    case 1346822:                   // Integer '++' '}'
    case 1346823:                   // Complex '++' '}'
    case 1346824:                   // Real '++' '}'
    case 1363203:                   // Identifier '++' '~'
    case 1363204:                   // Character '++' '~'
    case 1363205:                   // String '++' '~'
    case 1363206:                   // Integer '++' '~'
    case 1363207:                   // Complex '++' '~'
    case 1363208:                   // Real '++' '~'
      parse_Primary();
      lookahead1W(5);               // WhiteSpace^token | '++'
      consume(26);                  // '++'
      break;
    case -2:
    case 20227:                     // Identifier '--' END
    case 20228:                     // Character '--' END
    case 20229:                     // String '--' END
    case 20230:                     // Integer '--' END
    case 20231:                     // Complex '--' END
    case 20232:                     // Real '--' END
    case 151299:                    // Identifier '--' Comment
    case 151300:                    // Character '--' Comment
    case 151301:                    // String '--' Comment
    case 151302:                    // Integer '--' Comment
    case 151303:                    // Complex '--' Comment
    case 151304:                    // Real '--' Comment
    case 200451:                    // Identifier '--' '!'
    case 200452:                    // Character '--' '!'
    case 200453:                    // String '--' '!'
    case 200454:                    // Integer '--' '!'
    case 200455:                    // Complex '--' '!'
    case 200456:                    // Real '--' '!'
    case 216835:                    // Identifier '--' '!='
    case 216836:                    // Character '--' '!='
    case 216837:                    // String '--' '!='
    case 216838:                    // Integer '--' '!='
    case 216839:                    // Complex '--' '!='
    case 216840:                    // Real '--' '!='
    case 249603:                    // Identifier '--' '%'
    case 249604:                    // Character '--' '%'
    case 249605:                    // String '--' '%'
    case 249606:                    // Integer '--' '%'
    case 249607:                    // Complex '--' '%'
    case 249608:                    // Real '--' '%'
    case 265987:                    // Identifier '--' '%='
    case 265988:                    // Character '--' '%='
    case 265989:                    // String '--' '%='
    case 265990:                    // Integer '--' '%='
    case 265991:                    // Complex '--' '%='
    case 265992:                    // Real '--' '%='
    case 282371:                    // Identifier '--' '&'
    case 282372:                    // Character '--' '&'
    case 282373:                    // String '--' '&'
    case 282374:                    // Integer '--' '&'
    case 282375:                    // Complex '--' '&'
    case 282376:                    // Real '--' '&'
    case 298755:                    // Identifier '--' '&&'
    case 298756:                    // Character '--' '&&'
    case 298757:                    // String '--' '&&'
    case 298758:                    // Integer '--' '&&'
    case 298759:                    // Complex '--' '&&'
    case 298760:                    // Real '--' '&&'
    case 315139:                    // Identifier '--' '&='
    case 315140:                    // Character '--' '&='
    case 315141:                    // String '--' '&='
    case 315142:                    // Integer '--' '&='
    case 315143:                    // Complex '--' '&='
    case 315144:                    // Real '--' '&='
    case 347907:                    // Identifier '--' ')'
    case 347908:                    // Character '--' ')'
    case 347909:                    // String '--' ')'
    case 347910:                    // Integer '--' ')'
    case 347911:                    // Complex '--' ')'
    case 347912:                    // Real '--' ')'
    case 364291:                    // Identifier '--' '*'
    case 364292:                    // Character '--' '*'
    case 364293:                    // String '--' '*'
    case 364294:                    // Integer '--' '*'
    case 364295:                    // Complex '--' '*'
    case 364296:                    // Real '--' '*'
    case 380675:                    // Identifier '--' '**'
    case 380676:                    // Character '--' '**'
    case 380677:                    // String '--' '**'
    case 380678:                    // Integer '--' '**'
    case 380679:                    // Complex '--' '**'
    case 380680:                    // Real '--' '**'
    case 397059:                    // Identifier '--' '*='
    case 397060:                    // Character '--' '*='
    case 397061:                    // String '--' '*='
    case 397062:                    // Integer '--' '*='
    case 397063:                    // Complex '--' '*='
    case 397064:                    // Real '--' '*='
    case 413443:                    // Identifier '--' '+'
    case 413444:                    // Character '--' '+'
    case 413445:                    // String '--' '+'
    case 413446:                    // Integer '--' '+'
    case 413447:                    // Complex '--' '+'
    case 413448:                    // Real '--' '+'
    case 429827:                    // Identifier '--' '++'
    case 429828:                    // Character '--' '++'
    case 429829:                    // String '--' '++'
    case 429830:                    // Integer '--' '++'
    case 429831:                    // Complex '--' '++'
    case 429832:                    // Real '--' '++'
    case 446211:                    // Identifier '--' '+='
    case 446212:                    // Character '--' '+='
    case 446213:                    // String '--' '+='
    case 446214:                    // Integer '--' '+='
    case 446215:                    // Complex '--' '+='
    case 446216:                    // Real '--' '+='
    case 462595:                    // Identifier '--' ','
    case 462596:                    // Character '--' ','
    case 462597:                    // String '--' ','
    case 462598:                    // Integer '--' ','
    case 462599:                    // Complex '--' ','
    case 462600:                    // Real '--' ','
    case 478979:                    // Identifier '--' '-'
    case 478980:                    // Character '--' '-'
    case 478981:                    // String '--' '-'
    case 478982:                    // Integer '--' '-'
    case 478983:                    // Complex '--' '-'
    case 478984:                    // Real '--' '-'
    case 495363:                    // Identifier '--' '--'
    case 495364:                    // Character '--' '--'
    case 495365:                    // String '--' '--'
    case 495366:                    // Integer '--' '--'
    case 495367:                    // Complex '--' '--'
    case 495368:                    // Real '--' '--'
    case 511747:                    // Identifier '--' '-='
    case 511748:                    // Character '--' '-='
    case 511749:                    // String '--' '-='
    case 511750:                    // Integer '--' '-='
    case 511751:                    // Complex '--' '-='
    case 511752:                    // Real '--' '-='
    case 544515:                    // Identifier '--' '/'
    case 544516:                    // Character '--' '/'
    case 544517:                    // String '--' '/'
    case 544518:                    // Integer '--' '/'
    case 544519:                    // Complex '--' '/'
    case 544520:                    // Real '--' '/'
    case 560899:                    // Identifier '--' '/='
    case 560900:                    // Character '--' '/='
    case 560901:                    // String '--' '/='
    case 560902:                    // Integer '--' '/='
    case 560903:                    // Complex '--' '/='
    case 560904:                    // Real '--' '/='
    case 577283:                    // Identifier '--' ':'
    case 577284:                    // Character '--' ':'
    case 577285:                    // String '--' ':'
    case 577286:                    // Integer '--' ':'
    case 577287:                    // Complex '--' ':'
    case 577288:                    // Real '--' ':'
    case 593667:                    // Identifier '--' ':='
    case 593668:                    // Character '--' ':='
    case 593669:                    // String '--' ':='
    case 593670:                    // Integer '--' ':='
    case 593671:                    // Complex '--' ':='
    case 593672:                    // Real '--' ':='
    case 610051:                    // Identifier '--' ';'
    case 610052:                    // Character '--' ';'
    case 610053:                    // String '--' ';'
    case 610054:                    // Integer '--' ';'
    case 610055:                    // Complex '--' ';'
    case 610056:                    // Real '--' ';'
    case 626435:                    // Identifier '--' '<'
    case 626436:                    // Character '--' '<'
    case 626437:                    // String '--' '<'
    case 626438:                    // Integer '--' '<'
    case 626439:                    // Complex '--' '<'
    case 626440:                    // Real '--' '<'
    case 642819:                    // Identifier '--' '<<'
    case 642820:                    // Character '--' '<<'
    case 642821:                    // String '--' '<<'
    case 642822:                    // Integer '--' '<<'
    case 642823:                    // Complex '--' '<<'
    case 642824:                    // Real '--' '<<'
    case 659203:                    // Identifier '--' '<<='
    case 659204:                    // Character '--' '<<='
    case 659205:                    // String '--' '<<='
    case 659206:                    // Integer '--' '<<='
    case 659207:                    // Complex '--' '<<='
    case 659208:                    // Real '--' '<<='
    case 675587:                    // Identifier '--' '<='
    case 675588:                    // Character '--' '<='
    case 675589:                    // String '--' '<='
    case 675590:                    // Integer '--' '<='
    case 675591:                    // Complex '--' '<='
    case 675592:                    // Real '--' '<='
    case 691971:                    // Identifier '--' '='
    case 691972:                    // Character '--' '='
    case 691973:                    // String '--' '='
    case 691974:                    // Integer '--' '='
    case 691975:                    // Complex '--' '='
    case 691976:                    // Real '--' '='
    case 708355:                    // Identifier '--' '=='
    case 708356:                    // Character '--' '=='
    case 708357:                    // String '--' '=='
    case 708358:                    // Integer '--' '=='
    case 708359:                    // Complex '--' '=='
    case 708360:                    // Real '--' '=='
    case 724739:                    // Identifier '--' '>'
    case 724740:                    // Character '--' '>'
    case 724741:                    // String '--' '>'
    case 724742:                    // Integer '--' '>'
    case 724743:                    // Complex '--' '>'
    case 724744:                    // Real '--' '>'
    case 741123:                    // Identifier '--' '>='
    case 741124:                    // Character '--' '>='
    case 741125:                    // String '--' '>='
    case 741126:                    // Integer '--' '>='
    case 741127:                    // Complex '--' '>='
    case 741128:                    // Real '--' '>='
    case 757507:                    // Identifier '--' '>>'
    case 757508:                    // Character '--' '>>'
    case 757509:                    // String '--' '>>'
    case 757510:                    // Integer '--' '>>'
    case 757511:                    // Complex '--' '>>'
    case 757512:                    // Real '--' '>>'
    case 773891:                    // Identifier '--' '>>='
    case 773892:                    // Character '--' '>>='
    case 773893:                    // String '--' '>>='
    case 773894:                    // Integer '--' '>>='
    case 773895:                    // Complex '--' '>>='
    case 773896:                    // Real '--' '>>='
    case 790275:                    // Identifier '--' '?'
    case 790276:                    // Character '--' '?'
    case 790277:                    // String '--' '?'
    case 790278:                    // Integer '--' '?'
    case 790279:                    // Complex '--' '?'
    case 790280:                    // Real '--' '?'
    case 806659:                    // Identifier '--' '?='
    case 806660:                    // Character '--' '?='
    case 806661:                    // String '--' '?='
    case 806662:                    // Integer '--' '?='
    case 806663:                    // Complex '--' '?='
    case 806664:                    // Real '--' '?='
    case 839427:                    // Identifier '--' ']'
    case 839428:                    // Character '--' ']'
    case 839429:                    // String '--' ']'
    case 839430:                    // Integer '--' ']'
    case 839431:                    // Complex '--' ']'
    case 839432:                    // Real '--' ']'
    case 855811:                    // Identifier '--' '^'
    case 855812:                    // Character '--' '^'
    case 855813:                    // String '--' '^'
    case 855814:                    // Integer '--' '^'
    case 855815:                    // Complex '--' '^'
    case 855816:                    // Real '--' '^'
    case 872195:                    // Identifier '--' '^='
    case 872196:                    // Character '--' '^='
    case 872197:                    // String '--' '^='
    case 872198:                    // Integer '--' '^='
    case 872199:                    // Complex '--' '^='
    case 872200:                    // Real '--' '^='
    case 888579:                    // Identifier '--' 'break'
    case 888580:                    // Character '--' 'break'
    case 888581:                    // String '--' 'break'
    case 888582:                    // Integer '--' 'break'
    case 888583:                    // Complex '--' 'break'
    case 888584:                    // Real '--' 'break'
    case 904963:                    // Identifier '--' 'case'
    case 904964:                    // Character '--' 'case'
    case 904965:                    // String '--' 'case'
    case 904966:                    // Integer '--' 'case'
    case 904967:                    // Complex '--' 'case'
    case 904968:                    // Real '--' 'case'
    case 921347:                    // Identifier '--' 'catch'
    case 921348:                    // Character '--' 'catch'
    case 921349:                    // String '--' 'catch'
    case 921350:                    // Integer '--' 'catch'
    case 921351:                    // Complex '--' 'catch'
    case 921352:                    // Real '--' 'catch'
    case 937731:                    // Identifier '--' 'continue'
    case 937732:                    // Character '--' 'continue'
    case 937733:                    // String '--' 'continue'
    case 937734:                    // Integer '--' 'continue'
    case 937735:                    // Complex '--' 'continue'
    case 937736:                    // Real '--' 'continue'
    case 954115:                    // Identifier '--' 'default'
    case 954116:                    // Character '--' 'default'
    case 954117:                    // String '--' 'default'
    case 954118:                    // Integer '--' 'default'
    case 954119:                    // Complex '--' 'default'
    case 954120:                    // Real '--' 'default'
    case 970499:                    // Identifier '--' 'do'
    case 970500:                    // Character '--' 'do'
    case 970501:                    // String '--' 'do'
    case 970502:                    // Integer '--' 'do'
    case 970503:                    // Complex '--' 'do'
    case 970504:                    // Real '--' 'do'
    case 986883:                    // Identifier '--' 'else'
    case 986884:                    // Character '--' 'else'
    case 986885:                    // String '--' 'else'
    case 986886:                    // Integer '--' 'else'
    case 986887:                    // Complex '--' 'else'
    case 986888:                    // Real '--' 'else'
    case 1036035:                   // Identifier '--' 'for'
    case 1036036:                   // Character '--' 'for'
    case 1036037:                   // String '--' 'for'
    case 1036038:                   // Integer '--' 'for'
    case 1036039:                   // Complex '--' 'for'
    case 1036040:                   // Real '--' 'for'
    case 1052419:                   // Identifier '--' 'foreach'
    case 1052420:                   // Character '--' 'foreach'
    case 1052421:                   // String '--' 'foreach'
    case 1052422:                   // Integer '--' 'foreach'
    case 1052423:                   // Complex '--' 'foreach'
    case 1052424:                   // Real '--' 'foreach'
    case 1068803:                   // Identifier '--' 'global'
    case 1068804:                   // Character '--' 'global'
    case 1068805:                   // String '--' 'global'
    case 1068806:                   // Integer '--' 'global'
    case 1068807:                   // Complex '--' 'global'
    case 1068808:                   // Real '--' 'global'
    case 1117955:                   // Identifier '--' 'if'
    case 1117956:                   // Character '--' 'if'
    case 1117957:                   // String '--' 'if'
    case 1117958:                   // Integer '--' 'if'
    case 1117959:                   // Complex '--' 'if'
    case 1117960:                   // Real '--' 'if'
    case 1134339:                   // Identifier '--' 'import'
    case 1134340:                   // Character '--' 'import'
    case 1134341:                   // String '--' 'import'
    case 1134342:                   // Integer '--' 'import'
    case 1134343:                   // Complex '--' 'import'
    case 1134344:                   // Real '--' 'import'
    case 1150723:                   // Identifier '--' 'include'
    case 1150724:                   // Character '--' 'include'
    case 1150725:                   // String '--' 'include'
    case 1150726:                   // Integer '--' 'include'
    case 1150727:                   // Complex '--' 'include'
    case 1150728:                   // Real '--' 'include'
    case 1167107:                   // Identifier '--' 'local'
    case 1167108:                   // Character '--' 'local'
    case 1167109:                   // String '--' 'local'
    case 1167110:                   // Integer '--' 'local'
    case 1167111:                   // Complex '--' 'local'
    case 1167112:                   // Real '--' 'local'
    case 1183491:                   // Identifier '--' 'return'
    case 1183492:                   // Character '--' 'return'
    case 1183493:                   // String '--' 'return'
    case 1183494:                   // Integer '--' 'return'
    case 1183495:                   // Complex '--' 'return'
    case 1183496:                   // Real '--' 'return'
    case 1199875:                   // Identifier '--' 'switch'
    case 1199876:                   // Character '--' 'switch'
    case 1199877:                   // String '--' 'switch'
    case 1199878:                   // Integer '--' 'switch'
    case 1199879:                   // Complex '--' 'switch'
    case 1199880:                   // Real '--' 'switch'
    case 1216259:                   // Identifier '--' 'test'
    case 1216260:                   // Character '--' 'test'
    case 1216261:                   // String '--' 'test'
    case 1216262:                   // Integer '--' 'test'
    case 1216263:                   // Complex '--' 'test'
    case 1216264:                   // Real '--' 'test'
    case 1232643:                   // Identifier '--' 'throw'
    case 1232644:                   // Character '--' 'throw'
    case 1232645:                   // String '--' 'throw'
    case 1232646:                   // Integer '--' 'throw'
    case 1232647:                   // Complex '--' 'throw'
    case 1232648:                   // Real '--' 'throw'
    case 1249027:                   // Identifier '--' 'try'
    case 1249028:                   // Character '--' 'try'
    case 1249029:                   // String '--' 'try'
    case 1249030:                   // Integer '--' 'try'
    case 1249031:                   // Complex '--' 'try'
    case 1249032:                   // Real '--' 'try'
    case 1265411:                   // Identifier '--' 'while'
    case 1265412:                   // Character '--' 'while'
    case 1265413:                   // String '--' 'while'
    case 1265414:                   // Integer '--' 'while'
    case 1265415:                   // Complex '--' 'while'
    case 1265416:                   // Real '--' 'while'
    case 1298179:                   // Identifier '--' '|'
    case 1298180:                   // Character '--' '|'
    case 1298181:                   // String '--' '|'
    case 1298182:                   // Integer '--' '|'
    case 1298183:                   // Complex '--' '|'
    case 1298184:                   // Real '--' '|'
    case 1314563:                   // Identifier '--' '|='
    case 1314564:                   // Character '--' '|='
    case 1314565:                   // String '--' '|='
    case 1314566:                   // Integer '--' '|='
    case 1314567:                   // Complex '--' '|='
    case 1314568:                   // Real '--' '|='
    case 1330947:                   // Identifier '--' '||'
    case 1330948:                   // Character '--' '||'
    case 1330949:                   // String '--' '||'
    case 1330950:                   // Integer '--' '||'
    case 1330951:                   // Complex '--' '||'
    case 1330952:                   // Real '--' '||'
    case 1347331:                   // Identifier '--' '}'
    case 1347332:                   // Character '--' '}'
    case 1347333:                   // String '--' '}'
    case 1347334:                   // Integer '--' '}'
    case 1347335:                   // Complex '--' '}'
    case 1347336:                   // Real '--' '}'
    case 1363715:                   // Identifier '--' '~'
    case 1363716:                   // Character '--' '~'
    case 1363717:                   // String '--' '~'
    case 1363718:                   // Integer '--' '~'
    case 1363719:                   // Complex '--' '~'
    case 1363720:                   // Real '--' '~'
      parse_Primary();
      lookahead1W(6);               // WhiteSpace^token | '--'
      consume(30);                  // '--'
      break;
    case 26:                        // '++'
      consume(26);                  // '++'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 30:                        // '--'
      consume(30);                  // '--'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 25:                        // '+'
      consume(25);                  // '+'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 29:                        // '-'
      consume(29);                  // '-'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 83:                        // '~'
      consume(83);                  // '~'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    case 12:                        // '!'
      consume(12);                  // '!'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      whitespace();
      parse_Primary();
      break;
    default:
      parse_Primary();
    }
    eventHandler.endNonterminal("UnaryExpression", e0);
  }

  function try_UnaryExpression()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 6403:                    // Identifier '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 3331:                    // Identifier '++'
      case 3843:                    // Identifier '--'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    case 20:                        // '('
      lookahead2W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 404:                     // '(' Identifier
        lookahead3W(37);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' | '*' |
                                    // '**' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' |
                                    // '[' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 6420:                    // '(' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10004:                   // '(' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1172:                    // '(' Comment
      case 4756:                    // '(' ';'
      case 6932:                    // '(' 'break'
      case 7316:                    // '(' 'continue'
        lookahead3W(4);             // WhiteSpace^token | ')'
        break;
      case 7828:                    // '(' 'f32'
      case 7956:                    // '(' 'f64'
      case 8468:                    // '(' 'i32'
      case 8596:                    // '(' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 532:                     // '(' Character
      case 660:                     // '(' String
      case 788:                     // '(' Integer
      case 916:                     // '(' Complex
      case 1044:                    // '(' Real
        lookahead3W(24);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | ')' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||'
        break;
      case 1556:                    // '(' '!'
      case 3220:                    // '(' '+'
      case 3348:                    // '(' '++'
      case 3732:                    // '(' '-'
      case 3860:                    // '(' '--'
      case 10644:                   // '(' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8084:                    // '(' 'for'
      case 8212:                    // '(' 'foreach'
      case 8724:                    // '(' 'if'
      case 9364:                    // '(' 'switch'
      case 9492:                    // '(' 'test'
      case 9876:                    // '(' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2580:                    // '(' '('
      case 7572:                    // '(' 'do'
      case 8340:                    // '(' 'global'
      case 8852:                    // '(' 'import'
      case 8980:                    // '(' 'include'
      case 9108:                    // '(' 'local'
      case 9236:                    // '(' 'return'
      case 9620:                    // '(' 'throw'
      case 9748:                    // '(' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 50:                        // '['
      lookahead2W(29);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 434:                     // '[' Identifier
        lookahead3W(39);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
        break;
      case 4786:                    // '[' ';'
        lookahead3W(34);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 6450:                    // '[' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 6578:                    // '[' ']'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 10034:                   // '[' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1202:                    // '[' Comment
      case 6962:                    // '[' 'break'
      case 7346:                    // '[' 'continue'
        lookahead3W(21);            // WhiteSpace^token | ',' | ';' | ']'
        break;
      case 7858:                    // '[' 'f32'
      case 7986:                    // '[' 'f64'
      case 8498:                    // '[' 'i32'
      case 8626:                    // '[' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 562:                     // '[' Character
      case 690:                     // '[' String
      case 818:                     // '[' Integer
      case 946:                     // '[' Complex
      case 1074:                    // '[' Real
        lookahead3W(32);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
        break;
      case 1586:                    // '[' '!'
      case 3250:                    // '[' '+'
      case 3378:                    // '[' '++'
      case 3762:                    // '[' '-'
      case 3890:                    // '[' '--'
      case 10674:                   // '[' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8114:                    // '[' 'for'
      case 8242:                    // '[' 'foreach'
      case 8754:                    // '[' 'if'
      case 9394:                    // '[' 'switch'
      case 9522:                    // '[' 'test'
      case 9906:                    // '[' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2610:                    // '[' '('
      case 7602:                    // '[' 'do'
      case 8370:                    // '[' 'global'
      case 8882:                    // '[' 'import'
      case 9010:                    // '[' 'include'
      case 9138:                    // '[' 'local'
      case 9266:                    // '[' 'return'
      case 9650:                    // '[' 'throw'
      case 9778:                    // '[' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 78:                        // '{'
      lookahead2W(35);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
      switch (lk)
      {
      case 462:                     // '{' Identifier
        lookahead3W(38);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
        break;
      case 718:                     // '{' String
        lookahead3W(31);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
        break;
      case 6478:                    // '{' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10062:                   // '{' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 10574:                   // '{' '}'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 590:                     // '{' Character
      case 846:                     // '{' Integer
      case 974:                     // '{' Complex
      case 1102:                    // '{' Real
        lookahead3W(26);            // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | '<' | '<<' |
                                    // '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' | '^=' |
                                    // '|' | '|=' | '||' | '}'
        break;
      case 1230:                    // '{' Comment
      case 4814:                    // '{' ';'
      case 6990:                    // '{' 'break'
      case 7374:                    // '{' 'continue'
        lookahead3W(17);            // WhiteSpace^token | ',' | '}'
        break;
      case 7886:                    // '{' 'f32'
      case 8014:                    // '{' 'f64'
      case 8526:                    // '{' 'i32'
      case 8654:                    // '{' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 1614:                    // '{' '!'
      case 3278:                    // '{' '+'
      case 3406:                    // '{' '++'
      case 3790:                    // '{' '-'
      case 3918:                    // '{' '--'
      case 10702:                   // '{' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8142:                    // '{' 'for'
      case 8270:                    // '{' 'foreach'
      case 8782:                    // '{' 'if'
      case 9422:                    // '{' 'switch'
      case 9550:                    // '{' 'test'
      case 9934:                    // '{' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2638:                    // '{' '('
      case 3662:                    // '{' ','
      case 7630:                    // '{' 'do'
      case 8398:                    // '{' 'global'
      case 8910:                    // '{' 'import'
      case 9038:                    // '{' 'include'
      case 9166:                    // '{' 'local'
      case 9294:                    // '{' 'return'
      case 9678:                    // '{' 'throw'
      case 9806:                    // '{' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 445:                     // 'f32' Identifier
      case 446:                     // 'f64' Identifier
      case 450:                     // 'i32' Identifier
      case 451:                     // 'i64' Identifier
        lookahead3W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    case 4:                         // Character
    case 5:                         // String
    case 6:                         // Integer
    case 7:                         // Complex
    case 8:                         // Real
      lookahead2W(44);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 3332:                    // Character '++'
      case 3844:                    // Character '--'
      case 3333:                    // String '++'
      case 3845:                    // String '--'
      case 3334:                    // Integer '++'
      case 3846:                    // Integer '--'
      case 3335:                    // Complex '++'
      case 3847:                    // Complex '--'
      case 3336:                    // Real '++'
      case 3848:                    // Real '--'
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 12                    // '!'
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 83                    // '~'
     && lk != 131                   // Identifier END
     && lk != 132                   // Character END
     && lk != 133                   // String END
     && lk != 134                   // Integer END
     && lk != 135                   // Complex END
     && lk != 136                   // Real END
     && lk != 387                   // Identifier Identifier
     && lk != 388                   // Character Identifier
     && lk != 389                   // String Identifier
     && lk != 390                   // Integer Identifier
     && lk != 391                   // Complex Identifier
     && lk != 392                   // Real Identifier
     && lk != 515                   // Identifier Character
     && lk != 516                   // Character Character
     && lk != 517                   // String Character
     && lk != 518                   // Integer Character
     && lk != 519                   // Complex Character
     && lk != 520                   // Real Character
     && lk != 643                   // Identifier String
     && lk != 644                   // Character String
     && lk != 645                   // String String
     && lk != 646                   // Integer String
     && lk != 647                   // Complex String
     && lk != 648                   // Real String
     && lk != 771                   // Identifier Integer
     && lk != 772                   // Character Integer
     && lk != 773                   // String Integer
     && lk != 774                   // Integer Integer
     && lk != 775                   // Complex Integer
     && lk != 776                   // Real Integer
     && lk != 899                   // Identifier Complex
     && lk != 900                   // Character Complex
     && lk != 901                   // String Complex
     && lk != 902                   // Integer Complex
     && lk != 903                   // Complex Complex
     && lk != 904                   // Real Complex
     && lk != 1027                  // Identifier Real
     && lk != 1028                  // Character Real
     && lk != 1029                  // String Real
     && lk != 1030                  // Integer Real
     && lk != 1031                  // Complex Real
     && lk != 1032                  // Real Real
     && lk != 1155                  // Identifier Comment
     && lk != 1156                  // Character Comment
     && lk != 1157                  // String Comment
     && lk != 1158                  // Integer Comment
     && lk != 1159                  // Complex Comment
     && lk != 1160                  // Real Comment
     && lk != 1539                  // Identifier '!'
     && lk != 1540                  // Character '!'
     && lk != 1541                  // String '!'
     && lk != 1542                  // Integer '!'
     && lk != 1543                  // Complex '!'
     && lk != 1544                  // Real '!'
     && lk != 1667                  // Identifier '!='
     && lk != 1668                  // Character '!='
     && lk != 1669                  // String '!='
     && lk != 1670                  // Integer '!='
     && lk != 1671                  // Complex '!='
     && lk != 1672                  // Real '!='
     && lk != 1923                  // Identifier '%'
     && lk != 1924                  // Character '%'
     && lk != 1925                  // String '%'
     && lk != 1926                  // Integer '%'
     && lk != 1927                  // Complex '%'
     && lk != 1928                  // Real '%'
     && lk != 2051                  // Identifier '%='
     && lk != 2052                  // Character '%='
     && lk != 2053                  // String '%='
     && lk != 2054                  // Integer '%='
     && lk != 2055                  // Complex '%='
     && lk != 2056                  // Real '%='
     && lk != 2179                  // Identifier '&'
     && lk != 2180                  // Character '&'
     && lk != 2181                  // String '&'
     && lk != 2182                  // Integer '&'
     && lk != 2183                  // Complex '&'
     && lk != 2184                  // Real '&'
     && lk != 2307                  // Identifier '&&'
     && lk != 2308                  // Character '&&'
     && lk != 2309                  // String '&&'
     && lk != 2310                  // Integer '&&'
     && lk != 2311                  // Complex '&&'
     && lk != 2312                  // Real '&&'
     && lk != 2435                  // Identifier '&='
     && lk != 2436                  // Character '&='
     && lk != 2437                  // String '&='
     && lk != 2438                  // Integer '&='
     && lk != 2439                  // Complex '&='
     && lk != 2440                  // Real '&='
     && lk != 2564                  // Character '('
     && lk != 2565                  // String '('
     && lk != 2566                  // Integer '('
     && lk != 2567                  // Complex '('
     && lk != 2568                  // Real '('
     && lk != 2691                  // Identifier ')'
     && lk != 2692                  // Character ')'
     && lk != 2693                  // String ')'
     && lk != 2694                  // Integer ')'
     && lk != 2695                  // Complex ')'
     && lk != 2696                  // Real ')'
     && lk != 2819                  // Identifier '*'
     && lk != 2820                  // Character '*'
     && lk != 2821                  // String '*'
     && lk != 2822                  // Integer '*'
     && lk != 2823                  // Complex '*'
     && lk != 2824                  // Real '*'
     && lk != 2947                  // Identifier '**'
     && lk != 2948                  // Character '**'
     && lk != 2949                  // String '**'
     && lk != 2950                  // Integer '**'
     && lk != 2951                  // Complex '**'
     && lk != 2952                  // Real '**'
     && lk != 3075                  // Identifier '*='
     && lk != 3076                  // Character '*='
     && lk != 3077                  // String '*='
     && lk != 3078                  // Integer '*='
     && lk != 3079                  // Complex '*='
     && lk != 3080                  // Real '*='
     && lk != 3203                  // Identifier '+'
     && lk != 3204                  // Character '+'
     && lk != 3205                  // String '+'
     && lk != 3206                  // Integer '+'
     && lk != 3207                  // Complex '+'
     && lk != 3208                  // Real '+'
     && lk != 3459                  // Identifier '+='
     && lk != 3460                  // Character '+='
     && lk != 3461                  // String '+='
     && lk != 3462                  // Integer '+='
     && lk != 3463                  // Complex '+='
     && lk != 3464                  // Real '+='
     && lk != 3587                  // Identifier ','
     && lk != 3588                  // Character ','
     && lk != 3589                  // String ','
     && lk != 3590                  // Integer ','
     && lk != 3591                  // Complex ','
     && lk != 3592                  // Real ','
     && lk != 3715                  // Identifier '-'
     && lk != 3716                  // Character '-'
     && lk != 3717                  // String '-'
     && lk != 3718                  // Integer '-'
     && lk != 3719                  // Complex '-'
     && lk != 3720                  // Real '-'
     && lk != 3971                  // Identifier '-='
     && lk != 3972                  // Character '-='
     && lk != 3973                  // String '-='
     && lk != 3974                  // Integer '-='
     && lk != 3975                  // Complex '-='
     && lk != 3976                  // Real '-='
     && lk != 4227                  // Identifier '/'
     && lk != 4228                  // Character '/'
     && lk != 4229                  // String '/'
     && lk != 4230                  // Integer '/'
     && lk != 4231                  // Complex '/'
     && lk != 4232                  // Real '/'
     && lk != 4355                  // Identifier '/='
     && lk != 4356                  // Character '/='
     && lk != 4357                  // String '/='
     && lk != 4358                  // Integer '/='
     && lk != 4359                  // Complex '/='
     && lk != 4360                  // Real '/='
     && lk != 4483                  // Identifier ':'
     && lk != 4484                  // Character ':'
     && lk != 4485                  // String ':'
     && lk != 4486                  // Integer ':'
     && lk != 4487                  // Complex ':'
     && lk != 4488                  // Real ':'
     && lk != 4611                  // Identifier ':='
     && lk != 4612                  // Character ':='
     && lk != 4613                  // String ':='
     && lk != 4614                  // Integer ':='
     && lk != 4615                  // Complex ':='
     && lk != 4616                  // Real ':='
     && lk != 4739                  // Identifier ';'
     && lk != 4740                  // Character ';'
     && lk != 4741                  // String ';'
     && lk != 4742                  // Integer ';'
     && lk != 4743                  // Complex ';'
     && lk != 4744                  // Real ';'
     && lk != 4867                  // Identifier '<'
     && lk != 4868                  // Character '<'
     && lk != 4869                  // String '<'
     && lk != 4870                  // Integer '<'
     && lk != 4871                  // Complex '<'
     && lk != 4872                  // Real '<'
     && lk != 4995                  // Identifier '<<'
     && lk != 4996                  // Character '<<'
     && lk != 4997                  // String '<<'
     && lk != 4998                  // Integer '<<'
     && lk != 4999                  // Complex '<<'
     && lk != 5000                  // Real '<<'
     && lk != 5123                  // Identifier '<<='
     && lk != 5124                  // Character '<<='
     && lk != 5125                  // String '<<='
     && lk != 5126                  // Integer '<<='
     && lk != 5127                  // Complex '<<='
     && lk != 5128                  // Real '<<='
     && lk != 5251                  // Identifier '<='
     && lk != 5252                  // Character '<='
     && lk != 5253                  // String '<='
     && lk != 5254                  // Integer '<='
     && lk != 5255                  // Complex '<='
     && lk != 5256                  // Real '<='
     && lk != 5379                  // Identifier '='
     && lk != 5380                  // Character '='
     && lk != 5381                  // String '='
     && lk != 5382                  // Integer '='
     && lk != 5383                  // Complex '='
     && lk != 5384                  // Real '='
     && lk != 5507                  // Identifier '=='
     && lk != 5508                  // Character '=='
     && lk != 5509                  // String '=='
     && lk != 5510                  // Integer '=='
     && lk != 5511                  // Complex '=='
     && lk != 5512                  // Real '=='
     && lk != 5635                  // Identifier '>'
     && lk != 5636                  // Character '>'
     && lk != 5637                  // String '>'
     && lk != 5638                  // Integer '>'
     && lk != 5639                  // Complex '>'
     && lk != 5640                  // Real '>'
     && lk != 5763                  // Identifier '>='
     && lk != 5764                  // Character '>='
     && lk != 5765                  // String '>='
     && lk != 5766                  // Integer '>='
     && lk != 5767                  // Complex '>='
     && lk != 5768                  // Real '>='
     && lk != 5891                  // Identifier '>>'
     && lk != 5892                  // Character '>>'
     && lk != 5893                  // String '>>'
     && lk != 5894                  // Integer '>>'
     && lk != 5895                  // Complex '>>'
     && lk != 5896                  // Real '>>'
     && lk != 6019                  // Identifier '>>='
     && lk != 6020                  // Character '>>='
     && lk != 6021                  // String '>>='
     && lk != 6022                  // Integer '>>='
     && lk != 6023                  // Complex '>>='
     && lk != 6024                  // Real '>>='
     && lk != 6147                  // Identifier '?'
     && lk != 6148                  // Character '?'
     && lk != 6149                  // String '?'
     && lk != 6150                  // Integer '?'
     && lk != 6151                  // Complex '?'
     && lk != 6152                  // Real '?'
     && lk != 6275                  // Identifier '?='
     && lk != 6276                  // Character '?='
     && lk != 6277                  // String '?='
     && lk != 6278                  // Integer '?='
     && lk != 6279                  // Complex '?='
     && lk != 6280                  // Real '?='
     && lk != 6404                  // Character '['
     && lk != 6405                  // String '['
     && lk != 6406                  // Integer '['
     && lk != 6407                  // Complex '['
     && lk != 6408                  // Real '['
     && lk != 6531                  // Identifier ']'
     && lk != 6532                  // Character ']'
     && lk != 6533                  // String ']'
     && lk != 6534                  // Integer ']'
     && lk != 6535                  // Complex ']'
     && lk != 6536                  // Real ']'
     && lk != 6659                  // Identifier '^'
     && lk != 6660                  // Character '^'
     && lk != 6661                  // String '^'
     && lk != 6662                  // Integer '^'
     && lk != 6663                  // Complex '^'
     && lk != 6664                  // Real '^'
     && lk != 6787                  // Identifier '^='
     && lk != 6788                  // Character '^='
     && lk != 6789                  // String '^='
     && lk != 6790                  // Integer '^='
     && lk != 6791                  // Complex '^='
     && lk != 6792                  // Real '^='
     && lk != 6915                  // Identifier 'break'
     && lk != 6916                  // Character 'break'
     && lk != 6917                  // String 'break'
     && lk != 6918                  // Integer 'break'
     && lk != 6919                  // Complex 'break'
     && lk != 6920                  // Real 'break'
     && lk != 7043                  // Identifier 'case'
     && lk != 7044                  // Character 'case'
     && lk != 7045                  // String 'case'
     && lk != 7046                  // Integer 'case'
     && lk != 7047                  // Complex 'case'
     && lk != 7048                  // Real 'case'
     && lk != 7171                  // Identifier 'catch'
     && lk != 7172                  // Character 'catch'
     && lk != 7173                  // String 'catch'
     && lk != 7174                  // Integer 'catch'
     && lk != 7175                  // Complex 'catch'
     && lk != 7176                  // Real 'catch'
     && lk != 7299                  // Identifier 'continue'
     && lk != 7300                  // Character 'continue'
     && lk != 7301                  // String 'continue'
     && lk != 7302                  // Integer 'continue'
     && lk != 7303                  // Complex 'continue'
     && lk != 7304                  // Real 'continue'
     && lk != 7427                  // Identifier 'default'
     && lk != 7428                  // Character 'default'
     && lk != 7429                  // String 'default'
     && lk != 7430                  // Integer 'default'
     && lk != 7431                  // Complex 'default'
     && lk != 7432                  // Real 'default'
     && lk != 7555                  // Identifier 'do'
     && lk != 7556                  // Character 'do'
     && lk != 7557                  // String 'do'
     && lk != 7558                  // Integer 'do'
     && lk != 7559                  // Complex 'do'
     && lk != 7560                  // Real 'do'
     && lk != 7683                  // Identifier 'else'
     && lk != 7684                  // Character 'else'
     && lk != 7685                  // String 'else'
     && lk != 7686                  // Integer 'else'
     && lk != 7687                  // Complex 'else'
     && lk != 7688                  // Real 'else'
     && lk != 7811                  // Identifier 'f32'
     && lk != 7812                  // Character 'f32'
     && lk != 7813                  // String 'f32'
     && lk != 7814                  // Integer 'f32'
     && lk != 7815                  // Complex 'f32'
     && lk != 7816                  // Real 'f32'
     && lk != 7939                  // Identifier 'f64'
     && lk != 7940                  // Character 'f64'
     && lk != 7941                  // String 'f64'
     && lk != 7942                  // Integer 'f64'
     && lk != 7943                  // Complex 'f64'
     && lk != 7944                  // Real 'f64'
     && lk != 8067                  // Identifier 'for'
     && lk != 8068                  // Character 'for'
     && lk != 8069                  // String 'for'
     && lk != 8070                  // Integer 'for'
     && lk != 8071                  // Complex 'for'
     && lk != 8072                  // Real 'for'
     && lk != 8195                  // Identifier 'foreach'
     && lk != 8196                  // Character 'foreach'
     && lk != 8197                  // String 'foreach'
     && lk != 8198                  // Integer 'foreach'
     && lk != 8199                  // Complex 'foreach'
     && lk != 8200                  // Real 'foreach'
     && lk != 8323                  // Identifier 'global'
     && lk != 8324                  // Character 'global'
     && lk != 8325                  // String 'global'
     && lk != 8326                  // Integer 'global'
     && lk != 8327                  // Complex 'global'
     && lk != 8328                  // Real 'global'
     && lk != 8451                  // Identifier 'i32'
     && lk != 8452                  // Character 'i32'
     && lk != 8453                  // String 'i32'
     && lk != 8454                  // Integer 'i32'
     && lk != 8455                  // Complex 'i32'
     && lk != 8456                  // Real 'i32'
     && lk != 8579                  // Identifier 'i64'
     && lk != 8580                  // Character 'i64'
     && lk != 8581                  // String 'i64'
     && lk != 8582                  // Integer 'i64'
     && lk != 8583                  // Complex 'i64'
     && lk != 8584                  // Real 'i64'
     && lk != 8707                  // Identifier 'if'
     && lk != 8708                  // Character 'if'
     && lk != 8709                  // String 'if'
     && lk != 8710                  // Integer 'if'
     && lk != 8711                  // Complex 'if'
     && lk != 8712                  // Real 'if'
     && lk != 8835                  // Identifier 'import'
     && lk != 8836                  // Character 'import'
     && lk != 8837                  // String 'import'
     && lk != 8838                  // Integer 'import'
     && lk != 8839                  // Complex 'import'
     && lk != 8840                  // Real 'import'
     && lk != 8963                  // Identifier 'include'
     && lk != 8964                  // Character 'include'
     && lk != 8965                  // String 'include'
     && lk != 8966                  // Integer 'include'
     && lk != 8967                  // Complex 'include'
     && lk != 8968                  // Real 'include'
     && lk != 9091                  // Identifier 'local'
     && lk != 9092                  // Character 'local'
     && lk != 9093                  // String 'local'
     && lk != 9094                  // Integer 'local'
     && lk != 9095                  // Complex 'local'
     && lk != 9096                  // Real 'local'
     && lk != 9219                  // Identifier 'return'
     && lk != 9220                  // Character 'return'
     && lk != 9221                  // String 'return'
     && lk != 9222                  // Integer 'return'
     && lk != 9223                  // Complex 'return'
     && lk != 9224                  // Real 'return'
     && lk != 9347                  // Identifier 'switch'
     && lk != 9348                  // Character 'switch'
     && lk != 9349                  // String 'switch'
     && lk != 9350                  // Integer 'switch'
     && lk != 9351                  // Complex 'switch'
     && lk != 9352                  // Real 'switch'
     && lk != 9475                  // Identifier 'test'
     && lk != 9476                  // Character 'test'
     && lk != 9477                  // String 'test'
     && lk != 9478                  // Integer 'test'
     && lk != 9479                  // Complex 'test'
     && lk != 9480                  // Real 'test'
     && lk != 9603                  // Identifier 'throw'
     && lk != 9604                  // Character 'throw'
     && lk != 9605                  // String 'throw'
     && lk != 9606                  // Integer 'throw'
     && lk != 9607                  // Complex 'throw'
     && lk != 9608                  // Real 'throw'
     && lk != 9731                  // Identifier 'try'
     && lk != 9732                  // Character 'try'
     && lk != 9733                  // String 'try'
     && lk != 9734                  // Integer 'try'
     && lk != 9735                  // Complex 'try'
     && lk != 9736                  // Real 'try'
     && lk != 9859                  // Identifier 'while'
     && lk != 9860                  // Character 'while'
     && lk != 9861                  // String 'while'
     && lk != 9862                  // Integer 'while'
     && lk != 9863                  // Complex 'while'
     && lk != 9864                  // Real 'while'
     && lk != 9987                  // Identifier '{'
     && lk != 9988                  // Character '{'
     && lk != 9989                  // String '{'
     && lk != 9990                  // Integer '{'
     && lk != 9991                  // Complex '{'
     && lk != 9992                  // Real '{'
     && lk != 10115                 // Identifier '|'
     && lk != 10116                 // Character '|'
     && lk != 10117                 // String '|'
     && lk != 10118                 // Integer '|'
     && lk != 10119                 // Complex '|'
     && lk != 10120                 // Real '|'
     && lk != 10243                 // Identifier '|='
     && lk != 10244                 // Character '|='
     && lk != 10245                 // String '|='
     && lk != 10246                 // Integer '|='
     && lk != 10247                 // Complex '|='
     && lk != 10248                 // Real '|='
     && lk != 10371                 // Identifier '||'
     && lk != 10372                 // Character '||'
     && lk != 10373                 // String '||'
     && lk != 10374                 // Integer '||'
     && lk != 10375                 // Complex '||'
     && lk != 10376                 // Real '||'
     && lk != 10499                 // Identifier '}'
     && lk != 10500                 // Character '}'
     && lk != 10501                 // String '}'
     && lk != 10502                 // Integer '}'
     && lk != 10503                 // Complex '}'
     && lk != 10504                 // Real '}'
     && lk != 10627                 // Identifier '~'
     && lk != 10628                 // Character '~'
     && lk != 10629                 // String '~'
     && lk != 10630                 // Integer '~'
     && lk != 10631                 // Complex '~'
     && lk != 10632                 // Real '~'
     && lk != 16829                 // 'f32' Identifier END
     && lk != 16830                 // 'f64' Identifier END
     && lk != 16834                 // 'i32' Identifier END
     && lk != 16835                 // 'i64' Identifier END
     && lk != 19715                 // Identifier '++' END
     && lk != 19716                 // Character '++' END
     && lk != 19717                 // String '++' END
     && lk != 19718                 // Integer '++' END
     && lk != 19719                 // Complex '++' END
     && lk != 19720                 // Real '++' END
     && lk != 20227                 // Identifier '--' END
     && lk != 20228                 // Character '--' END
     && lk != 20229                 // String '--' END
     && lk != 20230                 // Integer '--' END
     && lk != 20231                 // Complex '--' END
     && lk != 20232                 // Real '--' END
     && lk != 22962                 // '[' ']' END
     && lk != 26958                 // '{' '}' END
     && lk != 49597                 // 'f32' Identifier Identifier
     && lk != 49598                 // 'f64' Identifier Identifier
     && lk != 49602                 // 'i32' Identifier Identifier
     && lk != 49603                 // 'i64' Identifier Identifier
     && lk != 55730                 // '[' ']' Identifier
     && lk != 59726                 // '{' '}' Identifier
     && lk != 65981                 // 'f32' Identifier Character
     && lk != 65982                 // 'f64' Identifier Character
     && lk != 65986                 // 'i32' Identifier Character
     && lk != 65987                 // 'i64' Identifier Character
     && lk != 72114                 // '[' ']' Character
     && lk != 76110                 // '{' '}' Character
     && lk != 82365                 // 'f32' Identifier String
     && lk != 82366                 // 'f64' Identifier String
     && lk != 82370                 // 'i32' Identifier String
     && lk != 82371                 // 'i64' Identifier String
     && lk != 88498                 // '[' ']' String
     && lk != 92494                 // '{' '}' String
     && lk != 98749                 // 'f32' Identifier Integer
     && lk != 98750                 // 'f64' Identifier Integer
     && lk != 98754                 // 'i32' Identifier Integer
     && lk != 98755                 // 'i64' Identifier Integer
     && lk != 104882                // '[' ']' Integer
     && lk != 108878                // '{' '}' Integer
     && lk != 115133                // 'f32' Identifier Complex
     && lk != 115134                // 'f64' Identifier Complex
     && lk != 115138                // 'i32' Identifier Complex
     && lk != 115139                // 'i64' Identifier Complex
     && lk != 121266                // '[' ']' Complex
     && lk != 125262                // '{' '}' Complex
     && lk != 131517                // 'f32' Identifier Real
     && lk != 131518                // 'f64' Identifier Real
     && lk != 131522                // 'i32' Identifier Real
     && lk != 131523                // 'i64' Identifier Real
     && lk != 137650                // '[' ']' Real
     && lk != 141646                // '{' '}' Real
     && lk != 147901                // 'f32' Identifier Comment
     && lk != 147902                // 'f64' Identifier Comment
     && lk != 147906                // 'i32' Identifier Comment
     && lk != 147907                // 'i64' Identifier Comment
     && lk != 150787                // Identifier '++' Comment
     && lk != 150788                // Character '++' Comment
     && lk != 150789                // String '++' Comment
     && lk != 150790                // Integer '++' Comment
     && lk != 150791                // Complex '++' Comment
     && lk != 150792                // Real '++' Comment
     && lk != 151299                // Identifier '--' Comment
     && lk != 151300                // Character '--' Comment
     && lk != 151301                // String '--' Comment
     && lk != 151302                // Integer '--' Comment
     && lk != 151303                // Complex '--' Comment
     && lk != 151304                // Real '--' Comment
     && lk != 154034                // '[' ']' Comment
     && lk != 158030                // '{' '}' Comment
     && lk != 197053                // 'f32' Identifier '!'
     && lk != 197054                // 'f64' Identifier '!'
     && lk != 197058                // 'i32' Identifier '!'
     && lk != 197059                // 'i64' Identifier '!'
     && lk != 199939                // Identifier '++' '!'
     && lk != 199940                // Character '++' '!'
     && lk != 199941                // String '++' '!'
     && lk != 199942                // Integer '++' '!'
     && lk != 199943                // Complex '++' '!'
     && lk != 199944                // Real '++' '!'
     && lk != 200451                // Identifier '--' '!'
     && lk != 200452                // Character '--' '!'
     && lk != 200453                // String '--' '!'
     && lk != 200454                // Integer '--' '!'
     && lk != 200455                // Complex '--' '!'
     && lk != 200456                // Real '--' '!'
     && lk != 203186                // '[' ']' '!'
     && lk != 207182                // '{' '}' '!'
     && lk != 213437                // 'f32' Identifier '!='
     && lk != 213438                // 'f64' Identifier '!='
     && lk != 213442                // 'i32' Identifier '!='
     && lk != 213443                // 'i64' Identifier '!='
     && lk != 216323                // Identifier '++' '!='
     && lk != 216324                // Character '++' '!='
     && lk != 216325                // String '++' '!='
     && lk != 216326                // Integer '++' '!='
     && lk != 216327                // Complex '++' '!='
     && lk != 216328                // Real '++' '!='
     && lk != 216835                // Identifier '--' '!='
     && lk != 216836                // Character '--' '!='
     && lk != 216837                // String '--' '!='
     && lk != 216838                // Integer '--' '!='
     && lk != 216839                // Complex '--' '!='
     && lk != 216840                // Real '--' '!='
     && lk != 219570                // '[' ']' '!='
     && lk != 223566                // '{' '}' '!='
     && lk != 246205                // 'f32' Identifier '%'
     && lk != 246206                // 'f64' Identifier '%'
     && lk != 246210                // 'i32' Identifier '%'
     && lk != 246211                // 'i64' Identifier '%'
     && lk != 249091                // Identifier '++' '%'
     && lk != 249092                // Character '++' '%'
     && lk != 249093                // String '++' '%'
     && lk != 249094                // Integer '++' '%'
     && lk != 249095                // Complex '++' '%'
     && lk != 249096                // Real '++' '%'
     && lk != 249603                // Identifier '--' '%'
     && lk != 249604                // Character '--' '%'
     && lk != 249605                // String '--' '%'
     && lk != 249606                // Integer '--' '%'
     && lk != 249607                // Complex '--' '%'
     && lk != 249608                // Real '--' '%'
     && lk != 252338                // '[' ']' '%'
     && lk != 256334                // '{' '}' '%'
     && lk != 262589                // 'f32' Identifier '%='
     && lk != 262590                // 'f64' Identifier '%='
     && lk != 262594                // 'i32' Identifier '%='
     && lk != 262595                // 'i64' Identifier '%='
     && lk != 265475                // Identifier '++' '%='
     && lk != 265476                // Character '++' '%='
     && lk != 265477                // String '++' '%='
     && lk != 265478                // Integer '++' '%='
     && lk != 265479                // Complex '++' '%='
     && lk != 265480                // Real '++' '%='
     && lk != 265987                // Identifier '--' '%='
     && lk != 265988                // Character '--' '%='
     && lk != 265989                // String '--' '%='
     && lk != 265990                // Integer '--' '%='
     && lk != 265991                // Complex '--' '%='
     && lk != 265992                // Real '--' '%='
     && lk != 268722                // '[' ']' '%='
     && lk != 272718                // '{' '}' '%='
     && lk != 278973                // 'f32' Identifier '&'
     && lk != 278974                // 'f64' Identifier '&'
     && lk != 278978                // 'i32' Identifier '&'
     && lk != 278979                // 'i64' Identifier '&'
     && lk != 281859                // Identifier '++' '&'
     && lk != 281860                // Character '++' '&'
     && lk != 281861                // String '++' '&'
     && lk != 281862                // Integer '++' '&'
     && lk != 281863                // Complex '++' '&'
     && lk != 281864                // Real '++' '&'
     && lk != 282371                // Identifier '--' '&'
     && lk != 282372                // Character '--' '&'
     && lk != 282373                // String '--' '&'
     && lk != 282374                // Integer '--' '&'
     && lk != 282375                // Complex '--' '&'
     && lk != 282376                // Real '--' '&'
     && lk != 285106                // '[' ']' '&'
     && lk != 289102                // '{' '}' '&'
     && lk != 295357                // 'f32' Identifier '&&'
     && lk != 295358                // 'f64' Identifier '&&'
     && lk != 295362                // 'i32' Identifier '&&'
     && lk != 295363                // 'i64' Identifier '&&'
     && lk != 298243                // Identifier '++' '&&'
     && lk != 298244                // Character '++' '&&'
     && lk != 298245                // String '++' '&&'
     && lk != 298246                // Integer '++' '&&'
     && lk != 298247                // Complex '++' '&&'
     && lk != 298248                // Real '++' '&&'
     && lk != 298755                // Identifier '--' '&&'
     && lk != 298756                // Character '--' '&&'
     && lk != 298757                // String '--' '&&'
     && lk != 298758                // Integer '--' '&&'
     && lk != 298759                // Complex '--' '&&'
     && lk != 298760                // Real '--' '&&'
     && lk != 301490                // '[' ']' '&&'
     && lk != 305486                // '{' '}' '&&'
     && lk != 311741                // 'f32' Identifier '&='
     && lk != 311742                // 'f64' Identifier '&='
     && lk != 311746                // 'i32' Identifier '&='
     && lk != 311747                // 'i64' Identifier '&='
     && lk != 314627                // Identifier '++' '&='
     && lk != 314628                // Character '++' '&='
     && lk != 314629                // String '++' '&='
     && lk != 314630                // Integer '++' '&='
     && lk != 314631                // Complex '++' '&='
     && lk != 314632                // Real '++' '&='
     && lk != 315139                // Identifier '--' '&='
     && lk != 315140                // Character '--' '&='
     && lk != 315141                // String '--' '&='
     && lk != 315142                // Integer '--' '&='
     && lk != 315143                // Complex '--' '&='
     && lk != 315144                // Real '--' '&='
     && lk != 317874                // '[' ']' '&='
     && lk != 321870                // '{' '}' '&='
     && lk != 334258                // '[' ']' '('
     && lk != 338254                // '{' '}' '('
     && lk != 344509                // 'f32' Identifier ')'
     && lk != 344510                // 'f64' Identifier ')'
     && lk != 344514                // 'i32' Identifier ')'
     && lk != 344515                // 'i64' Identifier ')'
     && lk != 347395                // Identifier '++' ')'
     && lk != 347396                // Character '++' ')'
     && lk != 347397                // String '++' ')'
     && lk != 347398                // Integer '++' ')'
     && lk != 347399                // Complex '++' ')'
     && lk != 347400                // Real '++' ')'
     && lk != 347907                // Identifier '--' ')'
     && lk != 347908                // Character '--' ')'
     && lk != 347909                // String '--' ')'
     && lk != 347910                // Integer '--' ')'
     && lk != 347911                // Complex '--' ')'
     && lk != 347912                // Real '--' ')'
     && lk != 350642                // '[' ']' ')'
     && lk != 354638                // '{' '}' ')'
     && lk != 360893                // 'f32' Identifier '*'
     && lk != 360894                // 'f64' Identifier '*'
     && lk != 360898                // 'i32' Identifier '*'
     && lk != 360899                // 'i64' Identifier '*'
     && lk != 363779                // Identifier '++' '*'
     && lk != 363780                // Character '++' '*'
     && lk != 363781                // String '++' '*'
     && lk != 363782                // Integer '++' '*'
     && lk != 363783                // Complex '++' '*'
     && lk != 363784                // Real '++' '*'
     && lk != 364291                // Identifier '--' '*'
     && lk != 364292                // Character '--' '*'
     && lk != 364293                // String '--' '*'
     && lk != 364294                // Integer '--' '*'
     && lk != 364295                // Complex '--' '*'
     && lk != 364296                // Real '--' '*'
     && lk != 367026                // '[' ']' '*'
     && lk != 371022                // '{' '}' '*'
     && lk != 377277                // 'f32' Identifier '**'
     && lk != 377278                // 'f64' Identifier '**'
     && lk != 377282                // 'i32' Identifier '**'
     && lk != 377283                // 'i64' Identifier '**'
     && lk != 380163                // Identifier '++' '**'
     && lk != 380164                // Character '++' '**'
     && lk != 380165                // String '++' '**'
     && lk != 380166                // Integer '++' '**'
     && lk != 380167                // Complex '++' '**'
     && lk != 380168                // Real '++' '**'
     && lk != 380675                // Identifier '--' '**'
     && lk != 380676                // Character '--' '**'
     && lk != 380677                // String '--' '**'
     && lk != 380678                // Integer '--' '**'
     && lk != 380679                // Complex '--' '**'
     && lk != 380680                // Real '--' '**'
     && lk != 383410                // '[' ']' '**'
     && lk != 387406                // '{' '}' '**'
     && lk != 393661                // 'f32' Identifier '*='
     && lk != 393662                // 'f64' Identifier '*='
     && lk != 393666                // 'i32' Identifier '*='
     && lk != 393667                // 'i64' Identifier '*='
     && lk != 396547                // Identifier '++' '*='
     && lk != 396548                // Character '++' '*='
     && lk != 396549                // String '++' '*='
     && lk != 396550                // Integer '++' '*='
     && lk != 396551                // Complex '++' '*='
     && lk != 396552                // Real '++' '*='
     && lk != 397059                // Identifier '--' '*='
     && lk != 397060                // Character '--' '*='
     && lk != 397061                // String '--' '*='
     && lk != 397062                // Integer '--' '*='
     && lk != 397063                // Complex '--' '*='
     && lk != 397064                // Real '--' '*='
     && lk != 399794                // '[' ']' '*='
     && lk != 403790                // '{' '}' '*='
     && lk != 410045                // 'f32' Identifier '+'
     && lk != 410046                // 'f64' Identifier '+'
     && lk != 410050                // 'i32' Identifier '+'
     && lk != 410051                // 'i64' Identifier '+'
     && lk != 412931                // Identifier '++' '+'
     && lk != 412932                // Character '++' '+'
     && lk != 412933                // String '++' '+'
     && lk != 412934                // Integer '++' '+'
     && lk != 412935                // Complex '++' '+'
     && lk != 412936                // Real '++' '+'
     && lk != 413443                // Identifier '--' '+'
     && lk != 413444                // Character '--' '+'
     && lk != 413445                // String '--' '+'
     && lk != 413446                // Integer '--' '+'
     && lk != 413447                // Complex '--' '+'
     && lk != 413448                // Real '--' '+'
     && lk != 416178                // '[' ']' '+'
     && lk != 420174                // '{' '}' '+'
     && lk != 429315                // Identifier '++' '++'
     && lk != 429316                // Character '++' '++'
     && lk != 429317                // String '++' '++'
     && lk != 429318                // Integer '++' '++'
     && lk != 429319                // Complex '++' '++'
     && lk != 429320                // Real '++' '++'
     && lk != 429827                // Identifier '--' '++'
     && lk != 429828                // Character '--' '++'
     && lk != 429829                // String '--' '++'
     && lk != 429830                // Integer '--' '++'
     && lk != 429831                // Complex '--' '++'
     && lk != 429832                // Real '--' '++'
     && lk != 442813                // 'f32' Identifier '+='
     && lk != 442814                // 'f64' Identifier '+='
     && lk != 442818                // 'i32' Identifier '+='
     && lk != 442819                // 'i64' Identifier '+='
     && lk != 445699                // Identifier '++' '+='
     && lk != 445700                // Character '++' '+='
     && lk != 445701                // String '++' '+='
     && lk != 445702                // Integer '++' '+='
     && lk != 445703                // Complex '++' '+='
     && lk != 445704                // Real '++' '+='
     && lk != 446211                // Identifier '--' '+='
     && lk != 446212                // Character '--' '+='
     && lk != 446213                // String '--' '+='
     && lk != 446214                // Integer '--' '+='
     && lk != 446215                // Complex '--' '+='
     && lk != 446216                // Real '--' '+='
     && lk != 448946                // '[' ']' '+='
     && lk != 452942                // '{' '}' '+='
     && lk != 459197                // 'f32' Identifier ','
     && lk != 459198                // 'f64' Identifier ','
     && lk != 459202                // 'i32' Identifier ','
     && lk != 459203                // 'i64' Identifier ','
     && lk != 462083                // Identifier '++' ','
     && lk != 462084                // Character '++' ','
     && lk != 462085                // String '++' ','
     && lk != 462086                // Integer '++' ','
     && lk != 462087                // Complex '++' ','
     && lk != 462088                // Real '++' ','
     && lk != 462595                // Identifier '--' ','
     && lk != 462596                // Character '--' ','
     && lk != 462597                // String '--' ','
     && lk != 462598                // Integer '--' ','
     && lk != 462599                // Complex '--' ','
     && lk != 462600                // Real '--' ','
     && lk != 465330                // '[' ']' ','
     && lk != 469326                // '{' '}' ','
     && lk != 475581                // 'f32' Identifier '-'
     && lk != 475582                // 'f64' Identifier '-'
     && lk != 475586                // 'i32' Identifier '-'
     && lk != 475587                // 'i64' Identifier '-'
     && lk != 478467                // Identifier '++' '-'
     && lk != 478468                // Character '++' '-'
     && lk != 478469                // String '++' '-'
     && lk != 478470                // Integer '++' '-'
     && lk != 478471                // Complex '++' '-'
     && lk != 478472                // Real '++' '-'
     && lk != 478979                // Identifier '--' '-'
     && lk != 478980                // Character '--' '-'
     && lk != 478981                // String '--' '-'
     && lk != 478982                // Integer '--' '-'
     && lk != 478983                // Complex '--' '-'
     && lk != 478984                // Real '--' '-'
     && lk != 481714                // '[' ']' '-'
     && lk != 485710                // '{' '}' '-'
     && lk != 494851                // Identifier '++' '--'
     && lk != 494852                // Character '++' '--'
     && lk != 494853                // String '++' '--'
     && lk != 494854                // Integer '++' '--'
     && lk != 494855                // Complex '++' '--'
     && lk != 494856                // Real '++' '--'
     && lk != 495363                // Identifier '--' '--'
     && lk != 495364                // Character '--' '--'
     && lk != 495365                // String '--' '--'
     && lk != 495366                // Integer '--' '--'
     && lk != 495367                // Complex '--' '--'
     && lk != 495368                // Real '--' '--'
     && lk != 508349                // 'f32' Identifier '-='
     && lk != 508350                // 'f64' Identifier '-='
     && lk != 508354                // 'i32' Identifier '-='
     && lk != 508355                // 'i64' Identifier '-='
     && lk != 511235                // Identifier '++' '-='
     && lk != 511236                // Character '++' '-='
     && lk != 511237                // String '++' '-='
     && lk != 511238                // Integer '++' '-='
     && lk != 511239                // Complex '++' '-='
     && lk != 511240                // Real '++' '-='
     && lk != 511747                // Identifier '--' '-='
     && lk != 511748                // Character '--' '-='
     && lk != 511749                // String '--' '-='
     && lk != 511750                // Integer '--' '-='
     && lk != 511751                // Complex '--' '-='
     && lk != 511752                // Real '--' '-='
     && lk != 514482                // '[' ']' '-='
     && lk != 518478                // '{' '}' '-='
     && lk != 541117                // 'f32' Identifier '/'
     && lk != 541118                // 'f64' Identifier '/'
     && lk != 541122                // 'i32' Identifier '/'
     && lk != 541123                // 'i64' Identifier '/'
     && lk != 544003                // Identifier '++' '/'
     && lk != 544004                // Character '++' '/'
     && lk != 544005                // String '++' '/'
     && lk != 544006                // Integer '++' '/'
     && lk != 544007                // Complex '++' '/'
     && lk != 544008                // Real '++' '/'
     && lk != 544515                // Identifier '--' '/'
     && lk != 544516                // Character '--' '/'
     && lk != 544517                // String '--' '/'
     && lk != 544518                // Integer '--' '/'
     && lk != 544519                // Complex '--' '/'
     && lk != 544520                // Real '--' '/'
     && lk != 547250                // '[' ']' '/'
     && lk != 551246                // '{' '}' '/'
     && lk != 557501                // 'f32' Identifier '/='
     && lk != 557502                // 'f64' Identifier '/='
     && lk != 557506                // 'i32' Identifier '/='
     && lk != 557507                // 'i64' Identifier '/='
     && lk != 560387                // Identifier '++' '/='
     && lk != 560388                // Character '++' '/='
     && lk != 560389                // String '++' '/='
     && lk != 560390                // Integer '++' '/='
     && lk != 560391                // Complex '++' '/='
     && lk != 560392                // Real '++' '/='
     && lk != 560899                // Identifier '--' '/='
     && lk != 560900                // Character '--' '/='
     && lk != 560901                // String '--' '/='
     && lk != 560902                // Integer '--' '/='
     && lk != 560903                // Complex '--' '/='
     && lk != 560904                // Real '--' '/='
     && lk != 563634                // '[' ']' '/='
     && lk != 567630                // '{' '}' '/='
     && lk != 573885                // 'f32' Identifier ':'
     && lk != 573886                // 'f64' Identifier ':'
     && lk != 573890                // 'i32' Identifier ':'
     && lk != 573891                // 'i64' Identifier ':'
     && lk != 576771                // Identifier '++' ':'
     && lk != 576772                // Character '++' ':'
     && lk != 576773                // String '++' ':'
     && lk != 576774                // Integer '++' ':'
     && lk != 576775                // Complex '++' ':'
     && lk != 576776                // Real '++' ':'
     && lk != 577283                // Identifier '--' ':'
     && lk != 577284                // Character '--' ':'
     && lk != 577285                // String '--' ':'
     && lk != 577286                // Integer '--' ':'
     && lk != 577287                // Complex '--' ':'
     && lk != 577288                // Real '--' ':'
     && lk != 580018                // '[' ']' ':'
     && lk != 584014                // '{' '}' ':'
     && lk != 590269                // 'f32' Identifier ':='
     && lk != 590270                // 'f64' Identifier ':='
     && lk != 590274                // 'i32' Identifier ':='
     && lk != 590275                // 'i64' Identifier ':='
     && lk != 593155                // Identifier '++' ':='
     && lk != 593156                // Character '++' ':='
     && lk != 593157                // String '++' ':='
     && lk != 593158                // Integer '++' ':='
     && lk != 593159                // Complex '++' ':='
     && lk != 593160                // Real '++' ':='
     && lk != 593667                // Identifier '--' ':='
     && lk != 593668                // Character '--' ':='
     && lk != 593669                // String '--' ':='
     && lk != 593670                // Integer '--' ':='
     && lk != 593671                // Complex '--' ':='
     && lk != 593672                // Real '--' ':='
     && lk != 596402                // '[' ']' ':='
     && lk != 600398                // '{' '}' ':='
     && lk != 606653                // 'f32' Identifier ';'
     && lk != 606654                // 'f64' Identifier ';'
     && lk != 606658                // 'i32' Identifier ';'
     && lk != 606659                // 'i64' Identifier ';'
     && lk != 609539                // Identifier '++' ';'
     && lk != 609540                // Character '++' ';'
     && lk != 609541                // String '++' ';'
     && lk != 609542                // Integer '++' ';'
     && lk != 609543                // Complex '++' ';'
     && lk != 609544                // Real '++' ';'
     && lk != 610051                // Identifier '--' ';'
     && lk != 610052                // Character '--' ';'
     && lk != 610053                // String '--' ';'
     && lk != 610054                // Integer '--' ';'
     && lk != 610055                // Complex '--' ';'
     && lk != 610056                // Real '--' ';'
     && lk != 612786                // '[' ']' ';'
     && lk != 616782                // '{' '}' ';'
     && lk != 623037                // 'f32' Identifier '<'
     && lk != 623038                // 'f64' Identifier '<'
     && lk != 623042                // 'i32' Identifier '<'
     && lk != 623043                // 'i64' Identifier '<'
     && lk != 625923                // Identifier '++' '<'
     && lk != 625924                // Character '++' '<'
     && lk != 625925                // String '++' '<'
     && lk != 625926                // Integer '++' '<'
     && lk != 625927                // Complex '++' '<'
     && lk != 625928                // Real '++' '<'
     && lk != 626435                // Identifier '--' '<'
     && lk != 626436                // Character '--' '<'
     && lk != 626437                // String '--' '<'
     && lk != 626438                // Integer '--' '<'
     && lk != 626439                // Complex '--' '<'
     && lk != 626440                // Real '--' '<'
     && lk != 629170                // '[' ']' '<'
     && lk != 633166                // '{' '}' '<'
     && lk != 639421                // 'f32' Identifier '<<'
     && lk != 639422                // 'f64' Identifier '<<'
     && lk != 639426                // 'i32' Identifier '<<'
     && lk != 639427                // 'i64' Identifier '<<'
     && lk != 642307                // Identifier '++' '<<'
     && lk != 642308                // Character '++' '<<'
     && lk != 642309                // String '++' '<<'
     && lk != 642310                // Integer '++' '<<'
     && lk != 642311                // Complex '++' '<<'
     && lk != 642312                // Real '++' '<<'
     && lk != 642819                // Identifier '--' '<<'
     && lk != 642820                // Character '--' '<<'
     && lk != 642821                // String '--' '<<'
     && lk != 642822                // Integer '--' '<<'
     && lk != 642823                // Complex '--' '<<'
     && lk != 642824                // Real '--' '<<'
     && lk != 645554                // '[' ']' '<<'
     && lk != 649550                // '{' '}' '<<'
     && lk != 655805                // 'f32' Identifier '<<='
     && lk != 655806                // 'f64' Identifier '<<='
     && lk != 655810                // 'i32' Identifier '<<='
     && lk != 655811                // 'i64' Identifier '<<='
     && lk != 658691                // Identifier '++' '<<='
     && lk != 658692                // Character '++' '<<='
     && lk != 658693                // String '++' '<<='
     && lk != 658694                // Integer '++' '<<='
     && lk != 658695                // Complex '++' '<<='
     && lk != 658696                // Real '++' '<<='
     && lk != 659203                // Identifier '--' '<<='
     && lk != 659204                // Character '--' '<<='
     && lk != 659205                // String '--' '<<='
     && lk != 659206                // Integer '--' '<<='
     && lk != 659207                // Complex '--' '<<='
     && lk != 659208                // Real '--' '<<='
     && lk != 661938                // '[' ']' '<<='
     && lk != 665934                // '{' '}' '<<='
     && lk != 672189                // 'f32' Identifier '<='
     && lk != 672190                // 'f64' Identifier '<='
     && lk != 672194                // 'i32' Identifier '<='
     && lk != 672195                // 'i64' Identifier '<='
     && lk != 675075                // Identifier '++' '<='
     && lk != 675076                // Character '++' '<='
     && lk != 675077                // String '++' '<='
     && lk != 675078                // Integer '++' '<='
     && lk != 675079                // Complex '++' '<='
     && lk != 675080                // Real '++' '<='
     && lk != 675587                // Identifier '--' '<='
     && lk != 675588                // Character '--' '<='
     && lk != 675589                // String '--' '<='
     && lk != 675590                // Integer '--' '<='
     && lk != 675591                // Complex '--' '<='
     && lk != 675592                // Real '--' '<='
     && lk != 678322                // '[' ']' '<='
     && lk != 682318                // '{' '}' '<='
     && lk != 688573                // 'f32' Identifier '='
     && lk != 688574                // 'f64' Identifier '='
     && lk != 688578                // 'i32' Identifier '='
     && lk != 688579                // 'i64' Identifier '='
     && lk != 691459                // Identifier '++' '='
     && lk != 691460                // Character '++' '='
     && lk != 691461                // String '++' '='
     && lk != 691462                // Integer '++' '='
     && lk != 691463                // Complex '++' '='
     && lk != 691464                // Real '++' '='
     && lk != 691971                // Identifier '--' '='
     && lk != 691972                // Character '--' '='
     && lk != 691973                // String '--' '='
     && lk != 691974                // Integer '--' '='
     && lk != 691975                // Complex '--' '='
     && lk != 691976                // Real '--' '='
     && lk != 694706                // '[' ']' '='
     && lk != 698702                // '{' '}' '='
     && lk != 704957                // 'f32' Identifier '=='
     && lk != 704958                // 'f64' Identifier '=='
     && lk != 704962                // 'i32' Identifier '=='
     && lk != 704963                // 'i64' Identifier '=='
     && lk != 707843                // Identifier '++' '=='
     && lk != 707844                // Character '++' '=='
     && lk != 707845                // String '++' '=='
     && lk != 707846                // Integer '++' '=='
     && lk != 707847                // Complex '++' '=='
     && lk != 707848                // Real '++' '=='
     && lk != 708355                // Identifier '--' '=='
     && lk != 708356                // Character '--' '=='
     && lk != 708357                // String '--' '=='
     && lk != 708358                // Integer '--' '=='
     && lk != 708359                // Complex '--' '=='
     && lk != 708360                // Real '--' '=='
     && lk != 711090                // '[' ']' '=='
     && lk != 715086                // '{' '}' '=='
     && lk != 721341                // 'f32' Identifier '>'
     && lk != 721342                // 'f64' Identifier '>'
     && lk != 721346                // 'i32' Identifier '>'
     && lk != 721347                // 'i64' Identifier '>'
     && lk != 724227                // Identifier '++' '>'
     && lk != 724228                // Character '++' '>'
     && lk != 724229                // String '++' '>'
     && lk != 724230                // Integer '++' '>'
     && lk != 724231                // Complex '++' '>'
     && lk != 724232                // Real '++' '>'
     && lk != 724739                // Identifier '--' '>'
     && lk != 724740                // Character '--' '>'
     && lk != 724741                // String '--' '>'
     && lk != 724742                // Integer '--' '>'
     && lk != 724743                // Complex '--' '>'
     && lk != 724744                // Real '--' '>'
     && lk != 727474                // '[' ']' '>'
     && lk != 731470                // '{' '}' '>'
     && lk != 737725                // 'f32' Identifier '>='
     && lk != 737726                // 'f64' Identifier '>='
     && lk != 737730                // 'i32' Identifier '>='
     && lk != 737731                // 'i64' Identifier '>='
     && lk != 740611                // Identifier '++' '>='
     && lk != 740612                // Character '++' '>='
     && lk != 740613                // String '++' '>='
     && lk != 740614                // Integer '++' '>='
     && lk != 740615                // Complex '++' '>='
     && lk != 740616                // Real '++' '>='
     && lk != 741123                // Identifier '--' '>='
     && lk != 741124                // Character '--' '>='
     && lk != 741125                // String '--' '>='
     && lk != 741126                // Integer '--' '>='
     && lk != 741127                // Complex '--' '>='
     && lk != 741128                // Real '--' '>='
     && lk != 743858                // '[' ']' '>='
     && lk != 747854                // '{' '}' '>='
     && lk != 754109                // 'f32' Identifier '>>'
     && lk != 754110                // 'f64' Identifier '>>'
     && lk != 754114                // 'i32' Identifier '>>'
     && lk != 754115                // 'i64' Identifier '>>'
     && lk != 756995                // Identifier '++' '>>'
     && lk != 756996                // Character '++' '>>'
     && lk != 756997                // String '++' '>>'
     && lk != 756998                // Integer '++' '>>'
     && lk != 756999                // Complex '++' '>>'
     && lk != 757000                // Real '++' '>>'
     && lk != 757507                // Identifier '--' '>>'
     && lk != 757508                // Character '--' '>>'
     && lk != 757509                // String '--' '>>'
     && lk != 757510                // Integer '--' '>>'
     && lk != 757511                // Complex '--' '>>'
     && lk != 757512                // Real '--' '>>'
     && lk != 760242                // '[' ']' '>>'
     && lk != 764238                // '{' '}' '>>'
     && lk != 770493                // 'f32' Identifier '>>='
     && lk != 770494                // 'f64' Identifier '>>='
     && lk != 770498                // 'i32' Identifier '>>='
     && lk != 770499                // 'i64' Identifier '>>='
     && lk != 773379                // Identifier '++' '>>='
     && lk != 773380                // Character '++' '>>='
     && lk != 773381                // String '++' '>>='
     && lk != 773382                // Integer '++' '>>='
     && lk != 773383                // Complex '++' '>>='
     && lk != 773384                // Real '++' '>>='
     && lk != 773891                // Identifier '--' '>>='
     && lk != 773892                // Character '--' '>>='
     && lk != 773893                // String '--' '>>='
     && lk != 773894                // Integer '--' '>>='
     && lk != 773895                // Complex '--' '>>='
     && lk != 773896                // Real '--' '>>='
     && lk != 776626                // '[' ']' '>>='
     && lk != 780622                // '{' '}' '>>='
     && lk != 786877                // 'f32' Identifier '?'
     && lk != 786878                // 'f64' Identifier '?'
     && lk != 786882                // 'i32' Identifier '?'
     && lk != 786883                // 'i64' Identifier '?'
     && lk != 789763                // Identifier '++' '?'
     && lk != 789764                // Character '++' '?'
     && lk != 789765                // String '++' '?'
     && lk != 789766                // Integer '++' '?'
     && lk != 789767                // Complex '++' '?'
     && lk != 789768                // Real '++' '?'
     && lk != 790275                // Identifier '--' '?'
     && lk != 790276                // Character '--' '?'
     && lk != 790277                // String '--' '?'
     && lk != 790278                // Integer '--' '?'
     && lk != 790279                // Complex '--' '?'
     && lk != 790280                // Real '--' '?'
     && lk != 793010                // '[' ']' '?'
     && lk != 797006                // '{' '}' '?'
     && lk != 803261                // 'f32' Identifier '?='
     && lk != 803262                // 'f64' Identifier '?='
     && lk != 803266                // 'i32' Identifier '?='
     && lk != 803267                // 'i64' Identifier '?='
     && lk != 806147                // Identifier '++' '?='
     && lk != 806148                // Character '++' '?='
     && lk != 806149                // String '++' '?='
     && lk != 806150                // Integer '++' '?='
     && lk != 806151                // Complex '++' '?='
     && lk != 806152                // Real '++' '?='
     && lk != 806659                // Identifier '--' '?='
     && lk != 806660                // Character '--' '?='
     && lk != 806661                // String '--' '?='
     && lk != 806662                // Integer '--' '?='
     && lk != 806663                // Complex '--' '?='
     && lk != 806664                // Real '--' '?='
     && lk != 809394                // '[' ']' '?='
     && lk != 813390                // '{' '}' '?='
     && lk != 825778                // '[' ']' '['
     && lk != 829774                // '{' '}' '['
     && lk != 836029                // 'f32' Identifier ']'
     && lk != 836030                // 'f64' Identifier ']'
     && lk != 836034                // 'i32' Identifier ']'
     && lk != 836035                // 'i64' Identifier ']'
     && lk != 838915                // Identifier '++' ']'
     && lk != 838916                // Character '++' ']'
     && lk != 838917                // String '++' ']'
     && lk != 838918                // Integer '++' ']'
     && lk != 838919                // Complex '++' ']'
     && lk != 838920                // Real '++' ']'
     && lk != 839427                // Identifier '--' ']'
     && lk != 839428                // Character '--' ']'
     && lk != 839429                // String '--' ']'
     && lk != 839430                // Integer '--' ']'
     && lk != 839431                // Complex '--' ']'
     && lk != 839432                // Real '--' ']'
     && lk != 842162                // '[' ']' ']'
     && lk != 846158                // '{' '}' ']'
     && lk != 852413                // 'f32' Identifier '^'
     && lk != 852414                // 'f64' Identifier '^'
     && lk != 852418                // 'i32' Identifier '^'
     && lk != 852419                // 'i64' Identifier '^'
     && lk != 855299                // Identifier '++' '^'
     && lk != 855300                // Character '++' '^'
     && lk != 855301                // String '++' '^'
     && lk != 855302                // Integer '++' '^'
     && lk != 855303                // Complex '++' '^'
     && lk != 855304                // Real '++' '^'
     && lk != 855811                // Identifier '--' '^'
     && lk != 855812                // Character '--' '^'
     && lk != 855813                // String '--' '^'
     && lk != 855814                // Integer '--' '^'
     && lk != 855815                // Complex '--' '^'
     && lk != 855816                // Real '--' '^'
     && lk != 858546                // '[' ']' '^'
     && lk != 862542                // '{' '}' '^'
     && lk != 868797                // 'f32' Identifier '^='
     && lk != 868798                // 'f64' Identifier '^='
     && lk != 868802                // 'i32' Identifier '^='
     && lk != 868803                // 'i64' Identifier '^='
     && lk != 871683                // Identifier '++' '^='
     && lk != 871684                // Character '++' '^='
     && lk != 871685                // String '++' '^='
     && lk != 871686                // Integer '++' '^='
     && lk != 871687                // Complex '++' '^='
     && lk != 871688                // Real '++' '^='
     && lk != 872195                // Identifier '--' '^='
     && lk != 872196                // Character '--' '^='
     && lk != 872197                // String '--' '^='
     && lk != 872198                // Integer '--' '^='
     && lk != 872199                // Complex '--' '^='
     && lk != 872200                // Real '--' '^='
     && lk != 874930                // '[' ']' '^='
     && lk != 878926                // '{' '}' '^='
     && lk != 885181                // 'f32' Identifier 'break'
     && lk != 885182                // 'f64' Identifier 'break'
     && lk != 885186                // 'i32' Identifier 'break'
     && lk != 885187                // 'i64' Identifier 'break'
     && lk != 888067                // Identifier '++' 'break'
     && lk != 888068                // Character '++' 'break'
     && lk != 888069                // String '++' 'break'
     && lk != 888070                // Integer '++' 'break'
     && lk != 888071                // Complex '++' 'break'
     && lk != 888072                // Real '++' 'break'
     && lk != 888579                // Identifier '--' 'break'
     && lk != 888580                // Character '--' 'break'
     && lk != 888581                // String '--' 'break'
     && lk != 888582                // Integer '--' 'break'
     && lk != 888583                // Complex '--' 'break'
     && lk != 888584                // Real '--' 'break'
     && lk != 891314                // '[' ']' 'break'
     && lk != 895310                // '{' '}' 'break'
     && lk != 901565                // 'f32' Identifier 'case'
     && lk != 901566                // 'f64' Identifier 'case'
     && lk != 901570                // 'i32' Identifier 'case'
     && lk != 901571                // 'i64' Identifier 'case'
     && lk != 904451                // Identifier '++' 'case'
     && lk != 904452                // Character '++' 'case'
     && lk != 904453                // String '++' 'case'
     && lk != 904454                // Integer '++' 'case'
     && lk != 904455                // Complex '++' 'case'
     && lk != 904456                // Real '++' 'case'
     && lk != 904963                // Identifier '--' 'case'
     && lk != 904964                // Character '--' 'case'
     && lk != 904965                // String '--' 'case'
     && lk != 904966                // Integer '--' 'case'
     && lk != 904967                // Complex '--' 'case'
     && lk != 904968                // Real '--' 'case'
     && lk != 907698                // '[' ']' 'case'
     && lk != 911694                // '{' '}' 'case'
     && lk != 917949                // 'f32' Identifier 'catch'
     && lk != 917950                // 'f64' Identifier 'catch'
     && lk != 917954                // 'i32' Identifier 'catch'
     && lk != 917955                // 'i64' Identifier 'catch'
     && lk != 920835                // Identifier '++' 'catch'
     && lk != 920836                // Character '++' 'catch'
     && lk != 920837                // String '++' 'catch'
     && lk != 920838                // Integer '++' 'catch'
     && lk != 920839                // Complex '++' 'catch'
     && lk != 920840                // Real '++' 'catch'
     && lk != 921347                // Identifier '--' 'catch'
     && lk != 921348                // Character '--' 'catch'
     && lk != 921349                // String '--' 'catch'
     && lk != 921350                // Integer '--' 'catch'
     && lk != 921351                // Complex '--' 'catch'
     && lk != 921352                // Real '--' 'catch'
     && lk != 924082                // '[' ']' 'catch'
     && lk != 928078                // '{' '}' 'catch'
     && lk != 934333                // 'f32' Identifier 'continue'
     && lk != 934334                // 'f64' Identifier 'continue'
     && lk != 934338                // 'i32' Identifier 'continue'
     && lk != 934339                // 'i64' Identifier 'continue'
     && lk != 937219                // Identifier '++' 'continue'
     && lk != 937220                // Character '++' 'continue'
     && lk != 937221                // String '++' 'continue'
     && lk != 937222                // Integer '++' 'continue'
     && lk != 937223                // Complex '++' 'continue'
     && lk != 937224                // Real '++' 'continue'
     && lk != 937731                // Identifier '--' 'continue'
     && lk != 937732                // Character '--' 'continue'
     && lk != 937733                // String '--' 'continue'
     && lk != 937734                // Integer '--' 'continue'
     && lk != 937735                // Complex '--' 'continue'
     && lk != 937736                // Real '--' 'continue'
     && lk != 940466                // '[' ']' 'continue'
     && lk != 944462                // '{' '}' 'continue'
     && lk != 950717                // 'f32' Identifier 'default'
     && lk != 950718                // 'f64' Identifier 'default'
     && lk != 950722                // 'i32' Identifier 'default'
     && lk != 950723                // 'i64' Identifier 'default'
     && lk != 953603                // Identifier '++' 'default'
     && lk != 953604                // Character '++' 'default'
     && lk != 953605                // String '++' 'default'
     && lk != 953606                // Integer '++' 'default'
     && lk != 953607                // Complex '++' 'default'
     && lk != 953608                // Real '++' 'default'
     && lk != 954115                // Identifier '--' 'default'
     && lk != 954116                // Character '--' 'default'
     && lk != 954117                // String '--' 'default'
     && lk != 954118                // Integer '--' 'default'
     && lk != 954119                // Complex '--' 'default'
     && lk != 954120                // Real '--' 'default'
     && lk != 956850                // '[' ']' 'default'
     && lk != 960846                // '{' '}' 'default'
     && lk != 967101                // 'f32' Identifier 'do'
     && lk != 967102                // 'f64' Identifier 'do'
     && lk != 967106                // 'i32' Identifier 'do'
     && lk != 967107                // 'i64' Identifier 'do'
     && lk != 969987                // Identifier '++' 'do'
     && lk != 969988                // Character '++' 'do'
     && lk != 969989                // String '++' 'do'
     && lk != 969990                // Integer '++' 'do'
     && lk != 969991                // Complex '++' 'do'
     && lk != 969992                // Real '++' 'do'
     && lk != 970499                // Identifier '--' 'do'
     && lk != 970500                // Character '--' 'do'
     && lk != 970501                // String '--' 'do'
     && lk != 970502                // Integer '--' 'do'
     && lk != 970503                // Complex '--' 'do'
     && lk != 970504                // Real '--' 'do'
     && lk != 973234                // '[' ']' 'do'
     && lk != 977230                // '{' '}' 'do'
     && lk != 983485                // 'f32' Identifier 'else'
     && lk != 983486                // 'f64' Identifier 'else'
     && lk != 983490                // 'i32' Identifier 'else'
     && lk != 983491                // 'i64' Identifier 'else'
     && lk != 986371                // Identifier '++' 'else'
     && lk != 986372                // Character '++' 'else'
     && lk != 986373                // String '++' 'else'
     && lk != 986374                // Integer '++' 'else'
     && lk != 986375                // Complex '++' 'else'
     && lk != 986376                // Real '++' 'else'
     && lk != 986883                // Identifier '--' 'else'
     && lk != 986884                // Character '--' 'else'
     && lk != 986885                // String '--' 'else'
     && lk != 986886                // Integer '--' 'else'
     && lk != 986887                // Complex '--' 'else'
     && lk != 986888                // Real '--' 'else'
     && lk != 989618                // '[' ']' 'else'
     && lk != 993614                // '{' '}' 'else'
     && lk != 999869                // 'f32' Identifier 'f32'
     && lk != 999870                // 'f64' Identifier 'f32'
     && lk != 999874                // 'i32' Identifier 'f32'
     && lk != 999875                // 'i64' Identifier 'f32'
     && lk != 1006002               // '[' ']' 'f32'
     && lk != 1009998               // '{' '}' 'f32'
     && lk != 1016253               // 'f32' Identifier 'f64'
     && lk != 1016254               // 'f64' Identifier 'f64'
     && lk != 1016258               // 'i32' Identifier 'f64'
     && lk != 1016259               // 'i64' Identifier 'f64'
     && lk != 1022386               // '[' ']' 'f64'
     && lk != 1026382               // '{' '}' 'f64'
     && lk != 1032637               // 'f32' Identifier 'for'
     && lk != 1032638               // 'f64' Identifier 'for'
     && lk != 1032642               // 'i32' Identifier 'for'
     && lk != 1032643               // 'i64' Identifier 'for'
     && lk != 1035523               // Identifier '++' 'for'
     && lk != 1035524               // Character '++' 'for'
     && lk != 1035525               // String '++' 'for'
     && lk != 1035526               // Integer '++' 'for'
     && lk != 1035527               // Complex '++' 'for'
     && lk != 1035528               // Real '++' 'for'
     && lk != 1036035               // Identifier '--' 'for'
     && lk != 1036036               // Character '--' 'for'
     && lk != 1036037               // String '--' 'for'
     && lk != 1036038               // Integer '--' 'for'
     && lk != 1036039               // Complex '--' 'for'
     && lk != 1036040               // Real '--' 'for'
     && lk != 1038770               // '[' ']' 'for'
     && lk != 1042766               // '{' '}' 'for'
     && lk != 1049021               // 'f32' Identifier 'foreach'
     && lk != 1049022               // 'f64' Identifier 'foreach'
     && lk != 1049026               // 'i32' Identifier 'foreach'
     && lk != 1049027               // 'i64' Identifier 'foreach'
     && lk != 1051907               // Identifier '++' 'foreach'
     && lk != 1051908               // Character '++' 'foreach'
     && lk != 1051909               // String '++' 'foreach'
     && lk != 1051910               // Integer '++' 'foreach'
     && lk != 1051911               // Complex '++' 'foreach'
     && lk != 1051912               // Real '++' 'foreach'
     && lk != 1052419               // Identifier '--' 'foreach'
     && lk != 1052420               // Character '--' 'foreach'
     && lk != 1052421               // String '--' 'foreach'
     && lk != 1052422               // Integer '--' 'foreach'
     && lk != 1052423               // Complex '--' 'foreach'
     && lk != 1052424               // Real '--' 'foreach'
     && lk != 1055154               // '[' ']' 'foreach'
     && lk != 1059150               // '{' '}' 'foreach'
     && lk != 1065405               // 'f32' Identifier 'global'
     && lk != 1065406               // 'f64' Identifier 'global'
     && lk != 1065410               // 'i32' Identifier 'global'
     && lk != 1065411               // 'i64' Identifier 'global'
     && lk != 1068291               // Identifier '++' 'global'
     && lk != 1068292               // Character '++' 'global'
     && lk != 1068293               // String '++' 'global'
     && lk != 1068294               // Integer '++' 'global'
     && lk != 1068295               // Complex '++' 'global'
     && lk != 1068296               // Real '++' 'global'
     && lk != 1068803               // Identifier '--' 'global'
     && lk != 1068804               // Character '--' 'global'
     && lk != 1068805               // String '--' 'global'
     && lk != 1068806               // Integer '--' 'global'
     && lk != 1068807               // Complex '--' 'global'
     && lk != 1068808               // Real '--' 'global'
     && lk != 1071538               // '[' ']' 'global'
     && lk != 1075534               // '{' '}' 'global'
     && lk != 1081789               // 'f32' Identifier 'i32'
     && lk != 1081790               // 'f64' Identifier 'i32'
     && lk != 1081794               // 'i32' Identifier 'i32'
     && lk != 1081795               // 'i64' Identifier 'i32'
     && lk != 1087922               // '[' ']' 'i32'
     && lk != 1091918               // '{' '}' 'i32'
     && lk != 1098173               // 'f32' Identifier 'i64'
     && lk != 1098174               // 'f64' Identifier 'i64'
     && lk != 1098178               // 'i32' Identifier 'i64'
     && lk != 1098179               // 'i64' Identifier 'i64'
     && lk != 1104306               // '[' ']' 'i64'
     && lk != 1108302               // '{' '}' 'i64'
     && lk != 1114557               // 'f32' Identifier 'if'
     && lk != 1114558               // 'f64' Identifier 'if'
     && lk != 1114562               // 'i32' Identifier 'if'
     && lk != 1114563               // 'i64' Identifier 'if'
     && lk != 1117443               // Identifier '++' 'if'
     && lk != 1117444               // Character '++' 'if'
     && lk != 1117445               // String '++' 'if'
     && lk != 1117446               // Integer '++' 'if'
     && lk != 1117447               // Complex '++' 'if'
     && lk != 1117448               // Real '++' 'if'
     && lk != 1117955               // Identifier '--' 'if'
     && lk != 1117956               // Character '--' 'if'
     && lk != 1117957               // String '--' 'if'
     && lk != 1117958               // Integer '--' 'if'
     && lk != 1117959               // Complex '--' 'if'
     && lk != 1117960               // Real '--' 'if'
     && lk != 1120690               // '[' ']' 'if'
     && lk != 1124686               // '{' '}' 'if'
     && lk != 1130941               // 'f32' Identifier 'import'
     && lk != 1130942               // 'f64' Identifier 'import'
     && lk != 1130946               // 'i32' Identifier 'import'
     && lk != 1130947               // 'i64' Identifier 'import'
     && lk != 1133827               // Identifier '++' 'import'
     && lk != 1133828               // Character '++' 'import'
     && lk != 1133829               // String '++' 'import'
     && lk != 1133830               // Integer '++' 'import'
     && lk != 1133831               // Complex '++' 'import'
     && lk != 1133832               // Real '++' 'import'
     && lk != 1134339               // Identifier '--' 'import'
     && lk != 1134340               // Character '--' 'import'
     && lk != 1134341               // String '--' 'import'
     && lk != 1134342               // Integer '--' 'import'
     && lk != 1134343               // Complex '--' 'import'
     && lk != 1134344               // Real '--' 'import'
     && lk != 1137074               // '[' ']' 'import'
     && lk != 1141070               // '{' '}' 'import'
     && lk != 1147325               // 'f32' Identifier 'include'
     && lk != 1147326               // 'f64' Identifier 'include'
     && lk != 1147330               // 'i32' Identifier 'include'
     && lk != 1147331               // 'i64' Identifier 'include'
     && lk != 1150211               // Identifier '++' 'include'
     && lk != 1150212               // Character '++' 'include'
     && lk != 1150213               // String '++' 'include'
     && lk != 1150214               // Integer '++' 'include'
     && lk != 1150215               // Complex '++' 'include'
     && lk != 1150216               // Real '++' 'include'
     && lk != 1150723               // Identifier '--' 'include'
     && lk != 1150724               // Character '--' 'include'
     && lk != 1150725               // String '--' 'include'
     && lk != 1150726               // Integer '--' 'include'
     && lk != 1150727               // Complex '--' 'include'
     && lk != 1150728               // Real '--' 'include'
     && lk != 1153458               // '[' ']' 'include'
     && lk != 1157454               // '{' '}' 'include'
     && lk != 1163709               // 'f32' Identifier 'local'
     && lk != 1163710               // 'f64' Identifier 'local'
     && lk != 1163714               // 'i32' Identifier 'local'
     && lk != 1163715               // 'i64' Identifier 'local'
     && lk != 1166595               // Identifier '++' 'local'
     && lk != 1166596               // Character '++' 'local'
     && lk != 1166597               // String '++' 'local'
     && lk != 1166598               // Integer '++' 'local'
     && lk != 1166599               // Complex '++' 'local'
     && lk != 1166600               // Real '++' 'local'
     && lk != 1167107               // Identifier '--' 'local'
     && lk != 1167108               // Character '--' 'local'
     && lk != 1167109               // String '--' 'local'
     && lk != 1167110               // Integer '--' 'local'
     && lk != 1167111               // Complex '--' 'local'
     && lk != 1167112               // Real '--' 'local'
     && lk != 1169842               // '[' ']' 'local'
     && lk != 1173838               // '{' '}' 'local'
     && lk != 1180093               // 'f32' Identifier 'return'
     && lk != 1180094               // 'f64' Identifier 'return'
     && lk != 1180098               // 'i32' Identifier 'return'
     && lk != 1180099               // 'i64' Identifier 'return'
     && lk != 1182979               // Identifier '++' 'return'
     && lk != 1182980               // Character '++' 'return'
     && lk != 1182981               // String '++' 'return'
     && lk != 1182982               // Integer '++' 'return'
     && lk != 1182983               // Complex '++' 'return'
     && lk != 1182984               // Real '++' 'return'
     && lk != 1183491               // Identifier '--' 'return'
     && lk != 1183492               // Character '--' 'return'
     && lk != 1183493               // String '--' 'return'
     && lk != 1183494               // Integer '--' 'return'
     && lk != 1183495               // Complex '--' 'return'
     && lk != 1183496               // Real '--' 'return'
     && lk != 1186226               // '[' ']' 'return'
     && lk != 1190222               // '{' '}' 'return'
     && lk != 1196477               // 'f32' Identifier 'switch'
     && lk != 1196478               // 'f64' Identifier 'switch'
     && lk != 1196482               // 'i32' Identifier 'switch'
     && lk != 1196483               // 'i64' Identifier 'switch'
     && lk != 1199363               // Identifier '++' 'switch'
     && lk != 1199364               // Character '++' 'switch'
     && lk != 1199365               // String '++' 'switch'
     && lk != 1199366               // Integer '++' 'switch'
     && lk != 1199367               // Complex '++' 'switch'
     && lk != 1199368               // Real '++' 'switch'
     && lk != 1199875               // Identifier '--' 'switch'
     && lk != 1199876               // Character '--' 'switch'
     && lk != 1199877               // String '--' 'switch'
     && lk != 1199878               // Integer '--' 'switch'
     && lk != 1199879               // Complex '--' 'switch'
     && lk != 1199880               // Real '--' 'switch'
     && lk != 1202610               // '[' ']' 'switch'
     && lk != 1206606               // '{' '}' 'switch'
     && lk != 1212861               // 'f32' Identifier 'test'
     && lk != 1212862               // 'f64' Identifier 'test'
     && lk != 1212866               // 'i32' Identifier 'test'
     && lk != 1212867               // 'i64' Identifier 'test'
     && lk != 1215747               // Identifier '++' 'test'
     && lk != 1215748               // Character '++' 'test'
     && lk != 1215749               // String '++' 'test'
     && lk != 1215750               // Integer '++' 'test'
     && lk != 1215751               // Complex '++' 'test'
     && lk != 1215752               // Real '++' 'test'
     && lk != 1216259               // Identifier '--' 'test'
     && lk != 1216260               // Character '--' 'test'
     && lk != 1216261               // String '--' 'test'
     && lk != 1216262               // Integer '--' 'test'
     && lk != 1216263               // Complex '--' 'test'
     && lk != 1216264               // Real '--' 'test'
     && lk != 1218994               // '[' ']' 'test'
     && lk != 1222990               // '{' '}' 'test'
     && lk != 1229245               // 'f32' Identifier 'throw'
     && lk != 1229246               // 'f64' Identifier 'throw'
     && lk != 1229250               // 'i32' Identifier 'throw'
     && lk != 1229251               // 'i64' Identifier 'throw'
     && lk != 1232131               // Identifier '++' 'throw'
     && lk != 1232132               // Character '++' 'throw'
     && lk != 1232133               // String '++' 'throw'
     && lk != 1232134               // Integer '++' 'throw'
     && lk != 1232135               // Complex '++' 'throw'
     && lk != 1232136               // Real '++' 'throw'
     && lk != 1232643               // Identifier '--' 'throw'
     && lk != 1232644               // Character '--' 'throw'
     && lk != 1232645               // String '--' 'throw'
     && lk != 1232646               // Integer '--' 'throw'
     && lk != 1232647               // Complex '--' 'throw'
     && lk != 1232648               // Real '--' 'throw'
     && lk != 1235378               // '[' ']' 'throw'
     && lk != 1239374               // '{' '}' 'throw'
     && lk != 1245629               // 'f32' Identifier 'try'
     && lk != 1245630               // 'f64' Identifier 'try'
     && lk != 1245634               // 'i32' Identifier 'try'
     && lk != 1245635               // 'i64' Identifier 'try'
     && lk != 1248515               // Identifier '++' 'try'
     && lk != 1248516               // Character '++' 'try'
     && lk != 1248517               // String '++' 'try'
     && lk != 1248518               // Integer '++' 'try'
     && lk != 1248519               // Complex '++' 'try'
     && lk != 1248520               // Real '++' 'try'
     && lk != 1249027               // Identifier '--' 'try'
     && lk != 1249028               // Character '--' 'try'
     && lk != 1249029               // String '--' 'try'
     && lk != 1249030               // Integer '--' 'try'
     && lk != 1249031               // Complex '--' 'try'
     && lk != 1249032               // Real '--' 'try'
     && lk != 1251762               // '[' ']' 'try'
     && lk != 1255758               // '{' '}' 'try'
     && lk != 1262013               // 'f32' Identifier 'while'
     && lk != 1262014               // 'f64' Identifier 'while'
     && lk != 1262018               // 'i32' Identifier 'while'
     && lk != 1262019               // 'i64' Identifier 'while'
     && lk != 1264899               // Identifier '++' 'while'
     && lk != 1264900               // Character '++' 'while'
     && lk != 1264901               // String '++' 'while'
     && lk != 1264902               // Integer '++' 'while'
     && lk != 1264903               // Complex '++' 'while'
     && lk != 1264904               // Real '++' 'while'
     && lk != 1265411               // Identifier '--' 'while'
     && lk != 1265412               // Character '--' 'while'
     && lk != 1265413               // String '--' 'while'
     && lk != 1265414               // Integer '--' 'while'
     && lk != 1265415               // Complex '--' 'while'
     && lk != 1265416               // Real '--' 'while'
     && lk != 1268146               // '[' ']' 'while'
     && lk != 1272142               // '{' '}' 'while'
     && lk != 1278397               // 'f32' Identifier '{'
     && lk != 1278398               // 'f64' Identifier '{'
     && lk != 1278402               // 'i32' Identifier '{'
     && lk != 1278403               // 'i64' Identifier '{'
     && lk != 1284530               // '[' ']' '{'
     && lk != 1288526               // '{' '}' '{'
     && lk != 1294781               // 'f32' Identifier '|'
     && lk != 1294782               // 'f64' Identifier '|'
     && lk != 1294786               // 'i32' Identifier '|'
     && lk != 1294787               // 'i64' Identifier '|'
     && lk != 1297667               // Identifier '++' '|'
     && lk != 1297668               // Character '++' '|'
     && lk != 1297669               // String '++' '|'
     && lk != 1297670               // Integer '++' '|'
     && lk != 1297671               // Complex '++' '|'
     && lk != 1297672               // Real '++' '|'
     && lk != 1298179               // Identifier '--' '|'
     && lk != 1298180               // Character '--' '|'
     && lk != 1298181               // String '--' '|'
     && lk != 1298182               // Integer '--' '|'
     && lk != 1298183               // Complex '--' '|'
     && lk != 1298184               // Real '--' '|'
     && lk != 1300914               // '[' ']' '|'
     && lk != 1304910               // '{' '}' '|'
     && lk != 1311165               // 'f32' Identifier '|='
     && lk != 1311166               // 'f64' Identifier '|='
     && lk != 1311170               // 'i32' Identifier '|='
     && lk != 1311171               // 'i64' Identifier '|='
     && lk != 1314051               // Identifier '++' '|='
     && lk != 1314052               // Character '++' '|='
     && lk != 1314053               // String '++' '|='
     && lk != 1314054               // Integer '++' '|='
     && lk != 1314055               // Complex '++' '|='
     && lk != 1314056               // Real '++' '|='
     && lk != 1314563               // Identifier '--' '|='
     && lk != 1314564               // Character '--' '|='
     && lk != 1314565               // String '--' '|='
     && lk != 1314566               // Integer '--' '|='
     && lk != 1314567               // Complex '--' '|='
     && lk != 1314568               // Real '--' '|='
     && lk != 1317298               // '[' ']' '|='
     && lk != 1321294               // '{' '}' '|='
     && lk != 1327549               // 'f32' Identifier '||'
     && lk != 1327550               // 'f64' Identifier '||'
     && lk != 1327554               // 'i32' Identifier '||'
     && lk != 1327555               // 'i64' Identifier '||'
     && lk != 1330435               // Identifier '++' '||'
     && lk != 1330436               // Character '++' '||'
     && lk != 1330437               // String '++' '||'
     && lk != 1330438               // Integer '++' '||'
     && lk != 1330439               // Complex '++' '||'
     && lk != 1330440               // Real '++' '||'
     && lk != 1330947               // Identifier '--' '||'
     && lk != 1330948               // Character '--' '||'
     && lk != 1330949               // String '--' '||'
     && lk != 1330950               // Integer '--' '||'
     && lk != 1330951               // Complex '--' '||'
     && lk != 1330952               // Real '--' '||'
     && lk != 1333682               // '[' ']' '||'
     && lk != 1337678               // '{' '}' '||'
     && lk != 1343933               // 'f32' Identifier '}'
     && lk != 1343934               // 'f64' Identifier '}'
     && lk != 1343938               // 'i32' Identifier '}'
     && lk != 1343939               // 'i64' Identifier '}'
     && lk != 1346819               // Identifier '++' '}'
     && lk != 1346820               // Character '++' '}'
     && lk != 1346821               // String '++' '}'
     && lk != 1346822               // Integer '++' '}'
     && lk != 1346823               // Complex '++' '}'
     && lk != 1346824               // Real '++' '}'
     && lk != 1347331               // Identifier '--' '}'
     && lk != 1347332               // Character '--' '}'
     && lk != 1347333               // String '--' '}'
     && lk != 1347334               // Integer '--' '}'
     && lk != 1347335               // Complex '--' '}'
     && lk != 1347336               // Real '--' '}'
     && lk != 1350066               // '[' ']' '}'
     && lk != 1354062               // '{' '}' '}'
     && lk != 1360317               // 'f32' Identifier '~'
     && lk != 1360318               // 'f64' Identifier '~'
     && lk != 1360322               // 'i32' Identifier '~'
     && lk != 1360323               // 'i64' Identifier '~'
     && lk != 1363203               // Identifier '++' '~'
     && lk != 1363204               // Character '++' '~'
     && lk != 1363205               // String '++' '~'
     && lk != 1363206               // Integer '++' '~'
     && lk != 1363207               // Complex '++' '~'
     && lk != 1363208               // Real '++' '~'
     && lk != 1363715               // Identifier '--' '~'
     && lk != 1363716               // Character '--' '~'
     && lk != 1363717               // String '--' '~'
     && lk != 1363718               // Integer '--' '~'
     && lk != 1363719               // Complex '--' '~'
     && lk != 1363720               // Real '--' '~'
     && lk != 1366450               // '[' ']' '~'
     && lk != 1370446)              // '{' '}' '~'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Primary();
          lookahead1W(5);           // WhiteSpace^token | '++'
          consumeT(26);             // '++'
          memoize(3, e0A, -1);
          lk = -10;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            try_Primary();
            lookahead1W(6);         // WhiteSpace^token | '--'
            consumeT(30);           // '--'
            memoize(3, e0A, -2);
            lk = -10;
          }
          catch (p2A)
          {
            lk = -9;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(3, e0A, -9);
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 19715:                     // Identifier '++' END
    case 19716:                     // Character '++' END
    case 19717:                     // String '++' END
    case 19718:                     // Integer '++' END
    case 19719:                     // Complex '++' END
    case 19720:                     // Real '++' END
    case 150787:                    // Identifier '++' Comment
    case 150788:                    // Character '++' Comment
    case 150789:                    // String '++' Comment
    case 150790:                    // Integer '++' Comment
    case 150791:                    // Complex '++' Comment
    case 150792:                    // Real '++' Comment
    case 199939:                    // Identifier '++' '!'
    case 199940:                    // Character '++' '!'
    case 199941:                    // String '++' '!'
    case 199942:                    // Integer '++' '!'
    case 199943:                    // Complex '++' '!'
    case 199944:                    // Real '++' '!'
    case 216323:                    // Identifier '++' '!='
    case 216324:                    // Character '++' '!='
    case 216325:                    // String '++' '!='
    case 216326:                    // Integer '++' '!='
    case 216327:                    // Complex '++' '!='
    case 216328:                    // Real '++' '!='
    case 249091:                    // Identifier '++' '%'
    case 249092:                    // Character '++' '%'
    case 249093:                    // String '++' '%'
    case 249094:                    // Integer '++' '%'
    case 249095:                    // Complex '++' '%'
    case 249096:                    // Real '++' '%'
    case 265475:                    // Identifier '++' '%='
    case 265476:                    // Character '++' '%='
    case 265477:                    // String '++' '%='
    case 265478:                    // Integer '++' '%='
    case 265479:                    // Complex '++' '%='
    case 265480:                    // Real '++' '%='
    case 281859:                    // Identifier '++' '&'
    case 281860:                    // Character '++' '&'
    case 281861:                    // String '++' '&'
    case 281862:                    // Integer '++' '&'
    case 281863:                    // Complex '++' '&'
    case 281864:                    // Real '++' '&'
    case 298243:                    // Identifier '++' '&&'
    case 298244:                    // Character '++' '&&'
    case 298245:                    // String '++' '&&'
    case 298246:                    // Integer '++' '&&'
    case 298247:                    // Complex '++' '&&'
    case 298248:                    // Real '++' '&&'
    case 314627:                    // Identifier '++' '&='
    case 314628:                    // Character '++' '&='
    case 314629:                    // String '++' '&='
    case 314630:                    // Integer '++' '&='
    case 314631:                    // Complex '++' '&='
    case 314632:                    // Real '++' '&='
    case 347395:                    // Identifier '++' ')'
    case 347396:                    // Character '++' ')'
    case 347397:                    // String '++' ')'
    case 347398:                    // Integer '++' ')'
    case 347399:                    // Complex '++' ')'
    case 347400:                    // Real '++' ')'
    case 363779:                    // Identifier '++' '*'
    case 363780:                    // Character '++' '*'
    case 363781:                    // String '++' '*'
    case 363782:                    // Integer '++' '*'
    case 363783:                    // Complex '++' '*'
    case 363784:                    // Real '++' '*'
    case 380163:                    // Identifier '++' '**'
    case 380164:                    // Character '++' '**'
    case 380165:                    // String '++' '**'
    case 380166:                    // Integer '++' '**'
    case 380167:                    // Complex '++' '**'
    case 380168:                    // Real '++' '**'
    case 396547:                    // Identifier '++' '*='
    case 396548:                    // Character '++' '*='
    case 396549:                    // String '++' '*='
    case 396550:                    // Integer '++' '*='
    case 396551:                    // Complex '++' '*='
    case 396552:                    // Real '++' '*='
    case 412931:                    // Identifier '++' '+'
    case 412932:                    // Character '++' '+'
    case 412933:                    // String '++' '+'
    case 412934:                    // Integer '++' '+'
    case 412935:                    // Complex '++' '+'
    case 412936:                    // Real '++' '+'
    case 429315:                    // Identifier '++' '++'
    case 429316:                    // Character '++' '++'
    case 429317:                    // String '++' '++'
    case 429318:                    // Integer '++' '++'
    case 429319:                    // Complex '++' '++'
    case 429320:                    // Real '++' '++'
    case 445699:                    // Identifier '++' '+='
    case 445700:                    // Character '++' '+='
    case 445701:                    // String '++' '+='
    case 445702:                    // Integer '++' '+='
    case 445703:                    // Complex '++' '+='
    case 445704:                    // Real '++' '+='
    case 462083:                    // Identifier '++' ','
    case 462084:                    // Character '++' ','
    case 462085:                    // String '++' ','
    case 462086:                    // Integer '++' ','
    case 462087:                    // Complex '++' ','
    case 462088:                    // Real '++' ','
    case 478467:                    // Identifier '++' '-'
    case 478468:                    // Character '++' '-'
    case 478469:                    // String '++' '-'
    case 478470:                    // Integer '++' '-'
    case 478471:                    // Complex '++' '-'
    case 478472:                    // Real '++' '-'
    case 494851:                    // Identifier '++' '--'
    case 494852:                    // Character '++' '--'
    case 494853:                    // String '++' '--'
    case 494854:                    // Integer '++' '--'
    case 494855:                    // Complex '++' '--'
    case 494856:                    // Real '++' '--'
    case 511235:                    // Identifier '++' '-='
    case 511236:                    // Character '++' '-='
    case 511237:                    // String '++' '-='
    case 511238:                    // Integer '++' '-='
    case 511239:                    // Complex '++' '-='
    case 511240:                    // Real '++' '-='
    case 544003:                    // Identifier '++' '/'
    case 544004:                    // Character '++' '/'
    case 544005:                    // String '++' '/'
    case 544006:                    // Integer '++' '/'
    case 544007:                    // Complex '++' '/'
    case 544008:                    // Real '++' '/'
    case 560387:                    // Identifier '++' '/='
    case 560388:                    // Character '++' '/='
    case 560389:                    // String '++' '/='
    case 560390:                    // Integer '++' '/='
    case 560391:                    // Complex '++' '/='
    case 560392:                    // Real '++' '/='
    case 576771:                    // Identifier '++' ':'
    case 576772:                    // Character '++' ':'
    case 576773:                    // String '++' ':'
    case 576774:                    // Integer '++' ':'
    case 576775:                    // Complex '++' ':'
    case 576776:                    // Real '++' ':'
    case 593155:                    // Identifier '++' ':='
    case 593156:                    // Character '++' ':='
    case 593157:                    // String '++' ':='
    case 593158:                    // Integer '++' ':='
    case 593159:                    // Complex '++' ':='
    case 593160:                    // Real '++' ':='
    case 609539:                    // Identifier '++' ';'
    case 609540:                    // Character '++' ';'
    case 609541:                    // String '++' ';'
    case 609542:                    // Integer '++' ';'
    case 609543:                    // Complex '++' ';'
    case 609544:                    // Real '++' ';'
    case 625923:                    // Identifier '++' '<'
    case 625924:                    // Character '++' '<'
    case 625925:                    // String '++' '<'
    case 625926:                    // Integer '++' '<'
    case 625927:                    // Complex '++' '<'
    case 625928:                    // Real '++' '<'
    case 642307:                    // Identifier '++' '<<'
    case 642308:                    // Character '++' '<<'
    case 642309:                    // String '++' '<<'
    case 642310:                    // Integer '++' '<<'
    case 642311:                    // Complex '++' '<<'
    case 642312:                    // Real '++' '<<'
    case 658691:                    // Identifier '++' '<<='
    case 658692:                    // Character '++' '<<='
    case 658693:                    // String '++' '<<='
    case 658694:                    // Integer '++' '<<='
    case 658695:                    // Complex '++' '<<='
    case 658696:                    // Real '++' '<<='
    case 675075:                    // Identifier '++' '<='
    case 675076:                    // Character '++' '<='
    case 675077:                    // String '++' '<='
    case 675078:                    // Integer '++' '<='
    case 675079:                    // Complex '++' '<='
    case 675080:                    // Real '++' '<='
    case 691459:                    // Identifier '++' '='
    case 691460:                    // Character '++' '='
    case 691461:                    // String '++' '='
    case 691462:                    // Integer '++' '='
    case 691463:                    // Complex '++' '='
    case 691464:                    // Real '++' '='
    case 707843:                    // Identifier '++' '=='
    case 707844:                    // Character '++' '=='
    case 707845:                    // String '++' '=='
    case 707846:                    // Integer '++' '=='
    case 707847:                    // Complex '++' '=='
    case 707848:                    // Real '++' '=='
    case 724227:                    // Identifier '++' '>'
    case 724228:                    // Character '++' '>'
    case 724229:                    // String '++' '>'
    case 724230:                    // Integer '++' '>'
    case 724231:                    // Complex '++' '>'
    case 724232:                    // Real '++' '>'
    case 740611:                    // Identifier '++' '>='
    case 740612:                    // Character '++' '>='
    case 740613:                    // String '++' '>='
    case 740614:                    // Integer '++' '>='
    case 740615:                    // Complex '++' '>='
    case 740616:                    // Real '++' '>='
    case 756995:                    // Identifier '++' '>>'
    case 756996:                    // Character '++' '>>'
    case 756997:                    // String '++' '>>'
    case 756998:                    // Integer '++' '>>'
    case 756999:                    // Complex '++' '>>'
    case 757000:                    // Real '++' '>>'
    case 773379:                    // Identifier '++' '>>='
    case 773380:                    // Character '++' '>>='
    case 773381:                    // String '++' '>>='
    case 773382:                    // Integer '++' '>>='
    case 773383:                    // Complex '++' '>>='
    case 773384:                    // Real '++' '>>='
    case 789763:                    // Identifier '++' '?'
    case 789764:                    // Character '++' '?'
    case 789765:                    // String '++' '?'
    case 789766:                    // Integer '++' '?'
    case 789767:                    // Complex '++' '?'
    case 789768:                    // Real '++' '?'
    case 806147:                    // Identifier '++' '?='
    case 806148:                    // Character '++' '?='
    case 806149:                    // String '++' '?='
    case 806150:                    // Integer '++' '?='
    case 806151:                    // Complex '++' '?='
    case 806152:                    // Real '++' '?='
    case 838915:                    // Identifier '++' ']'
    case 838916:                    // Character '++' ']'
    case 838917:                    // String '++' ']'
    case 838918:                    // Integer '++' ']'
    case 838919:                    // Complex '++' ']'
    case 838920:                    // Real '++' ']'
    case 855299:                    // Identifier '++' '^'
    case 855300:                    // Character '++' '^'
    case 855301:                    // String '++' '^'
    case 855302:                    // Integer '++' '^'
    case 855303:                    // Complex '++' '^'
    case 855304:                    // Real '++' '^'
    case 871683:                    // Identifier '++' '^='
    case 871684:                    // Character '++' '^='
    case 871685:                    // String '++' '^='
    case 871686:                    // Integer '++' '^='
    case 871687:                    // Complex '++' '^='
    case 871688:                    // Real '++' '^='
    case 888067:                    // Identifier '++' 'break'
    case 888068:                    // Character '++' 'break'
    case 888069:                    // String '++' 'break'
    case 888070:                    // Integer '++' 'break'
    case 888071:                    // Complex '++' 'break'
    case 888072:                    // Real '++' 'break'
    case 904451:                    // Identifier '++' 'case'
    case 904452:                    // Character '++' 'case'
    case 904453:                    // String '++' 'case'
    case 904454:                    // Integer '++' 'case'
    case 904455:                    // Complex '++' 'case'
    case 904456:                    // Real '++' 'case'
    case 920835:                    // Identifier '++' 'catch'
    case 920836:                    // Character '++' 'catch'
    case 920837:                    // String '++' 'catch'
    case 920838:                    // Integer '++' 'catch'
    case 920839:                    // Complex '++' 'catch'
    case 920840:                    // Real '++' 'catch'
    case 937219:                    // Identifier '++' 'continue'
    case 937220:                    // Character '++' 'continue'
    case 937221:                    // String '++' 'continue'
    case 937222:                    // Integer '++' 'continue'
    case 937223:                    // Complex '++' 'continue'
    case 937224:                    // Real '++' 'continue'
    case 953603:                    // Identifier '++' 'default'
    case 953604:                    // Character '++' 'default'
    case 953605:                    // String '++' 'default'
    case 953606:                    // Integer '++' 'default'
    case 953607:                    // Complex '++' 'default'
    case 953608:                    // Real '++' 'default'
    case 969987:                    // Identifier '++' 'do'
    case 969988:                    // Character '++' 'do'
    case 969989:                    // String '++' 'do'
    case 969990:                    // Integer '++' 'do'
    case 969991:                    // Complex '++' 'do'
    case 969992:                    // Real '++' 'do'
    case 986371:                    // Identifier '++' 'else'
    case 986372:                    // Character '++' 'else'
    case 986373:                    // String '++' 'else'
    case 986374:                    // Integer '++' 'else'
    case 986375:                    // Complex '++' 'else'
    case 986376:                    // Real '++' 'else'
    case 1035523:                   // Identifier '++' 'for'
    case 1035524:                   // Character '++' 'for'
    case 1035525:                   // String '++' 'for'
    case 1035526:                   // Integer '++' 'for'
    case 1035527:                   // Complex '++' 'for'
    case 1035528:                   // Real '++' 'for'
    case 1051907:                   // Identifier '++' 'foreach'
    case 1051908:                   // Character '++' 'foreach'
    case 1051909:                   // String '++' 'foreach'
    case 1051910:                   // Integer '++' 'foreach'
    case 1051911:                   // Complex '++' 'foreach'
    case 1051912:                   // Real '++' 'foreach'
    case 1068291:                   // Identifier '++' 'global'
    case 1068292:                   // Character '++' 'global'
    case 1068293:                   // String '++' 'global'
    case 1068294:                   // Integer '++' 'global'
    case 1068295:                   // Complex '++' 'global'
    case 1068296:                   // Real '++' 'global'
    case 1117443:                   // Identifier '++' 'if'
    case 1117444:                   // Character '++' 'if'
    case 1117445:                   // String '++' 'if'
    case 1117446:                   // Integer '++' 'if'
    case 1117447:                   // Complex '++' 'if'
    case 1117448:                   // Real '++' 'if'
    case 1133827:                   // Identifier '++' 'import'
    case 1133828:                   // Character '++' 'import'
    case 1133829:                   // String '++' 'import'
    case 1133830:                   // Integer '++' 'import'
    case 1133831:                   // Complex '++' 'import'
    case 1133832:                   // Real '++' 'import'
    case 1150211:                   // Identifier '++' 'include'
    case 1150212:                   // Character '++' 'include'
    case 1150213:                   // String '++' 'include'
    case 1150214:                   // Integer '++' 'include'
    case 1150215:                   // Complex '++' 'include'
    case 1150216:                   // Real '++' 'include'
    case 1166595:                   // Identifier '++' 'local'
    case 1166596:                   // Character '++' 'local'
    case 1166597:                   // String '++' 'local'
    case 1166598:                   // Integer '++' 'local'
    case 1166599:                   // Complex '++' 'local'
    case 1166600:                   // Real '++' 'local'
    case 1182979:                   // Identifier '++' 'return'
    case 1182980:                   // Character '++' 'return'
    case 1182981:                   // String '++' 'return'
    case 1182982:                   // Integer '++' 'return'
    case 1182983:                   // Complex '++' 'return'
    case 1182984:                   // Real '++' 'return'
    case 1199363:                   // Identifier '++' 'switch'
    case 1199364:                   // Character '++' 'switch'
    case 1199365:                   // String '++' 'switch'
    case 1199366:                   // Integer '++' 'switch'
    case 1199367:                   // Complex '++' 'switch'
    case 1199368:                   // Real '++' 'switch'
    case 1215747:                   // Identifier '++' 'test'
    case 1215748:                   // Character '++' 'test'
    case 1215749:                   // String '++' 'test'
    case 1215750:                   // Integer '++' 'test'
    case 1215751:                   // Complex '++' 'test'
    case 1215752:                   // Real '++' 'test'
    case 1232131:                   // Identifier '++' 'throw'
    case 1232132:                   // Character '++' 'throw'
    case 1232133:                   // String '++' 'throw'
    case 1232134:                   // Integer '++' 'throw'
    case 1232135:                   // Complex '++' 'throw'
    case 1232136:                   // Real '++' 'throw'
    case 1248515:                   // Identifier '++' 'try'
    case 1248516:                   // Character '++' 'try'
    case 1248517:                   // String '++' 'try'
    case 1248518:                   // Integer '++' 'try'
    case 1248519:                   // Complex '++' 'try'
    case 1248520:                   // Real '++' 'try'
    case 1264899:                   // Identifier '++' 'while'
    case 1264900:                   // Character '++' 'while'
    case 1264901:                   // String '++' 'while'
    case 1264902:                   // Integer '++' 'while'
    case 1264903:                   // Complex '++' 'while'
    case 1264904:                   // Real '++' 'while'
    case 1297667:                   // Identifier '++' '|'
    case 1297668:                   // Character '++' '|'
    case 1297669:                   // String '++' '|'
    case 1297670:                   // Integer '++' '|'
    case 1297671:                   // Complex '++' '|'
    case 1297672:                   // Real '++' '|'
    case 1314051:                   // Identifier '++' '|='
    case 1314052:                   // Character '++' '|='
    case 1314053:                   // String '++' '|='
    case 1314054:                   // Integer '++' '|='
    case 1314055:                   // Complex '++' '|='
    case 1314056:                   // Real '++' '|='
    case 1330435:                   // Identifier '++' '||'
    case 1330436:                   // Character '++' '||'
    case 1330437:                   // String '++' '||'
    case 1330438:                   // Integer '++' '||'
    case 1330439:                   // Complex '++' '||'
    case 1330440:                   // Real '++' '||'
    case 1346819:                   // Identifier '++' '}'
    case 1346820:                   // Character '++' '}'
    case 1346821:                   // String '++' '}'
    case 1346822:                   // Integer '++' '}'
    case 1346823:                   // Complex '++' '}'
    case 1346824:                   // Real '++' '}'
    case 1363203:                   // Identifier '++' '~'
    case 1363204:                   // Character '++' '~'
    case 1363205:                   // String '++' '~'
    case 1363206:                   // Integer '++' '~'
    case 1363207:                   // Complex '++' '~'
    case 1363208:                   // Real '++' '~'
      try_Primary();
      lookahead1W(5);               // WhiteSpace^token | '++'
      consumeT(26);                 // '++'
      break;
    case -2:
    case 20227:                     // Identifier '--' END
    case 20228:                     // Character '--' END
    case 20229:                     // String '--' END
    case 20230:                     // Integer '--' END
    case 20231:                     // Complex '--' END
    case 20232:                     // Real '--' END
    case 151299:                    // Identifier '--' Comment
    case 151300:                    // Character '--' Comment
    case 151301:                    // String '--' Comment
    case 151302:                    // Integer '--' Comment
    case 151303:                    // Complex '--' Comment
    case 151304:                    // Real '--' Comment
    case 200451:                    // Identifier '--' '!'
    case 200452:                    // Character '--' '!'
    case 200453:                    // String '--' '!'
    case 200454:                    // Integer '--' '!'
    case 200455:                    // Complex '--' '!'
    case 200456:                    // Real '--' '!'
    case 216835:                    // Identifier '--' '!='
    case 216836:                    // Character '--' '!='
    case 216837:                    // String '--' '!='
    case 216838:                    // Integer '--' '!='
    case 216839:                    // Complex '--' '!='
    case 216840:                    // Real '--' '!='
    case 249603:                    // Identifier '--' '%'
    case 249604:                    // Character '--' '%'
    case 249605:                    // String '--' '%'
    case 249606:                    // Integer '--' '%'
    case 249607:                    // Complex '--' '%'
    case 249608:                    // Real '--' '%'
    case 265987:                    // Identifier '--' '%='
    case 265988:                    // Character '--' '%='
    case 265989:                    // String '--' '%='
    case 265990:                    // Integer '--' '%='
    case 265991:                    // Complex '--' '%='
    case 265992:                    // Real '--' '%='
    case 282371:                    // Identifier '--' '&'
    case 282372:                    // Character '--' '&'
    case 282373:                    // String '--' '&'
    case 282374:                    // Integer '--' '&'
    case 282375:                    // Complex '--' '&'
    case 282376:                    // Real '--' '&'
    case 298755:                    // Identifier '--' '&&'
    case 298756:                    // Character '--' '&&'
    case 298757:                    // String '--' '&&'
    case 298758:                    // Integer '--' '&&'
    case 298759:                    // Complex '--' '&&'
    case 298760:                    // Real '--' '&&'
    case 315139:                    // Identifier '--' '&='
    case 315140:                    // Character '--' '&='
    case 315141:                    // String '--' '&='
    case 315142:                    // Integer '--' '&='
    case 315143:                    // Complex '--' '&='
    case 315144:                    // Real '--' '&='
    case 347907:                    // Identifier '--' ')'
    case 347908:                    // Character '--' ')'
    case 347909:                    // String '--' ')'
    case 347910:                    // Integer '--' ')'
    case 347911:                    // Complex '--' ')'
    case 347912:                    // Real '--' ')'
    case 364291:                    // Identifier '--' '*'
    case 364292:                    // Character '--' '*'
    case 364293:                    // String '--' '*'
    case 364294:                    // Integer '--' '*'
    case 364295:                    // Complex '--' '*'
    case 364296:                    // Real '--' '*'
    case 380675:                    // Identifier '--' '**'
    case 380676:                    // Character '--' '**'
    case 380677:                    // String '--' '**'
    case 380678:                    // Integer '--' '**'
    case 380679:                    // Complex '--' '**'
    case 380680:                    // Real '--' '**'
    case 397059:                    // Identifier '--' '*='
    case 397060:                    // Character '--' '*='
    case 397061:                    // String '--' '*='
    case 397062:                    // Integer '--' '*='
    case 397063:                    // Complex '--' '*='
    case 397064:                    // Real '--' '*='
    case 413443:                    // Identifier '--' '+'
    case 413444:                    // Character '--' '+'
    case 413445:                    // String '--' '+'
    case 413446:                    // Integer '--' '+'
    case 413447:                    // Complex '--' '+'
    case 413448:                    // Real '--' '+'
    case 429827:                    // Identifier '--' '++'
    case 429828:                    // Character '--' '++'
    case 429829:                    // String '--' '++'
    case 429830:                    // Integer '--' '++'
    case 429831:                    // Complex '--' '++'
    case 429832:                    // Real '--' '++'
    case 446211:                    // Identifier '--' '+='
    case 446212:                    // Character '--' '+='
    case 446213:                    // String '--' '+='
    case 446214:                    // Integer '--' '+='
    case 446215:                    // Complex '--' '+='
    case 446216:                    // Real '--' '+='
    case 462595:                    // Identifier '--' ','
    case 462596:                    // Character '--' ','
    case 462597:                    // String '--' ','
    case 462598:                    // Integer '--' ','
    case 462599:                    // Complex '--' ','
    case 462600:                    // Real '--' ','
    case 478979:                    // Identifier '--' '-'
    case 478980:                    // Character '--' '-'
    case 478981:                    // String '--' '-'
    case 478982:                    // Integer '--' '-'
    case 478983:                    // Complex '--' '-'
    case 478984:                    // Real '--' '-'
    case 495363:                    // Identifier '--' '--'
    case 495364:                    // Character '--' '--'
    case 495365:                    // String '--' '--'
    case 495366:                    // Integer '--' '--'
    case 495367:                    // Complex '--' '--'
    case 495368:                    // Real '--' '--'
    case 511747:                    // Identifier '--' '-='
    case 511748:                    // Character '--' '-='
    case 511749:                    // String '--' '-='
    case 511750:                    // Integer '--' '-='
    case 511751:                    // Complex '--' '-='
    case 511752:                    // Real '--' '-='
    case 544515:                    // Identifier '--' '/'
    case 544516:                    // Character '--' '/'
    case 544517:                    // String '--' '/'
    case 544518:                    // Integer '--' '/'
    case 544519:                    // Complex '--' '/'
    case 544520:                    // Real '--' '/'
    case 560899:                    // Identifier '--' '/='
    case 560900:                    // Character '--' '/='
    case 560901:                    // String '--' '/='
    case 560902:                    // Integer '--' '/='
    case 560903:                    // Complex '--' '/='
    case 560904:                    // Real '--' '/='
    case 577283:                    // Identifier '--' ':'
    case 577284:                    // Character '--' ':'
    case 577285:                    // String '--' ':'
    case 577286:                    // Integer '--' ':'
    case 577287:                    // Complex '--' ':'
    case 577288:                    // Real '--' ':'
    case 593667:                    // Identifier '--' ':='
    case 593668:                    // Character '--' ':='
    case 593669:                    // String '--' ':='
    case 593670:                    // Integer '--' ':='
    case 593671:                    // Complex '--' ':='
    case 593672:                    // Real '--' ':='
    case 610051:                    // Identifier '--' ';'
    case 610052:                    // Character '--' ';'
    case 610053:                    // String '--' ';'
    case 610054:                    // Integer '--' ';'
    case 610055:                    // Complex '--' ';'
    case 610056:                    // Real '--' ';'
    case 626435:                    // Identifier '--' '<'
    case 626436:                    // Character '--' '<'
    case 626437:                    // String '--' '<'
    case 626438:                    // Integer '--' '<'
    case 626439:                    // Complex '--' '<'
    case 626440:                    // Real '--' '<'
    case 642819:                    // Identifier '--' '<<'
    case 642820:                    // Character '--' '<<'
    case 642821:                    // String '--' '<<'
    case 642822:                    // Integer '--' '<<'
    case 642823:                    // Complex '--' '<<'
    case 642824:                    // Real '--' '<<'
    case 659203:                    // Identifier '--' '<<='
    case 659204:                    // Character '--' '<<='
    case 659205:                    // String '--' '<<='
    case 659206:                    // Integer '--' '<<='
    case 659207:                    // Complex '--' '<<='
    case 659208:                    // Real '--' '<<='
    case 675587:                    // Identifier '--' '<='
    case 675588:                    // Character '--' '<='
    case 675589:                    // String '--' '<='
    case 675590:                    // Integer '--' '<='
    case 675591:                    // Complex '--' '<='
    case 675592:                    // Real '--' '<='
    case 691971:                    // Identifier '--' '='
    case 691972:                    // Character '--' '='
    case 691973:                    // String '--' '='
    case 691974:                    // Integer '--' '='
    case 691975:                    // Complex '--' '='
    case 691976:                    // Real '--' '='
    case 708355:                    // Identifier '--' '=='
    case 708356:                    // Character '--' '=='
    case 708357:                    // String '--' '=='
    case 708358:                    // Integer '--' '=='
    case 708359:                    // Complex '--' '=='
    case 708360:                    // Real '--' '=='
    case 724739:                    // Identifier '--' '>'
    case 724740:                    // Character '--' '>'
    case 724741:                    // String '--' '>'
    case 724742:                    // Integer '--' '>'
    case 724743:                    // Complex '--' '>'
    case 724744:                    // Real '--' '>'
    case 741123:                    // Identifier '--' '>='
    case 741124:                    // Character '--' '>='
    case 741125:                    // String '--' '>='
    case 741126:                    // Integer '--' '>='
    case 741127:                    // Complex '--' '>='
    case 741128:                    // Real '--' '>='
    case 757507:                    // Identifier '--' '>>'
    case 757508:                    // Character '--' '>>'
    case 757509:                    // String '--' '>>'
    case 757510:                    // Integer '--' '>>'
    case 757511:                    // Complex '--' '>>'
    case 757512:                    // Real '--' '>>'
    case 773891:                    // Identifier '--' '>>='
    case 773892:                    // Character '--' '>>='
    case 773893:                    // String '--' '>>='
    case 773894:                    // Integer '--' '>>='
    case 773895:                    // Complex '--' '>>='
    case 773896:                    // Real '--' '>>='
    case 790275:                    // Identifier '--' '?'
    case 790276:                    // Character '--' '?'
    case 790277:                    // String '--' '?'
    case 790278:                    // Integer '--' '?'
    case 790279:                    // Complex '--' '?'
    case 790280:                    // Real '--' '?'
    case 806659:                    // Identifier '--' '?='
    case 806660:                    // Character '--' '?='
    case 806661:                    // String '--' '?='
    case 806662:                    // Integer '--' '?='
    case 806663:                    // Complex '--' '?='
    case 806664:                    // Real '--' '?='
    case 839427:                    // Identifier '--' ']'
    case 839428:                    // Character '--' ']'
    case 839429:                    // String '--' ']'
    case 839430:                    // Integer '--' ']'
    case 839431:                    // Complex '--' ']'
    case 839432:                    // Real '--' ']'
    case 855811:                    // Identifier '--' '^'
    case 855812:                    // Character '--' '^'
    case 855813:                    // String '--' '^'
    case 855814:                    // Integer '--' '^'
    case 855815:                    // Complex '--' '^'
    case 855816:                    // Real '--' '^'
    case 872195:                    // Identifier '--' '^='
    case 872196:                    // Character '--' '^='
    case 872197:                    // String '--' '^='
    case 872198:                    // Integer '--' '^='
    case 872199:                    // Complex '--' '^='
    case 872200:                    // Real '--' '^='
    case 888579:                    // Identifier '--' 'break'
    case 888580:                    // Character '--' 'break'
    case 888581:                    // String '--' 'break'
    case 888582:                    // Integer '--' 'break'
    case 888583:                    // Complex '--' 'break'
    case 888584:                    // Real '--' 'break'
    case 904963:                    // Identifier '--' 'case'
    case 904964:                    // Character '--' 'case'
    case 904965:                    // String '--' 'case'
    case 904966:                    // Integer '--' 'case'
    case 904967:                    // Complex '--' 'case'
    case 904968:                    // Real '--' 'case'
    case 921347:                    // Identifier '--' 'catch'
    case 921348:                    // Character '--' 'catch'
    case 921349:                    // String '--' 'catch'
    case 921350:                    // Integer '--' 'catch'
    case 921351:                    // Complex '--' 'catch'
    case 921352:                    // Real '--' 'catch'
    case 937731:                    // Identifier '--' 'continue'
    case 937732:                    // Character '--' 'continue'
    case 937733:                    // String '--' 'continue'
    case 937734:                    // Integer '--' 'continue'
    case 937735:                    // Complex '--' 'continue'
    case 937736:                    // Real '--' 'continue'
    case 954115:                    // Identifier '--' 'default'
    case 954116:                    // Character '--' 'default'
    case 954117:                    // String '--' 'default'
    case 954118:                    // Integer '--' 'default'
    case 954119:                    // Complex '--' 'default'
    case 954120:                    // Real '--' 'default'
    case 970499:                    // Identifier '--' 'do'
    case 970500:                    // Character '--' 'do'
    case 970501:                    // String '--' 'do'
    case 970502:                    // Integer '--' 'do'
    case 970503:                    // Complex '--' 'do'
    case 970504:                    // Real '--' 'do'
    case 986883:                    // Identifier '--' 'else'
    case 986884:                    // Character '--' 'else'
    case 986885:                    // String '--' 'else'
    case 986886:                    // Integer '--' 'else'
    case 986887:                    // Complex '--' 'else'
    case 986888:                    // Real '--' 'else'
    case 1036035:                   // Identifier '--' 'for'
    case 1036036:                   // Character '--' 'for'
    case 1036037:                   // String '--' 'for'
    case 1036038:                   // Integer '--' 'for'
    case 1036039:                   // Complex '--' 'for'
    case 1036040:                   // Real '--' 'for'
    case 1052419:                   // Identifier '--' 'foreach'
    case 1052420:                   // Character '--' 'foreach'
    case 1052421:                   // String '--' 'foreach'
    case 1052422:                   // Integer '--' 'foreach'
    case 1052423:                   // Complex '--' 'foreach'
    case 1052424:                   // Real '--' 'foreach'
    case 1068803:                   // Identifier '--' 'global'
    case 1068804:                   // Character '--' 'global'
    case 1068805:                   // String '--' 'global'
    case 1068806:                   // Integer '--' 'global'
    case 1068807:                   // Complex '--' 'global'
    case 1068808:                   // Real '--' 'global'
    case 1117955:                   // Identifier '--' 'if'
    case 1117956:                   // Character '--' 'if'
    case 1117957:                   // String '--' 'if'
    case 1117958:                   // Integer '--' 'if'
    case 1117959:                   // Complex '--' 'if'
    case 1117960:                   // Real '--' 'if'
    case 1134339:                   // Identifier '--' 'import'
    case 1134340:                   // Character '--' 'import'
    case 1134341:                   // String '--' 'import'
    case 1134342:                   // Integer '--' 'import'
    case 1134343:                   // Complex '--' 'import'
    case 1134344:                   // Real '--' 'import'
    case 1150723:                   // Identifier '--' 'include'
    case 1150724:                   // Character '--' 'include'
    case 1150725:                   // String '--' 'include'
    case 1150726:                   // Integer '--' 'include'
    case 1150727:                   // Complex '--' 'include'
    case 1150728:                   // Real '--' 'include'
    case 1167107:                   // Identifier '--' 'local'
    case 1167108:                   // Character '--' 'local'
    case 1167109:                   // String '--' 'local'
    case 1167110:                   // Integer '--' 'local'
    case 1167111:                   // Complex '--' 'local'
    case 1167112:                   // Real '--' 'local'
    case 1183491:                   // Identifier '--' 'return'
    case 1183492:                   // Character '--' 'return'
    case 1183493:                   // String '--' 'return'
    case 1183494:                   // Integer '--' 'return'
    case 1183495:                   // Complex '--' 'return'
    case 1183496:                   // Real '--' 'return'
    case 1199875:                   // Identifier '--' 'switch'
    case 1199876:                   // Character '--' 'switch'
    case 1199877:                   // String '--' 'switch'
    case 1199878:                   // Integer '--' 'switch'
    case 1199879:                   // Complex '--' 'switch'
    case 1199880:                   // Real '--' 'switch'
    case 1216259:                   // Identifier '--' 'test'
    case 1216260:                   // Character '--' 'test'
    case 1216261:                   // String '--' 'test'
    case 1216262:                   // Integer '--' 'test'
    case 1216263:                   // Complex '--' 'test'
    case 1216264:                   // Real '--' 'test'
    case 1232643:                   // Identifier '--' 'throw'
    case 1232644:                   // Character '--' 'throw'
    case 1232645:                   // String '--' 'throw'
    case 1232646:                   // Integer '--' 'throw'
    case 1232647:                   // Complex '--' 'throw'
    case 1232648:                   // Real '--' 'throw'
    case 1249027:                   // Identifier '--' 'try'
    case 1249028:                   // Character '--' 'try'
    case 1249029:                   // String '--' 'try'
    case 1249030:                   // Integer '--' 'try'
    case 1249031:                   // Complex '--' 'try'
    case 1249032:                   // Real '--' 'try'
    case 1265411:                   // Identifier '--' 'while'
    case 1265412:                   // Character '--' 'while'
    case 1265413:                   // String '--' 'while'
    case 1265414:                   // Integer '--' 'while'
    case 1265415:                   // Complex '--' 'while'
    case 1265416:                   // Real '--' 'while'
    case 1298179:                   // Identifier '--' '|'
    case 1298180:                   // Character '--' '|'
    case 1298181:                   // String '--' '|'
    case 1298182:                   // Integer '--' '|'
    case 1298183:                   // Complex '--' '|'
    case 1298184:                   // Real '--' '|'
    case 1314563:                   // Identifier '--' '|='
    case 1314564:                   // Character '--' '|='
    case 1314565:                   // String '--' '|='
    case 1314566:                   // Integer '--' '|='
    case 1314567:                   // Complex '--' '|='
    case 1314568:                   // Real '--' '|='
    case 1330947:                   // Identifier '--' '||'
    case 1330948:                   // Character '--' '||'
    case 1330949:                   // String '--' '||'
    case 1330950:                   // Integer '--' '||'
    case 1330951:                   // Complex '--' '||'
    case 1330952:                   // Real '--' '||'
    case 1347331:                   // Identifier '--' '}'
    case 1347332:                   // Character '--' '}'
    case 1347333:                   // String '--' '}'
    case 1347334:                   // Integer '--' '}'
    case 1347335:                   // Complex '--' '}'
    case 1347336:                   // Real '--' '}'
    case 1363715:                   // Identifier '--' '~'
    case 1363716:                   // Character '--' '~'
    case 1363717:                   // String '--' '~'
    case 1363718:                   // Integer '--' '~'
    case 1363719:                   // Complex '--' '~'
    case 1363720:                   // Real '--' '~'
      try_Primary();
      lookahead1W(6);               // WhiteSpace^token | '--'
      consumeT(30);                 // '--'
      break;
    case 26:                        // '++'
      consumeT(26);                 // '++'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 30:                        // '--'
      consumeT(30);                 // '--'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 25:                        // '+'
      consumeT(25);                 // '+'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 29:                        // '-'
      consumeT(29);                 // '-'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 83:                        // '~'
      consumeT(83);                 // '~'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case 12:                        // '!'
      consumeT(12);                 // '!'
      lookahead1W(22);              // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
      try_Primary();
      break;
    case -10:
      break;
    default:
      try_Primary();
    }
  }

  function parse_Primary()
  {
    eventHandler.startNonterminal("Primary", e0);
    switch (l1)
    {
    case 3:                         // Identifier
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      if (l1 != 3)                  // Identifier
      {
        whitespace();
        parse_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      whitespace();
      parse_Member();
      break;
    case 20:                        // '('
      parse_ParenthesizedExpression();
      break;
    default:
      parse_Value();
    }
    eventHandler.endNonterminal("Primary", e0);
  }

  function try_Primary()
  {
    switch (l1)
    {
    case 3:                         // Identifier
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      if (l1 != 3)                  // Identifier
      {
        try_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      try_Member();
      break;
    case 20:                        // '('
      try_ParenthesizedExpression();
      break;
    default:
      try_Value();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(19);              // WhiteSpace^token | '(' | '.' | '{'
      switch (lk)
      {
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 53251)                // Identifier '.' Identifier
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_NamespaceDeclaration();
          lk = -11;
        }
        catch (p11A)
        {
          lk = -12;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case 59:                        // 'do'
      parse_Do();
      break;
    case 77:                        // 'while'
      parse_While();
      break;
    case 63:                        // 'for'
      parse_For();
      break;
    case 64:                        // 'foreach'
      parse_ForEach();
      break;
    case 54:                        // 'break'
      parse_Break();
      break;
    case 57:                        // 'continue'
      parse_Continue();
      break;
    case 68:                        // 'if'
      parse_If();
      break;
    case 73:                        // 'switch'
      parse_Switch();
      break;
    case 76:                        // 'try'
      parse_Try();
      break;
    case 74:                        // 'test'
      parse_Test();
      break;
    case -11:
    case 9987:                      // Identifier '{'
      parse_NamespaceDeclaration();
      break;
    case 72:                        // 'return'
      parse_Return();
      break;
    case 69:                        // 'import'
      parse_Import();
      break;
    case 70:                        // 'include'
      parse_Include();
      break;
    case 65:                        // 'global'
      parse_Global();
      break;
    case 71:                        // 'local'
      parse_Local();
      break;
    case 75:                        // 'throw'
      parse_Throw();
      break;
    case 37:                        // ';'
      parse_EmptyStatement();
      break;
    default:
      parse_FunctionDeclaration();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(19);              // WhiteSpace^token | '(' | '.' | '{'
      switch (lk)
      {
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 53251)                // Identifier '.' Identifier
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_NamespaceDeclaration();
          memoize(4, e0A, -11);
          lk = -20;
        }
        catch (p11A)
        {
          lk = -12;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(4, e0A, -12);
        }
      }
    }
    switch (lk)
    {
    case 59:                        // 'do'
      try_Do();
      break;
    case 77:                        // 'while'
      try_While();
      break;
    case 63:                        // 'for'
      try_For();
      break;
    case 64:                        // 'foreach'
      try_ForEach();
      break;
    case 54:                        // 'break'
      try_Break();
      break;
    case 57:                        // 'continue'
      try_Continue();
      break;
    case 68:                        // 'if'
      try_If();
      break;
    case 73:                        // 'switch'
      try_Switch();
      break;
    case 76:                        // 'try'
      try_Try();
      break;
    case 74:                        // 'test'
      try_Test();
      break;
    case -11:
    case 9987:                      // Identifier '{'
      try_NamespaceDeclaration();
      break;
    case 72:                        // 'return'
      try_Return();
      break;
    case 69:                        // 'import'
      try_Import();
      break;
    case 70:                        // 'include'
      try_Include();
      break;
    case 65:                        // 'global'
      try_Global();
      break;
    case 71:                        // 'local'
      try_Local();
      break;
    case 75:                        // 'throw'
      try_Throw();
      break;
    case 37:                        // ';'
      try_EmptyStatement();
      break;
    case -20:
      break;
    default:
      try_FunctionDeclaration();
    }
  }

  function parse_Do()
  {
    eventHandler.startNonterminal("Do", e0);
    consume(59);                    // 'do'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(13);                // WhiteSpace^token | 'while'
    consume(77);                    // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    eventHandler.endNonterminal("Do", e0);
  }

  function try_Do()
  {
    consumeT(59);                   // 'do'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(13);                // WhiteSpace^token | 'while'
    consumeT(77);                   // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
  }

  function parse_While()
  {
    eventHandler.startNonterminal("While", e0);
    consume(77);                    // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("While", e0);
  }

  function try_While()
  {
    consumeT(77);                   // 'while'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_For()
  {
    eventHandler.startNonterminal("For", e0);
    consume(63);                    // 'for'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(37);                    // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(37);                    // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("For", e0);
  }

  function try_For()
  {
    consumeT(63);                   // 'for'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(37);                   // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(37);                   // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_ForEach()
  {
    eventHandler.startNonterminal("ForEach", e0);
    consume(64);                    // 'foreach'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(37);                    // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consume(37);                    // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("ForEach", e0);
  }

  function try_ForEach()
  {
    consumeT(64);                   // 'foreach'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(37);                   // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(9);                 // WhiteSpace^token | ';'
    consumeT(37);                   // ';'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Break()
  {
    eventHandler.startNonterminal("Break", e0);
    consume(54);                    // 'break'
    eventHandler.endNonterminal("Break", e0);
  }

  function try_Break()
  {
    consumeT(54);                   // 'break'
  }

  function parse_Continue()
  {
    eventHandler.startNonterminal("Continue", e0);
    consume(57);                    // 'continue'
    eventHandler.endNonterminal("Continue", e0);
  }

  function try_Continue()
  {
    consumeT(57);                   // 'continue'
  }

  function parse_If()
  {
    eventHandler.startNonterminal("If", e0);
    consume(68);                    // 'if'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(40);                // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
    switch (l1)
    {
    case 60:                        // 'else'
      lookahead2W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 444:                     // 'else' Identifier
        lookahead3W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 6460:                    // 'else' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10044:                   // 'else' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1212:                    // 'else' Comment
      case 4796:                    // 'else' ';'
      case 6972:                    // 'else' 'break'
      case 7356:                    // 'else' 'continue'
        lookahead3W(40);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
        break;
      case 7868:                    // 'else' 'f32'
      case 7996:                    // 'else' 'f64'
      case 8508:                    // 'else' 'i32'
      case 8636:                    // 'else' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 572:                     // 'else' Character
      case 700:                     // 'else' String
      case 828:                     // 'else' Integer
      case 956:                     // 'else' Complex
      case 1084:                    // 'else' Real
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 1596:                    // 'else' '!'
      case 3260:                    // 'else' '+'
      case 3388:                    // 'else' '++'
      case 3772:                    // 'else' '-'
      case 3900:                    // 'else' '--'
      case 10684:                   // 'else' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8124:                    // 'else' 'for'
      case 8252:                    // 'else' 'foreach'
      case 8764:                    // 'else' 'if'
      case 9404:                    // 'else' 'switch'
      case 9532:                    // 'else' 'test'
      case 9916:                    // 'else' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2620:                    // 'else' '('
      case 7612:                    // 'else' 'do'
      case 8380:                    // 'else' 'global'
      case 8892:                    // 'else' 'import'
      case 9020:                    // 'else' 'include'
      case 9148:                    // 'else' 'local'
      case 9276:                    // 'else' 'return'
      case 9660:                    // 'else' 'throw'
      case 9788:                    // 'else' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // END
     && lk != 3                     // Identifier
     && lk != 4                     // Character
     && lk != 5                     // String
     && lk != 6                     // Integer
     && lk != 7                     // Complex
     && lk != 8                     // Real
     && lk != 9                     // Comment
     && lk != 12                    // '!'
     && lk != 20                    // '('
     && lk != 21                    // ')'
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 28                    // ','
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 35                    // ':'
     && lk != 37                    // ';'
     && lk != 50                    // '['
     && lk != 51                    // ']'
     && lk != 54                    // 'break'
     && lk != 55                    // 'case'
     && lk != 56                    // 'catch'
     && lk != 57                    // 'continue'
     && lk != 58                    // 'default'
     && lk != 59                    // 'do'
     && lk != 61                    // 'f32'
     && lk != 62                    // 'f64'
     && lk != 63                    // 'for'
     && lk != 64                    // 'foreach'
     && lk != 65                    // 'global'
     && lk != 66                    // 'i32'
     && lk != 67                    // 'i64'
     && lk != 68                    // 'if'
     && lk != 69                    // 'import'
     && lk != 70                    // 'include'
     && lk != 71                    // 'local'
     && lk != 72                    // 'return'
     && lk != 73                    // 'switch'
     && lk != 74                    // 'test'
     && lk != 75                    // 'throw'
     && lk != 76                    // 'try'
     && lk != 77                    // 'while'
     && lk != 78                    // '{'
     && lk != 82                    // '}'
     && lk != 83)                   // '~'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Else();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(5, e0, lk);
      }
    }
    if (lk == -1)
    {
      whitespace();
      parse_Else();
    }
    eventHandler.endNonterminal("If", e0);
  }

  function try_If()
  {
    consumeT(68);                   // 'if'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(40);                // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
    switch (l1)
    {
    case 60:                        // 'else'
      lookahead2W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 444:                     // 'else' Identifier
        lookahead3W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 6460:                    // 'else' '['
        lookahead3W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 10044:                   // 'else' '{'
        lookahead3W(35);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
        break;
      case 1212:                    // 'else' Comment
      case 4796:                    // 'else' ';'
      case 6972:                    // 'else' 'break'
      case 7356:                    // 'else' 'continue'
        lookahead3W(40);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
        break;
      case 7868:                    // 'else' 'f32'
      case 7996:                    // 'else' 'f64'
      case 8508:                    // 'else' 'i32'
      case 8636:                    // 'else' 'i64'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      case 572:                     // 'else' Character
      case 700:                     // 'else' String
      case 828:                     // 'else' Integer
      case 956:                     // 'else' Complex
      case 1084:                    // 'else' Real
        lookahead3W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        break;
      case 1596:                    // 'else' '!'
      case 3260:                    // 'else' '+'
      case 3388:                    // 'else' '++'
      case 3772:                    // 'else' '-'
      case 3900:                    // 'else' '--'
      case 10684:                   // 'else' '~'
        lookahead3W(22);            // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
        break;
      case 8124:                    // 'else' 'for'
      case 8252:                    // 'else' 'foreach'
      case 8764:                    // 'else' 'if'
      case 9404:                    // 'else' 'switch'
      case 9532:                    // 'else' 'test'
      case 9916:                    // 'else' 'while'
        lookahead3W(3);             // WhiteSpace^token | '('
        break;
      case 2620:                    // 'else' '('
      case 7612:                    // 'else' 'do'
      case 8380:                    // 'else' 'global'
      case 8892:                    // 'else' 'import'
      case 9020:                    // 'else' 'include'
      case 9148:                    // 'else' 'local'
      case 9276:                    // 'else' 'return'
      case 9660:                    // 'else' 'throw'
      case 9788:                    // 'else' 'try'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // END
     && lk != 3                     // Identifier
     && lk != 4                     // Character
     && lk != 5                     // String
     && lk != 6                     // Integer
     && lk != 7                     // Complex
     && lk != 8                     // Real
     && lk != 9                     // Comment
     && lk != 12                    // '!'
     && lk != 20                    // '('
     && lk != 21                    // ')'
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 28                    // ','
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 35                    // ':'
     && lk != 37                    // ';'
     && lk != 50                    // '['
     && lk != 51                    // ']'
     && lk != 54                    // 'break'
     && lk != 55                    // 'case'
     && lk != 56                    // 'catch'
     && lk != 57                    // 'continue'
     && lk != 58                    // 'default'
     && lk != 59                    // 'do'
     && lk != 61                    // 'f32'
     && lk != 62                    // 'f64'
     && lk != 63                    // 'for'
     && lk != 64                    // 'foreach'
     && lk != 65                    // 'global'
     && lk != 66                    // 'i32'
     && lk != 67                    // 'i64'
     && lk != 68                    // 'if'
     && lk != 69                    // 'import'
     && lk != 70                    // 'include'
     && lk != 71                    // 'local'
     && lk != 72                    // 'return'
     && lk != 73                    // 'switch'
     && lk != 74                    // 'test'
     && lk != 75                    // 'throw'
     && lk != 76                    // 'try'
     && lk != 77                    // 'while'
     && lk != 78                    // '{'
     && lk != 82                    // '}'
     && lk != 83)                   // '~'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Else();
          memoize(5, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(5, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      try_Else();
    }
  }

  function parse_Else()
  {
    eventHandler.startNonterminal("Else", e0);
    consume(60);                    // 'else'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Else", e0);
  }

  function try_Else()
  {
    consumeT(60);                   // 'else'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Switch()
  {
    eventHandler.startNonterminal("Switch", e0);
    consume(73);                    // 'switch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    lookahead1W(14);                // WhiteSpace^token | '{'
    consume(78);                    // '{'
    for (;;)
    {
      lookahead1W(12);              // WhiteSpace^token | 'case'
      whitespace();
      parse_Case();
      if (l1 != 55)                 // 'case'
      {
        break;
      }
    }
    if (l1 == 58)                   // 'default'
    {
      whitespace();
      parse_Default();
    }
    consume(82);                    // '}'
    eventHandler.endNonterminal("Switch", e0);
  }

  function try_Switch()
  {
    consumeT(73);                   // 'switch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
    lookahead1W(14);                // WhiteSpace^token | '{'
    consumeT(78);                   // '{'
    for (;;)
    {
      lookahead1W(12);              // WhiteSpace^token | 'case'
      try_Case();
      if (l1 != 55)                 // 'case'
      {
        break;
      }
    }
    if (l1 == 58)                   // 'default'
    {
      try_Default();
    }
    consumeT(82);                   // '}'
  }

  function parse_Case()
  {
    eventHandler.startNonterminal("Case", e0);
    consume(55);                    // 'case'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consume(35);                    // ':'
    for (;;)
    {
      lookahead1W(36);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'case' | 'continue' | 'default' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
      if (l1 == 55                  // 'case'
       || l1 == 58                  // 'default'
       || l1 == 82)                 // '}'
      {
        break;
      }
      whitespace();
      parse_Expression();
    }
    eventHandler.endNonterminal("Case", e0);
  }

  function try_Case()
  {
    consumeT(55);                   // 'case'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consumeT(35);                   // ':'
    for (;;)
    {
      lookahead1W(36);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'case' | 'continue' | 'default' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
      if (l1 == 55                  // 'case'
       || l1 == 58                  // 'default'
       || l1 == 82)                 // '}'
      {
        break;
      }
      try_Expression();
    }
  }

  function parse_Default()
  {
    eventHandler.startNonterminal("Default", e0);
    consume(58);                    // 'default'
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consume(35);                    // ':'
    for (;;)
    {
      lookahead1W(30);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '}' | '~'
      if (l1 == 82)                 // '}'
      {
        break;
      }
      whitespace();
      parse_Expression();
    }
    eventHandler.endNonterminal("Default", e0);
  }

  function try_Default()
  {
    consumeT(58);                   // 'default'
    lookahead1W(7);                 // WhiteSpace^token | ':'
    consumeT(35);                   // ':'
    for (;;)
    {
      lookahead1W(30);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '}' | '~'
      if (l1 == 82)                 // '}'
      {
        break;
      }
      try_Expression();
    }
  }

  function parse_Try()
  {
    eventHandler.startNonterminal("Try", e0);
    consume(76);                    // 'try'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(40);                // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
    switch (l1)
    {
    case 56:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 2616:                    // 'catch' '('
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 51768                 // 'catch' '(' Identifier
     || lk == 68152                 // 'catch' '(' Character
     || lk == 84536                 // 'catch' '(' String
     || lk == 100920                // 'catch' '(' Integer
     || lk == 117304                // 'catch' '(' Complex
     || lk == 133688                // 'catch' '(' Real
     || lk == 150072                // 'catch' '(' Comment
     || lk == 199224                // 'catch' '(' '!'
     || lk == 330296                // 'catch' '(' '('
     || lk == 412216                // 'catch' '(' '+'
     || lk == 428600                // 'catch' '(' '++'
     || lk == 477752                // 'catch' '(' '-'
     || lk == 494136                // 'catch' '(' '--'
     || lk == 608824                // 'catch' '(' ';'
     || lk == 821816                // 'catch' '(' '['
     || lk == 887352                // 'catch' '(' 'break'
     || lk == 936504                // 'catch' '(' 'continue'
     || lk == 969272                // 'catch' '(' 'do'
     || lk == 1002040               // 'catch' '(' 'f32'
     || lk == 1018424               // 'catch' '(' 'f64'
     || lk == 1034808               // 'catch' '(' 'for'
     || lk == 1051192               // 'catch' '(' 'foreach'
     || lk == 1067576               // 'catch' '(' 'global'
     || lk == 1083960               // 'catch' '(' 'i32'
     || lk == 1100344               // 'catch' '(' 'i64'
     || lk == 1116728               // 'catch' '(' 'if'
     || lk == 1133112               // 'catch' '(' 'import'
     || lk == 1149496               // 'catch' '(' 'include'
     || lk == 1165880               // 'catch' '(' 'local'
     || lk == 1182264               // 'catch' '(' 'return'
     || lk == 1198648               // 'catch' '(' 'switch'
     || lk == 1215032               // 'catch' '(' 'test'
     || lk == 1231416               // 'catch' '(' 'throw'
     || lk == 1247800               // 'catch' '(' 'try'
     || lk == 1264184               // 'catch' '(' 'while'
     || lk == 1280568               // 'catch' '(' '{'
     || lk == 1362488)              // 'catch' '(' '~'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      whitespace();
      parse_Catch();
    }
    eventHandler.endNonterminal("Try", e0);
  }

  function try_Try()
  {
    consumeT(76);                   // 'try'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(40);                // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
    switch (l1)
    {
    case 56:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 2616:                    // 'catch' '('
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 51768                 // 'catch' '(' Identifier
     || lk == 68152                 // 'catch' '(' Character
     || lk == 84536                 // 'catch' '(' String
     || lk == 100920                // 'catch' '(' Integer
     || lk == 117304                // 'catch' '(' Complex
     || lk == 133688                // 'catch' '(' Real
     || lk == 150072                // 'catch' '(' Comment
     || lk == 199224                // 'catch' '(' '!'
     || lk == 330296                // 'catch' '(' '('
     || lk == 412216                // 'catch' '(' '+'
     || lk == 428600                // 'catch' '(' '++'
     || lk == 477752                // 'catch' '(' '-'
     || lk == 494136                // 'catch' '(' '--'
     || lk == 608824                // 'catch' '(' ';'
     || lk == 821816                // 'catch' '(' '['
     || lk == 887352                // 'catch' '(' 'break'
     || lk == 936504                // 'catch' '(' 'continue'
     || lk == 969272                // 'catch' '(' 'do'
     || lk == 1002040               // 'catch' '(' 'f32'
     || lk == 1018424               // 'catch' '(' 'f64'
     || lk == 1034808               // 'catch' '(' 'for'
     || lk == 1051192               // 'catch' '(' 'foreach'
     || lk == 1067576               // 'catch' '(' 'global'
     || lk == 1083960               // 'catch' '(' 'i32'
     || lk == 1100344               // 'catch' '(' 'i64'
     || lk == 1116728               // 'catch' '(' 'if'
     || lk == 1133112               // 'catch' '(' 'import'
     || lk == 1149496               // 'catch' '(' 'include'
     || lk == 1165880               // 'catch' '(' 'local'
     || lk == 1182264               // 'catch' '(' 'return'
     || lk == 1198648               // 'catch' '(' 'switch'
     || lk == 1215032               // 'catch' '(' 'test'
     || lk == 1231416               // 'catch' '(' 'throw'
     || lk == 1247800               // 'catch' '(' 'try'
     || lk == 1264184               // 'catch' '(' 'while'
     || lk == 1280568               // 'catch' '(' '{'
     || lk == 1362488)              // 'catch' '(' '~'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          memoize(6, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      try_Catch();
    }
  }

  function parse_Test()
  {
    eventHandler.startNonterminal("Test", e0);
    consume(74);                    // 'test'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(28);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
    switch (l1)
    {
    case 37:                        // ';'
      lookahead2W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 2725:                    // ';' ')'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4773:                    // ';' ';'
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 3                     // Identifier
     && lk != 4                     // Character
     && lk != 5                     // String
     && lk != 6                     // Integer
     && lk != 7                     // Complex
     && lk != 8                     // Real
     && lk != 9                     // Comment
     && lk != 12                    // '!'
     && lk != 20                    // '('
     && lk != 21                    // ')'
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 50                    // '['
     && lk != 54                    // 'break'
     && lk != 57                    // 'continue'
     && lk != 59                    // 'do'
     && lk != 61                    // 'f32'
     && lk != 62                    // 'f64'
     && lk != 63                    // 'for'
     && lk != 64                    // 'foreach'
     && lk != 65                    // 'global'
     && lk != 66                    // 'i32'
     && lk != 67                    // 'i64'
     && lk != 68                    // 'if'
     && lk != 69                    // 'import'
     && lk != 70                    // 'include'
     && lk != 71                    // 'local'
     && lk != 72                    // 'return'
     && lk != 73                    // 'switch'
     && lk != 74                    // 'test'
     && lk != 75                    // 'throw'
     && lk != 76                    // 'try'
     && lk != 77                    // 'while'
     && lk != 78                    // '{'
     && lk != 83                    // '~'
     && lk != 421                   // ';' Identifier
     && lk != 549                   // ';' Character
     && lk != 677                   // ';' String
     && lk != 805                   // ';' Integer
     && lk != 933                   // ';' Complex
     && lk != 1061                  // ';' Real
     && lk != 1189                  // ';' Comment
     && lk != 1573                  // ';' '!'
     && lk != 2597                  // ';' '('
     && lk != 3237                  // ';' '+'
     && lk != 3365                  // ';' '++'
     && lk != 3749                  // ';' '-'
     && lk != 3877                  // ';' '--'
     && lk != 6437                  // ';' '['
     && lk != 6949                  // ';' 'break'
     && lk != 7333                  // ';' 'continue'
     && lk != 7589                  // ';' 'do'
     && lk != 7845                  // ';' 'f32'
     && lk != 7973                  // ';' 'f64'
     && lk != 8101                  // ';' 'for'
     && lk != 8229                  // ';' 'foreach'
     && lk != 8357                  // ';' 'global'
     && lk != 8485                  // ';' 'i32'
     && lk != 8613                  // ';' 'i64'
     && lk != 8741                  // ';' 'if'
     && lk != 8869                  // ';' 'import'
     && lk != 8997                  // ';' 'include'
     && lk != 9125                  // ';' 'local'
     && lk != 9253                  // ';' 'return'
     && lk != 9381                  // ';' 'switch'
     && lk != 9509                  // ';' 'test'
     && lk != 9637                  // ';' 'throw'
     && lk != 9765                  // ';' 'try'
     && lk != 9893                  // ';' 'while'
     && lk != 10021                 // ';' '{'
     && lk != 10661)                // ';' '~'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Expression();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(7, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3                     // Identifier
     || lk == 4                     // Character
     || lk == 5                     // String
     || lk == 6                     // Integer
     || lk == 7                     // Complex
     || lk == 8                     // Real
     || lk == 9                     // Comment
     || lk == 12                    // '!'
     || lk == 20                    // '('
     || lk == 25                    // '+'
     || lk == 26                    // '++'
     || lk == 29                    // '-'
     || lk == 30                    // '--'
     || lk == 50                    // '['
     || lk == 54                    // 'break'
     || lk == 57                    // 'continue'
     || lk == 59                    // 'do'
     || lk == 61                    // 'f32'
     || lk == 62                    // 'f64'
     || lk == 63                    // 'for'
     || lk == 64                    // 'foreach'
     || lk == 65                    // 'global'
     || lk == 66                    // 'i32'
     || lk == 67                    // 'i64'
     || lk == 68                    // 'if'
     || lk == 69                    // 'import'
     || lk == 70                    // 'include'
     || lk == 71                    // 'local'
     || lk == 72                    // 'return'
     || lk == 73                    // 'switch'
     || lk == 74                    // 'test'
     || lk == 75                    // 'throw'
     || lk == 76                    // 'try'
     || lk == 77                    // 'while'
     || lk == 78                    // '{'
     || lk == 83)                   // '~'
    {
      whitespace();
      parse_Expression();
    }
    lookahead1W(16);                // WhiteSpace^token | ')' | ';'
    if (l1 == 37)                   // ';'
    {
      consume(37);                  // ';'
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (l1)
      {
      case 37:                      // ';'
        lookahead2W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        switch (lk)
        {
        case 2725:                  // ';' ')'
          lookahead3W(25);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 4773:                  // ';' ';'
          lookahead3W(28);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk == 51877               // ';' ')' Identifier
       || lk == 68261               // ';' ')' Character
       || lk == 84645               // ';' ')' String
       || lk == 101029              // ';' ')' Integer
       || lk == 117413              // ';' ')' Complex
       || lk == 133797              // ';' ')' Real
       || lk == 150181              // ';' ')' Comment
       || lk == 199333              // ';' ')' '!'
       || lk == 330405              // ';' ')' '('
       || lk == 348837              // ';' ';' ')'
       || lk == 412325              // ';' ')' '+'
       || lk == 428709              // ';' ')' '++'
       || lk == 477861              // ';' ')' '-'
       || lk == 494245              // ';' ')' '--'
       || lk == 608933              // ';' ')' ';'
       || lk == 821925              // ';' ')' '['
       || lk == 887461              // ';' ')' 'break'
       || lk == 936613              // ';' ')' 'continue'
       || lk == 969381              // ';' ')' 'do'
       || lk == 1002149             // ';' ')' 'f32'
       || lk == 1018533             // ';' ')' 'f64'
       || lk == 1034917             // ';' ')' 'for'
       || lk == 1051301             // ';' ')' 'foreach'
       || lk == 1067685             // ';' ')' 'global'
       || lk == 1084069             // ';' ')' 'i32'
       || lk == 1100453             // ';' ')' 'i64'
       || lk == 1116837             // ';' ')' 'if'
       || lk == 1133221             // ';' ')' 'import'
       || lk == 1149605             // ';' ')' 'include'
       || lk == 1165989             // ';' ')' 'local'
       || lk == 1182373             // ';' ')' 'return'
       || lk == 1198757             // ';' ')' 'switch'
       || lk == 1215141             // ';' ')' 'test'
       || lk == 1231525             // ';' ')' 'throw'
       || lk == 1247909             // ';' ')' 'try'
       || lk == 1264293             // ';' ')' 'while'
       || lk == 1280677             // ';' ')' '{'
       || lk == 1362597)            // ';' ')' '~'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            try_Expression();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(8, e0, lk);
        }
      }
      if (lk != -2
       && lk != 21                  // ')'
       && lk != 421                 // ';' Identifier
       && lk != 549                 // ';' Character
       && lk != 677                 // ';' String
       && lk != 805                 // ';' Integer
       && lk != 933                 // ';' Complex
       && lk != 1061                // ';' Real
       && lk != 1189                // ';' Comment
       && lk != 1573                // ';' '!'
       && lk != 2597                // ';' '('
       && lk != 3237                // ';' '+'
       && lk != 3365                // ';' '++'
       && lk != 3749                // ';' '-'
       && lk != 3877                // ';' '--'
       && lk != 6437                // ';' '['
       && lk != 6949                // ';' 'break'
       && lk != 7333                // ';' 'continue'
       && lk != 7589                // ';' 'do'
       && lk != 7845                // ';' 'f32'
       && lk != 7973                // ';' 'f64'
       && lk != 8101                // ';' 'for'
       && lk != 8229                // ';' 'foreach'
       && lk != 8357                // ';' 'global'
       && lk != 8485                // ';' 'i32'
       && lk != 8613                // ';' 'i64'
       && lk != 8741                // ';' 'if'
       && lk != 8869                // ';' 'import'
       && lk != 8997                // ';' 'include'
       && lk != 9125                // ';' 'local'
       && lk != 9253                // ';' 'return'
       && lk != 9381                // ';' 'switch'
       && lk != 9509                // ';' 'test'
       && lk != 9637                // ';' 'throw'
       && lk != 9765                // ';' 'try'
       && lk != 9893                // ';' 'while'
       && lk != 10021               // ';' '{'
       && lk != 10661)              // ';' '~'
      {
        whitespace();
        parse_Expression();
      }
      lookahead1W(16);              // WhiteSpace^token | ')' | ';'
      if (l1 == 37)                 // ';'
      {
        consume(37);                // ';'
        lookahead1W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        if (l1 != 21)               // ')'
        {
          whitespace();
          parse_Expression();
        }
      }
    }
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(40);                // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
    switch (l1)
    {
    case 56:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 2616:                    // 'catch' '('
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 51768                 // 'catch' '(' Identifier
     || lk == 68152                 // 'catch' '(' Character
     || lk == 84536                 // 'catch' '(' String
     || lk == 100920                // 'catch' '(' Integer
     || lk == 117304                // 'catch' '(' Complex
     || lk == 133688                // 'catch' '(' Real
     || lk == 150072                // 'catch' '(' Comment
     || lk == 199224                // 'catch' '(' '!'
     || lk == 330296                // 'catch' '(' '('
     || lk == 412216                // 'catch' '(' '+'
     || lk == 428600                // 'catch' '(' '++'
     || lk == 477752                // 'catch' '(' '-'
     || lk == 494136                // 'catch' '(' '--'
     || lk == 608824                // 'catch' '(' ';'
     || lk == 821816                // 'catch' '(' '['
     || lk == 887352                // 'catch' '(' 'break'
     || lk == 936504                // 'catch' '(' 'continue'
     || lk == 969272                // 'catch' '(' 'do'
     || lk == 1002040               // 'catch' '(' 'f32'
     || lk == 1018424               // 'catch' '(' 'f64'
     || lk == 1034808               // 'catch' '(' 'for'
     || lk == 1051192               // 'catch' '(' 'foreach'
     || lk == 1067576               // 'catch' '(' 'global'
     || lk == 1083960               // 'catch' '(' 'i32'
     || lk == 1100344               // 'catch' '(' 'i64'
     || lk == 1116728               // 'catch' '(' 'if'
     || lk == 1133112               // 'catch' '(' 'import'
     || lk == 1149496               // 'catch' '(' 'include'
     || lk == 1165880               // 'catch' '(' 'local'
     || lk == 1182264               // 'catch' '(' 'return'
     || lk == 1198648               // 'catch' '(' 'switch'
     || lk == 1215032               // 'catch' '(' 'test'
     || lk == 1231416               // 'catch' '(' 'throw'
     || lk == 1247800               // 'catch' '(' 'try'
     || lk == 1264184               // 'catch' '(' 'while'
     || lk == 1280568               // 'catch' '(' '{'
     || lk == 1362488)              // 'catch' '(' '~'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(9, e0, lk);
      }
    }
    if (lk == -1)
    {
      whitespace();
      parse_Catch();
    }
    eventHandler.endNonterminal("Test", e0);
  }

  function try_Test()
  {
    consumeT(74);                   // 'test'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(28);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
    switch (l1)
    {
    case 37:                        // ';'
      lookahead2W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 2725:                    // ';' ')'
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4773:                    // ';' ';'
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk != 3                     // Identifier
     && lk != 4                     // Character
     && lk != 5                     // String
     && lk != 6                     // Integer
     && lk != 7                     // Complex
     && lk != 8                     // Real
     && lk != 9                     // Comment
     && lk != 12                    // '!'
     && lk != 20                    // '('
     && lk != 21                    // ')'
     && lk != 25                    // '+'
     && lk != 26                    // '++'
     && lk != 29                    // '-'
     && lk != 30                    // '--'
     && lk != 50                    // '['
     && lk != 54                    // 'break'
     && lk != 57                    // 'continue'
     && lk != 59                    // 'do'
     && lk != 61                    // 'f32'
     && lk != 62                    // 'f64'
     && lk != 63                    // 'for'
     && lk != 64                    // 'foreach'
     && lk != 65                    // 'global'
     && lk != 66                    // 'i32'
     && lk != 67                    // 'i64'
     && lk != 68                    // 'if'
     && lk != 69                    // 'import'
     && lk != 70                    // 'include'
     && lk != 71                    // 'local'
     && lk != 72                    // 'return'
     && lk != 73                    // 'switch'
     && lk != 74                    // 'test'
     && lk != 75                    // 'throw'
     && lk != 76                    // 'try'
     && lk != 77                    // 'while'
     && lk != 78                    // '{'
     && lk != 83                    // '~'
     && lk != 421                   // ';' Identifier
     && lk != 549                   // ';' Character
     && lk != 677                   // ';' String
     && lk != 805                   // ';' Integer
     && lk != 933                   // ';' Complex
     && lk != 1061                  // ';' Real
     && lk != 1189                  // ';' Comment
     && lk != 1573                  // ';' '!'
     && lk != 2597                  // ';' '('
     && lk != 3237                  // ';' '+'
     && lk != 3365                  // ';' '++'
     && lk != 3749                  // ';' '-'
     && lk != 3877                  // ';' '--'
     && lk != 6437                  // ';' '['
     && lk != 6949                  // ';' 'break'
     && lk != 7333                  // ';' 'continue'
     && lk != 7589                  // ';' 'do'
     && lk != 7845                  // ';' 'f32'
     && lk != 7973                  // ';' 'f64'
     && lk != 8101                  // ';' 'for'
     && lk != 8229                  // ';' 'foreach'
     && lk != 8357                  // ';' 'global'
     && lk != 8485                  // ';' 'i32'
     && lk != 8613                  // ';' 'i64'
     && lk != 8741                  // ';' 'if'
     && lk != 8869                  // ';' 'import'
     && lk != 8997                  // ';' 'include'
     && lk != 9125                  // ';' 'local'
     && lk != 9253                  // ';' 'return'
     && lk != 9381                  // ';' 'switch'
     && lk != 9509                  // ';' 'test'
     && lk != 9637                  // ';' 'throw'
     && lk != 9765                  // ';' 'try'
     && lk != 9893                  // ';' 'while'
     && lk != 10021                 // ';' '{'
     && lk != 10661)                // ';' '~'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Expression();
          memoize(7, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(7, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3                     // Identifier
     || lk == 4                     // Character
     || lk == 5                     // String
     || lk == 6                     // Integer
     || lk == 7                     // Complex
     || lk == 8                     // Real
     || lk == 9                     // Comment
     || lk == 12                    // '!'
     || lk == 20                    // '('
     || lk == 25                    // '+'
     || lk == 26                    // '++'
     || lk == 29                    // '-'
     || lk == 30                    // '--'
     || lk == 50                    // '['
     || lk == 54                    // 'break'
     || lk == 57                    // 'continue'
     || lk == 59                    // 'do'
     || lk == 61                    // 'f32'
     || lk == 62                    // 'f64'
     || lk == 63                    // 'for'
     || lk == 64                    // 'foreach'
     || lk == 65                    // 'global'
     || lk == 66                    // 'i32'
     || lk == 67                    // 'i64'
     || lk == 68                    // 'if'
     || lk == 69                    // 'import'
     || lk == 70                    // 'include'
     || lk == 71                    // 'local'
     || lk == 72                    // 'return'
     || lk == 73                    // 'switch'
     || lk == 74                    // 'test'
     || lk == 75                    // 'throw'
     || lk == 76                    // 'try'
     || lk == 77                    // 'while'
     || lk == 78                    // '{'
     || lk == 83)                   // '~'
    {
      try_Expression();
    }
    lookahead1W(16);                // WhiteSpace^token | ')' | ';'
    if (l1 == 37)                   // ';'
    {
      consumeT(37);                 // ';'
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (l1)
      {
      case 37:                      // ';'
        lookahead2W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        switch (lk)
        {
        case 2725:                  // ';' ')'
          lookahead3W(25);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
          break;
        case 4773:                  // ';' ';'
          lookahead3W(28);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          break;
        }
        break;
      default:
        lk = l1;
      }
      if (lk == 51877               // ';' ')' Identifier
       || lk == 68261               // ';' ')' Character
       || lk == 84645               // ';' ')' String
       || lk == 101029              // ';' ')' Integer
       || lk == 117413              // ';' ')' Complex
       || lk == 133797              // ';' ')' Real
       || lk == 150181              // ';' ')' Comment
       || lk == 199333              // ';' ')' '!'
       || lk == 330405              // ';' ')' '('
       || lk == 348837              // ';' ';' ')'
       || lk == 412325              // ';' ')' '+'
       || lk == 428709              // ';' ')' '++'
       || lk == 477861              // ';' ')' '-'
       || lk == 494245              // ';' ')' '--'
       || lk == 608933              // ';' ')' ';'
       || lk == 821925              // ';' ')' '['
       || lk == 887461              // ';' ')' 'break'
       || lk == 936613              // ';' ')' 'continue'
       || lk == 969381              // ';' ')' 'do'
       || lk == 1002149             // ';' ')' 'f32'
       || lk == 1018533             // ';' ')' 'f64'
       || lk == 1034917             // ';' ')' 'for'
       || lk == 1051301             // ';' ')' 'foreach'
       || lk == 1067685             // ';' ')' 'global'
       || lk == 1084069             // ';' ')' 'i32'
       || lk == 1100453             // ';' ')' 'i64'
       || lk == 1116837             // ';' ')' 'if'
       || lk == 1133221             // ';' ')' 'import'
       || lk == 1149605             // ';' ')' 'include'
       || lk == 1165989             // ';' ')' 'local'
       || lk == 1182373             // ';' ')' 'return'
       || lk == 1198757             // ';' ')' 'switch'
       || lk == 1215141             // ';' ')' 'test'
       || lk == 1231525             // ';' ')' 'throw'
       || lk == 1247909             // ';' ')' 'try'
       || lk == 1264293             // ';' ')' 'while'
       || lk == 1280677             // ';' ')' '{'
       || lk == 1362597)            // ';' ')' '~'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2; var l3A = l3;
          var b3A = b3; var e3A = e3;
          try
          {
            try_Expression();
            memoize(8, e0A, -1);
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            memoize(8, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk != -2
       && lk != 21                  // ')'
       && lk != 421                 // ';' Identifier
       && lk != 549                 // ';' Character
       && lk != 677                 // ';' String
       && lk != 805                 // ';' Integer
       && lk != 933                 // ';' Complex
       && lk != 1061                // ';' Real
       && lk != 1189                // ';' Comment
       && lk != 1573                // ';' '!'
       && lk != 2597                // ';' '('
       && lk != 3237                // ';' '+'
       && lk != 3365                // ';' '++'
       && lk != 3749                // ';' '-'
       && lk != 3877                // ';' '--'
       && lk != 6437                // ';' '['
       && lk != 6949                // ';' 'break'
       && lk != 7333                // ';' 'continue'
       && lk != 7589                // ';' 'do'
       && lk != 7845                // ';' 'f32'
       && lk != 7973                // ';' 'f64'
       && lk != 8101                // ';' 'for'
       && lk != 8229                // ';' 'foreach'
       && lk != 8357                // ';' 'global'
       && lk != 8485                // ';' 'i32'
       && lk != 8613                // ';' 'i64'
       && lk != 8741                // ';' 'if'
       && lk != 8869                // ';' 'import'
       && lk != 8997                // ';' 'include'
       && lk != 9125                // ';' 'local'
       && lk != 9253                // ';' 'return'
       && lk != 9381                // ';' 'switch'
       && lk != 9509                // ';' 'test'
       && lk != 9637                // ';' 'throw'
       && lk != 9765                // ';' 'try'
       && lk != 9893                // ';' 'while'
       && lk != 10021               // ';' '{'
       && lk != 10661)              // ';' '~'
      {
        try_Expression();
      }
      lookahead1W(16);              // WhiteSpace^token | ')' | ';'
      if (l1 == 37)                 // ';'
      {
        consumeT(37);               // ';'
        lookahead1W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        if (l1 != 21)               // ')'
        {
          try_Expression();
        }
      }
    }
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(40);                // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | ',' | '-' | '--' | ':' | ';' |
                                    // '[' | ']' | 'break' | 'case' | 'catch' | 'continue' | 'default' | 'do' | 'else' |
                                    // 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' | 'i64' | 'if' | 'import' |
                                    // 'include' | 'local' | 'return' | 'switch' | 'test' | 'throw' | 'try' | 'while' |
                                    // '{' | '}' | '~'
    switch (l1)
    {
    case 56:                        // 'catch'
      lookahead2W(3);               // WhiteSpace^token | '('
      switch (lk)
      {
      case 2616:                    // 'catch' '('
        lookahead3W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 51768                 // 'catch' '(' Identifier
     || lk == 68152                 // 'catch' '(' Character
     || lk == 84536                 // 'catch' '(' String
     || lk == 100920                // 'catch' '(' Integer
     || lk == 117304                // 'catch' '(' Complex
     || lk == 133688                // 'catch' '(' Real
     || lk == 150072                // 'catch' '(' Comment
     || lk == 199224                // 'catch' '(' '!'
     || lk == 330296                // 'catch' '(' '('
     || lk == 412216                // 'catch' '(' '+'
     || lk == 428600                // 'catch' '(' '++'
     || lk == 477752                // 'catch' '(' '-'
     || lk == 494136                // 'catch' '(' '--'
     || lk == 608824                // 'catch' '(' ';'
     || lk == 821816                // 'catch' '(' '['
     || lk == 887352                // 'catch' '(' 'break'
     || lk == 936504                // 'catch' '(' 'continue'
     || lk == 969272                // 'catch' '(' 'do'
     || lk == 1002040               // 'catch' '(' 'f32'
     || lk == 1018424               // 'catch' '(' 'f64'
     || lk == 1034808               // 'catch' '(' 'for'
     || lk == 1051192               // 'catch' '(' 'foreach'
     || lk == 1067576               // 'catch' '(' 'global'
     || lk == 1083960               // 'catch' '(' 'i32'
     || lk == 1100344               // 'catch' '(' 'i64'
     || lk == 1116728               // 'catch' '(' 'if'
     || lk == 1133112               // 'catch' '(' 'import'
     || lk == 1149496               // 'catch' '(' 'include'
     || lk == 1165880               // 'catch' '(' 'local'
     || lk == 1182264               // 'catch' '(' 'return'
     || lk == 1198648               // 'catch' '(' 'switch'
     || lk == 1215032               // 'catch' '(' 'test'
     || lk == 1231416               // 'catch' '(' 'throw'
     || lk == 1247800               // 'catch' '(' 'try'
     || lk == 1264184               // 'catch' '(' 'while'
     || lk == 1280568               // 'catch' '(' '{'
     || lk == 1362488)              // 'catch' '(' '~'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Catch();
          memoize(9, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(9, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      try_Catch();
    }
  }

  function parse_Catch()
  {
    eventHandler.startNonterminal("Catch", e0);
    consume(56);                    // 'catch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Catch", e0);
  }

  function try_Catch()
  {
    consumeT(56);                   // 'catch'
    lookahead1W(3);                 // WhiteSpace^token | '('
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_NamespaceDeclaration()
  {
    eventHandler.startNonterminal("NamespaceDeclaration", e0);
    consume(3);                     // Identifier
    for (;;)
    {
      lookahead1W(18);              // WhiteSpace^token | '.' | '{'
      if (l1 != 32)                 // '.'
      {
        break;
      }
      consume(32);                  // '.'
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consume(3);                   // Identifier
    }
    whitespace();
    parse_Block();
    eventHandler.endNonterminal("NamespaceDeclaration", e0);
  }

  function try_NamespaceDeclaration()
  {
    consumeT(3);                    // Identifier
    for (;;)
    {
      lookahead1W(18);              // WhiteSpace^token | '.' | '{'
      if (l1 != 32)                 // '.'
      {
        break;
      }
      consumeT(32);                 // '.'
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consumeT(3);                  // Identifier
    }
    try_Block();
  }

  function parse_FunctionDeclaration()
  {
    eventHandler.startNonterminal("FunctionDeclaration", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(15);              // WhiteSpace^token | '(' | '.'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 445:                     // 'f32' Identifier
      case 446:                     // 'f64' Identifier
      case 450:                     // 'i32' Identifier
      case 451:                     // 'i64' Identifier
        lookahead3W(15);            // WhiteSpace^token | '(' | '.'
        break;
      }
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2; var l3A = l3;
      var b3A = b3; var e3A = e3;
      try
      {
        consumeT(3);                // Identifier
        for (;;)
        {
          lookahead1W(15);          // WhiteSpace^token | '(' | '.'
          if (l1 != 32)             // '.'
          {
            break;
          }
          consumeT(32);             // '.'
          lookahead1W(0);           // Identifier | WhiteSpace^token
          consumeT(3);              // Identifier
        }
        consumeT(20);               // '('
        lookahead1W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        if (l1 != 21)               // ')'
        {
          try_Arguments();
        }
        consumeT(21);               // ')'
        lookahead1W(10);            // WhiteSpace^token | '='
        consumeT(42);               // '='
        lookahead1W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        try_Expression();
        lk = -1;
      }
      catch (p1A)
      {
        try
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 32)           // '.'
            {
              break;
            }
            consumeT(32);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(20);             // '('
          lookahead1W(28);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          if (l1 != 21)             // ')'
          {
            try_Arguments();
          }
          consumeT(21);             // ')'
          lookahead1W(11);          // WhiteSpace^token | '?='
          consumeT(49);             // '?='
          lookahead1W(14);          // WhiteSpace^token | '{'
          try_Block();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            consumeT(3);            // Identifier
            for (;;)
            {
              lookahead1W(15);      // WhiteSpace^token | '(' | '.'
              if (l1 != 32)         // '.'
              {
                break;
              }
              consumeT(32);         // '.'
              lookahead1W(0);       // Identifier | WhiteSpace^token
              consumeT(3);          // Identifier
            }
            consumeT(20);           // '('
            lookahead1W(28);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
            if (l1 != 21)           // ')'
            {
              try_Arguments();
            }
            consumeT(21);           // ')'
            lookahead1W(2);         // WhiteSpace^token | '#='
            consumeT(14);           // '#='
            lookahead1W(14);        // WhiteSpace^token | '{'
            try_Block();
            lk = -3;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
              b3 = b3A; e3 = e3A; end = e3A; }}}
              consumeT(3);          // Identifier
              for (;;)
              {
                lookahead1W(15);    // WhiteSpace^token | '(' | '.'
                if (l1 != 32)       // '.'
                {
                  break;
                }
                consumeT(32);       // '.'
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
              }
              consumeT(20);         // '('
              lookahead1W(28);      // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
              if (l1 != 21)         // ')'
              {
                try_Arguments();
              }
              consumeT(21);         // ')'
              lookahead1W(8);       // WhiteSpace^token | ':='
              consumeT(36);         // ':='
              lookahead1W(14);      // WhiteSpace^token | '{'
              try_Block();
              lk = -4;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
                b3 = b3A; e3 = e3A; end = e3A; }}}
                if (l1 != 3)        // Identifier
                {
                  try_Type();
                }
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
                for (;;)
                {
                  lookahead1W(15);  // WhiteSpace^token | '(' | '.'
                  if (l1 != 32)     // '.'
                  {
                    break;
                  }
                  consumeT(32);     // '.'
                  lookahead1W(0);   // Identifier | WhiteSpace^token
                  consumeT(3);      // Identifier
                }
                consumeT(20);       // '('
                lookahead1W(28);    // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
                if (l1 != 21)       // ')'
                {
                  try_Arguments();
                }
                consumeT(21);       // ')'
                lookahead1W(14);    // WhiteSpace^token | '{'
                try_Block();
                lk = -5;
              }
              catch (p5A)
              {
                lk = -6;
              }
            }
          }
        }
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
      b3 = b3A; e3 = e3A; end = e3A; }}}
      memoize(10, e0, lk);
    }
    switch (lk)
    {
    case -1:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(20);                  // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(21);                  // ')'
      lookahead1W(10);              // WhiteSpace^token | '='
      consume(42);                  // '='
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      whitespace();
      parse_Expression();
      break;
    case -2:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(20);                  // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(21);                  // ')'
      lookahead1W(11);              // WhiteSpace^token | '?='
      consume(49);                  // '?='
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    case -3:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(20);                  // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(21);                  // ')'
      lookahead1W(2);               // WhiteSpace^token | '#='
      consume(14);                  // '#='
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    case -4:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(20);                  // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(21);                  // ')'
      lookahead1W(8);               // WhiteSpace^token | ':='
      consume(36);                  // ':='
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    case -5:
      if (l1 != 3)                  // Identifier
      {
        whitespace();
        parse_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(20);                  // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(21);                  // ')'
      lookahead1W(14);              // WhiteSpace^token | '{'
      whitespace();
      parse_Block();
      break;
    default:
      if (l1 != 3)                  // Identifier
      {
        whitespace();
        parse_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(20);                  // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(21);                  // ')'
      lookahead1W(1);               // Script | WhiteSpace^token
      consume(10);                  // Script
    }
    eventHandler.endNonterminal("FunctionDeclaration", e0);
  }

  function try_FunctionDeclaration()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(15);              // WhiteSpace^token | '(' | '.'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    case 61:                        // 'f32'
    case 62:                        // 'f64'
    case 66:                        // 'i32'
    case 67:                        // 'i64'
      lookahead2W(0);               // Identifier | WhiteSpace^token
      switch (lk)
      {
      case 445:                     // 'f32' Identifier
      case 446:                     // 'f64' Identifier
      case 450:                     // 'i32' Identifier
      case 451:                     // 'i64' Identifier
        lookahead3W(15);            // WhiteSpace^token | '(' | '.'
        break;
      }
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2; var l3A = l3;
      var b3A = b3; var e3A = e3;
      try
      {
        consumeT(3);                // Identifier
        for (;;)
        {
          lookahead1W(15);          // WhiteSpace^token | '(' | '.'
          if (l1 != 32)             // '.'
          {
            break;
          }
          consumeT(32);             // '.'
          lookahead1W(0);           // Identifier | WhiteSpace^token
          consumeT(3);              // Identifier
        }
        consumeT(20);               // '('
        lookahead1W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        if (l1 != 21)               // ')'
        {
          try_Arguments();
        }
        consumeT(21);               // ')'
        lookahead1W(10);            // WhiteSpace^token | '='
        consumeT(42);               // '='
        lookahead1W(25);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
        try_Expression();
        memoize(10, e0A, -1);
        lk = -7;
      }
      catch (p1A)
      {
        try
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 32)           // '.'
            {
              break;
            }
            consumeT(32);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(20);             // '('
          lookahead1W(28);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          if (l1 != 21)             // ')'
          {
            try_Arguments();
          }
          consumeT(21);             // ')'
          lookahead1W(11);          // WhiteSpace^token | '?='
          consumeT(49);             // '?='
          lookahead1W(14);          // WhiteSpace^token | '{'
          try_Block();
          memoize(10, e0A, -2);
          lk = -7;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
            b3 = b3A; e3 = e3A; end = e3A; }}}
            consumeT(3);            // Identifier
            for (;;)
            {
              lookahead1W(15);      // WhiteSpace^token | '(' | '.'
              if (l1 != 32)         // '.'
              {
                break;
              }
              consumeT(32);         // '.'
              lookahead1W(0);       // Identifier | WhiteSpace^token
              consumeT(3);          // Identifier
            }
            consumeT(20);           // '('
            lookahead1W(28);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
            if (l1 != 21)           // ')'
            {
              try_Arguments();
            }
            consumeT(21);           // ')'
            lookahead1W(2);         // WhiteSpace^token | '#='
            consumeT(14);           // '#='
            lookahead1W(14);        // WhiteSpace^token | '{'
            try_Block();
            memoize(10, e0A, -3);
            lk = -7;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
              b3 = b3A; e3 = e3A; end = e3A; }}}
              consumeT(3);          // Identifier
              for (;;)
              {
                lookahead1W(15);    // WhiteSpace^token | '(' | '.'
                if (l1 != 32)       // '.'
                {
                  break;
                }
                consumeT(32);       // '.'
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
              }
              consumeT(20);         // '('
              lookahead1W(28);      // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
              if (l1 != 21)         // ')'
              {
                try_Arguments();
              }
              consumeT(21);         // ')'
              lookahead1W(8);       // WhiteSpace^token | ':='
              consumeT(36);         // ':='
              lookahead1W(14);      // WhiteSpace^token | '{'
              try_Block();
              memoize(10, e0A, -4);
              lk = -7;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
                b3 = b3A; e3 = e3A; end = e3A; }}}
                if (l1 != 3)        // Identifier
                {
                  try_Type();
                }
                lookahead1W(0);     // Identifier | WhiteSpace^token
                consumeT(3);        // Identifier
                for (;;)
                {
                  lookahead1W(15);  // WhiteSpace^token | '(' | '.'
                  if (l1 != 32)     // '.'
                  {
                    break;
                  }
                  consumeT(32);     // '.'
                  lookahead1W(0);   // Identifier | WhiteSpace^token
                  consumeT(3);      // Identifier
                }
                consumeT(20);       // '('
                lookahead1W(28);    // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
                if (l1 != 21)       // ')'
                {
                  try_Arguments();
                }
                consumeT(21);       // ')'
                lookahead1W(14);    // WhiteSpace^token | '{'
                try_Block();
                memoize(10, e0A, -5);
                lk = -7;
              }
              catch (p5A)
              {
                lk = -6;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
                b3 = b3A; e3 = e3A; end = e3A; }}}
                memoize(10, e0A, -6);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(20);                 // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        try_Arguments();
      }
      consumeT(21);                 // ')'
      lookahead1W(10);              // WhiteSpace^token | '='
      consumeT(42);                 // '='
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      try_Expression();
      break;
    case -2:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(20);                 // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        try_Arguments();
      }
      consumeT(21);                 // ')'
      lookahead1W(11);              // WhiteSpace^token | '?='
      consumeT(49);                 // '?='
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -3:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(20);                 // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        try_Arguments();
      }
      consumeT(21);                 // ')'
      lookahead1W(2);               // WhiteSpace^token | '#='
      consumeT(14);                 // '#='
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -4:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(20);                 // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        try_Arguments();
      }
      consumeT(21);                 // ')'
      lookahead1W(8);               // WhiteSpace^token | ':='
      consumeT(36);                 // ':='
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -5:
      if (l1 != 3)                  // Identifier
      {
        try_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(20);                 // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        try_Arguments();
      }
      consumeT(21);                 // ')'
      lookahead1W(14);              // WhiteSpace^token | '{'
      try_Block();
      break;
    case -7:
      break;
    default:
      if (l1 != 3)                  // Identifier
      {
        try_Type();
      }
      lookahead1W(0);               // Identifier | WhiteSpace^token
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(20);                 // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        try_Arguments();
      }
      consumeT(21);                 // ')'
      lookahead1W(1);               // Script | WhiteSpace^token
      consumeT(10);                 // Script
    }
  }

  function parse_Return()
  {
    eventHandler.startNonterminal("Return", e0);
    consume(72);                    // 'return'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Return", e0);
  }

  function try_Return()
  {
    consumeT(72);                   // 'return'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    consume(69);                    // 'import'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Import", e0);
  }

  function try_Import()
  {
    consumeT(69);                   // 'import'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Include()
  {
    eventHandler.startNonterminal("Include", e0);
    consume(70);                    // 'include'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Include", e0);
  }

  function try_Include()
  {
    consumeT(70);                   // 'include'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Global()
  {
    eventHandler.startNonterminal("Global", e0);
    consume(65);                    // 'global'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Global", e0);
  }

  function try_Global()
  {
    consumeT(65);                   // 'global'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Local()
  {
    eventHandler.startNonterminal("Local", e0);
    consume(71);                    // 'local'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Local", e0);
  }

  function try_Local()
  {
    consumeT(71);                   // 'local'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Throw()
  {
    eventHandler.startNonterminal("Throw", e0);
    consume(75);                    // 'throw'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Throw", e0);
  }

  function try_Throw()
  {
    consumeT(75);                   // 'throw'
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_EmptyStatement()
  {
    eventHandler.startNonterminal("EmptyStatement", e0);
    consume(37);                    // ';'
    eventHandler.endNonterminal("EmptyStatement", e0);
  }

  function try_EmptyStatement()
  {
    consumeT(37);                   // ';'
  }

  function parse_Type()
  {
    eventHandler.startNonterminal("Type", e0);
    switch (l1)
    {
    case 66:                        // 'i32'
      consume(66);                  // 'i32'
      break;
    case 67:                        // 'i64'
      consume(67);                  // 'i64'
      break;
    case 61:                        // 'f32'
      consume(61);                  // 'f32'
      break;
    default:
      consume(62);                  // 'f64'
    }
    eventHandler.endNonterminal("Type", e0);
  }

  function try_Type()
  {
    switch (l1)
    {
    case 66:                        // 'i32'
      consumeT(66);                 // 'i32'
      break;
    case 67:                        // 'i64'
      consumeT(67);                 // 'i64'
      break;
    case 61:                        // 'f32'
      consumeT(61);                 // 'f32'
      break;
    default:
      consumeT(62);                 // 'f64'
    }
  }

  function parse_Arguments()
  {
    eventHandler.startNonterminal("Arguments", e0);
    parse_Expression();
    for (;;)
    {
      lookahead1W(20);              // WhiteSpace^token | ')' | ',' | ']'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      whitespace();
      parse_Expression();
    }
    eventHandler.endNonterminal("Arguments", e0);
  }

  function try_Arguments()
  {
    try_Expression();
    for (;;)
    {
      lookahead1W(20);              // WhiteSpace^token | ')' | ',' | ']'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      try_Expression();
    }
  }

  function parse_Member()
  {
    eventHandler.startNonterminal("Member", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 51715                 // Identifier '(' Identifier
     || lk == 53251                 // Identifier '.' Identifier
     || lk == 68099                 // Identifier '(' Character
     || lk == 84483                 // Identifier '(' String
     || lk == 100867                // Identifier '(' Integer
     || lk == 117251                // Identifier '(' Complex
     || lk == 133635                // Identifier '(' Real
     || lk == 150019                // Identifier '(' Comment
     || lk == 199171                // Identifier '(' '!'
     || lk == 330243                // Identifier '(' '('
     || lk == 412163                // Identifier '(' '+'
     || lk == 428547                // Identifier '(' '++'
     || lk == 477699                // Identifier '(' '-'
     || lk == 494083                // Identifier '(' '--'
     || lk == 608771                // Identifier '(' ';'
     || lk == 821763                // Identifier '(' '['
     || lk == 887299                // Identifier '(' 'break'
     || lk == 936451                // Identifier '(' 'continue'
     || lk == 969219                // Identifier '(' 'do'
     || lk == 1001987               // Identifier '(' 'f32'
     || lk == 1018371               // Identifier '(' 'f64'
     || lk == 1034755               // Identifier '(' 'for'
     || lk == 1051139               // Identifier '(' 'foreach'
     || lk == 1067523               // Identifier '(' 'global'
     || lk == 1083907               // Identifier '(' 'i32'
     || lk == 1100291               // Identifier '(' 'i64'
     || lk == 1116675               // Identifier '(' 'if'
     || lk == 1133059               // Identifier '(' 'import'
     || lk == 1149443               // Identifier '(' 'include'
     || lk == 1165827               // Identifier '(' 'local'
     || lk == 1182211               // Identifier '(' 'return'
     || lk == 1198595               // Identifier '(' 'switch'
     || lk == 1214979               // Identifier '(' 'test'
     || lk == 1231363               // Identifier '(' 'throw'
     || lk == 1247747               // Identifier '(' 'try'
     || lk == 1264131               // Identifier '(' 'while'
     || lk == 1280515               // Identifier '(' '{'
     || lk == 1362435)              // Identifier '(' '~'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 32)           // '.'
            {
              break;
            }
            consumeT(32);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(20);             // '('
          lookahead1W(28);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          if (l1 != 21)             // ')'
          {
            try_Arguments();
          }
          consumeT(21);             // ')'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 346627:                    // Identifier '(' ')'
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      consume(20);                  // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        whitespace();
        parse_Arguments();
      }
      consume(21);                  // ')'
      break;
    default:
      consume(3);                   // Identifier
      for (;;)
      {
        lookahead1W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consume(32);                // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consume(3);                 // Identifier
      }
      for (;;)
      {
        lookahead1W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        switch (l1)
        {
        case 50:                    // '['
          lookahead2W(29);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          switch (lk)
          {
          case 434:                 // '[' Identifier
            lookahead3W(39);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
            break;
          case 4786:                // '[' ';'
            lookahead3W(34);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
            break;
          case 6450:                // '[' '['
            lookahead3W(29);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
            break;
          case 6578:                // '[' ']'
            lookahead3W(44);        // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
            break;
          case 10034:               // '[' '{'
            lookahead3W(35);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
            break;
          case 1202:                // '[' Comment
          case 6962:                // '[' 'break'
          case 7346:                // '[' 'continue'
            lookahead3W(21);        // WhiteSpace^token | ',' | ';' | ']'
            break;
          case 7858:                // '[' 'f32'
          case 7986:                // '[' 'f64'
          case 8498:                // '[' 'i32'
          case 8626:                // '[' 'i64'
            lookahead3W(0);         // Identifier | WhiteSpace^token
            break;
          case 562:                 // '[' Character
          case 690:                 // '[' String
          case 818:                 // '[' Integer
          case 946:                 // '[' Complex
          case 1074:                // '[' Real
            lookahead3W(32);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
            break;
          case 1586:                // '[' '!'
          case 3250:                // '[' '+'
          case 3378:                // '[' '++'
          case 3762:                // '[' '-'
          case 3890:                // '[' '--'
          case 10674:               // '[' '~'
            lookahead3W(22);        // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
            break;
          case 8114:                // '[' 'for'
          case 8242:                // '[' 'foreach'
          case 8754:                // '[' 'if'
          case 9394:                // '[' 'switch'
          case 9522:                // '[' 'test'
          case 9906:                // '[' 'while'
            lookahead3W(3);         // WhiteSpace^token | '('
            break;
          case 2610:                // '[' '('
          case 7602:                // '[' 'do'
          case 8370:                // '[' 'global'
          case 8882:                // '[' 'import'
          case 9010:                // '[' 'include'
          case 9138:                // '[' 'local'
          case 9266:                // '[' 'return'
          case 9650:                // '[' 'throw'
          case 9778:                // '[' 'try'
            lookahead3W(25);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
            break;
          }
          break;
        default:
          lk = l1;
        }
        if (lk != 1                 // END
         && lk != 3                 // Identifier
         && lk != 4                 // Character
         && lk != 5                 // String
         && lk != 6                 // Integer
         && lk != 7                 // Complex
         && lk != 8                 // Real
         && lk != 9                 // Comment
         && lk != 12                // '!'
         && lk != 13                // '!='
         && lk != 15                // '%'
         && lk != 16                // '%='
         && lk != 17                // '&'
         && lk != 18                // '&&'
         && lk != 19                // '&='
         && lk != 20                // '('
         && lk != 21                // ')'
         && lk != 22                // '*'
         && lk != 23                // '**'
         && lk != 24                // '*='
         && lk != 25                // '+'
         && lk != 26                // '++'
         && lk != 27                // '+='
         && lk != 28                // ','
         && lk != 29                // '-'
         && lk != 30                // '--'
         && lk != 31                // '-='
         && lk != 33                // '/'
         && lk != 34                // '/='
         && lk != 35                // ':'
         && lk != 36                // ':='
         && lk != 37                // ';'
         && lk != 38                // '<'
         && lk != 39                // '<<'
         && lk != 40                // '<<='
         && lk != 41                // '<='
         && lk != 42                // '='
         && lk != 43                // '=='
         && lk != 44                // '>'
         && lk != 45                // '>='
         && lk != 46                // '>>'
         && lk != 47                // '>>='
         && lk != 48                // '?'
         && lk != 49                // '?='
         && lk != 51                // ']'
         && lk != 52                // '^'
         && lk != 53                // '^='
         && lk != 54                // 'break'
         && lk != 55                // 'case'
         && lk != 56                // 'catch'
         && lk != 57                // 'continue'
         && lk != 58                // 'default'
         && lk != 59                // 'do'
         && lk != 60                // 'else'
         && lk != 61                // 'f32'
         && lk != 62                // 'f64'
         && lk != 63                // 'for'
         && lk != 64                // 'foreach'
         && lk != 65                // 'global'
         && lk != 66                // 'i32'
         && lk != 67                // 'i64'
         && lk != 68                // 'if'
         && lk != 69                // 'import'
         && lk != 70                // 'include'
         && lk != 71                // 'local'
         && lk != 72                // 'return'
         && lk != 73                // 'switch'
         && lk != 74                // 'test'
         && lk != 75                // 'throw'
         && lk != 76                // 'try'
         && lk != 77                // 'while'
         && lk != 78                // '{'
         && lk != 79                // '|'
         && lk != 80                // '|='
         && lk != 81                // '||'
         && lk != 82                // '}'
         && lk != 83                // '~'
         && lk != 53938             // '[' ';' Identifier
         && lk != 70322             // '[' ';' Character
         && lk != 86706             // '[' ';' String
         && lk != 103090            // '[' ';' Integer
         && lk != 119474            // '[' ';' Complex
         && lk != 135858            // '[' ';' Real
         && lk != 152242            // '[' ';' Comment
         && lk != 201394            // '[' ';' '!'
         && lk != 332466            // '[' ';' '('
         && lk != 350642            // '[' ']' ')'
         && lk != 414386            // '[' ';' '+'
         && lk != 430770            // '[' ';' '++'
         && lk != 465330            // '[' ']' ','
         && lk != 479922            // '[' ';' '-'
         && lk != 496306            // '[' ';' '--'
         && lk != 580018            // '[' ']' ':'
         && lk != 606642            // '[' Identifier ';'
         && lk != 606770            // '[' Character ';'
         && lk != 606898            // '[' String ';'
         && lk != 607026            // '[' Integer ';'
         && lk != 607154            // '[' Complex ';'
         && lk != 607282            // '[' Real ';'
         && lk != 607410            // '[' Comment ';'
         && lk != 610994            // '[' ';' ';'
         && lk != 613170            // '[' 'break' ';'
         && lk != 613554            // '[' 'continue' ';'
         && lk != 823986            // '[' ';' '['
         && lk != 842162            // '[' ']' ']'
         && lk != 889522            // '[' ';' 'break'
         && lk != 924082            // '[' ']' 'catch'
         && lk != 938674            // '[' ';' 'continue'
         && lk != 971442            // '[' ';' 'do'
         && lk != 989618            // '[' ']' 'else'
         && lk != 1004210           // '[' ';' 'f32'
         && lk != 1020594           // '[' ';' 'f64'
         && lk != 1036978           // '[' ';' 'for'
         && lk != 1053362           // '[' ';' 'foreach'
         && lk != 1069746           // '[' ';' 'global'
         && lk != 1086130           // '[' ';' 'i32'
         && lk != 1102514           // '[' ';' 'i64'
         && lk != 1118898           // '[' ';' 'if'
         && lk != 1135282           // '[' ';' 'import'
         && lk != 1151666           // '[' ';' 'include'
         && lk != 1168050           // '[' ';' 'local'
         && lk != 1184434           // '[' ';' 'return'
         && lk != 1200818           // '[' ';' 'switch'
         && lk != 1217202           // '[' ';' 'test'
         && lk != 1233586           // '[' ';' 'throw'
         && lk != 1249970           // '[' ';' 'try'
         && lk != 1266354           // '[' ';' 'while'
         && lk != 1282738           // '[' ';' '{'
         && lk != 1364658)          // '[' ';' '~'
        {
          lk = memoized(12, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2; var l3B = l3;
            var b3B = b3; var e3B = e3;
            try
            {
              consumeT(50);         // '['
              lookahead1W(29);      // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
              if (l1 != 51)         // ']'
              {
                try_Arguments();
              }
              consumeT(51);         // ']'
              lk = -1;
            }
            catch (p1B)
            {
              lk = -2;
            }
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; l3 = l3B; if (l3 == 0) {end = e2B;} else {
            b3 = b3B; e3 = e3B; end = e3B; }}}
            memoize(12, e0, lk);
          }
        }
        if (lk != -1
         && lk != 350642            // '[' ']' ')'
         && lk != 465330            // '[' ']' ','
         && lk != 580018            // '[' ']' ':'
         && lk != 842162            // '[' ']' ']'
         && lk != 924082            // '[' ']' 'catch'
         && lk != 989618)           // '[' ']' 'else'
        {
          break;
        }
        consume(50);                // '['
        lookahead1W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        if (l1 != 51)               // ']'
        {
          whitespace();
          parse_Arguments();
        }
        consume(51);                // ']'
      }
    }
    eventHandler.endNonterminal("Member", e0);
  }

  function try_Member()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(45);              // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
      switch (lk)
      {
      case 2563:                    // Identifier '('
        lookahead3W(28);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      case 4099:                    // Identifier '.'
        lookahead3W(0);             // Identifier | WhiteSpace^token
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 51715                 // Identifier '(' Identifier
     || lk == 53251                 // Identifier '.' Identifier
     || lk == 68099                 // Identifier '(' Character
     || lk == 84483                 // Identifier '(' String
     || lk == 100867                // Identifier '(' Integer
     || lk == 117251                // Identifier '(' Complex
     || lk == 133635                // Identifier '(' Real
     || lk == 150019                // Identifier '(' Comment
     || lk == 199171                // Identifier '(' '!'
     || lk == 330243                // Identifier '(' '('
     || lk == 412163                // Identifier '(' '+'
     || lk == 428547                // Identifier '(' '++'
     || lk == 477699                // Identifier '(' '-'
     || lk == 494083                // Identifier '(' '--'
     || lk == 608771                // Identifier '(' ';'
     || lk == 821763                // Identifier '(' '['
     || lk == 887299                // Identifier '(' 'break'
     || lk == 936451                // Identifier '(' 'continue'
     || lk == 969219                // Identifier '(' 'do'
     || lk == 1001987               // Identifier '(' 'f32'
     || lk == 1018371               // Identifier '(' 'f64'
     || lk == 1034755               // Identifier '(' 'for'
     || lk == 1051139               // Identifier '(' 'foreach'
     || lk == 1067523               // Identifier '(' 'global'
     || lk == 1083907               // Identifier '(' 'i32'
     || lk == 1100291               // Identifier '(' 'i64'
     || lk == 1116675               // Identifier '(' 'if'
     || lk == 1133059               // Identifier '(' 'import'
     || lk == 1149443               // Identifier '(' 'include'
     || lk == 1165827               // Identifier '(' 'local'
     || lk == 1182211               // Identifier '(' 'return'
     || lk == 1198595               // Identifier '(' 'switch'
     || lk == 1214979               // Identifier '(' 'test'
     || lk == 1231363               // Identifier '(' 'throw'
     || lk == 1247747               // Identifier '(' 'try'
     || lk == 1264131               // Identifier '(' 'while'
     || lk == 1280515               // Identifier '(' '{'
     || lk == 1362435)              // Identifier '(' '~'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          consumeT(3);              // Identifier
          for (;;)
          {
            lookahead1W(15);        // WhiteSpace^token | '(' | '.'
            if (l1 != 32)           // '.'
            {
              break;
            }
            consumeT(32);           // '.'
            lookahead1W(0);         // Identifier | WhiteSpace^token
            consumeT(3);            // Identifier
          }
          consumeT(20);             // '('
          lookahead1W(28);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          if (l1 != 21)             // ')'
          {
            try_Arguments();
          }
          consumeT(21);             // ')'
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 346627:                    // Identifier '(' ')'
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(15);            // WhiteSpace^token | '(' | '.'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      consumeT(20);                 // '('
      lookahead1W(28);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | ')' | '+' | '++' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      if (l1 != 21)                 // ')'
      {
        try_Arguments();
      }
      consumeT(21);                 // ')'
      break;
    case -3:
      break;
    default:
      consumeT(3);                  // Identifier
      for (;;)
      {
        lookahead1W(45);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' |
                                    // '/=' | ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' |
                                    // '>>' | '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        if (l1 != 32)               // '.'
        {
          break;
        }
        consumeT(32);               // '.'
        lookahead1W(0);             // Identifier | WhiteSpace^token
        consumeT(3);                // Identifier
      }
      for (;;)
      {
        lookahead1W(44);            // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
        switch (l1)
        {
        case 50:                    // '['
          lookahead2W(29);          // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
          switch (lk)
          {
          case 434:                 // '[' Identifier
            lookahead3W(39);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':=' |
                                    // ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | ']' | '^' | '^=' | '{' | '|' | '|=' | '||'
            break;
          case 4786:                // '[' ';'
            lookahead3W(34);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
            break;
          case 6450:                // '[' '['
            lookahead3W(29);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
            break;
          case 6578:                // '[' ']'
            lookahead3W(44);        // END | Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | ')' |
                                    // '*' | '**' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' |
                                    // '>>=' | '?' | '?=' | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'catch' |
                                    // 'continue' | 'default' | 'do' | 'else' | 'f32' | 'f64' | 'for' | 'foreach' |
                                    // 'global' | 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' |
                                    // 'switch' | 'test' | 'throw' | 'try' | 'while' | '{' | '|' | '|=' | '||' | '}' |
                                    // '~'
            break;
          case 10034:               // '[' '{'
            lookahead3W(35);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
            break;
          case 1202:                // '[' Comment
          case 6962:                // '[' 'break'
          case 7346:                // '[' 'continue'
            lookahead3W(21);        // WhiteSpace^token | ',' | ';' | ']'
            break;
          case 7858:                // '[' 'f32'
          case 7986:                // '[' 'f64'
          case 8498:                // '[' 'i32'
          case 8626:                // '[' 'i64'
            lookahead3W(0);         // Identifier | WhiteSpace^token
            break;
          case 562:                 // '[' Character
          case 690:                 // '[' String
          case 818:                 // '[' Integer
          case 946:                 // '[' Complex
          case 1074:                // '[' Real
            lookahead3W(32);        // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':=' | ';' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | ']' |
                                    // '^' | '^=' | '|' | '|=' | '||'
            break;
          case 1586:                // '[' '!'
          case 3250:                // '[' '+'
          case 3378:                // '[' '++'
          case 3762:                // '[' '-'
          case 3890:                // '[' '--'
          case 10674:               // '[' '~'
            lookahead3W(22);        // Identifier | Character | String | Integer | Complex | Real | WhiteSpace^token |
                                    // '(' | '[' | 'f32' | 'f64' | 'i32' | 'i64' | '{'
            break;
          case 8114:                // '[' 'for'
          case 8242:                // '[' 'foreach'
          case 8754:                // '[' 'if'
          case 9394:                // '[' 'switch'
          case 9522:                // '[' 'test'
          case 9906:                // '[' 'while'
            lookahead3W(3);         // WhiteSpace^token | '('
            break;
          case 2610:                // '[' '('
          case 7602:                // '[' 'do'
          case 8370:                // '[' 'global'
          case 8882:                // '[' 'import'
          case 9010:                // '[' 'include'
          case 9138:                // '[' 'local'
          case 9266:                // '[' 'return'
          case 9650:                // '[' 'throw'
          case 9778:                // '[' 'try'
            lookahead3W(25);        // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
            break;
          }
          break;
        default:
          lk = l1;
        }
        if (lk != 1                 // END
         && lk != 3                 // Identifier
         && lk != 4                 // Character
         && lk != 5                 // String
         && lk != 6                 // Integer
         && lk != 7                 // Complex
         && lk != 8                 // Real
         && lk != 9                 // Comment
         && lk != 12                // '!'
         && lk != 13                // '!='
         && lk != 15                // '%'
         && lk != 16                // '%='
         && lk != 17                // '&'
         && lk != 18                // '&&'
         && lk != 19                // '&='
         && lk != 20                // '('
         && lk != 21                // ')'
         && lk != 22                // '*'
         && lk != 23                // '**'
         && lk != 24                // '*='
         && lk != 25                // '+'
         && lk != 26                // '++'
         && lk != 27                // '+='
         && lk != 28                // ','
         && lk != 29                // '-'
         && lk != 30                // '--'
         && lk != 31                // '-='
         && lk != 33                // '/'
         && lk != 34                // '/='
         && lk != 35                // ':'
         && lk != 36                // ':='
         && lk != 37                // ';'
         && lk != 38                // '<'
         && lk != 39                // '<<'
         && lk != 40                // '<<='
         && lk != 41                // '<='
         && lk != 42                // '='
         && lk != 43                // '=='
         && lk != 44                // '>'
         && lk != 45                // '>='
         && lk != 46                // '>>'
         && lk != 47                // '>>='
         && lk != 48                // '?'
         && lk != 49                // '?='
         && lk != 51                // ']'
         && lk != 52                // '^'
         && lk != 53                // '^='
         && lk != 54                // 'break'
         && lk != 55                // 'case'
         && lk != 56                // 'catch'
         && lk != 57                // 'continue'
         && lk != 58                // 'default'
         && lk != 59                // 'do'
         && lk != 60                // 'else'
         && lk != 61                // 'f32'
         && lk != 62                // 'f64'
         && lk != 63                // 'for'
         && lk != 64                // 'foreach'
         && lk != 65                // 'global'
         && lk != 66                // 'i32'
         && lk != 67                // 'i64'
         && lk != 68                // 'if'
         && lk != 69                // 'import'
         && lk != 70                // 'include'
         && lk != 71                // 'local'
         && lk != 72                // 'return'
         && lk != 73                // 'switch'
         && lk != 74                // 'test'
         && lk != 75                // 'throw'
         && lk != 76                // 'try'
         && lk != 77                // 'while'
         && lk != 78                // '{'
         && lk != 79                // '|'
         && lk != 80                // '|='
         && lk != 81                // '||'
         && lk != 82                // '}'
         && lk != 83                // '~'
         && lk != 53938             // '[' ';' Identifier
         && lk != 70322             // '[' ';' Character
         && lk != 86706             // '[' ';' String
         && lk != 103090            // '[' ';' Integer
         && lk != 119474            // '[' ';' Complex
         && lk != 135858            // '[' ';' Real
         && lk != 152242            // '[' ';' Comment
         && lk != 201394            // '[' ';' '!'
         && lk != 332466            // '[' ';' '('
         && lk != 350642            // '[' ']' ')'
         && lk != 414386            // '[' ';' '+'
         && lk != 430770            // '[' ';' '++'
         && lk != 465330            // '[' ']' ','
         && lk != 479922            // '[' ';' '-'
         && lk != 496306            // '[' ';' '--'
         && lk != 580018            // '[' ']' ':'
         && lk != 606642            // '[' Identifier ';'
         && lk != 606770            // '[' Character ';'
         && lk != 606898            // '[' String ';'
         && lk != 607026            // '[' Integer ';'
         && lk != 607154            // '[' Complex ';'
         && lk != 607282            // '[' Real ';'
         && lk != 607410            // '[' Comment ';'
         && lk != 610994            // '[' ';' ';'
         && lk != 613170            // '[' 'break' ';'
         && lk != 613554            // '[' 'continue' ';'
         && lk != 823986            // '[' ';' '['
         && lk != 842162            // '[' ']' ']'
         && lk != 889522            // '[' ';' 'break'
         && lk != 924082            // '[' ']' 'catch'
         && lk != 938674            // '[' ';' 'continue'
         && lk != 971442            // '[' ';' 'do'
         && lk != 989618            // '[' ']' 'else'
         && lk != 1004210           // '[' ';' 'f32'
         && lk != 1020594           // '[' ';' 'f64'
         && lk != 1036978           // '[' ';' 'for'
         && lk != 1053362           // '[' ';' 'foreach'
         && lk != 1069746           // '[' ';' 'global'
         && lk != 1086130           // '[' ';' 'i32'
         && lk != 1102514           // '[' ';' 'i64'
         && lk != 1118898           // '[' ';' 'if'
         && lk != 1135282           // '[' ';' 'import'
         && lk != 1151666           // '[' ';' 'include'
         && lk != 1168050           // '[' ';' 'local'
         && lk != 1184434           // '[' ';' 'return'
         && lk != 1200818           // '[' ';' 'switch'
         && lk != 1217202           // '[' ';' 'test'
         && lk != 1233586           // '[' ';' 'throw'
         && lk != 1249970           // '[' ';' 'try'
         && lk != 1266354           // '[' ';' 'while'
         && lk != 1282738           // '[' ';' '{'
         && lk != 1364658)          // '[' ';' '~'
        {
          lk = memoized(12, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2; var l3B = l3;
            var b3B = b3; var e3B = e3;
            try
            {
              consumeT(50);         // '['
              lookahead1W(29);      // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
              if (l1 != 51)         // ']'
              {
                try_Arguments();
              }
              consumeT(51);         // ']'
              memoize(12, e0B, -1);
              continue;
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; l3 = l3B; if (l3 == 0) {end = e2B;} else {
              b3 = b3B; e3 = e3B; end = e3B; }}}
              memoize(12, e0B, -2);
              break;
            }
          }
        }
        if (lk != -1
         && lk != 350642            // '[' ']' ')'
         && lk != 465330            // '[' ']' ','
         && lk != 580018            // '[' ']' ':'
         && lk != 842162            // '[' ']' ']'
         && lk != 924082            // '[' ']' 'catch'
         && lk != 989618)           // '[' ']' 'else'
        {
          break;
        }
        consumeT(50);               // '['
        lookahead1W(29);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        if (l1 != 51)               // ']'
        {
          try_Arguments();
        }
        consumeT(51);               // ']'
      }
    }
  }

  function parse_Array()
  {
    eventHandler.startNonterminal("Array", e0);
    consume(78);                    // '{'
    lookahead1W(35);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
    if (l1 != 28                    // ','
     && l1 != 82)                   // '}'
    {
      whitespace();
      parse_Element();
    }
    for (;;)
    {
      lookahead1W(17);              // WhiteSpace^token | ',' | '}'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      whitespace();
      parse_Element();
    }
    consume(82);                    // '}'
    eventHandler.endNonterminal("Array", e0);
  }

  function try_Array()
  {
    consumeT(78);                   // '{'
    lookahead1W(35);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '}' | '~'
    if (l1 != 28                    // ','
     && l1 != 82)                   // '}'
    {
      try_Element();
    }
    for (;;)
    {
      lookahead1W(17);              // WhiteSpace^token | ',' | '}'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      try_Element();
    }
    consumeT(82);                   // '}'
  }

  function parse_Matrix()
  {
    eventHandler.startNonterminal("Matrix", e0);
    consume(50);                    // '['
    lookahead1W(29);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
    switch (l1)
    {
    case 37:                        // ';'
      lookahead2W(34);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 4773:                    // ';' ';'
        lookahead3W(34);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 610981)               // ';' ';' ';'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Row();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
        b3 = b3A; e3 = e3A; end = e3A; }}}
        memoize(13, e0, lk);
      }
    }
    if (lk != -2
     && lk != 51                    // ']'
     && lk != 421                   // ';' Identifier
     && lk != 549                   // ';' Character
     && lk != 677                   // ';' String
     && lk != 805                   // ';' Integer
     && lk != 933                   // ';' Complex
     && lk != 1061                  // ';' Real
     && lk != 1189                  // ';' Comment
     && lk != 1573                  // ';' '!'
     && lk != 2597                  // ';' '('
     && lk != 3237                  // ';' '+'
     && lk != 3365                  // ';' '++'
     && lk != 3749                  // ';' '-'
     && lk != 3877                  // ';' '--'
     && lk != 6437                  // ';' '['
     && lk != 6949                  // ';' 'break'
     && lk != 7333                  // ';' 'continue'
     && lk != 7589                  // ';' 'do'
     && lk != 7845                  // ';' 'f32'
     && lk != 7973                  // ';' 'f64'
     && lk != 8101                  // ';' 'for'
     && lk != 8229                  // ';' 'foreach'
     && lk != 8357                  // ';' 'global'
     && lk != 8485                  // ';' 'i32'
     && lk != 8613                  // ';' 'i64'
     && lk != 8741                  // ';' 'if'
     && lk != 8869                  // ';' 'import'
     && lk != 8997                  // ';' 'include'
     && lk != 9125                  // ';' 'local'
     && lk != 9253                  // ';' 'return'
     && lk != 9381                  // ';' 'switch'
     && lk != 9509                  // ';' 'test'
     && lk != 9637                  // ';' 'throw'
     && lk != 9765                  // ';' 'try'
     && lk != 9893                  // ';' 'while'
     && lk != 10021                 // ';' '{'
     && lk != 10661                 // ';' '~'
     && lk != 463525                // ';' ';' ','
     && lk != 840357)               // ';' ';' ']'
    {
      whitespace();
      parse_Row();
    }
    for (;;)
    {
      if (l1 != 37)                 // ';'
      {
        break;
      }
      consume(37);                  // ';'
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      whitespace();
      parse_Row();
    }
    consume(51);                    // ']'
    eventHandler.endNonterminal("Matrix", e0);
  }

  function try_Matrix()
  {
    consumeT(50);                   // '['
    lookahead1W(29);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
    switch (l1)
    {
    case 37:                        // ';'
      lookahead2W(34);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
      switch (lk)
      {
      case 4773:                    // ';' ';'
        lookahead3W(34);            // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | ',' | '-' | '--' | ';' | '[' | ']' |
                                    // 'break' | 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' |
                                    // 'i32' | 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' |
                                    // 'test' | 'throw' | 'try' | 'while' | '{' | '~'
        break;
      }
      break;
    default:
      lk = l1;
    }
    if (lk == 610981)               // ';' ';' ';'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2; var l3A = l3;
        var b3A = b3; var e3A = e3;
        try
        {
          try_Row();
          memoize(13, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; l3 = l3A; if (l3 == 0) {end = e2A;} else {
          b3 = b3A; e3 = e3A; end = e3A; }}}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk != -2
     && lk != 51                    // ']'
     && lk != 421                   // ';' Identifier
     && lk != 549                   // ';' Character
     && lk != 677                   // ';' String
     && lk != 805                   // ';' Integer
     && lk != 933                   // ';' Complex
     && lk != 1061                  // ';' Real
     && lk != 1189                  // ';' Comment
     && lk != 1573                  // ';' '!'
     && lk != 2597                  // ';' '('
     && lk != 3237                  // ';' '+'
     && lk != 3365                  // ';' '++'
     && lk != 3749                  // ';' '-'
     && lk != 3877                  // ';' '--'
     && lk != 6437                  // ';' '['
     && lk != 6949                  // ';' 'break'
     && lk != 7333                  // ';' 'continue'
     && lk != 7589                  // ';' 'do'
     && lk != 7845                  // ';' 'f32'
     && lk != 7973                  // ';' 'f64'
     && lk != 8101                  // ';' 'for'
     && lk != 8229                  // ';' 'foreach'
     && lk != 8357                  // ';' 'global'
     && lk != 8485                  // ';' 'i32'
     && lk != 8613                  // ';' 'i64'
     && lk != 8741                  // ';' 'if'
     && lk != 8869                  // ';' 'import'
     && lk != 8997                  // ';' 'include'
     && lk != 9125                  // ';' 'local'
     && lk != 9253                  // ';' 'return'
     && lk != 9381                  // ';' 'switch'
     && lk != 9509                  // ';' 'test'
     && lk != 9637                  // ';' 'throw'
     && lk != 9765                  // ';' 'try'
     && lk != 9893                  // ';' 'while'
     && lk != 10021                 // ';' '{'
     && lk != 10661                 // ';' '~'
     && lk != 463525                // ';' ';' ','
     && lk != 840357)               // ';' ';' ']'
    {
      try_Row();
    }
    for (;;)
    {
      if (l1 != 37)                 // ';'
      {
        break;
      }
      consumeT(37);                 // ';'
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      try_Row();
    }
    consumeT(51);                   // ']'
  }

  function parse_Element()
  {
    eventHandler.startNonterminal("Element", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(38);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
      break;
    case 5:                         // String
      lookahead2W(31);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 4483                  // Identifier ':'
     || lk == 4485)                 // String ':'
    {
      whitespace();
      parse_Key();
      lookahead1W(7);               // WhiteSpace^token | ':'
      consume(35);                  // ':'
    }
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    eventHandler.endNonterminal("Element", e0);
  }

  function try_Element()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      lookahead2W(38);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '(' | '*' | '**' |
                                    // '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '/' | '/=' | ':' |
                                    // ':=' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' |
                                    // '?=' | '[' | '^' | '^=' | '{' | '|' | '|=' | '||' | '}'
      break;
    case 5:                         // String
      lookahead2W(31);              // WhiteSpace^token | '!=' | '%' | '%=' | '&' | '&&' | '&=' | '*' | '**' | '*=' |
                                    // '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ':' | ':=' | '<' |
                                    // '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '?' | '?=' | '^' |
                                    // '^=' | '|' | '|=' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 4483                  // Identifier ':'
     || lk == 4485)                 // String ':'
    {
      try_Key();
      lookahead1W(7);               // WhiteSpace^token | ':'
      consumeT(35);                 // ':'
    }
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
  }

  function parse_Key()
  {
    eventHandler.startNonterminal("Key", e0);
    switch (l1)
    {
    case 3:                         // Identifier
      consume(3);                   // Identifier
      break;
    default:
      consume(5);                   // String
    }
    eventHandler.endNonterminal("Key", e0);
  }

  function try_Key()
  {
    switch (l1)
    {
    case 3:                         // Identifier
      consumeT(3);                  // Identifier
      break;
    default:
      consumeT(5);                  // String
    }
  }

  function parse_Row()
  {
    eventHandler.startNonterminal("Row", e0);
    parse_Column();
    for (;;)
    {
      lookahead1W(21);              // WhiteSpace^token | ',' | ';' | ']'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consume(28);                  // ','
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      whitespace();
      parse_Column();
    }
    eventHandler.endNonterminal("Row", e0);
  }

  function try_Row()
  {
    try_Column();
    for (;;)
    {
      lookahead1W(21);              // WhiteSpace^token | ',' | ';' | ']'
      if (l1 != 28)                 // ','
      {
        break;
      }
      consumeT(28);                 // ','
      lookahead1W(25);              // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
      try_Column();
    }
  }

  function parse_Column()
  {
    eventHandler.startNonterminal("Column", e0);
    parse_Expression();
    eventHandler.endNonterminal("Column", e0);
  }

  function try_Column()
  {
    try_Expression();
  }

  function parse_ParenthesizedExpression()
  {
    eventHandler.startNonterminal("ParenthesizedExpression", e0);
    consume(20);                    // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    whitespace();
    parse_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consume(21);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpression", e0);
  }

  function try_ParenthesizedExpression()
  {
    consumeT(20);                   // '('
    lookahead1W(25);                // Identifier | Character | String | Integer | Complex | Real | Comment |
                                    // WhiteSpace^token | '!' | '(' | '+' | '++' | '-' | '--' | ';' | '[' | 'break' |
                                    // 'continue' | 'do' | 'f32' | 'f64' | 'for' | 'foreach' | 'global' | 'i32' |
                                    // 'i64' | 'if' | 'import' | 'include' | 'local' | 'return' | 'switch' | 'test' |
                                    // 'throw' | 'try' | 'while' | '{' | '~'
    try_Expression();
    lookahead1W(4);                 // WhiteSpace^token | ')'
    consumeT(21);                   // ')'
  }

  function parse_Value()
  {
    eventHandler.startNonterminal("Value", e0);
    switch (l1)
    {
    case 6:                         // Integer
      consume(6);                   // Integer
      break;
    case 8:                         // Real
      consume(8);                   // Real
      break;
    case 7:                         // Complex
      consume(7);                   // Complex
      break;
    case 4:                         // Character
      consume(4);                   // Character
      break;
    case 5:                         // String
      consume(5);                   // String
      break;
    case 78:                        // '{'
      parse_Array();
      break;
    default:
      parse_Matrix();
    }
    eventHandler.endNonterminal("Value", e0);
  }

  function try_Value()
  {
    switch (l1)
    {
    case 6:                         // Integer
      consumeT(6);                  // Integer
      break;
    case 8:                         // Real
      consumeT(8);                  // Real
      break;
    case 7:                         // Complex
      consumeT(7);                  // Complex
      break;
    case 4:                         // Character
      consumeT(4);                  // Character
      break;
    case 5:                         // String
      consumeT(5);                  // String
      break;
    case 78:                        // '{'
      try_Array();
      break;
    default:
      try_Matrix();
    }
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(MaiaScript.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = l3; if (l2 != 0) {
      b2 = b3; e2 = e3; l3 = 0; }}
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 11)               // WhiteSpace^token
      {
        break;
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 7) | l1;
  }

  function lookahead3W(tokenSetId)
  {
    if (l3 == 0)
    {
      l3 = matchW(tokenSetId);
      b3 = begin;
      e3 = end;
    }
    lk |= l3 << 14;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var l3, b3, e3;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    begin = end;
    var current = end;
    var result = MaiaScript.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 511; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MaiaScript.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 5;
        charclass = MaiaScript.MAP1[(c0 & 31) + MaiaScript.MAP1[(c1 & 31) + MaiaScript.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }

        var lo = 0, hi = 1;
        for (var m = 1; ; m = (hi + lo) >> 1)
        {
          if (MaiaScript.MAP2[m] > c0) hi = m - 1;
          else if (MaiaScript.MAP2[2 + m] < c0) lo = m + 1;
          else {charclass = MaiaScript.MAP2[4 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 9) + code - 1;
      code = MaiaScript.TRANSITION[(i0 & 15) + MaiaScript.TRANSITION[i0 >> 4]];

      if (code > 511)
      {
        result = code;
        code &= 511;
        end = current;
      }
    }

    result >>= 9;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (end > size) end = size;
    return (result & 127) - 1;
  }

}

MaiaScript.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

MaiaScript.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : MaiaScript.INITIAL[tokenSetId] & 511;
  for (var i = 0; i < 84; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 283 + s - 1;
    var f = MaiaScript.EXPECTED[(i0 & 3) + MaiaScript.EXPECTED[i0 >> 2]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(MaiaScript.TOKEN[j]);
      }
    }
  }
  return set;
};

MaiaScript.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new MaiaScript.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new MaiaScript.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

MaiaScript.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

MaiaScript.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

MaiaScript.MAP0 =
[
  /*   0 */ 71, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6,
  /*  36 */ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 20, 26, 26, 27, 28, 29, 30, 31, 32,
  /*  64 */ 33, 34, 34, 35, 34, 36, 37, 7, 7, 7, 7, 7, 38, 7, 7, 7, 39, 7, 7, 7, 7, 40, 7, 7, 7, 7, 7, 41, 42, 43, 44,
  /*  95 */ 7, 33, 45, 46, 47, 48, 49, 50, 51, 52, 53, 7, 54, 55, 56, 57, 58, 59, 7, 60, 61, 62, 63, 7, 64, 65, 66, 7,
  /* 123 */ 67, 68, 69, 70, 33
];

MaiaScript.MAP1 =
[
  /*   0 */ 54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
  /*  27 */ 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
  /*  54 */ 90, 122, 216, 154, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
  /*  76 */ 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 71, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1,
  /* 102 */ 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
  /* 136 */ 17, 18, 19, 20, 21, 22, 23, 24, 25, 20, 26, 26, 27, 28, 29, 30, 31, 32, 33, 45, 46, 47, 48, 49, 50, 51, 52,
  /* 163 */ 53, 7, 54, 55, 56, 57, 58, 59, 7, 60, 61, 62, 63, 7, 64, 65, 66, 7, 67, 68, 69, 70, 33, 33, 33, 33, 33, 33,
  /* 191 */ 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34,
  /* 218 */ 34, 35, 34, 36, 37, 7, 7, 7, 7, 7, 38, 7, 7, 7, 39, 7, 7, 7, 7, 40, 7, 7, 7, 7, 7, 41, 42, 43, 44, 7
];

MaiaScript.MAP2 =
[
  /* 0 */ 57344, 65536, 65533, 1114111, 33, 33
];

MaiaScript.INITIAL =
[
  /*  0 */ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1050, 28,
  /* 29 */ 29, 30, 31, 32, 1057, 34, 35, 36, 37, 38, 39, 1064, 41, 42, 43, 1068, 1069
];

MaiaScript.TRANSITION =
[
  /*    0 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*   18 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*   36 */ 3006, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137,
  /*   54 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2331, 2331, 2333, 4137, 3006, 2883, 4137, 4138,
  /*   72 */ 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*   90 */ 4137, 4137, 4137, 4137, 4137, 4137, 2331, 2331, 2333, 4137, 4137, 4137, 4137, 4138, 4137, 3628, 4137, 3616,
  /*  108 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  126 */ 4137, 4137, 4137, 3408, 2349, 4137, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137,
  /*  144 */ 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6343,
  /*  162 */ 2378, 4137, 2439, 2883, 4137, 4138, 2460, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2481, 4137, 4137,
  /*  180 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2508, 6493, 2527, 4137, 3006, 2883,
  /*  198 */ 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  216 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854, 3204, 3754, 3797, 5168, 4905, 3524,
  /*  234 */ 5167, 3266, 5167, 3855, 3849, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  252 */ 4137, 4137, 4137, 4137, 4137, 3115, 2391, 4137, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137,
  /*  270 */ 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  288 */ 4137, 2642, 2404, 4137, 3040, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304,
  /*  306 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4102, 2580, 4137,
  /*  324 */ 2938, 2883, 4137, 4138, 2658, 3628, 4137, 5678, 4137, 4137, 2680, 4137, 4137, 2697, 4137, 4137, 4137, 4137,
  /*  342 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2733, 2745, 2761, 4137, 3006, 2883, 4137, 4138,
  /*  360 */ 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  378 */ 4137, 4137, 4137, 4137, 4137, 4137, 2417, 2552, 2540, 4137, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616,
  /*  396 */ 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  414 */ 4137, 4137, 4137, 3731, 2593, 4137, 3006, 2829, 3632, 4138, 4137, 2856, 4137, 6205, 4137, 4137, 2876, 4731,
  /*  432 */ 2942, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4946, 3575,
  /*  450 */ 2899, 5041, 3069, 3079, 5044, 4138, 4137, 3628, 4137, 5150, 4137, 4137, 2958, 2465, 2511, 2304, 4137, 4137,
  /*  468 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2980, 2993, 4137, 3006, 2883,
  /*  486 */ 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  504 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4196, 4412, 3027, 3175, 3056, 3105, 2664, 4138, 4137, 3628,
  /*  522 */ 4137, 5150, 4137, 4137, 2958, 2465, 2511, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  540 */ 4137, 4137, 4137, 4137, 4155, 3131, 2606, 4137, 3884, 2883, 4137, 4138, 6485, 3628, 4137, 3616, 4137, 4137,
  /*  558 */ 3151, 4137, 4533, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  576 */ 3173, 4782, 3191, 4137, 3006, 3893, 2880, 4138, 4137, 3628, 4137, 2362, 4137, 4137, 4137, 4137, 4137, 2304,
  /*  594 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 5327, 3241, 3854,
  /*  612 */ 3282, 3754, 5988, 5168, 3322, 3524, 5167, 4838, 5167, 5637, 3362, 4232, 6094, 4185, 4137, 4137, 4137, 4137,
  /*  630 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6445, 3383, 3854, 3282, 3754, 5988, 5168,
  /*  648 */ 3322, 3524, 5167, 5415, 5167, 5530, 3362, 4514, 6094, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  666 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6445, 3383, 3854, 3282, 3754, 5988, 3255, 3424, 3524, 5167, 5415,
  /*  684 */ 5167, 5530, 3362, 4514, 6094, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  702 */ 4137, 4137, 4137, 6445, 3383, 6332, 3440, 3939, 3480, 5168, 3322, 3524, 5167, 5415, 5167, 5530, 3362, 4514,
  /*  720 */ 6094, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6445,
  /*  738 */ 3383, 3854, 3282, 3754, 5988, 3335, 3509, 3544, 5167, 5415, 5167, 5530, 3362, 4514, 6094, 3397, 4137, 4137,
  /*  756 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6445, 3383, 3854, 3282, 3754,
  /*  774 */ 5988, 5168, 3322, 3524, 5167, 5415, 5167, 5530, 3362, 4811, 4867, 4091, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  792 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6445, 3383, 3564, 3591, 5260, 3648, 5168, 3322, 3524,
  /*  810 */ 5167, 5415, 5167, 5530, 3362, 4514, 6094, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  828 */ 4137, 4137, 4137, 4137, 4137, 6445, 3383, 3854, 3282, 3754, 5988, 5168, 3464, 3524, 5167, 5468, 5167, 5530,
  /*  846 */ 3362, 4514, 6094, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  864 */ 2708, 3089, 2564, 4137, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304,
  /*  882 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2717, 3689, 3677, 4137,
  /*  900 */ 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137,
  /*  918 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 5237, 2619, 4137, 3006, 2632, 4137, 4138,
  /*  936 */ 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  954 */ 4137, 4137, 4137, 4137, 4137, 4137, 3157, 5300, 2774, 3135, 3705, 3721, 2964, 4138, 4137, 3747, 4137, 3616,
  /*  972 */ 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /*  990 */ 4137, 4137, 4137, 6231, 2787, 4137, 3006, 4772, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137,
  /* 1008 */ 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 3011, 3225,
  /* 1026 */ 2800, 4137, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137,
  /* 1044 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 3006, 2883,
  /* 1062 */ 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1080 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854, 3204, 3754, 3797, 5168, 2860, 3524,
  /* 1098 */ 5167, 5085, 5167, 5530, 3770, 6177, 5743, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1116 */ 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854, 3204, 3754, 3797, 5168, 2860, 3524, 5167, 5085, 5167, 5530,
  /* 1134 */ 3770, 6177, 5604, 4401, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1152 */ 4136, 5022, 3803, 3854, 3204, 3754, 3797, 5168, 2860, 3524, 5167, 4631, 5167, 5530, 3791, 6177, 5743, 3397,
  /* 1170 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854,
  /* 1188 */ 6474, 3754, 3797, 5168, 2423, 3524, 5167, 5085, 5167, 5530, 3770, 6177, 5743, 3397, 4137, 4137, 4137, 4137,
  /* 1206 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854, 6549, 3754, 3797, 5168,
  /* 1224 */ 4203, 3524, 5167, 3266, 5167, 3855, 3849, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1242 */ 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854, 3204, 3754, 3797, 5168, 4905, 3524, 5167, 3346,
  /* 1260 */ 5167, 3855, 3819, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1278 */ 4137, 4137, 4136, 5022, 3803, 3854, 6291, 3754, 3797, 5168, 3841, 3524, 5167, 5926, 5167, 3855, 3849, 5188,
  /* 1296 */ 4998, 4322, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 3306,
  /* 1314 */ 3871, 4137, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137,
  /* 1332 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 3909, 2883,
  /* 1350 */ 4137, 4138, 3932, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 3955, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1368 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2813, 3982, 4137, 3006, 2883, 4137, 4138, 4137, 3628,
  /* 1386 */ 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1404 */ 4137, 4137, 4137, 4137, 4137, 2315, 2912, 4137, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137,
  /* 1422 */ 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1440 */ 4136, 5022, 3803, 4023, 4050, 5872, 4501, 5168, 2860, 3524, 5373, 5085, 4077, 6041, 4118, 6177, 5743, 3397,
  /* 1458 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4154, 6560, 4171, 3854,
  /* 1476 */ 3204, 3754, 3797, 5168, 4219, 3524, 3775, 5085, 4248, 5530, 3770, 6177, 5743, 4460, 4137, 4137, 4137, 4137,
  /* 1494 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4268, 6302, 4308, 3854, 3204, 3754, 3797, 5915,
  /* 1512 */ 2860, 4349, 6372, 5085, 3548, 5530, 4387, 3661, 5604, 4401, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1530 */ 4137, 4137, 4137, 4137, 4137, 4137, 4428, 4333, 4446, 3854, 3204, 3754, 3797, 5168, 2860, 3524, 5167, 5085,
  /* 1548 */ 5167, 5530, 3770, 5827, 4487, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1566 */ 4137, 4137, 4530, 3966, 4549, 4579, 3204, 5766, 4606, 5168, 2860, 4647, 6136, 6069, 4669, 5702, 4685, 6177,
  /* 1584 */ 5743, 4701, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4728, 4292,
  /* 1602 */ 4747, 4360, 4281, 3754, 4798, 4827, 4854, 3524, 4883, 5085, 5167, 5530, 3770, 6177, 5743, 4460, 4137, 4137,
  /* 1620 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4902, 4034, 4921, 3854, 3204, 3754,
  /* 1638 */ 3797, 5168, 4905, 3524, 5167, 3266, 5167, 3855, 3849, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1656 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 5849, 4968, 3754, 5591, 5168, 4905, 3524,
  /* 1674 */ 5167, 3266, 5167, 4995, 3849, 5014, 6261, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1692 */ 4137, 4137, 4137, 4137, 5038, 4979, 5060, 3854, 3204, 3754, 3797, 6380, 5101, 5125, 5166, 3266, 5167, 5184,
  /* 1710 */ 5204, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1728 */ 4136, 5022, 3803, 3854, 3204, 3754, 3797, 5168, 4905, 3524, 5167, 3266, 5167, 5227, 5631, 5188, 4998, 3397,
  /* 1746 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 5253, 4061, 5276, 5316,
  /* 1764 */ 6434, 3916, 5444, 5168, 4952, 3524, 4252, 5343, 5403, 4127, 5508, 5359, 5389, 3397, 4137, 4137, 4137, 4137,
  /* 1782 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 4761, 3295, 3754, 5431, 5168,
  /* 1800 */ 4905, 3524, 5167, 3266, 5167, 3855, 3849, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1818 */ 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 4935, 3453, 3754, 5484, 5168, 5500, 5524, 5167, 3266,
  /* 1836 */ 5167, 3855, 3849, 5546, 5577, 4460, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1854 */ 4137, 4137, 4136, 5022, 3803, 5620, 3604, 6011, 5653, 5074, 4905, 5694, 3367, 5718, 6166, 3855, 3849, 5188,
  /* 1872 */ 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022,
  /* 1890 */ 3803, 3854, 3204, 3754, 3797, 4620, 4905, 5734, 5167, 3346, 5167, 3855, 3819, 5188, 4998, 3397, 4137, 4137,
  /* 1908 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 5759, 4471, 5782, 5138, 3204, 6583,
  /* 1926 */ 5902, 3493, 5500, 5798, 5167, 3266, 5167, 5290, 6404, 5188, 4998, 4460, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1944 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 5865, 4371, 5888, 3854, 3204, 3754, 3825, 5942, 5958, 5813,
  /* 1962 */ 5982, 3266, 5167, 3855, 3849, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 1980 */ 4137, 4137, 4137, 4137, 6004, 4590, 6027, 3854, 3204, 3754, 4653, 5457, 5500, 6057, 6085, 6110, 6126, 3855,
  /* 1998 */ 3849, 5188, 6152, 6193, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 2016 */ 4136, 5022, 3803, 3854, 6291, 3754, 3797, 5168, 3841, 3524, 3528, 5926, 5841, 6221, 5966, 6247, 4563, 4322,
  /* 2034 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6277, 4712, 6318, 5666,
  /* 2052 */ 3204, 3754, 6359, 5168, 4905, 3524, 5167, 3266, 5167, 5211, 5109, 5188, 4998, 3397, 4137, 4137, 4137, 4137,
  /* 2070 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854, 3995, 3754, 3797, 5168,
  /* 2088 */ 6396, 3524, 5167, 3266, 5167, 3855, 3849, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 2106 */ 4137, 4137, 4137, 4137, 4137, 4137, 4136, 5022, 3803, 3854, 3204, 3754, 3797, 4886, 4905, 5561, 5167, 3266,
  /* 2124 */ 5167, 3855, 3849, 5188, 4998, 3397, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 2142 */ 4137, 4137, 4430, 6420, 6461, 2444, 3006, 2883, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137,
  /* 2160 */ 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2492,
  /* 2178 */ 2925, 4137, 3006, 3215, 4137, 4138, 4137, 3628, 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137,
  /* 2196 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 6509, 6520, 4137, 3006, 2883,
  /* 2214 */ 4137, 2681, 4137, 3628, 4137, 4007, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 2232 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 2840, 6536, 4137, 3006, 2883, 4137, 4138, 4137, 3628,
  /* 2250 */ 4137, 3616, 4137, 4137, 4137, 4137, 4137, 2304, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 2268 */ 4137, 4137, 4137, 4137, 4137, 4137, 6576, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 2286 */ 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
  /* 2304 */ 0, 0, 68, 0, 0, 0, 68, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 0, 0, 27224, 0, 27224, 0, 0, 0, 27224, 27224,
  /* 2331 */ 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 6190, 0, 0, 6656,
  /* 2350 */ 6656, 6656, 6656, 78, 78, 78, 6656, 6734, 6734, 6734, 6734, 6734, 0, 0, 0, 0, 5632, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 2375 */ 0, 0, 5120, 68, 68, 68, 68, 0, 0, 0, 68, 68, 68, 68, 68, 68, 0, 0, 0, 0, 8271, 8271, 8271, 0, 8271, 8271,
  /* 2401 */ 8271, 8271, 8271, 0, 0, 0, 0, 9296, 9296, 9296, 0, 9296, 9296, 9296, 9296, 9296, 0, 0, 0, 0, 11264, 0, 0,
  /* 2424 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3584, 0, 3725, 2095, 2095, 2095, 0, 0, 0, 3072, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 2453 */ 0, 0, 128, 0, 0, 0, 0, 0, 0, 68, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 0, 70, 0, 0, 0, 0, 3140,
  /* 2484 */ 132, 0, 0, 3140, 3072, 3072, 3072, 3072, 0, 0, 0, 0, 0, 0, 0, 0, 41049, 0, 41049, 0, 0, 0, 41049, 41049, 0,
  /* 2509 */ 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 5210, 5210, 5210, 5210, 0, 0, 0, 5210, 5210, 5210,
  /* 2537 */ 5210, 5210, 5210, 0, 0, 0, 0, 11264, 0, 0, 11264, 0, 0, 0, 11264, 11264, 0, 0, 0, 11264, 0, 0, 0, 11264, 0,
  /* 2562 */ 0, 11264, 0, 0, 0, 0, 64, 18496, 64, 18432, 64, 18496, 18496, 18496, 18496, 0, 0, 0, 69, 69, 69, 69, 0, 0,
  /* 2586 */ 0, 69, 69, 69, 69, 69, 69, 0, 0, 0, 0, 11857, 11857, 11857, 0, 11857, 11857, 11857, 11857, 11857, 0, 0, 0,
  /* 2609 */ 0, 16896, 16896, 16896, 0, 0, 0, 16896, 0, 16896, 0, 0, 0, 0, 20053, 20053, 20053, 0, 20053, 20053, 20053,
  /* 2630 */ 20053, 20053, 0, 0, 0, 0, 20626, 0, 0, 0, 0, 5210, 0, 0, 0, 0, 0, 0, 0, 0, 9296, 0, 9296, 0, 0, 0, 9296,
  /* 2657 */ 9296, 0, 0, 68, 2560, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 16006, 0, 0, 0, 0, 2560, 0, 0, 0, 0, 0, 0,
  /* 2687 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 68, 2692, 0, 0, 68, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 0, 18432, 64,
  /* 2717 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10752,
  /* 2749 */ 0, 0, 10752, 10752, 0, 10752, 0, 10752, 10752, 10752, 0, 0, 10752, 10752, 10752, 10752, 10752, 10752,
  /* 2767 */ 10752, 10752, 10752, 10752, 10752, 10752, 10752, 0, 0, 0, 0, 22102, 22102, 22102, 0, 22102, 22102, 22102,
  /* 2785 */ 22102, 22102, 0, 0, 0, 0, 23127, 23127, 23127, 0, 23127, 23127, 23127, 23127, 23127, 0, 0, 0, 0, 25153,
  /* 2805 */ 25153, 25153, 0, 25153, 25153, 25153, 25153, 25153, 0, 0, 0, 0, 26624, 26624, 0, 0, 0, 0, 0, 0, 26624, 0,
  /* 2827 */ 0, 26624, 12288, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 148, 0, 0, 0, 0, 0, 0, 0, 43008, 0, 43008, 0, 43008, 43008,
  /* 2853 */ 43008, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3725, 2095, 2095, 2095, 0, 227, 0, 227, 0,
  /* 2881 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 0, 0, 0, 0, 0, 13388, 13388, 13388, 13388, 13394, 13394, 13394,
  /* 2906 */ 13388, 13419, 13419, 13419, 13419, 13419, 0, 0, 0, 0, 27224, 27224, 27224, 0, 27224, 27224, 27224, 27224,
  /* 2924 */ 27224, 0, 0, 0, 0, 41049, 41049, 41049, 0, 41049, 41049, 41049, 41049, 41049, 0, 0, 0, 68, 0, 0, 0, 0, 0,
  /* 2947 */ 0, 0, 0, 0, 0, 0, 0, 227, 227, 0, 0, 0, 0, 0, 70, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14336, 16384,
  /* 2976 */ 17920, 0, 0, 0, 0, 14848, 0, 0, 14848, 14848, 0, 0, 0, 0, 14848, 0, 0, 0, 14848, 14848, 0, 0, 14848, 14848,
  /* 3000 */ 14848, 14848, 14848, 14848, 14848, 14848, 0, 0, 0, 68, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
  /* 3026 */ 0, 15437, 15437, 15437, 15437, 15443, 15443, 15443, 15437, 15468, 15468, 15468, 15468, 15468, 0, 0, 0, 68,
  /* 3044 */ 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9728, 0, 0, 0, 68, 132, 134, 134, 0, 0, 0, 0, 134, 16006, 0, 0, 0, 68,
  /* 3073 */ 132, 0, 0, 0, 0, 0, 0, 13824, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 18496,
  /* 3104 */ 64, 0, 0, 15872, 0, 0, 0, 0, 0, 0, 5210, 0, 0, 0, 0, 0, 0, 0, 0, 8271, 0, 8271, 0, 0, 0, 8271, 8271, 0, 0,
  /* 3133 */ 16896, 16896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7680, 0, 0, 18944, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 3163 */ 0, 0, 0, 0, 22016, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15872, 0, 91, 91, 91,
  /* 3194 */ 91, 17492, 17492, 17492, 91, 17517, 17517, 17517, 17517, 17517, 0, 0, 0, 68, 132, 0, 0, 0, 0, 2095, 2095,
  /* 3215 */ 0, 0, 0, 0, 0, 0, 0, 0, 41984, 5210, 0, 0, 0, 0, 0, 0, 0, 0, 25153, 0, 25153, 0, 0, 0, 25153, 25153, 3656,
  /* 3242 */ 3656, 3656, 3656, 0, 0, 0, 3656, 3656, 3656, 3656, 3656, 3656, 0, 2095, 2095, 47, 2095, 2095, 2095, 2095,
  /* 3262 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 68, 132,
  /* 3287 */ 135, 136, 3657, 3657, 2095, 2095, 135, 136, 0, 0, 0, 68, 132, 0, 0, 0, 0, 2095, 2167, 0, 0, 0, 0, 0, 0,
  /* 3312 */ 26112, 26112, 0, 26112, 0, 26112, 26112, 26112, 0, 0, 0, 0, 68, 0, 186, 135, 135, 136, 4799, 0, 0, 0, 3725,
  /* 3335 */ 2095, 2095, 2095, 47, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 128, 0, 0, 0, 0, 0,
  /* 3356 */ 0, 0, 0, 0, 229, 148, 225, 226, 0, 4836, 4862, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 3377 */ 2095, 2095, 2262, 2095, 2095, 2095, 3657, 3657, 3657, 3657, 0, 0, 0, 3657, 3657, 3657, 3657, 3657, 3657, 0,
  /* 3397 */ 2095, 2095, 68, 0, 0, 2095, 68, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 0, 6656, 78, 6656, 78, 6656, 6656, 6656,
  /* 3422 */ 78, 78, 0, 0, 68, 0, 186, 135, 135, 136, 4799, 0, 0, 0, 3725, 31791, 2095, 34351, 0, 0, 0, 68, 132, 135,
  /* 3446 */ 136, 3657, 3657, 2190, 2192, 135, 136, 0, 0, 0, 68, 132, 0, 0, 0, 0, 2095, 2168, 0, 0, 0, 0, 0, 135, 135,
  /* 3471 */ 136, 4799, 0, 0, 0, 3725, 2095, 2095, 2095, 2192, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 3490 */ 135, 136, 0, 2095, 2095, 2095, 2095, 171, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2227, 2095, 2095, 128,
  /* 3509 */ 0, 0, 68, 0, 186, 135, 135, 136, 4799, 0, 0, 0, 3725, 2095, 32303, 2095, 0, 0, 148, 2095, 2095, 2095, 2095,
  /* 3532 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2265, 34863, 0, 0, 148, 2095, 2095, 2095,
  /* 3551 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2290, 2095, 2095, 2095, 2095, 2164, 2095,
  /* 3569 */ 2164, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 70, 13388, 13394, 13388, 13394, 13388, 13388, 13388,
  /* 3589 */ 13394, 13394, 0, 0, 0, 68, 132, 135, 136, 3657, 3657, 2191, 2193, 135, 136, 0, 0, 0, 68, 132, 0, 0, 0, 0,
  /* 3613 */ 2165, 2095, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
  /* 3645 */ 0, 0, 0, 2193, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 135, 136, 0, 2095, 2095, 2095, 2095,
  /* 3665 */ 2095, 2095, 185, 185, 265, 265, 0, 0, 0, 0, 2095, 2320, 19456, 19456, 19456, 19456, 0, 0, 19456, 19456,
  /* 3685 */ 19456, 19456, 19456, 19456, 19456, 0, 0, 0, 0, 19456, 0, 0, 0, 19456, 0, 19456, 19456, 19456, 0, 19456,
  /* 3705 */ 25600, 0, 0, 68, 132, 0, 0, 0, 0, 0, 0, 0, 0, 7168, 8704, 10240, 12800, 14336, 16384, 17920, 21504, 22528,
  /* 3727 */ 23552, 27648, 41472, 5210, 0, 0, 0, 0, 0, 0, 0, 0, 11857, 0, 11857, 0, 0, 0, 11857, 11857, 0, 20992, 24576,
  /* 3750 */ 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 2095, 2095, 2095, 2095, 2095, 225, 0, 0, 0, 0, 2095,
  /* 3776 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2223, 2095, 2095, 2095, 2095, 225, 252, 0, 229,
  /* 3795 */ 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 2095, 2095, 2095, 2095, 2095,
  /* 3815 */ 2095, 0, 2095, 2095, 0, 252, 0, 229, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 3835 */ 0, 0, 0, 2095, 2215, 2095, 0, 0, 184, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 3860 */ 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 26112, 26112, 26112, 26112, 26112, 26112, 26112, 26112,
  /* 3879 */ 26112, 26112, 26112, 26112, 26112, 0, 0, 0, 68, 132, 0, 0, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 5210,
  /* 3904 */ 0, 0, 0, 0, 0, 0, 0, 0, 131, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 2095, 2095, 2095, 2095, 2200,
  /* 3932 */ 0, 0, 68, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 2095, 2095, 2095, 2190, 2095, 0, 0, 279, 188,
  /* 3959 */ 0, 0, 279, 131, 131, 131, 131, 0, 0, 0, 0, 0, 0, 2099, 2099, 0, 2099, 0, 2099, 2099, 2099, 0, 0, 0, 26624,
  /* 3984 */ 0, 0, 0, 0, 26624, 26624, 0, 0, 0, 26624, 26624, 0, 0, 0, 68, 132, 0, 0, 141, 0, 2095, 2095, 0, 0, 0, 0, 0,
  /* 4011 */ 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 2159, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4034 */ 0, 0, 0, 0, 0, 0, 2101, 2101, 0, 2144, 0, 2144, 2144, 2144, 0, 0, 0, 129, 0, 68, 132, 0, 0, 0, 0, 2095,
  /* 4060 */ 2095, 0, 0, 0, 0, 0, 0, 2103, 2103, 0, 2146, 0, 2146, 2146, 2146, 0, 0, 2278, 2095, 2095, 2095, 2095, 2095,
  /* 4083 */ 2284, 2095, 2095, 2095, 2095, 2095, 2095, 2289, 2095, 2095, 68, 0, 0, 2095, 68, 68, 68, 283, 68, 0, 0, 0,
  /* 4105 */ 0, 0, 0, 69, 69, 0, 69, 0, 69, 69, 69, 0, 0, 225, 0, 0, 0, 0, 2095, 2095, 2304, 2305, 2095, 2095, 2095,
  /* 4130 */ 2095, 2095, 2095, 2095, 47, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 2096, 0, 0, 0,
  /* 4158 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16896, 2140, 2140, 2140, 2140, 0, 0, 0, 2140, 2140, 2140, 2140, 2140,
  /* 4183 */ 2140, 0, 2095, 2095, 68, 0, 0, 2095, 68, 281, 282, 68, 68, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 4212 */ 3584, 3722, 0, 0, 2095, 2095, 2095, 0, 0, 68, 0, 132, 0, 0, 0, 0, 0, 0, 0, 3725, 2095, 2095, 2095, 2095,
  /* 4236 */ 2095, 2095, 185, 185, 265, 265, 267, 269, 4862, 4878, 2095, 2095, 2095, 2095, 2095, 2281, 2095, 2095, 2095,
  /* 4255 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2263, 2095, 2095, 2097, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 4277 */ 0, 0, 0, 66, 0, 0, 0, 68, 132, 0, 0, 3584, 3584, 2095, 47, 0, 0, 0, 0, 0, 0, 2122, 2122, 0, 2143, 0, 2143,
  /* 4304 */ 2143, 2143, 0, 0, 2141, 2141, 2141, 2151, 0, 0, 0, 2153, 2141, 2141, 2141, 2153, 2153, 0, 2095, 2095, 68,
  /* 4325 */ 0, 0, 2095, 280, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 2098, 2098, 0, 2142, 0, 2142, 2142, 2142, 0, 0, 2095, 0,
  /* 4351 */ 0, 148, 2095, 2095, 2095, 2095, 2095, 2246, 2247, 2095, 2095, 2095, 2095, 2095, 47, 2095, 2095, 2095, 2095,
  /* 4370 */ 2095, 0, 0, 0, 0, 0, 0, 2105, 2105, 0, 2148, 0, 2148, 2148, 2148, 0, 0, 225, 0, 0, 0, 0, 2095, 2095, 2095,
  /* 4395 */ 2095, 2095, 2095, 2095, 2095, 2309, 2095, 2095, 68, 0, 132, 2095, 68, 68, 68, 68, 275, 0, 0, 0, 0, 0, 0,
  /* 4418 */ 71, 15437, 15443, 15437, 15443, 15437, 15437, 15437, 15443, 15443, 2098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 4440 */ 0, 0, 0, 0, 40448, 0, 2142, 2142, 2142, 2152, 0, 0, 0, 2152, 2142, 2142, 2142, 2152, 2152, 0, 2095, 2095,
  /* 4462 */ 68, 132, 0, 2095, 68, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 2104, 2104, 0, 2147, 0, 2147, 2147, 2147, 0, 0,
  /* 4487 */ 2095, 2095, 2321, 2095, 2095, 2095, 2095, 68, 132, 132, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4507 */ 2210, 2095, 2212, 2095, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 185, 185, 265, 265, 0, 269, 4862,
  /* 4527 */ 4878, 2095, 2095, 2099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 2099, 2099, 2099, 2099, 0,
  /* 4554 */ 0, 0, 2154, 2099, 2099, 2099, 2154, 2154, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2215, 0, 0, 0, 0, 0, 0, 0,
  /* 4577 */ 2326, 2095, 2095, 2161, 2095, 2095, 2095, 2095, 2095, 2170, 2095, 2172, 2095, 0, 0, 0, 0, 0, 0, 2106, 2106,
  /* 4598 */ 0, 2149, 0, 2149, 2149, 2149, 0, 0, 2095, 2095, 2204, 2095, 2206, 2095, 2095, 2211, 2095, 2095, 0, 0, 0,
  /* 4619 */ 2214, 2095, 2095, 2095, 2095, 2095, 2095, 2221, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 128, 0, 0,
  /* 4638 */ 221, 68, 0, 223, 0, 225, 0, 229, 148, 2095, 0, 0, 148, 2241, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4659 */ 2095, 2095, 2095, 2095, 0, 0, 0, 2095, 2216, 2095, 2095, 2095, 2280, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4678 */ 2095, 2095, 2095, 28719, 2095, 2095, 31279, 225, 252, 0, 229, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4697 */ 2095, 2095, 2095, 39983, 36399, 2095, 68, 0, 0, 29743, 68, 68, 68, 68, 68, 0, 0, 0, 0, 0, 0, 2107, 2107, 0,
  /* 4721 */ 2150, 0, 2150, 2150, 2150, 0, 0, 2100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 2143, 2143,
  /* 4749 */ 2143, 2143, 0, 0, 0, 2143, 2143, 2143, 2143, 2143, 2143, 0, 2095, 2095, 2095, 2095, 2095, 2167, 2095, 2095,
  /* 4769 */ 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 24211, 0, 0, 5210, 0, 0, 0, 0, 0, 0, 0, 0, 17492, 91, 17492, 91, 91,
  /* 4795 */ 91, 17492, 17492, 35375, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 2095, 2095, 2095,
  /* 4814 */ 2095, 2095, 2095, 264, 185, 266, 265, 0, 269, 4862, 4878, 2095, 2095, 2218, 2095, 2095, 2095, 2095, 2095,
  /* 4833 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 128, 0, 0, 220, 68, 186, 222, 0, 225, 226, 4836, 148,
  /* 4854 */ 0, 0, 68, 0, 132, 0, 0, 0, 0, 0, 3584, 0, 3725, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 68, 132, 132,
  /* 4877 */ 277, 269, 269, 4878, 2095, 2095, 2095, 2095, 2254, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 4895 */ 2095, 2095, 2095, 2095, 47, 2095, 128, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095,
  /* 4921 */ 2144, 2144, 2144, 2144, 0, 0, 0, 2144, 2144, 2144, 2144, 2144, 2144, 0, 2095, 2095, 2095, 2095, 2095, 2168,
  /* 4941 */ 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3724, 3584, 0, 2095, 2095,
  /* 4967 */ 2095, 0, 0, 130, 68, 132, 0, 0, 0, 0, 2095, 2095, 0, 0, 0, 0, 0, 0, 2123, 2123, 0, 2145, 0, 2145, 2145,
  /* 4992 */ 2145, 0, 0, 2095, 47, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 2095, 2095,
  /* 5014 */ 2095, 29231, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 0, 2095, 0, 2095, 2095, 2095, 0,
  /* 5037 */ 0, 2102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13824, 0, 0, 0, 0, 0, 2145, 2145, 2145, 2145, 0, 0,
  /* 5066 */ 0, 2145, 2145, 2145, 2145, 2145, 2145, 0, 2095, 2095, 2095, 2095, 2095, 2220, 2095, 2095, 2095, 2095, 2095,
  /* 5085 */ 2095, 2095, 2095, 2095, 128, 0, 0, 221, 68, 0, 223, 0, 225, 0, 0, 148, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 5112 */ 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 38959, 2095, 2095, 0, 0, 148, 2095, 2095, 2095,
  /* 5132 */ 2095, 2095, 2095, 2095, 2095, 2249, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2174, 2095, 0, 0,
  /* 5151 */ 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 148, 2252, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5175 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 128, 2095, 2095, 2291, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5193 */ 2095, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 0, 0, 4096, 0, 0, 2095, 2303, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5217 */ 2095, 2095, 2095, 47, 0, 0, 0, 0, 0, 0, 47, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0,
  /* 5240 */ 0, 0, 0, 0, 0, 20053, 0, 20053, 0, 0, 0, 20053, 20053, 2103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 5269 */ 5210, 0, 2095, 2095, 2095, 2191, 2095, 2146, 2146, 2146, 2146, 0, 0, 0, 2146, 2146, 2146, 2146, 2146, 2146,
  /* 5289 */ 0, 2095, 2095, 2095, 2095, 2095, 2226, 2095, 2095, 2294, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 22102, 0, 22102, 0,
  /* 5312 */ 0, 0, 22102, 22102, 2095, 2095, 2162, 2095, 2166, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0, 0,
  /* 5333 */ 3656, 3656, 0, 3656, 0, 3656, 3656, 3656, 0, 0, 2095, 2095, 2095, 2215, 128, 0, 219, 0, 0, 0, 0, 0, 0, 0,
  /* 5357 */ 0, 148, 2095, 2095, 2095, 2226, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2257,
  /* 5379 */ 2095, 2095, 2095, 2260, 2095, 2095, 2095, 2095, 2264, 2095, 33839, 2095, 2095, 2095, 2095, 2322, 2095, 0,
  /* 5397 */ 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2283, 2095, 2095, 2095, 2095, 2095, 2288, 2095, 2095, 2095,
  /* 5418 */ 2095, 128, 0, 0, 221, 68, 186, 223, 0, 225, 226, 4836, 148, 2201, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5439 */ 2095, 2095, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2213, 0, 0, 0, 2095, 2095, 2095,
  /* 5460 */ 2095, 2095, 2095, 2095, 2095, 2095, 2224, 2095, 2095, 2095, 2095, 2095, 128, 0, 0, 221, 68, 0, 223, 0, 225,
  /* 5481 */ 226, 4836, 148, 2202, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 2095, 2095, 2217, 0,
  /* 5501 */ 0, 68, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 36911, 2095, 2095, 2095, 2095,
  /* 5524 */ 2095, 0, 0, 148, 2095, 2242, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 248, 248, 250,
  /* 5544 */ 250, 0, 2095, 2095, 2311, 2095, 2095, 47, 0, 0, 0, 0, 0, 0, 0, 0, 2319, 2095, 0, 0, 148, 2095, 2095, 2095,
  /* 5568 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 39471, 2095, 2095, 2095, 37423, 2095, 2095, 2095, 0, 0, 0,
  /* 5587 */ 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2207, 2209, 2095, 2095, 2095, 2095, 0, 0, 0, 2095, 2095, 2095, 2095,
  /* 5608 */ 2095, 2095, 2095, 275, 132, 276, 0, 0, 0, 0, 2095, 2095, 2160, 47, 2095, 2165, 2095, 2095, 2169, 2095,
  /* 5628 */ 2095, 2095, 2095, 0, 0, 0, 0, 0, 28207, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 247,
  /* 5649 */ 248, 249, 250, 251, 2095, 2203, 2095, 2095, 2095, 2095, 2198, 30767, 2198, 2095, 0, 0, 0, 2095, 2095, 2095,
  /* 5669 */ 2095, 2095, 2095, 2095, 2095, 2171, 2095, 2095, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 2560, 0, 2560, 0, 0, 0,
  /* 5693 */ 148, 2095, 0, 0, 148, 2095, 2095, 2095, 2244, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5712 */ 39936, 248, 248, 250, 250, 0, 2095, 2095, 2266, 2095, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 2095, 0, 0,
  /* 5737 */ 148, 2095, 2095, 2095, 2095, 2245, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 68, 132, 132, 0, 0, 0, 0,
  /* 5757 */ 2095, 2095, 2104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 2095, 2095, 2161, 2095, 2095, 2147,
  /* 5783 */ 2147, 2147, 2147, 0, 0, 0, 2147, 2147, 2147, 2147, 2147, 2147, 0, 2095, 2158, 2095, 0, 0, 148, 2095, 2095,
  /* 5804 */ 32963, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2251, 2095, 0, 0, 148, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5823 */ 2095, 2095, 2095, 2250, 2095, 2095, 2095, 2095, 2215, 2095, 185, 185, 265, 265, 0, 0, 0, 0, 2095, 2095,
  /* 5843 */ 2095, 2095, 2095, 2095, 2095, 2285, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2173, 2175, 0, 0,
  /* 5862 */ 0, 0, 0, 2105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 2095, 2159, 2095, 2095, 2095, 2148,
  /* 5889 */ 2148, 2148, 2148, 0, 0, 0, 2148, 2148, 2148, 2148, 2148, 2148, 0, 2095, 2095, 2095, 2095, 2208, 2095, 2095,
  /* 5909 */ 2095, 2095, 2095, 0, 0, 0, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2222, 2223, 2095, 2095, 2095, 2095,
  /* 5928 */ 2095, 2095, 128, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 148, 2095, 2215, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5951 */ 2095, 2095, 2226, 2095, 2095, 2095, 128, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095,
  /* 5975 */ 2095, 2307, 2095, 2095, 2095, 2095, 2095, 2095, 2253, 2095, 2253, 2256, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 5993 */ 2095, 2095, 2095, 2095, 2095, 135, 136, 0, 2095, 2095, 2095, 2106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 6018 */ 0, 0, 5210, 0, 2095, 2198, 30767, 2199, 2095, 2149, 2149, 2149, 2149, 0, 0, 0, 2149, 2149, 2149, 2149,
  /* 6038 */ 2149, 2149, 0, 2095, 2095, 2095, 2095, 2216, 2095, 2095, 2095, 2095, 2095, 0, 248, 248, 250, 250, 0, 2095,
  /* 6058 */ 0, 0, 148, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2248, 2095, 2095, 2095, 2095, 128, 28672, 0, 221, 68,
  /* 6078 */ 0, 223, 0, 225, 0, 229, 148, 2095, 2216, 2095, 2255, 2095, 2095, 2095, 2095, 2259, 2095, 2095, 2095, 2095,
  /* 6098 */ 2095, 2095, 2095, 68, 132, 132, 0, 269, 269, 4878, 2095, 2095, 2216, 47, 2095, 2095, 128, 0, 0, 0, 0, 0, 0,
  /* 6121 */ 0, 0, 0, 0, 148, 2095, 2279, 2095, 2095, 2095, 2095, 2095, 2095, 2286, 38447, 2095, 2095, 2095, 2095, 2095,
  /* 6141 */ 2095, 47, 2095, 2095, 2095, 2261, 2095, 2095, 2095, 2095, 2095, 2095, 35887, 2095, 2095, 2095, 2095, 2095,
  /* 6159 */ 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2282, 2095, 2095, 2095, 2095, 2095, 2287, 2095, 2095, 2095,
  /* 6180 */ 2095, 2095, 2095, 185, 185, 265, 265, 0, 0, 0, 0, 2095, 2095, 2095, 30255, 68, 132, 0, 2095, 68, 68, 68,
  /* 6202 */ 68, 68, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 192, 2095, 2095, 2095, 2292, 2095, 2095, 2293,
  /* 6228 */ 2095, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 23127, 0, 23127, 0, 0, 0, 23127, 23127, 2310, 2095, 2095, 2095,
  /* 6251 */ 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 37935, 2095, 2095, 0, 0, 0, 0, 0, 0, 0, 2095,
  /* 6276 */ 33327, 2107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 68, 132, 0, 0, 3723, 3723, 2095, 2095, 0, 0,
  /* 6304 */ 0, 0, 0, 0, 2097, 2097, 0, 2141, 0, 2141, 2141, 2141, 0, 0, 2150, 2150, 2150, 2150, 0, 0, 0, 2150, 2150,
  /* 6327 */ 2150, 2150, 2150, 2150, 0, 2095, 2095, 2095, 2163, 2095, 2163, 2095, 2095, 2095, 2095, 2095, 0, 0, 0, 0, 0,
  /* 6348 */ 0, 68, 68, 0, 68, 0, 68, 68, 68, 0, 0, 2095, 2095, 2095, 2205, 2095, 2095, 2095, 2095, 2095, 2095, 0, 0, 0,
  /* 6372 */ 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2258, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
  /* 6390 */ 2225, 2095, 2095, 2095, 2228, 128, 0, 0, 185, 0, 189, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 2095, 2095, 2095, 2306,
  /* 6414 */ 2095, 2095, 2308, 2095, 2095, 2095, 0, 0, 40448, 40448, 0, 0, 40448, 40448, 0, 40448, 0, 40448, 40448,
  /* 6433 */ 40448, 0, 0, 0, 68, 132, 0, 0, 3724, 3724, 2095, 2095, 0, 0, 0, 0, 0, 0, 3657, 3657, 0, 3657, 0, 3657,
  /* 6457 */ 3657, 3657, 0, 0, 40448, 40448, 40448, 40448, 40448, 40448, 40448, 40448, 40448, 40448, 40448, 40448,
  /* 6473 */ 40448, 0, 0, 0, 68, 132, 0, 0, 3584, 3584, 2095, 2095, 0, 0, 0, 0, 0, 0, 190, 137, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 6501 */ 0, 5210, 0, 5210, 5210, 5210, 0, 0, 0, 42496, 0, 0, 0, 0, 0, 0, 0, 0, 42496, 0, 0, 42496, 42496, 0, 42496,
  /* 6526 */ 0, 42496, 42496, 42496, 42496, 42496, 42496, 0, 0, 0, 43008, 43008, 43008, 43008, 0, 0, 0, 43008, 43008,
  /* 6545 */ 43008, 43008, 43008, 43008, 0, 0, 0, 68, 132, 0, 0, 3722, 3722, 2095, 2095, 0, 0, 0, 0, 0, 0, 2096, 2096,
  /* 6568 */ 0, 2140, 0, 2140, 2140, 2140, 0, 0, 1536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210, 0, 2197, 2095,
  /* 6596 */ 2095, 2095, 2095
];

MaiaScript.EXPECTED =
[
  /*   0 */ 213, 217, 220, 221, 225, 229, 233, 240, 237, 244, 248, 251, 375, 375, 301, 257, 330, 264, 267, 271, 275,
  /*  21 */ 329, 372, 375, 375, 375, 283, 374, 375, 375, 375, 301, 331, 287, 297, 300, 370, 375, 375, 375, 375, 375,
  /*  42 */ 375, 375, 375, 305, 308, 313, 375, 375, 375, 375, 375, 375, 253, 308, 287, 318, 375, 375, 375, 291, 309,
  /*  63 */ 317, 375, 376, 309, 289, 377, 322, 293, 329, 389, 325, 383, 260, 335, 342, 339, 345, 349, 353, 329, 329,
  /*  84 */ 329, 329, 405, 328, 329, 357, 329, 416, 362, 399, 381, 329, 476, 415, 329, 329, 329, 329, 421, 329, 329,
  /* 105 */ 329, 387, 393, 403, 329, 329, 409, 329, 329, 329, 329, 328, 329, 398, 397, 329, 421, 413, 329, 329, 329,
  /* 126 */ 329, 329, 396, 329, 426, 420, 329, 329, 459, 329, 425, 329, 459, 425, 397, 329, 329, 329, 358, 431, 430,
  /* 147 */ 435, 439, 446, 442, 450, 452, 329, 329, 329, 329, 329, 481, 329, 456, 329, 329, 461, 329, 465, 469, 329,
  /* 168 */ 329, 329, 329, 329, 329, 358, 329, 329, 329, 368, 329, 279, 486, 473, 329, 329, 329, 329, 329, 481, 329,
  /* 189 */ 329, 279, 486, 480, 329, 329, 329, 481, 329, 329, 278, 485, 480, 329, 329, 329, 278, 490, 329, 329, 365,
  /* 210 */ 329, 329, 329, 2056, 3072, 18432, 1050624, 2099200, 67110912, 1073743872, 2048, 2048, 2048, 2048, 1050624,
  /* 225 */ 2099200, 268437504, 2048, 1050624, 270534656, 268437504, 1051128, 1712331256, -269506560, 1712331768,
  /* 235 */ -3168256, 1714428920, 1712331772, 1980767224, 1980767224, 1712331768, 1712331768, -3168256, -3168256,
  /* 244 */ -268457984, -2119680, -2119680, 1982864376, -2114568, -2114568, -2114568, -17416, 2048, 8, 8, 0, 32, 16384,
  /* 258 */ 67108864, 1073741824, 0, 1, 1, 524288, 16, 128, 384, 448, 8, 8, 67108992, 1073742208, 8192, 65536, 786432,
  /* 275 */ 25165824, 201326592, -1073741824, 0, 1, 2, 32, 64, 8, 8, 201326720, -1073741440, 16, 128, 128, 384, 8, 8,
  /* 293 */ 32, 32, 32, 0, 384, 64, 64, 64, 8, 8, 8, 1024, 1024, 0, 0, 32, 16, 16, 16, 128, 16, 128, 384, 512, 384, 384,
  /* 319 */ 8, 8, 8, 16, 8, 32, 32, 1024, 131072, 8388608, 0, 0, 0, 0, 32, 16, 524320, 1610874880, 1610874880, 3407830,
  /* 339 */ -364642272, 3407838, 3932150, -364642272, 3407830, -364642272, -364117984, -364642272, -289144800, 3669975,
  /* 349 */ 3669983, 4194295, -3407832, -361234442, -361234434, -361234433, -2, -1, 1610612736, 0, 0, 0, 8192, 2048,
  /* 363 */ 57344, 2097152, 0, 1, 64, 0, 4, 8, 0, 0, 512, 512, 8, 8, 8, 8, 32, 16, 134217728, -536870912, 0, 0, 1, 32,
  /* 387 */ 536870912, 1073741824, 0, 0, 8, 16, 256, 32768, 0, 4194304, 33554432, 0, 0, 0, 4194304, 33554432, 33554432,
  /* 404 */ 0x80000000, 0, 0, 16, 131072, 8388608, 67108864, 25165824, 268435456, 67108864, 16777216, 268435456, 0, 0,
  /* 418 */ 4, 896, 16777216, 0, 0, 0, 8388608, 67108864, 0, 0, 0, 67108864, 16384, 16384, 0, 0, 262144, 16396, 540684,
  /* 437 */ 229376, 557055, 491520, 557055, 557055, 819199, 819199, 245760, 507904, 491520, 229376, 557055, 557055,
  /* 450 */ 245760, 819199, 1048575, 1048575, 1048575, 0, 12, 0, 0, 0, 33554432, 0, 0, 196608, 0, 1, 2, 124, 128, 256,
  /* 470 */ 512, 7168, 8192, 2048, 4096, 8192, 0, 41943040, 201326592, 58720256, 2048, 8192, 0, 0, 0, 64, 128, 256, 512,
  /* 489 */ 1024, 64, 256, 512, 0
];

MaiaScript.TOKEN =
[
  "(0)",
  "END",
  "EOF",
  "Identifier",
  "Character",
  "String",
  "Integer",
  "Complex",
  "Real",
  "Comment",
  "Script",
  "WhiteSpace",
  "'!'",
  "'!='",
  "'#='",
  "'%'",
  "'%='",
  "'&'",
  "'&&'",
  "'&='",
  "'('",
  "')'",
  "'*'",
  "'**'",
  "'*='",
  "'+'",
  "'++'",
  "'+='",
  "','",
  "'-'",
  "'--'",
  "'-='",
  "'.'",
  "'/'",
  "'/='",
  "':'",
  "':='",
  "';'",
  "'<'",
  "'<<'",
  "'<<='",
  "'<='",
  "'='",
  "'=='",
  "'>'",
  "'>='",
  "'>>'",
  "'>>='",
  "'?'",
  "'?='",
  "'['",
  "']'",
  "'^'",
  "'^='",
  "'break'",
  "'case'",
  "'catch'",
  "'continue'",
  "'default'",
  "'do'",
  "'else'",
  "'f32'",
  "'f64'",
  "'for'",
  "'foreach'",
  "'global'",
  "'i32'",
  "'i64'",
  "'if'",
  "'import'",
  "'include'",
  "'local'",
  "'return'",
  "'switch'",
  "'test'",
  "'throw'",
  "'try'",
  "'while'",
  "'{'",
  "'|'",
  "'|='",
  "'||'",
  "'}'",
  "'~'"
];

// End
// This file was generated on Wed Nov 23, 2022 12:58 (UTC) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: ComplexNumber.ebnf -backtrack -javascript -tree

function ComplexNumber(string, parsingEventHandler)
{
  init(string, parsingEventHandler);

  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    end = e;
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? ComplexNumber.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = ComplexNumber.getTokenSet(- e.getState());
    }
    else
    {
      expected = [ComplexNumber.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_Number = function()
  {
    eventHandler.startNonterminal("Number", e0);
    lookahead1W(2);                 // END | EOF | Real | Imaginary | WhiteSpace^token
    switch (l1)
    {
    case 2:                         // EOF
      consume(2);                   // EOF
      break;
    default:
      for (;;)
      {
        lookahead1W(1);             // END | Real | Imaginary | WhiteSpace^token
        if (l1 == 1)                // END
        {
          break;
        }
        whitespace();
        parse_Complex();
      }
    }
    eventHandler.endNonterminal("Number", e0);
  };

  function parse_Complex()
  {
    eventHandler.startNonterminal("Complex", e0);
    if (l1 == 3)                    // Real
    {
      consume(3);                   // Real
    }
    lookahead1W(0);                 // Imaginary | WhiteSpace^token
    consume(4);                     // Imaginary
    eventHandler.endNonterminal("Complex", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(ComplexNumber.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = 0;
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 5)                // WhiteSpace^token
      {
        break;
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function error(b, e, s, l, t)
  {
    throw new thisParser.ParseException(b, e, s, l, t);
  }

  var     b0, e0;
  var l1, b1, e1;
  var eventHandler;

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    begin = end;
    var current = end;
    var result = ComplexNumber.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 31; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = ComplexNumber.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = ComplexNumber.MAP1[(c0 & 15) + ComplexNumber.MAP1[(c1 & 63) + ComplexNumber.MAP1[c1 >> 6]]];
      }
      else
      {
        charclass = 0;
      }

      state = code;
      var i0 = (charclass << 5) + code - 1;
      code = ComplexNumber.TRANSITION[(i0 & 7) + ComplexNumber.TRANSITION[i0 >> 3]];

      if (code > 31)
      {
        result = code;
        code &= 31;
        end = current;
      }
    }

    result >>= 5;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (end > size) end = size;
    return (result & 7) - 1;
  }

}

ComplexNumber.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

ComplexNumber.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : ComplexNumber.INITIAL[tokenSetId] & 31;
  for (var i = 0; i < 6; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 20 + s - 1;
    var f = ComplexNumber.EXPECTED[(i0 & 3) + ComplexNumber.EXPECTED[i0 >> 2]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(ComplexNumber.TOKEN[j]);
      }
    }
  }
  return set;
};

ComplexNumber.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new ComplexNumber.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new ComplexNumber.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

ComplexNumber.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

ComplexNumber.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

ComplexNumber.MAP0 =
[
  /*   0 */ 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
  /*  36 */ 0, 0, 0, 0, 0, 0, 2, 3, 0, 4, 5, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0,
  /*  72 */ 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0,
  /* 108 */ 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
];

ComplexNumber.MAP1 =
[
  /*   0 */ 54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
  /*  27 */ 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
  /*  54 */ 126, 172, 139, 155, 166, 171, 188, 171, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
  /*  75 */ 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
  /*  96 */ 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
  /* 117 */ 172, 172, 172, 172, 172, 172, 172, 172, 172, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
  /* 147 */ 0, 0, 2, 3, 0, 4, 5, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 183 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0
];

ComplexNumber.INITIAL =
[
  /* 0 */ 1, 66, 67
];

ComplexNumber.TRANSITION =
[
  /*   0 */ 55, 55, 55, 55, 40, 55, 55, 55, 55, 77, 72, 55, 52, 57, 55, 55, 65, 57, 55, 55, 115, 55, 55, 55, 90, 98,
  /*  26 */ 106, 55, 55, 82, 55, 55, 55, 44, 55, 55, 112, 55, 55, 55, 196, 196, 196, 196, 0, 0, 0, 0, 0, 160, 0, 0, 5,
  /*  53 */ 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 5, 7, 7, 0, 9, 0, 9, 0, 14, 0, 14, 0, 0, 0, 0, 14, 14, 0, 0, 0, 15,
  /*  86 */ 16, 0, 0, 0, 6, 8, 8, 0, 6, 6, 8, 8, 6, 12, 141, 12, 141, 0, 18, 148, 18, 18, 148, 148, 0, 0, 0, 0, 96, 0,
  /* 116 */ 0, 0, 0, 0, 10, 0, 11
];

ComplexNumber.EXPECTED =
[
  /*  0 */ 5, 9, 13, 12, 9, 48, 56, 60, 32, 16, 16, 24, 24, 16, 16, 24, 16
];

ComplexNumber.TOKEN =
[
  "(0)",
  "END",
  "EOF",
  "Real",
  "Imaginary",
  "WhiteSpace"
];

// End
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * MaiaScript compiler class.
 * @class
 */
function MaiaCompiler() {
    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        binaryExpression = ['Operation',
                            'VariableAssignment',
                            'ConditionalExpression',
                            'LogicalORExpression',
                            'LogicalXORExpression',
                            'LogicalANDExpression',
                            'BitwiseORExpression',
                            'BitwiseXORExpression',
                            'BitwiseANDExpression',
                            'EqualityExpression',
                            'RelationalExpression',
                            'ShiftExpression',
                            'AdditiveExpression',
                            'PowerExpression',
                            'MultiplicativeExpression'];
        codeBlockStatement = ['Program',
                              'Block',
                              'NamespaceDeclaration',
                              'FunctionDeclaration',
                              'Do',
                              'While',
                              'For',
                              'ForEach',
                              'If',
                              'Switch',
                              'Try',
                              'Catch',
                              'Test'];
        conditionalExpression = ['Do',
                                 'While',
                                 'For',
                                 'ForEach',
                                 'If',
                                 'Switch',
                                 'Catch',
                                 'Test'];
        operators = {'||': 'core.logicalOR',
                     '&&': 'core.logicalAND',
                     '|':  'core.bitwiseOR',
                     '^':  'core.bitwiseXOR',
                     '&':  'core.bitwiseAND',
                     '==': 'core.equal',
                     '!=': 'core.different',
                     '<':  'core.LT',
                     '<=': 'core.LE',
                     '>=': 'core.GE',
                     '>':  'core.GT',
                     '<<': 'core.leftShift',
                     '>>': 'core.rightShift',
                     '+':  'core.add',
                     '-':  'core.sub',
                     '**': 'core.power',
                     '*':  'core.mul',
                     '/':  'core.div',
                     '%':  'core.mod',
                     '~':  'core.bitwiseNot',
                     '!':  'core.logicalNot'
                    };
    }

    /**
     * Convert XML to JSON.
     * @param {xml}    xml - The XML data.
     * @return {json}  XML data converted to a JSON object.
     */
    this.xmlToJson = function(xml) {
        try {
            var obj = {};
            if (xml.children.length > 0) {
                for (var i = 0; i < xml.children.length; i++) {
                    var item = xml.children.item(i);
                    nodeName = item.nodeName;
                    if (typeof(obj[nodeName]) == 'undefined') {
                        obj[nodeName] = this.xmlToJson(item);
                    } else {
                        if (typeof(obj[nodeName].push) == 'undefined') {
                            var old = obj[nodeName];
                            obj[nodeName] = [];
                            obj[nodeName].push(old);
                        }
                        obj[nodeName].push(this.xmlToJson(item));
                    }
                }
            } else {
                obj = xml.textContent;
            }
            return obj;
        } catch (e) {
            system.log(e.message);
        }
    }
    
    /**
     * Compiles the MaiaScript XML tree for Maia Internal Code (MIL).
     * @param {xml}    xml - The XML data.
     * @param {string} itemName - Name of the item being analyzed.
     * @return {json}  XML data converted to a MIL object.
     */
    this.xmlToMil = function(xml, itemName = '') {
        try {
            var obj = {};

            if (itemName == '') {
                if (xml.children.length > 0) {
                    for (var i = 0; i < xml.children.length; i++) {
                        var item = xml.children.item(i);
                        nodeName = item.nodeName;
                        if (typeof(obj[nodeName]) == 'undefined') {
                            obj[nodeName] = this.xmlToMil(item, nodeName);
                        } else {
                            if (typeof(obj[nodeName].push) == 'undefined') {
                                var old = obj[nodeName];
                                obj[nodeName] = [];
                                obj[nodeName].push(old);
                            }
                            obj[nodeName].push(this.xmlToMil(item, nodeName));
                        }
                    }
                } else {
                    obj = xml.textContent;
                }
            } else {
                if (binaryExpression.includes(itemName)) {
                    if (xml.children.length > 1) {
                        for (var i = 0; i < xml.children.length; i++) {
                            var item = xml.children.item(i);
                            nodeName = item.nodeName;
                            if (nodeName != 'TOKEN') {
                                opName = 'Op';
                            } else {
                                opName = nodeName;
                            }
                            if (typeof(obj[opName]) == 'undefined') {
                                obj[opName] = this.xmlToMil(item, nodeName);
                            } else {
                                if (typeof(obj[opName].push) == 'undefined') {
                                    var old = obj[opName];
                                    obj[opName] = [];
                                    obj[opName].push(old);
                                }
                                obj[opName].push(this.xmlToMil(item, nodeName));
                            }
                        }
                    } else if (xml.children.length == 1) {
                        var item = xml.children.item(0);
                        nodeName = item.nodeName;
                        obj = this.xmlToMil(item, nodeName);
                    } else {
                        obj = xml.textContent;
                    }
                } else {
                    if (xml.children.length > 0) {
                        for (var i = 0; i < xml.children.length; i++) {
                            var item = xml.children.item(i);
                            nodeName = item.nodeName;
                            if (typeof(obj[nodeName]) == 'undefined') {
                                obj[nodeName] = this.xmlToMil(item, nodeName);
                            } else {
                                if (typeof(obj[nodeName].push) == 'undefined') {
                                    var old = obj[nodeName];
                                    obj[nodeName] = [];
                                    obj[nodeName].push(old);
                                }
                                obj[nodeName].push(this.xmlToMil(item, nodeName));
                            }
                        }
                    } else {
                        obj = xml.textContent;
                    }
                }
            }
            return obj;
        } catch (e) {
            system.log(e.message);
        }
    }

    /**
     * Compiles a complex number to JSON.
     * @param {string}   text - The expression representing the complex number.
     * @return {string}  Number converted to JSON.
     */
    this.parseComplexNumber = function(text) {
        var complexNumber = {
            'xml': '',
            'text': ''
        }
        maiaScriptComplexNumber = {
            'real': 0,
            'imaginary': 0
        }

        function getXml (data) {
            complexNumber.xml += data;
        }
        var s = new ComplexNumber.XmlSerializer(getXml, true);
        var complexNumberParser = new ComplexNumber(text, s);
        try {
            complexNumberParser.parse_Number();
        } catch (pe) {
            if (!(pe instanceof complexNumberParser.ParseException)) {
                throw pe;
            } else {
                var parserError = complexNumberParser.getErrorMessage(pe);
                alert(parserError);
                throw parserError;
            }
        }
        var parser = new DOMParser();
        var xml = parser.parseFromString(complexNumber.xml, "text/xml");
        
        var json = this.xmlToJson(xml);
        if ('Number' in json) {
            var number = json['Number'];
            if ('Complex' in number) {
                var complex = number['Complex'];
                if ('Imaginary' in complex) {
                    var imaginary = complex['Imaginary'];
                    json.Number.Complex.Imaginary = json.Number.Complex.Imaginary.substring(0, json.Number.Complex.Imaginary.length - 2);
                }
            }
            if (typeof json.Number.Complex.Real == 'undefined') {
                json.Number.Complex.Real = 0;
            }
            maiaScriptComplexNumber = {
                'real': core.toNumber(json.Number.Complex.Real),
                'imaginary': core.toNumber(json.Number.Complex.Imaginary)
            }
        }
        complexNumber.text = JSON.stringify(maiaScriptComplexNumber);
        return complexNumber.text;
    }

    /**
     * Compiles the code in Maia Internal Language (MIL) for JavaScript.
     * @param {json}     mil - Code in Maia Internal Language (MIL).
     * @param {string}   parentNodeInfo - Parent node data.
     * @param {boolean}  isKernelFunction - Parent node is a kernel function.
     * @return {string}  MIL code converted to JavaScript.
     */
    this.parse = function(mil, parentNodeInfo, isKernelFunction) {
        var node = {};
        var js = '';

        if (typeof isKernelFunction == 'undefined') {
            var isKernelFunction = false;
        }
        if (typeof indent == 'undefined') {
            indent = false;
        }

        if ('Program' in mil) {
            node = mil['Program'];
            var nodeInfo = {
                'parentNode': 'Program',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Program';

            if (typeof node != 'undefined') {
                js = this.parse(node, nodeInfo, isKernelFunction);
                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
            }
        } else if ('Expression' in mil) {
            node = mil['Expression'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Expression';

            if (typeof node != 'undefined') {
                if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                        text = this.parse(node[i], nodeInfo, isKernelFunction);
                        parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        if (codeBlockStatement.includes(parentNodeInfo.parentNode) && (nodeInfo.childNode != 'Comment')) {
                            if (parentNodeInfo.parentNode == 'NamespaceDeclaration') {
                                if ((parentNodeInfo.terminalNode == 'VariableAssignment') || (parentNodeInfo.terminalNode == 'FunctionDeclaration')) {
                                    js += core.space(nodeInfo.indentation) + 'this.' + text + ';' + (nodeInfo.indentCode ? '\n' : '');
                                } else {
                                    if (text.length > 0) {
                                        js += core.space(nodeInfo.indentation) + text + ';' + (nodeInfo.indentCode ? '\n' : '');
                                    }
                                }
                            } else {
                                if (conditionalExpression.includes(parentNodeInfo.parentNode)) {
                                    js += text;
                                } else {
                                    if (text.length > 0) {
                                        js += core.space(nodeInfo.indentation) + text + ';' + (nodeInfo.indentCode ? '\n' : '');
                                    }
                                }
                            }
                        } else {
                            js += text;
                        }
                    }
                } else {
                    text = this.parse(node, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    if (codeBlockStatement.includes(parentNodeInfo.parentNode) && (nodeInfo.childNode != 'Comment')) {
                        if (parentNodeInfo.parentNode == 'NamespaceDeclaration') {
                            if ((parentNodeInfo.terminalNode == 'VariableAssignment') || (parentNodeInfo.terminalNode == 'FunctionDeclaration')) {
                                js += core.space(nodeInfo.indentation) + 'this.' + text + ';' + (nodeInfo.indentCode ? '\n' : '');
                            } else {
                                if (text.length > 0) {
                                    js += core.space(nodeInfo.indentation) + text + ';' + (nodeInfo.indentCode ? '\n' : '');
                                }
                            }
                        } else {
                            if (conditionalExpression.includes(parentNodeInfo.parentNode)) {
                                js += text;
                            } else {
                                if (text.length > 0) {
                                    js += core.space(nodeInfo.indentation) + text + ';' + (nodeInfo.indentCode ? '\n' : '');
                                }
                            }
                        }
                    } else {
                        js += text;
                    }
                }
            }
        } else if ('Block' in mil) {
            node = mil['Block'];
            var nodeInfo = {
                'parentNode': 'Block',
                'childNode': '',
                'terminalNode' : 'Block',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            if (parentNodeInfo.parentNode == 'NamespaceDeclaration') {
                nodeInfo.parentNode = 'NamespaceDeclaration';
            }
            parentNodeInfo.childNode = 'Block';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var nodeExpression = {
                        'Expression': node['Expression']
                    };
                    if (nodeInfo.indentCode) {
                        nodeInfo.indentation += nodeInfo.indentationLength;
                    }
                    var body = this.parse(nodeExpression, nodeInfo, isKernelFunction);
                    if (nodeInfo.indentCode) {
                        nodeInfo.indentation -= nodeInfo.indentationLength;
                    }
                    js = body;
                }
            }
        } else if ('Statement' in mil) {
            node = mil['Statement'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Statement';

            if (typeof node != 'undefined') {
                js = this.parse(node, nodeInfo, isKernelFunction);
                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
            }
        } else if ('NamespaceDeclaration' in mil) {
            node = mil['NamespaceDeclaration'];
            var nodeInfo = {
                'parentNode': 'NamespaceDeclaration',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'NamespaceDeclaration';

            if (typeof node != 'undefined') {
                if ('Identifier' in node) {
                    var nodeIdentifier = {
                        'Identifier': node['Identifier']
                    };
                    var name = this.parse(nodeIdentifier, nodeInfo, isKernelFunction);

                    if ('Block' in node) {
                        var nodeBlock = {
                            'Block': node['Block']
                        };
                        var body = this.parse(nodeBlock, nodeInfo, isKernelFunction);
                        js = 'function ' + name + '_' + '() {' + (nodeInfo.indentCode ? '\n' : '') + body + '};' + (nodeInfo.indentCode ? '\n' : '') + core.space(nodeInfo.indentation) + name + ' = new ' + name + '_()' ;
                    }
                }
            }
        } else if ('FunctionDeclaration' in mil) {
            node = mil['FunctionDeclaration'];
            var nodeInfo = {
                'parentNode': 'FunctionDeclaration',
                'childNode': '',
                'terminalNode' : 'FunctionDeclaration',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'FunctionDeclaration';

            if (typeof node != 'undefined') {
                if ('Type' in node) {
                    type = node['Type'];
                    if ('Script' in node) {
                        var wat = '(module ' + (nodeInfo.indentCode ? '\n' : '');

                        var nodeIdentifier = {
                            'Identifier': node['Identifier']
                        };
                        var name = this.parse(nodeIdentifier, nodeInfo, isKernelFunction);
                        
                        nodeInfo.parentNode = 'AssemblyFunction';

                        wat += '(func (export "' + name + '")';

                        if ('Arguments' in node) {
                            var nodeArguments = {
                                'Arguments': node['Arguments']
                            };
                            var args = this.parse(nodeArguments, nodeInfo, isKernelFunction);
                            wat += args + ' (result ' + type['TOKEN'] + ')';
                        }

                        var nodeScript = node['Script'];
                        var body = nodeScript.replace("/{", "").replace("}/", "")
                        wat += body + core.space(nodeInfo.indentation) + ')';

                        wat += (nodeInfo.indentCode ? '\n' : '') + core.space(nodeInfo.indentation) + ')';

                        var wasmModule = WebAssemblyText.encode(wat);

                        if (typeof btoa != 'undefined') {
                            var encodedBuffer = btoa(wasmModule);
                        } else {
                            var encodedBuffer = new Buffer.from(wasmModule, 'binary').toString('base64');
                        }
                        js += 'var encodedWasmModule = \'' + encodedBuffer + '\';';
                        js += 'if (typeof atob != \'undefined\') {';
                        js += '    var wasmModule = atob(encodedWasmModule);';
                        js += '} else {';
                        js += '    var wasmModule = new Buffer(encodedWasmModule, \'base64\').toString(\'binary\');';
                        js += '}';
                        js += 'var wasmInstance = new WebAssembly.Instance(wasmModule, {});';
                        js += 'var {' + name + '} = wasmInstance.exports;';
                    } else {
                        if ('Identifier' in node) {
                            var nodeIdentifier = {
                                'Identifier': node['Identifier']
                            };
                            var name = this.parse(nodeIdentifier, nodeInfo, isKernelFunction);
    
                            if ('TOKEN' in node) {
                                if (node['TOKEN'].length == 3) {
                                    var token = node['TOKEN'][2];
                                    if (token == '=') {
                                        var statement = "FunctionAssignment";
                                        js += name + ' = function ';
                                    } else if (token == '?=') {
                                        var statement = "AsyncFunction";
                                        js += name + ' = async function ';
                                    } else if (token == ':=') {
                                        var statement = "Constructor";
                                        nodeInfo.parentNode = 'NamespaceDeclaration';
                                        js += name + ' = function ';
                                    } else if (token == '#=') {
                                        var statement = "KernelFunction";
                                        js += name + ' = function ';
                                    } else {
                                        var statement = "FunctionDeclaration";
                                        js += name + ' = function ';
                                    }
                                } else {
                                    var statement = "FunctionDeclaration";
                                    js += name + ' = function ';
                                }
                            } else {
                                var statement = 'FunctionDeclaration';
                                js += name + ' = function ';
                            }
                            
                            if ('Arguments' in node) {
                                var nodeArguments = {
                                    'Arguments': node['Arguments']
                                };
                                var args = this.parse(nodeArguments, nodeInfo, isKernelFunction);
                                js += '(' + args + ')';
                            } else {
                                js += '()';
                            }

                            if ('Expression' in node) {
                                var nodeExpression = {
                                    'Expression': node['Expression']
                                };
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation += nodeInfo.indentationLength;
                                }
                                if (statement == 'FunctionAssignment') {
                                    var body = core.space(nodeInfo.indentation) + 'return ' + core.trim(this.parse(nodeExpression, nodeInfo, isKernelFunction)) + (nodeInfo.indentCode ? '\n' : '');
                                } else if (statement == 'KernelFunction') {
                                        var body = this.parse(nodeExpression, nodeInfo, true);
                                } else {
                                    var body = this.parse(nodeExpression, nodeInfo, isKernelFunction);
                                }
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation -= nodeInfo.indentationLength;
                                }
                                js += ' {' + (nodeInfo.indentCode ? '\n' : '') + body + core.space(nodeInfo.indentation) + '}';
                            } else {
                                if ('Block' in node) {
                                    var nodeBlock = node['Block'];
                                    if ('Expression' in nodeBlock) {
                                        var nodeExpression = {
                                            'Expression': nodeBlock['Expression']
                                        };
                                        if (nodeInfo.indentCode) {
                                            nodeInfo.indentation += nodeInfo.indentationLength;
                                        }
                                        if (statement == 'KernelFunction') {
                                            var body = this.parse(nodeExpression, nodeInfo, true);
                                        } else {
                                            var body = this.parse(nodeExpression, nodeInfo, isKernelFunction);
                                        }
                                        if (nodeInfo.indentCode) {
                                            nodeInfo.indentation -= nodeInfo.indentationLength;
                                        }
                                        js += ' {' + (nodeInfo.indentCode ? '\n' : '') + body + core.space(nodeInfo.indentation) + '}';
                                    } else {
                                        js += ' {}';
                                    }
                                } else {
                                    if ('Script' in node) {
                                        var nodeScript = node['Script'];
                                        var body = nodeScript.replace("/{", "").replace("}/", "")
                                        js += ' {' + body + core.space(nodeInfo.indentation) + '}';
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if ('Identifier' in node) {
                        var nodeIdentifier = {
                            'Identifier': node['Identifier']
                        };
                        var name = this.parse(nodeIdentifier, nodeInfo, isKernelFunction);

                        if ('TOKEN' in node) {
                            if (node['TOKEN'].length == 3) {
                                var token = node['TOKEN'][2];
                                if (token == '=') {
                                    var statement = "FunctionAssignment";
                                    js += name + ' = function ';
                                } else if (token == '?=') {
                                    var statement = "AsyncFunction";
                                    js += name + ' = async function ';
                                } else if (token == ':=') {
                                    var statement = "Constructor";
                                    nodeInfo.parentNode = 'NamespaceDeclaration';
                                    js += name + ' = function ';
                                } else if (token == '#=') {
                                    var statement = "KernelFunction";
                                    js += name + ' = function ';
                                } else {
                                    var statement = "FunctionDeclaration";
                                    js += name + ' = function ';
                                }
                            } else {
                                var statement = "FunctionDeclaration";
                                js += name + ' = function ';
                            }
                        } else {
                            var statement = 'FunctionDeclaration';
                            js += name + ' = function ';
                        }
                        
                        if ('Arguments' in node) {
                            var nodeArguments = {
                                'Arguments': node['Arguments']
                            };
                            var args = this.parse(nodeArguments, nodeInfo, isKernelFunction);
                            js += '(' + args + ')';
                        } else {
                            js += '()';
                        }

                        if ('Expression' in node) {
                            var nodeExpression = {
                                'Expression': node['Expression']
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            if (statement == 'FunctionAssignment') {
                                var body = core.space(nodeInfo.indentation) + 'return ' + core.trim(this.parse(nodeExpression, nodeInfo, isKernelFunction)) + (nodeInfo.indentCode ? '\n' : '');
                            } else if (statement == 'KernelFunction') {
                                    var body = this.parse(nodeExpression, nodeInfo, true);
                            } else {
                                var body = this.parse(nodeExpression, nodeInfo, isKernelFunction);
                            }
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                            js += ' {' + (nodeInfo.indentCode ? '\n' : '') + body + core.space(nodeInfo.indentation) + '}';
                        } else {
                            if ('Block' in node) {
                                var nodeBlock = node['Block'];
                                if ('Expression' in nodeBlock) {
                                    var nodeExpression = {
                                        'Expression': nodeBlock['Expression']
                                    };
                                    if (nodeInfo.indentCode) {
                                        nodeInfo.indentation += nodeInfo.indentationLength;
                                    }
                                    if (statement == 'KernelFunction') {
                                        var body = this.parse(nodeExpression, nodeInfo, true);
                                    } else {
                                        var body = this.parse(nodeExpression, nodeInfo, isKernelFunction);
                                    }
                                    if (nodeInfo.indentCode) {
                                        nodeInfo.indentation -= nodeInfo.indentationLength;
                                    }
                                    js += ' {' + (nodeInfo.indentCode ? '\n' : '') + body + core.space(nodeInfo.indentation) + '}';
                                } else {
                                    js += ' {}';
                                }
                            } else {
                                if ('Script' in node) {
                                    var nodeScript = node['Script'];
                                    var body = nodeScript.replace("/{", "").replace("}/", "")
                                    js += ' {' + body + core.space(nodeInfo.indentation) + '}';
                                }
                            }
                        }
                    }
                }
            }
            parentNodeInfo.terminalNode = 'FunctionDeclaration';
        } else if ('Include' in mil) {
            node = mil['Include'];
            var nodeInfo = {
                'parentNode': 'Include',
                'childNode': '',
                'terminalNode' : 'Include',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Include';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var returnValue = this.parse(node, nodeInfo, isKernelFunction);
                    js += 'var func_ = core.type(' + returnValue + ') == "function" ? ' + returnValue + ' : ' + returnValue + '.constructor;' + (nodeInfo.indentCode ? '\n' : '');
                    js += 'var script_ = func_.toString().substring(func_.toString().indexOf("{") + 1, func_.toString().lastIndexOf("}"));' + (nodeInfo.indentCode ? '\n' : '');
                    js += 'eval(script_)';
                }
            }
        } else if ('Local' in mil) {
            node = mil['Local'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Local';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    if (parentNodeInfo.parentNode == "AssemblyFunction") {
                        var expressionValue = this.parse(node, nodeInfo, isKernelFunction);
                        js += 'local ' + expressionValue;
                    } else {
                        var expressionValue = this.parse(node, nodeInfo, isKernelFunction);
                        js += 'let ' + expressionValue;
                    }
                }
            }
        } else if ('If' in mil) {
            node = mil['If'];
            var nodeInfo = {
                'parentNode': 'If',
                'childNode': '',
                'terminalNode' : 'If',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'If';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var body = '';
                    var nodeExpression = node['Expression'];
                    if (Array.isArray(nodeExpression)) {
                        var nodeCondition = {
                            'Expression': nodeExpression[0]
                        };
                        var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                        if ('Block' in nodeExpression[1]) {
                            var bodyExpression = {
                                'Expression': nodeExpression[1]
                            };
                            body += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression[1]
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                        js += 'if (' + condition + ') {' + (nodeInfo.indentCode ? '\n' : '') + body + core.space(nodeInfo.indentation) + '}';
                    }
                }
                if ('Else' in node) {
                    var body = '';
                    var nodeElse = node['Else'];
                    if ('Expression' in nodeElse) {
                        var nodeExpression = nodeElse['Expression'];
                        if ('Block' in nodeExpression) {
                            var bodyExpression = {
                                'Expression': nodeExpression
                            };
                            body += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                        js += ' else {' + (nodeInfo.indentCode ? '\n' : '') + body + core.space(nodeInfo.indentation) + '}';
                    }
                }
            }
            parentNodeInfo.terminalNode = 'If';
        } else if ('Switch' in mil) {
            node = mil['Switch'];
            var nodeInfo = {
                'parentNode': 'Switch',
                'childNode': '',
                'terminalNode' : 'Switch',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Switch';

            if (nodeInfo.indentCode) {
                nodeInfo.indentation += nodeInfo.indentationLength;
            }
            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var body = '';
                    var nodeExpression = node['Expression'];
                    var nodeCondition = {
                        'Expression': nodeExpression
                    };
                    var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                    js += 'switch (' + condition + ') {' + (nodeInfo.indentCode ? '\n' : '');
                }
                if ('Case' in node) {
                    var body = '';
                    var nodeCase = node['Case'];
                    if (Array.isArray(nodeCase)) {
                        for (var i = 0; i < nodeCase.length; i++) {
                            if ('Expression' in nodeCase[i]) {
                                var body = '';
                                var nodeCaseExpression = nodeCase[i]['Expression'];
                                if (Array.isArray(nodeCaseExpression)) {
                                    var nodeExpression = nodeCaseExpression[0];
                                    var nodeCondition = {
                                        'Expression': nodeExpression
                                    };
                                    var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                                    if (nodeInfo.indentCode) {
                                        nodeInfo.indentation += nodeInfo.indentationLength;
                                    }
                                    for (var j = 1; j < nodeCaseExpression.length; j++) {
                                        var commandLine = nodeCaseExpression[j];
                                        var bodyExpression = {
                                            'Expression': commandLine
                                        };
                                        body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                                    }
                                    if (nodeInfo.indentCode) {
                                        nodeInfo.indentation -= nodeInfo.indentationLength;
                                    }
                                } else {
                                    var nodeExpression = nodeCaseExpression;
                                    var nodeCondition = {
                                        'Expression': nodeExpression
                                    };
                                    var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                                }
                                js += core.space(nodeInfo.indentation) + 'case ' + condition + ' : ' + (nodeInfo.indentCode ? '\n' : '') + body;
                            }
                        }
                    } else {
                        if ('Expression' in nodeCase) {
                            var body = '';
                            var nodeCaseExpression = nodeCase['Expression'];
                            if (Array.isArray(nodeCaseExpression)) {
                                var nodeExpression = nodeCaseExpression[0];
                                var nodeCondition = {
                                    'Expression': nodeExpression
                                };
                                var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation += nodeInfo.indentationLength;
                                }
                                for (var j = 1; j < nodeCaseExpression.length; j++) {
                                    var commandLine = nodeCaseExpression[j];
                                    var bodyExpression = {
                                        'Expression': commandLine
                                    };
                                    body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                                }
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation -= nodeInfo.indentationLength;
                                }
                            } else {
                                var nodeExpression = nodeCaseExpression;
                                var nodeCondition = {
                                    'Expression': nodeExpression
                                };
                                var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                            }
                            js += core.space(nodeInfo.indentation) + 'case ' + condition + ' : ' + (nodeInfo.indentCode ? '\n' : '') + body;
                        }
                    }
                }
                if ('Default' in node) {
                    var body = '';
                    var nodeDefault = node['Default'];
                    if ('Expression' in nodeDefault) {
                        var nodeExpression = nodeDefault['Expression'];
                        if (Array.isArray(nodeExpression)) {
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            for (var i = 0; i < nodeExpression.length; i++) {
                                var commandLine = nodeExpression[i];
                                var bodyExpression = {
                                    'Expression': commandLine
                                };
                                body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            }
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                        js += core.space(nodeInfo.indentation) + 'default : ' + (nodeInfo.indentCode ? '\n' : '') + body;
                    }
                }
                js += '}';
            }
            if (nodeInfo.indentCode) {
                nodeInfo.indentation -= nodeInfo.indentationLength;
            }
            parentNodeInfo.terminalNode = 'Switch';
        } else if ('Do' in mil) {
            node = mil['Do'];
            var nodeInfo = {
                'parentNode': 'Do',
                'childNode': '',
                'terminalNode' : 'Do',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Do';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var body = '';
                    var nodeExpression = node['Expression'];
                    if (Array.isArray(nodeExpression)) {
                        if ('Block' in nodeExpression[0]) {
                            var bodyExpression = {
                                'Expression': nodeExpression[0]
                            };
                            body += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression[0]
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                        var nodeCondition = {
                            'Expression': nodeExpression[1]
                        };
                        var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                    }
                    js += 'do {' + (nodeInfo.indentCode ? '\n' : '') + body + '} while (' + condition + ')';
                }
            }
            parentNodeInfo.terminalNode = 'Do';
        } else if ('While' in mil) {
            node = mil['While'];
            var nodeInfo = {
                'parentNode': 'While',
                'childNode': '',
                'terminalNode' : 'While',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'While';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var body = '';
                    var nodeExpression = node['Expression'];
                    if (Array.isArray(nodeExpression)) {
                        var nodeCondition = {
                            'Expression': nodeExpression[0]
                        };
                        var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);
                        if ('Block' in nodeExpression[1]) {
                            var bodyExpression = {
                                'Expression': nodeExpression[1]
                            };
                            body += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression[1]
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                    }
                    js += 'while (' + condition + ') {' + (nodeInfo.indentCode ? '\n' : '') + body + '}';
                }
            }
            parentNodeInfo.terminalNode = 'While';
        } else if ('For' in mil) {
            node = mil['For'];
            var nodeInfo = {
                'parentNode': 'For',
                'childNode': '',
                'terminalNode' : 'For',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'For';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var body = '';
                    var nodeExpression = node['Expression'];
                    if (Array.isArray(nodeExpression)) {
                        var nodeExpression = node['Expression'];

                        var nodeBefore = {
                            'Expression': nodeExpression[0]
                        };
                        var before = this.parse(nodeBefore, nodeInfo, isKernelFunction);

                        var nodeCondition = {
                            'Expression': nodeExpression[1]
                        };
                        var condition = this.parse(nodeCondition, nodeInfo, isKernelFunction);

                        var nodeAfter = {
                            'Expression': nodeExpression[2]
                        };
                        var after = this.parse(nodeAfter, nodeInfo, isKernelFunction);

                        if ('Block' in nodeExpression[3]) {
                            var bodyExpression = {
                                'Expression': nodeExpression[3]
                            };
                            body += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression[3]
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                    }
                    js += 'for (' + before + ';' + condition + ';' + after + ') {' + (nodeInfo.indentCode ? '\n' : '') + body + '}';
                }
            }
            parentNodeInfo.terminalNode = 'For';
        } else if ('ForEach' in mil) {
            node = mil['ForEach'];
            var nodeInfo = {
                'parentNode': 'ForEach',
                'childNode': '',
                'terminalNode' : 'ForEach',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'ForEach';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var body = '';
                    var nodeExpression = node['Expression'];
                    if (Array.isArray(nodeExpression)) {
                        var nodeArray = {
                            'Expression': nodeExpression[0]
                        };
                        var arrayName = this.parse(nodeArray, nodeInfo, isKernelFunction);

                        var nodeKeyVar = {
                            'Expression': nodeExpression[1]
                        };
                        var keyVarName = this.parse(nodeKeyVar, nodeInfo, isKernelFunction);

                        var nodeValueVar = {
                            'Expression': nodeExpression[2]
                        };
                        var valueVarName = this.parse(nodeValueVar, nodeInfo, isKernelFunction);

                        if ('Block' in nodeExpression[3]) {
                            var bodyExpression = {
                                'Expression': nodeExpression[3]
                            };
                            body += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression[3]
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                    }
                    js += 'for (' + keyVarName + ' in ' + arrayName + ') {' + (nodeInfo.indentCode ? '\n' : '') + (nodeInfo.indentCode ? core.space(nodeInfo.indentationLength) : '') + 'var ' + valueVarName + ' = ' + arrayName + '[' + keyVarName + '];' + (nodeInfo.indentCode ? '\n' : '') + body + '}';
                }
            }
            parentNodeInfo.terminalNode = 'ForEach';
        } else if ('Try' in mil) {
            node = mil['Try'];
            var nodeInfo = {
                'parentNode': 'Try',
                'childNode': '',
                'terminalNode' : 'Try',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Try';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var body = '';
                    var nodeExpression = node['Expression'];
                    if ('Block' in nodeExpression) {
                        var bodyExpression = {
                            'Expression': nodeExpression
                        };
                        body += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                    } else {
                        var bodyExpression = {
                            'Expression': nodeExpression
                        };
                        if (nodeInfo.indentCode) {
                            nodeInfo.indentation += nodeInfo.indentationLength;
                        }
                        body += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                        if (nodeInfo.indentCode) {
                            nodeInfo.indentation -= nodeInfo.indentationLength;
                        }
                    }
                    js += 'try {' + (nodeInfo.indentCode ? '\n' : '') + body + '}';
                }
                if ('Catch' in node) {
                    nodeInfo.parentNode = 'Catch';
                    var nodeCatch = node['Catch'];
                    if ('Expression' in nodeCatch) {
                        var nodeExpression = nodeCatch['Expression'];
                        if (Array.isArray(nodeExpression)) {
                            var _catch = '';
                            var nodeVar = {
                                'Expression': nodeExpression[0]
                            };
                            var catchVar = this.parse(nodeVar, nodeInfo, isKernelFunction);
                            if ('Block' in nodeExpression[1]) {
                                var bodyExpression = {
                                    'Expression': nodeExpression[1]
                                };
                                _catch += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                            } else {
                                var bodyExpression = {
                                    'Expression': nodeExpression[1]
                                };
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation += nodeInfo.indentationLength;
                                }
                                _catch += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation -= nodeInfo.indentationLength;
                                }
                            }
                        }
                        js += ' catch (' + catchVar + ') {' + (nodeInfo.indentCode ? '\n' : '') + _catch + '}';
                    }
                }
            }
            parentNodeInfo.terminalNode = 'Try';
        } else if ('Test' in mil) {
            node = mil['Test'];
            var nodeInfo = {
                'parentNode': 'Test',
                'childNode': '',
                'terminalNode' : 'Test',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Test';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var nodeExpression = node['Expression'];
                    if (Array.isArray(nodeExpression)) {
                        var _script = '';
                        var nodeTimes = {
                            'Expression': nodeExpression[0]
                        };
                        var _times = this.parse(nodeTimes, nodeInfo, isKernelFunction);

                        var nodeValue = {
                            'Expression': nodeExpression[1]
                        };
                        var _value = this.parse(nodeValue, nodeInfo, isKernelFunction);

                        var nodeTolerance = {
                            'Expression': nodeExpression[2]
                        };
                        var _tolerance = this.parse(nodeTolerance, nodeInfo, isKernelFunction);
                        
                        if ('Block' in nodeExpression[3]) {
                            var bodyExpression = {
                                'Expression': nodeExpression[3]
                            };
                            _script += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                        } else {
                            var bodyExpression = {
                                'Expression': nodeExpression[3]
                            };
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation += nodeInfo.indentationLength;
                            }
                            _script += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                            if (nodeInfo.indentCode) {
                                nodeInfo.indentation -= nodeInfo.indentationLength;
                            }
                        }
                    }
                }
                if ('Catch' in node) {
                    nodeInfo.parentNode = 'Catch';
                    var nodeCatch = node['Catch'];
                    if ('Expression' in nodeCatch) {
                        var nodeExpression = nodeCatch['Expression'];
                        if (Array.isArray(nodeExpression)) {
                            var _catch = '';
                            var nodeVar = {
                                'Expression': nodeExpression[0]
                            };
                            var catchVar = this.parse(nodeVar, nodeInfo, isKernelFunction);
                            if ('Block' in nodeExpression[1]) {
                                var bodyExpression = {
                                    'Expression': nodeExpression[1]
                                };
                                _catch += this.parse(bodyExpression, nodeInfo, isKernelFunction);
                            } else {
                                var bodyExpression = {
                                    'Expression': nodeExpression[1]
                                };
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation += nodeInfo.indentationLength;
                                }
                                _catch += core.space(nodeInfo.indentation) + this.parse(bodyExpression, nodeInfo, isKernelFunction) + ';' + (nodeInfo.indentCode ? '\n' : '');
                                if (nodeInfo.indentCode) {
                                    nodeInfo.indentation -= nodeInfo.indentationLength;
                                }
                            }
                        }
                        js += 'core.testScript(' + '\'' + _script + '\',' + _times + ',' + _value + ',' + _tolerance + ',\'' + 'var ' + catchVar + ' = core.testResult.obtained;' + _catch + '\');';
                    }
                }
            }
            parentNodeInfo.terminalNode = 'Test';
        } else if ('Break' in mil) {
            node = mil['Break'];
            var nodeInfo = {
                'parentNode': 'Break',
                'childNode': '',
                'terminalNode' : 'Break',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Break';

            if (typeof node != 'undefined') {
                js += 'break';
            }
        } else if ('Continue' in mil) {
            node = mil['Continue'];
            var nodeInfo = {
                'parentNode': 'Continue',
                'childNode': '',
                'terminalNode' : 'Continue',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Continue';

            if (typeof node != 'undefined') {
                js += 'continue';
            }
        } else if ('Return' in mil) {
            node = mil['Return'];
            var nodeInfo = {
                'parentNode': 'Return',
                'childNode': '',
                'terminalNode' : 'Return',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Return';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var returnValue = this.parse(node, nodeInfo, isKernelFunction);
                    js += 'return ' + returnValue;
                } else {
                    js += 'return';
                }
            }
        } else if ('Throw' in mil) {
            node = mil['Throw'];
            var nodeInfo = {
                'parentNode': 'Throw',
                'childNode': '',
                'terminalNode' : 'Throw',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Throw';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var returnValue = this.parse(node, nodeInfo, isKernelFunction);
                    js += 'throw ' + returnValue;
                } else {
                    js += 'throw';
                }
            }
        } else if ('Operation' in mil) {
            node = mil['Operation'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Operation';
            
            if (typeof node != 'undefined') {
                if ('Op' in node) {
                    js += this.parse(node, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                } else {
                    if ('TOKEN' in node) {
                        var primary = node['Primary'];
                        var right = this.parse(primary, nodeInfo, isKernelFunction);
                        parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        var operator = node['TOKEN'];
                        if ((operator == '++') || (operator == '--')) {
                            js += right + operator;
                        } else {
                            if (isKernelFunction) {
                                js += operator + right;
                            } else {
                                js += operators[operator] + '(' + right + ')';
                            }
                        }
                    } else {
                        js += this.parse(node, nodeInfo, isKernelFunction);
                        parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    }
                }
            }
        } else if ('Op' in mil) {
            node = mil['Op'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Op';
            if (typeof node != 'undefined') {
                if (Array.isArray(node)) {
                    var nodeInfo = {
                        'parentNode': 'Op',
                        'childNode': '',
                        'terminalNode' : '',
                        'indentation': parentNodeInfo.indentation,
                        'indentationLength': parentNodeInfo.indentationLength,
                        'indentCode': parentNodeInfo.indentCode
                    };
                    var left = this.parse(node[0], nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    var nodeInfo = {
                        'parentNode': 'op',
                        'childNode': '',
                        'terminalNode' : '',
                        'indentation': parentNodeInfo.indentation,
                        'indentationLength': parentNodeInfo.indentationLength,
                        'indentCode': parentNodeInfo.indentCode
                    };
                    if ('TOKEN' in node[1]) {
                        var operator = node[1]['TOKEN'];
                        if ((operator == '!') || (operator == '~')) {
                            if (isKernelFunction) {
                                var right = operator + this.parse(node[1], nodeInfo, isKernelFunction);
                            } else {    
                                var right = operators[operator] + '(' + this.parse(node[1], nodeInfo, isKernelFunction) + ')';
                            }
                        } else if ((operator == '++') || (operator == '--')) {
                            var right = this.parse(node[1], nodeInfo, isKernelFunction) + operator;
                        } else {
                            var right = this.parse(node[1], nodeInfo, isKernelFunction);
                        }
                    } else {
                        var right = this.parse(node[1], nodeInfo, isKernelFunction);
                    }
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    if ('TOKEN' in mil) {
                        var operator = mil['TOKEN'];
                        var j = 0;
                        if (Array.isArray(operator)) {
                            if (operator[0] == '?') {
                                js = left + ' ? ' + right + ' : ' + this.parse(node[2], nodeInfo, isKernelFunction);
                            } else {
                                if (operator[j] == '=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '=' + right;
                                } else if (operator[j] == '*=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '*=' + right;
                                } else if (operator[j] == '/=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '/=' + right;
                                } else if (operator[j] == '%=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '%=' + right;
                                } else if (operator[j] == '+=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '+=' + right;
                                } else if (operator[j] == '-=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '-=' + right;
                                } else if (operator[j] == '<<=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '<<=' + right;
                                } else if (operator[j] == '>>=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '>>=' + right;
                                } else if (operator[j] == '&=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '&=' + right;
                                } else if (operator[j] == '^=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '^=' + right;
                                } else if (operator[j] == '|=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '|=' + right;
                                } else if (operator[j] == ':=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '= new ' + right;
                                } else if (operator[j] == '?=') {
                                    parentNodeInfo.terminalNode = 'VariableAssignment';
                                    js += left + '= await ' + right;
                                } else {
                                    if (isKernelFunction) {
                                        js += left + operator[j] + right;
                                    } else {    
                                        js += operators[operator[j]] + '(' + left + ',' + right + ')';
                                    }
                                }
                                j++;
                                for (var i = 2; i < node.length; i++) {
                                    var right = this.parse(node[i], nodeInfo, isKernelFunction);
                                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                                    if (operator[j] == '=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '=' + right;
                                    } else if (operator[j] == '*=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '*=' + right;
                                    } else if (operator[j] == '/=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '/=' + right;
                                    } else if (operator[j] == '%=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '%=' + right;
                                    } else if (operator[j] == '+=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '+=' + right;
                                    } else if (operator[j] == '-=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '-=' + right;
                                    } else if (operator[j] == '<<=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '<<=' + right;
                                    } else if (operator[j] == '>>=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '>>=' + right;
                                    } else if (operator[j] == '&=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '&=' + right;
                                    } else if (operator[j] == '^=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '^=' + right;
                                    } else if (operator[j] == '|=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '|=' + right;
                                    } else if (operator[j] == ':=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '= new ' + right;
                                    } else if (operator[j] == '?=') {
                                        parentNodeInfo.terminalNode = 'VariableAssignment';
                                        js += '= await ' + right;
                                    } else {
                                        if (isKernelFunction) {
                                            js = js + operator[j] + right;
                                        } else {    
                                            js = operators[operator[j]] + '(' + js + ',' + right + ')';
                                        }
                                    }
                                    j++;
                                }
                            }
                        } else {
                            if (operator == '=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '=' + right;
                            } else if (operator[j] == '*=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '*=' + right;
                            } else if (operator[j] == '/=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '/=' + right;
                            } else if (operator[j] == '%=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '%=' + right;
                            } else if (operator[j] == '+=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '+=' + right;
                            } else if (operator[j] == '-=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '-=' + right;
                            } else if (operator[j] == '<<=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '<<=' + right;
                            } else if (operator[j] == '>>=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '>>=' + right;
                            } else if (operator[j] == '&=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '&=' + right;
                            } else if (operator[j] == '^=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '^=' + right;
                            } else if (operator[j] == '|=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '|=' + right;
                            } else if (operator == ':=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '= new ' + right;
                            } else if (operator == '?=') {
                                parentNodeInfo.terminalNode = 'VariableAssignment';
                                js += left + '= await ' + right;
                            } else {
                                if (isKernelFunction) {
                                    js += left + operator + right;
                                } else {    
                                    js += operators[operator] + '(' + left + ',' + right + ')';
                                }
                            }
                        }
                    }
                } else {
                    var nodeInfo = {
                        'parentNode': 'Op',
                        'childNode': '',
                        'terminalNode' : '',
                        'indentation': parentNodeInfo.indentation,
                        'indentationLength': parentNodeInfo.indentationLength,
                        'indentCode': parentNodeInfo.indentCode
                    };
                    js += this.parse(node, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                }
            }
        } else if ('Primary' in mil) {
            node = mil['Primary'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Primary';

            if (typeof node != 'undefined') {
                if ('Value' in node) {
                    var value = node['Value'];
                    if ('TOKEN' in value) {
                        js = value['TOKEN'];
                    } else {
                        js = this.parse(node, nodeInfo, isKernelFunction);
                    }
                } else {
                    if (parentNodeInfo.parentNode == 'AssemblyFunction') {
                        if ('Type' in node) {
                            var type = node['Type']
                            js = this.parse(node, nodeInfo, isKernelFunction) + ' ' + type['TOKEN'];
                        } else {
                            js = this.parse(node, nodeInfo, isKernelFunction)  + ' f64';
                        }
                    } else {
                        js = this.parse(node, nodeInfo, isKernelFunction);
                    }
                }
                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
            }
        } else if ('Member' in mil) {
            node = mil['Member'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Member';

            if (typeof node != 'undefined') {
                if ('Identifier' in node) {
                    js += this.parse(node, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                }
                if ('Arguments' in node) {
                    var nodeArguments = {
                        'MatrixIndexes': node['Arguments']
                    };
                    var args = this.parse(nodeArguments, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    var tokenType = node['TOKEN'];
                    if (typeof tokenType != 'undefined') {
                        if (tokenType.indexOf('(') != -1) {
                            js += '(' + args.replace(/;/g,',') + ')';
                        } else if (tokenType.indexOf('[') != -1) {
                            var arrayOfArgs = args.split(';');
                            if (Array.isArray(arrayOfArgs)) {
                                for (var i = 0; i < arrayOfArgs.length; i++) {
                                    js += '[' + arrayOfArgs[i] + ']';
                                }
                            } else {
                                js += '[' + arrayOfArgs + ']';
                            }
                        }
                    }
                } else {
                    var tokenType = node['TOKEN'];
                    if (typeof tokenType != 'undefined') {
                        if (tokenType.indexOf('(') != -1) {
                            js += '()';
                        } else if (tokenType.indexOf('[') != -1) {
                            js += '[]';
                        }
                    }
                }
            }
        } else if ('Identifier' in mil) {
            node = mil['Identifier'];
            var nodeInfo = {
                'parentNode': 'Identifier',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Identifier';
            parentNodeInfo.terminalNode = 'Identifier';

            if (typeof node != 'undefined') {
                if (parentNodeInfo.parentNode == 'AssemblyFunction') {
                    js = '$';
                }
                if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                        if (i < (node.length - 1)) {
                            js += node[i] + '.';
                        } else {
                            js += node[i];
                        }
                    }
                } else {
                    js += node;
                }
            }
        } else if ('Arguments' in mil) {
            node = mil['Arguments'];
            var nodeInfo = {
                'parentNode': parentNodeInfo.parentNode,
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Arguments';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var nodeExpression = node['Expression'];

                    if (parentNodeInfo.parentNode == 'AssemblyFunction') {
                        if (Array.isArray(nodeExpression)) {
                            for (var i = 0; i < nodeExpression.length; i++) {
                                var param = this.parse(nodeExpression[i], nodeInfo, isKernelFunction);
                                js += (param.includes('local') ? '(' : ' (param ') + param + ')';
                                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                            }
                        } else {
                            var param = this.parse(nodeExpression, nodeInfo, isKernelFunction);
                            js += (param.includes('local') ? ' (' : ' (param ') + param + ')';
                            parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        }
                    } else {
                        if (Array.isArray(nodeExpression)) {
                            for (var i = 0; i < nodeExpression.length; i++) {
                                if (i < (nodeExpression.length - 1)) {
                                    js += this.parse(nodeExpression[i], nodeInfo, isKernelFunction) + ',';
                                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                                } else {
                                    js += this.parse(nodeExpression[i], nodeInfo, isKernelFunction);
                                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                                }
                            }
                        } else {
                            js += this.parse(nodeExpression, nodeInfo, isKernelFunction);
                            parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        }
                    }
                }
            } else {
                js = node;
            }
        } else if ('MatrixIndexes' in mil) {
            node = mil['MatrixIndexes'];
            var nodeInfo = {
                'parentNode': 'Arguments',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Arguments';

            if (typeof node != 'undefined') {
                if ('Expression' in node) {
                    var nodeExpression = node['Expression'];
                    if (Array.isArray(nodeExpression)) {
                        for (var i = 0; i < nodeExpression.length; i++) {
                            if (i < (nodeExpression.length - 1)) {
                                js += this.parse(nodeExpression[i], nodeInfo, isKernelFunction) + ',';
                                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                            } else {
                                js += this.parse(nodeExpression[i], nodeInfo, isKernelFunction);
                                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                            }
                        }
                    } else {
                        js += this.parse(nodeExpression, nodeInfo, isKernelFunction);
                        parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    }
                }
            } else {
                js = node;
            }
        } else if ('Value' in mil) {
            node = mil['Value'];
            var nodeInfo = {
                'parentNode': 'Value',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Value';

            if (typeof node != 'undefined') {
                js = this.parse(node, nodeInfo, isKernelFunction);
                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
            }
        } else if ('Integer' in mil) {
            node = mil['Integer'];
            var nodeInfo = {
                'parentNode': 'Integer',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Integer';
            parentNodeInfo.terminalNode = 'Integer';

            if (typeof node == 'string') {
                js = node;
            }
        } else if ('Real' in mil) {
            node = mil['Real'];
            var nodeInfo = {
                'parentNode': 'Real',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Real';
            parentNodeInfo.terminalNode = 'Real';

            if (typeof node == 'string') {
                js = node;
            }
        } else if ('Complex' in mil) {
            node = mil['Complex'];
            var nodeInfo = {
                'parentNode': 'Complex',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Complex';
            parentNodeInfo.terminalNode = 'Complex';

            if (typeof node == 'string') {
                js = this.parseComplexNumber(node);
            }
        } else if ('Character' in mil) {
            node = mil['Character'];
            var nodeInfo = {
                'parentNode': 'Character',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Character';
            parentNodeInfo.terminalNode = 'Character';

            if (typeof node == 'string') {
                js += node.replace("'", "");
            }
        } else if ('String' in mil) {
            node = mil['String'];
            var nodeInfo = {
                'parentNode': 'String',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'String';
            parentNodeInfo.terminalNode = 'String';

            if (typeof node == 'string') {
                js += node;
            }
        } else if ('Array' in mil) {
            node = mil['Array'];
            var nodeInfo = {
                'parentNode': 'Array',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Array';

            if (typeof node != 'undefined') {
                js += '{';
                if ('Element' in node) {
                    var nodeElements = node['Element'];
                    if (Array.isArray(nodeElements)) {
                        for (var i = 0; i < nodeElements.length; i++) {
                            var nodeElement = {
                                'Element': nodeElements[i]
                            };
                            if (i < (nodeElements.length - 1)) {
                                js += this.parse(nodeElement, nodeInfo, isKernelFunction) + ',';
                                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                            } else {
                                js += this.parse(nodeElement, nodeInfo, isKernelFunction);
                                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                            }
                        }
                    } else {
                        var nodeElement = {
                            'Element': nodeElements
                        };
                        js += this.parse(nodeElement, nodeInfo, isKernelFunction);
                        parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    }
                }
                js += '}';
                parentNodeInfo.terminalNode = 'Aarray';
            }
        } else if ('Element' in mil) {
            node = mil['Element'];
            var nodeInfo = {
                'parentNode': 'Element',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Element';

            if (typeof node != 'undefined') {
                if ('Key' in node) {
                    var key = node['Key'];
                    if ('String' in key) {
                        js += key['String'] + ': ';
                    } else if ('Identifier' in key) {
                        js += key['Identifier'] + ': ';
                    }
                }
                if ('Expression' in node) {
                    var nodeExpression = {
                        'Expression': node['Expression']
                    };
                    var expression = this.parse(nodeExpression, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    js += expression;
                }
            }
        } else if ('Matrix' in mil) {
            node = mil['Matrix'];
            var nodeInfo = {
                'parentNode': 'Matrix',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Matrix';

            if (typeof node != 'undefined') {
                if ('Row' in node) {
                    var nodeRows = node['Row'];
                    if (Array.isArray(nodeRows)) {
                        js += '[';
                        for (var i = 0; i < nodeRows.length; i++) {
                            var nodeRow = {
                                'Row': nodeRows[i]
                            }
                            if (i < (nodeRows.length - 1)) {
                                js += this.parse(nodeRow, nodeInfo, isKernelFunction) + ',';
                                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                            } else {
                                js += this.parse(nodeRow, nodeInfo, isKernelFunction);
                                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                            }
                        }
                        js += ']';
                    } else {
                        var nodeRow = {
                            'Row': nodeRows
                        }
                        js += this.parse(nodeRow, nodeInfo, isKernelFunction);
                        parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                    }
                } else {
                    js += '[]';
                }
            }
        } else if ('Row' in mil) {
            node = mil['Row'];
            var nodeInfo = {
                'parentNode': 'Row',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Row';

            if (typeof node != 'undefined') {
                js += '[';
                if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                        if (i < (node.length - 1)) {
                            js += this.parse(node[i], nodeInfo, isKernelFunction) + ',';
                            parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        } else {
                            js += this.parse(node[i], nodeInfo, isKernelFunction);
                            parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        }
                    }
                } else {
                    js += this.parse(node, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                }
                js += ']';
            }
        } else if ('Column' in mil) {
            node = mil['Column'];
            var nodeInfo = {
                'parentNode': 'Column',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'Column';

            if (typeof node != 'undefined') {
                if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                        if (i < (node.length - 1)) {
                            js += this.parse(node[i], nodeInfo, isKernelFunction) + ',';
                            parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        } else {
                            js += this.parse(node[i], nodeInfo, isKernelFunction);
                            parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                        }
                    }
                } else {
                    js += this.parse(node, nodeInfo, isKernelFunction);
                    parentNodeInfo.terminalNode = nodeInfo.terminalNode;
                }
            }
        } else if ('ParenthesizedExpression' in mil) {
            node = mil['ParenthesizedExpression'];
            var nodeInfo = {
                'parentNode': 'ParenthesizedExpression',
                'childNode': '',
                'terminalNode' : '',
                'indentation': parentNodeInfo.indentation,
                'indentationLength': parentNodeInfo.indentationLength,
                'indentCode': parentNodeInfo.indentCode
            };
            parentNodeInfo.childNode = 'ParenthesizedExpression';

            if (typeof node != 'undefined') {
                js = '(' + this.parse(node, nodeInfo, isKernelFunction) + ')';
                parentNodeInfo.terminalNode = nodeInfo.terminalNode;
            };
        } else if ('Comment' in mil) {
            node = mil['Comment'];
            parentNodeInfo.childNode = 'Comment';
            parentNodeInfo.terminalNode = 'Comment';
            js = '';
        } else if ('TOKEN' in mil) {
            js = '';
        }

        return js;
    }

    /**
     * Compiles the MaiaScript XML tree for JavaScript.
     * @param {xml}      xml - The XML data.
     * @param {boolean}  indentCode - Indent the output code.
     * @param {number}   indentationLength - Number of spaces in the indentation.
     * @return {string}  XML data converted to JavaScript.
     */
    this.compile = function(xml, indentCode, indentationLength) {
        if (typeof indent == 'undefined') {
            indent = false;
        }
        if (typeof indentationLength == 'undefined') {
            indentationLength = 4;
        }

        var nodeInfo = {
            'parentNode': '',
            'childNode': 'Program',
            'terminalNode' : '',
            'indentation': 0,
            'indentationLength': indentationLength,
            'indentCode': indentCode
        };

        var mil = {};
        var js = "";

        mil = this.xmlToMil(xml);
        js = this.parse(mil, nodeInfo, false);

        return js;
    }
}
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** 
 * MaiaScript core library.
 * @class
 */
function Core() {
    /*
     * This property needs to be updated
     * with each new version of MaiaStudio.
     */
    this.version = "4.0.0";

    this.testResult = {
        "expected": {},
        "obtained": {}
    };

    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
        compiledCode = {
            "xml": "",
            "mil": "",
            "js": ""
        }
    }

    /*
     * The following functions allow you to manipulate MaiaScript objects.
     */

    /**
     * Convert an array to a n x 1 matrix.
     * @param {array}   obj - Array to be Converted.
     * @return {array}  The array converted to a matrix.
     */
    this.arrayToMatrix = function(obj) {
        var newMatrix = [];
        for (var i = 0; i < obj.length; i++) {
            if (Array.isArray(obj[i])) {
                newMatrix.push(obj[i]);
            } else {
                newMatrix.push([obj[i]]);
            }
        }
        return newMatrix;
    }

    /**
     * Copies a matrix.
     * @param {array}  obj - Matrix to be copied.
     * @return {array}  A copy of the matrix.
     */
    this.copyMatrix = function(obj) {
        var newMatrix = [];
        for (var i = 0; i < obj.length; i++) {
            newMatrix[i] = obj[i].slice();
        }
        return newMatrix;
    }

    /**
     * Returns the character at the indicated position.
     * @param {string}   str - The string to look for.
     * @param {number}   pos - The character position.
     * @return {string}  The character at the indicated position.
     */
    this.charAt = function(str, pos) {
        return str.charAt(pos);
    }

    /**
     * Returns the character code at the indicated position.
     * @param {string}   str - The string to look for.
     * @param {number}   pos - The character position.
     * @return {string}  The character code at the indicated position.
     */
    this.charCodeAt = function(str, pos) {
        return str.charCodeAt(pos);
    }

    /**
     * Returns a clone of an object.
     * @param {object}   obj - The object to be cloned.
     * @return {string}  The clone of the object.
     */
    this.clone = function(obj) {
        return Object.assign({}, obj);
    }

    /**
     * Join two matrices.
     * @param {array}   mtx1 - The first matrix.
     * @param {array}   mtx2 - The second matrix.
     * @return {array}  Matrix containing the two indicated matrices.
     */
    this.concat = function(mtx1, mtx2) {
        return mtx.concat(mtx1, mtx2);
    }

    /**
     * Calculates the conjugate of a complex number.
     * @param {number}   num - The complex number.
     * @return {number}  the conjugate of a complex number.
     */
    this.conj = function(num) {
        var res;
        if (core.type(num) == 'complex') {
            res = core.complex(core.toNumber(num.real), -core.toNumber(num.imaginary));
        } else {
            throw new Error('The object passed to the conj() function is not a complex number, in the expression conj(' + core.toString(num) + ').');
        }
        return res;
    }

    /**
     * Returns a complex number, given the real and imaginary part of the number.
     * @param {object}   real - TThe real part of the complex number.
     * @param {number}   img - The imaginary part of the complex number.
     * @return {number}  A complex complex number.
     */
    this.complex = function(real, img) {
        var num;
        if ((typeof real == 'number') && (typeof img == 'number')) {
            num = {
                "real": real,
                "imaginary": img
            }
        } else {
            throw new Error('It is necessary to provide the real and imaginary parts of the number, in the expression complex(' + real + ',' + img + ').');
        }
        return num;
    }

    /**
     * Returns a Date object.
     * @return {object}  A Date object.
     */
    this.date = function() {
        return new Date();
    }

    /**
     * Calculates the determinant matrix.
     * @param {object}  obj - The matrix to calculate the determinant.
     * @return {array}  A (rows x columns) matrix.
     */
    this.det = function(obj) {
        var mtx = [];
        if (core.type(obj) == 'matrix') {
            var dim = core.dim(obj);
            var m = dim[0];
            var n = dim[1];
            if (m == n) {
                // Convert to the diagonal equivalent matrix.
                var cpy = this.copyMatrix(obj);
                mtx = core.ident(m);
                for (var j = 0; j < m; j++) {
                    if (cpy[j][j] != 0) {
                        for (var i = 0; i < m; i++) {
                            if (i != j) {
                                var scale = -cpy[i][j] / cpy[j][j];
                                for (k = j; k < n; k++) {
                                    cpy[i][k] = cpy[i][k] + scale * cpy[j][k];
                                }
                                for (k = 0; k < n; k++) {
                                    mtx[i][k] = mtx[i][k] + scale * mtx[j][k];
                                }
                            }
                        }
                    }
                }
                for (i = 0; i < m; i++) {
                    for (j = 0; j < n; j++) {
                        mtx[i][j] = mtx[i][j] / cpy[i][i];
                    }
                }
                // Calculates the determinant of the matrix.
                var det = 1;
                for (i = 0; i < m; i++) {
                    det = det * cpy[i][i];
                }
            } else {
                throw new Error('The matrix must for function det() must be square, in the expression det(' + core.toString(obj) + ').');
            }
        } else {
            throw new Error('The argument for function det() must be a matrix, in the expression det(' + core.toString(obj) + ').');
        }
        return det;
    }

    /**
     * Calculates the diagonal equivalent matrix.
     * @param {object}  obj - The matrix to calculate the diagonal equivalent matrix.
     * @return {array}  A (rows x columns) matrix.
     */
    this.diag = function(obj) {
        if (core.type(obj) == 'matrix') {
            var dim = core.dim(obj);
            var m = dim[0];
            var n = dim[1];
            // Convert to the diagonal equivalent matrix.
            var cpy = this.copyMatrix(obj);
            for (var j = 0; j < m; j++) {
                if (cpy[j][j] != 0) {
                    for (var i = 0; i < m; i++) {
                        if (i != j) {
                            var scale = -cpy[i][j] / cpy[j][j];
                            for (k = j; k < n; k++) {
                                cpy[i][k] = cpy[i][k] + scale * cpy[j][k];
                            }
                        }
                    }
                }
            }
            // Calculates the determinant of the matrix.
            var det = 1;
            for (i = 0; i < m; i++) {
                det = det * cpy[i][i];
            }
            if (det == 0) {
                throw new Error('The matrix is singular, in the expression diag(' + core.toString(obj) + ').');
            }
        } else {
            throw new Error('The argument for function diag() must be a matrix, in the expression diag(' + core.toString(obj) + ').');
        }
        return cpy;
    }

    /**
     * Returns the dimensions of an array.
     * @param {array}   obj - Object to be measured.
     * @return {array}  Array containing the dimensions of a matrix.
     */
    this.dim = function(obj) {
        var arrayDimensions = [];
        if (Array.isArray(obj)) {
            arrayDimensions.push(obj.length);
            if (Array.isArray(obj[0])) {
                var elementDimension = this.dim(obj[0]);
                if (typeof elementDimension != 'undefined') {
                    arrayDimensions = arrayDimensions.concat(elementDimension);
                }
            }
        }
        return arrayDimensions;
    }

    /**
     * Evaluates a MaiaScript script.
     * @param {string}   stript - The script to be evaluated.
     * @param {object}   namespace - The namespace where evaluate the script.
     * @return {number}  Result of the evaluated script.
     */
    this.eval = function(script, namespace) {
        var result;

        compiledCode.xml = "";

        function getXml(data) {
            compiledCode.xml += data;
        }
        var s = new MaiaScript.XmlSerializer(getXml, true);
        var maiaScriptParser = new MaiaScript(script, s);
        try {
            maiaScriptParser.parse_Program();
        } catch (pe) {
            if (!(pe instanceof maiaScriptParser.ParseException)) {
                throw pe;
            } else {
                var parserError = maiaScriptParser.getErrorMessage(pe);
                alert(parserError);
                throw parserError;
            }
        }
        var parser = new DOMParser();
        var xml = parser.parseFromString(compiledCode.xml, "text/xml");

        var compiler = new MaiaCompiler();
        compiledCode.js = compiler.compile(xml);
        try {
            if (typeof namespace != 'undefined') {
                result = eval(namespace, compiledCode.js);
            } else {
                result = eval(compiledCode.js);
            }
            result = eval(compiledCode.js);
        } catch (e) {
            var evalError = e.message;
            system.log(evalError);
        }
        return result;
    }
    
    /**
     * Creates the identity matrix..
     * @param {number}  rows - Number of rows in the matrix.
     * @return {array}  A (rows x rows) identity matrix.
     */
    this.ident = function(rows) {
        var mtx = core.matrix(0, rows, rows);
        for (var i = 0; i < rows; i++) {
            mtx[i][i] = 1;
        }
        return mtx;
    }

    /**
     * Returns the imaginary part of a complex number.
     * @param {object}   obj - The complex number.
     * @return {number}  The imaginary part of a complex number.
     */
    this.imaginary = function(obj) {
        var num;
        if (typeof obj == 'object') {
            if ('imaginary' in obj) {
                num = obj.imaginary;
            } else {
                throw new Error('The object is not a complex number, in the expression imaginary(' + core.toString(obj) + ').');
            }
        } else {
            throw new Error('The object is not a complex number, in the expression imaginary(' + core.toString(obj) + ').');
        }
        return num;
    }

    /**
     * Returns true if one string is contained in another or in an array.
     * @param {object}    obj - The string containing the other one.
     * @param {string}    text - Search string.
     * @return {boolean}  True if one string is contained in another or in an array.
     */
    this.includes = function(obj, text) {
        return obj.includes(text);
    }

    /**
     * Returns the position of one string in another.
     * @param {string}   str - The string containing the other one.
     * @param {string}   text - Search string.
     * @return {number}  The position of one string in the other.
     */
    this.indexOf = function(str, text) {
        return str.indexOf(text);
    }
    
    /**
     * Calculates the inverse matrix.
     * @param {object}  obj - The matrix to calculate the inverse.
     * @return {array}  A (rows x columns) matrix.
     */
    this.inv = function(obj) {
        var mtx = [];
        if (core.type(obj) == 'matrix') {
            var dim = core.dim(obj);
            var m = dim[0];
            var n = dim[1];
            // Convert to the diagonal equivalent matrix.
            var cpy = this.copyMatrix(obj);
            mtx = core.ident(m);
            for (var j = 0; j < m; j++) {
                if (cpy[j][j] != 0) {
                    for (var i = 0; i < m; i++) {
                        if (i != j) {
                            var scale = -cpy[i][j] / cpy[j][j];
                            for (k = j; k < n; k++) {
                                cpy[i][k] = cpy[i][k] + scale * cpy[j][k];
                            }
                            for (k = 0; k < n; k++) {
                                mtx[i][k] = mtx[i][k] + scale * mtx[j][k];
                            }
                        }
                    }
                }
            }
            for (i = 0; i < m; i++) {
                for (j = 0; j < n; j++) {
                    mtx[i][j] = mtx[i][j] / cpy[i][i];
                }
            }
            // Calculates the determinant of the matrix.
            var det = 1;
            for (i = 0; i < m; i++) {
                det = det * cpy[i][i];
            }
            if (det == 0) {
                throw new Error('The matrix is singular, in the expression inv(' + core.toString(obj) + ').');
            }
        } else {
            throw new Error('The argument for function inv() must be a matrix, in the expression inv(' + core.toString(obj) + ').');
        }
        return mtx;
    }

    /**
     * Join the elements of an array using the indicated separator.
     * @param {array}    mtx - The array to join elements.
     * @param {string}   char - The separator character.
     * @return {string}  The string containing the parts of the array.
     */
    this.join = function(mtx, char) {
        return mtx.split(char);
    }

    /**
     * Returns the last position of one string in another.
     * @param {string}   str - The string containing the other one.
     * @param {string}   text - Search string.
     * @return {number}  The position of last occurrence of string in the other.
     */
    this.lastIndexOf = function(str, text) {
        return str.lastIndexOf(text);
    }

    /**
     * Returns the size of an object.
     * @param {string}   obj - Object to be measured.
     * @return {number}  Object size.
     */
    this.length = function(obj) {
        return obj.length;
    }

    /**
     * Creates a two-dimensional array (matrix).
     * @param {object}  obj - Object to fill the matrix cells.
     * @param {number}  rows - Number of rows in the matrix.
     * @param {number}  columns - Number of columns in the matrix.
     * @return {array}  A (rows x columns) matrix.
     */
    this.matrix = function(obj, rows, columns) {
        var mtx = [];
        if (rows > 1) {
            for (var i = 0; i < rows; i++) {
                if (typeof columns != 'undefined') {
                    var row = [];
                    for (var j = 0; j < columns; j++) {
                        row.push(obj);
                    }
                } else {
                    var row = obj;
                }
                mtx.push(row);
            }
        } else {
            var row = [];
            for (var j = 0; j < columns; j++) {
                row.push(obj);
            }
            mtx = row;
        }
        return mtx;
    }

    /**
     * Convert an n x 1 matrix to an array.
     * @param {array}   obj - Matrix to be Converted.
     * @return {array}  The matrix converted to an array.
     */
    this.matrixToArray = function(obj) {
        var newMatrix = [];
        for (var i = 0; i < obj.length; i++) {
            if (Array.isArray(obj[i])) {
                newMatrix.push(obj[i][0]);
            } else {
                newMatrix.push(obj[i]);
            }
        }
        return newMatrix;
    }

    /**
     * Convert a matrix to an object.
     * @param {array}   obj - Matrix to be Converted.
     * @param {array}   members - Object member names.
     * @return {array}  The matrix converted to an object.
     */
    this.matrixToObject = function(obj, members) {
        var newMatrix = [];
        for (i = 0; i < obj.length; i++) {
            if (core.type(obj[i]) != "undefined") {
                var row = Object();
                for (j = 0; j < core.length(obj[i]); j++) {
                    if (members[j] != "") {
                        if (core.type(obj[i][j]) != "undefined") {
                            row[members[j]] = obj[i][j];
                        }
                    }
                }
                if (Object.keys(row).length != 0) {
                    newMatrix.push(row);
                }
            }
        }
        return newMatrix;
    }

    /**
     * Creates a new instance of an object.
     * @param {object}   obj - The object that will be used as a template.
     * @param {object}   properties - The object properties.
     * @return {number}  A new instance of an object.
     */
    this.new = function(obj, properties) {
        if (typeof properties == 'undefined') {
            var newObject = Object.create(obj);
        } else {
            var newObject = Object.create(obj, properties);
        }
        return newObject;
    }

    /**
     * Creates a unitary matrix.
     * @param {number}  rows - Number of rows in the matrix.
     * @param {number}  columns - Number of columns in the matrix.
     * @return {array}  A (rows x columns) matrix.
     */
    this.one = function(rows, columns) {
        return core.matrix(1, rows, columns);
    }

    /**
     * Opens or creates a database.
     * @param {string}   name - Database name.
     * @param {string}   version - Scheme version.
     * @param {string}   displayName -  The display name of the database.
     * @param {string}   estimatedSize - Estimated maximum size.
     * @return {object}  Reference to the open or created database.
     */
    this.openSQLDatabase = function(name, version, displayName, estimatedSize) {
        var db;

        try {
            db = openDatabase(name, version, displayName, estimatedSize);
        } catch (e) {
            system.log(e.message);
            throw new Error(e.message);
        }

        return db;
    }

    /**
     * Removes an object from the end of an array.
     * @param {array}   mtx - The array to join elements.
     * @param {object}  obj - The separator character.
     * @return {array}  The array with the object removed.
     */
    this.pop = function(mtx, obj) {
        return mtx.pop(obj);
    }

    /**
     * Insert an object at the end of an array.
     * @param {array}   mtx - The array to join elements.
     * @param {object}  obj - The separator character.
     * @return {array}  The array with the added object.
     */
    this.push = function(mtx, obj) {
        return mtx.push(obj);
    }

    /**
     * Returns the real part of a complex number.
     * @param {object}   obj - The complex number.
     * @return {number}  The real part of a complex number.
     */
    this.real = function(obj) {
        var num;
        if (typeof obj == 'object') {
            if ('imaginary' in obj) {
                num = obj.real;
            } else {
                throw new Error('The object is not a complex number, in the expression real(' + core.toString(obj) + ').');
            }
        } else {
            throw new Error('The object is not a complex number, in the expression real(' + core.toString(obj) + ').');
        }
        return num;
    }

    /**
     * Create a RegExp object to compare an expression with a specified pattern (regular expression).
     * @param {string}   pattern - The regular expression.
     * @param {string}   flags - Indicates the marks that can be added.
     * @return {object}  A RegExp object.
     */
    this.regExp = function(pattern, flags) {
        var regexp = new RegExp(pattern, flags);
        return regexp;
    }

    /**
     * Returns a new string with a specified number of copies of the string.
     * @param {object}   str - The object to convert to do string.
     * @param {number}   count - Number of copies.
     * @return {string}  A new string with a specified number of copies of the string.
     */
    this.repeat = function(str, count) {
        return str.repeat(count);
    }

    /**
     * Replaces one character string with another in a string.
     * @param {string}   str - The string containing the other one.
     * @param {string}   string1 - The string to search for.
     * @param {string}   string2 - The replacement string.
     * @return {string}  A new string.
     */
    this.replace = function(str, string1, string2) {
        return str.replace(string1, string2);
    }

    /**
     * Searches a string for a specified value.
     * @param {string}   str - The string containing the other one.
     * @param {string}   text - Search string.
     * @return {number}  The position of the match.
     */
    this.search = function(str, text) {
        return str.search(text);
    }

    /**
     * Insert an object at the beginning of an array.
     * @param {array}   mtx - The array to join elements.
     * @param {object}  obj - The separator character.
     * @return {array}  The array with the added object.
     */
    this.shift = function(mtx, obj) {
        return mtx.shift(obj);
    }

    /**
     * Return a part of a string or array.
     * @param {string}   obj - The string or array containing the other one.
     * @param {number}   start - The start position.
     * @param {number}   end - The final position.
     * @return {string}  The selected part of the string or array.
     */
    this.slice = function(obj, start, end) {
        if (typeof end != 'undefined') {
            return obj.slice(start, end);
        } else {
            return obj.slice(start);
        }
    }

    /**
     * Returns a string filled with n spaces.
     * @param {number}   n - The number of spaces.
     * @return {string}  The string filled with n spaces.
     */
    this.space = function(n) {
        var str = ''
        for (var i = 0; i < n; i++) {
            str += ' ';
        }
        return str;
    }
    
    /**
     * Removes or replaces an object from the specified position in an array.
     * @param {array}   mtx - The array to remove elements.
     * @param {number}  pos - Position from which objects will be removed.
     * @param {number}  count - Number of objects to remove.
     * @param {object}  obj - Object to be inserted in the specified location.
     * @return {array}  The array with the objects removed.
     */
    this.splice = function(mtx, pos, count, obj) {
        if (typeof obj != 'undefined') {
            return mtx.splice(pos, count, obj);
        } else {
            return mtx.splice(pos, count);
        }
    }

    /**
     * Convert a string to an array, using the character indicated as a separator.
     * @param {string}   str - The string to slit.
     * @param {string}   chars - The separator characters.
     * @return {array}   The array containing the parts of the string.
     */
    this.split = function(str, chars) {
        if (typeof chars == 'undefined') {
            chars = ' ';
        }
        var firstChar = chars[0];
        for (var i = 1; i < chars.length; i++) {
            str = str.split(chars[i]).join(firstChar);
        }
        str = str.split(firstChar);
        return str;
    }

    /**
     * Convert a CSV record to an array, using the character indicated as the column separator.
     * @param {string}   str - The string to slit.
     * @param {string}   separator - The separator characters.
     * @param {boolean}  allowRepeatChar - The separator character can be repeated (for formatting).
     * @param {boolean}  doEval - Run core.eval before adding the column to the record.
     * @return {array}   The array containing the parts of the CSV or NULL if the CSV record is not well formed.
     */
    this.splitCSV = function(str, separator, allowRepeatChar, doEval) {
        var record = [];
        var column = '';
        var previous = '';
        var insideAString = false;
        var openParentheses = false;
        var closedParentheses = false;
        var openBrackets = false;
        var closedBrackets = false;
        var openBraces = false;
        var closedBraces = false;
        var i = 0;
        var j = 0;
        if (typeof separator == 'undefined') {
            separator = ',';
        }
        if (typeof allowRepeatChar == 'undefined') {
            var allowRepeatChar = false;
        }
        if (typeof doEval == 'undefined') {
            var doEval = false;
        }
        while (j < str.length) {
            c = str[j];
            if (insideAString) {
                if (((c == '"') || (c == '\'')) && (previous != '\\')) {
                    insideAString = !insideAString;
                    if (doEval) {
                        column += '"';
                    }
                } else {
                    column += c;
                }
            } else {
                if (((c == '"') || (c == '\'')) && (previous != '\\')) {
                    insideAString = !insideAString;
                    if (doEval) {
                        column += '"';
                    }
                } else {
                    if (c == '(') {
                        openParentheses++;
                    } else if (c == ')') {
                        closedParentheses++;
                    }
                    if (c == '[') {
                        openBrackets++;
                    } else if (c == ']') {
                        closedBrackets++;
                    }
                    if (c == '{') {
                        openBraces++;
                    } else if (c == '}') {
                        closedBraces++;
                    }

                    if (openParentheses > 0) {
                        if (openParentheses != closedParentheses) {
                            column += c;
                        } else {
                            openParentheses = 0;
                            closedParentheses = 0;
                        }
                    }
                    if (openBrackets > 0) {
                        if (openBrackets != closedBrackets) {
                            column += c;
                        } else {
                            openBrackets = 0;
                            closedBrackets = 0;
                        }
                    }
                    if (openBraces > 0) {
                        if (openBraces != closedBraces) {
                            column += c;
                        } else {
                            openBraces = 0;
                            closedBraces = 0;
                        }
                    }

                    if ((openParentheses == 0) && (openBrackets == 0) && (openBraces == 0)) {
                        if (separator.includes(c)) {
                            if (allowRepeatChar) {
                                while (separator.includes(str[j])) {
                                    if (j < str.length) {
                                        j++;
                                    }
                                    if (j == str.length) {
                                        break;
                                    }
                                }
                                j--;
                            }
                            if (doEval) {
                                record[i] = core.eval(column);
                            } else {
                                record[i] = column;
                            }
                            column = '';
                            i++;
                        } else {
                            column += c;
                        }
                    }
                }
            }
            previous = c;
            j++;
        }
        if (doEval) {
            record[i] = core.eval(column);
        } else {
            record[i] = column;
        }
        return record;
    }

    /**
     * Return a part of a string.
     * @param {string}   str - The string containing the other one.
     * @param {number}   start - The start position.
     * @param {number}   size - The size of the slice.
     * @return {string}  The selected part of the string.
     */
    this.substr = function(str, start, size) {
        return str.substr(start, size);
    }

    /**
     * Tests a script, checking if the result of its execution corresponds to the expected result, considering the specified tolerance.
     * @param {string}    _script - The script to be evaluated.
     * @param {number}    _times - Number of times the test must be repeated.
     * @param {number}    _value - Expected value.
     * @param {number}    _tolerance - Tolerance.
     * @param {string}    _catchScript - Script to be evaluated if the test fails.
     * @return {boolean}  True if the test was successful or false, otherwise.
     */
    this.testScript = function(_script, _times, _value, _tolerance, _catchScript) {
        if (typeof _times == 'undefined') {
            _times = 1;
        }
        if (typeof _tolerance == 'undefined') {
            _tolerance = 0;
        }
        var _successfulTest = true;
        var _i = 0;
        while (_i < _times) {
            this.testResult.obtained = eval(_script);
            if (typeof _value != 'undefined') {
                if (_tolerance > 0) {
                    if ((typeof this.testResult.obtained == 'number') && (typeof _value == 'number')) {
                        if (!((this.testResult.obtained >= (_value - _tolerance)) && (this.testResult.obtained <= (_value + _tolerance)))) {
                            this.testResult.expected = _value;
                            _successfulTest = false;
                            if (typeof _catchScript != 'undefined') {
                                eval(_catchScript);
                            }
                            break;
                        }
                    } else {
                        throw new Error('The test statement only supports tolerance with numeric values.');
                    }
                } else {
                    if (!core.equal(this.testResult.obtained, _value)) {
                        this.testResult.expected = _value;
                        _successfulTest = false;
                        if (typeof _catchScript != 'undefined') {
                            eval(_catchScript);
                        }
                        break;
                    }
                }
            }
            _i++;
        }
        return _successfulTest;
    }

    /**
     * Converts a string to lower case.
     * @param {string}   text - The string to convert.
     * @return {string}  A new string.
     */
    this.toLowerCase = function(text) {
        return text.toLowerCase();
    }

    /**
     * Converts a string representing a number to a binary number.
     * @param {string}   text - The string representing a number.
     * @return {number}  The string coverted to number.
     */
    this.toNumber = function(text) {
        var num;
        if (core.type(text) == 'string') {
            if (text.includes('i')) {
                var compiler = new MaiaCompiler();
                num = JSON.parse(compiler.parseComplexNumber(text));
            } else {
                num = Number(text);
            }
        } else if (core.type(text) == 'number') {
            num = text;
        }
        return num;
    }

    /**
     * Converts an objecto to string.
     * @param {object}   obj - The object to convert to do string.
     * @param {number}   base - Numerical base for conversion.
     * @return {string}  The object coverted for string.
     */
    this.toString = function(obj, base) {
        var str = '';
        if (typeof obj == 'object') {
            if ('imaginary' in obj) {
                var signal = Math.sign(obj.imaginary) > 0 ? '+' : '-';
                str = (obj.real).toString() + signal + Math.abs(obj.imaginary).toString() + '*i';
            } else {
                str = JSON.stringify(obj);
            }
        } else {
            if (typeof base != 'undefined') {
                str = obj.toString(base);
            } else {
                str = obj.toString();
            }
        }
        return str;
    }

    /**
     * Converts a string to uppercase.
     * @param {string}   text - The string to convert.
     * @return {string}  A new string.
     */
    this.toUpperCase = function(text) {
        return text.toUpperCase();
    }

    /**
     * Removes characters from the beginning and end of a string.
     * @param {string}   str - The string to be trimmed
     * @param {string}   chars - The characters to remove.
     * @return {string}  A new string.
     */
    this.trim = function(str, chars) {
        if (typeof chars == 'undefined') {
            return str.trim();
        }
        if (chars == ']') {
            var chars = '\\]';
        }
        if (chars == '\\') {
            var chars = '\\\\';
        }
        return str.replace(new RegExp('^[' + chars + ']+|[' + chars + ']+$', 'g'), '');
    }

    /**
     * Removes characters from the beginning and end of a string.
     * @param {string}   str - The string to be trimmed
     * @param {string}   chars - The characters to remove.
     * @return {string}  A new string.
     */
    this.trimLeft = function(str, chars) {
        if (typeof chars == 'undefined') {
            return str.trim();
        }
        if (chars == ']') {
            var chars = '\\]';
        }
        if (chars == '\\') {
            var chars = '\\\\';
        }
        return str.replace(new RegExp('^[' + chars + ']+', 'g'), '');
    }

    /**
     * Removes characters from the beginning and end of a string.
     * @param {string}   str - The string to be trimmed
     * @param {string}   chars - The characters to remove.
     * @return {string}  A new string.
     */
    this.trimRight = function(str, chars) {
        if (typeof chars == 'undefined') {
            return str.trim();
        }
        if (chars == ']') {
            var chars = '\\]';
        }
        if (chars == '\\') {
            var chars = '\\\\';
        }
        return str.replace(new RegExp('[' + chars + ']+$', 'g'), '');
    }

    /**
     * Returns the class of a MaiaScript object.
     * @param {object}   obj - A MaiaScript object .
     * @return {string}  The class of a MaiaScript object.
     */
    this.type = function(obj) {
        var classType;
        if (typeof(obj) == 'boolean') {
            classType = 'boolean';
        } else if (typeof(obj) == 'function') {
            classType = 'function';
        } else if (typeof(obj) == 'number') {
            classType = 'number';
        } else if (typeof(obj) == 'string') {
            classType = 'string';
        } else if (typeof(obj) == 'object') {
            if (Array.isArray(obj)) {
                classType = 'matrix';
            } else {
                if ('imaginary' in obj) {
                    classType = 'complex';
                } else {
                    classType = 'object';
                }
            }
        } else if (typeof(obj) == 'undefined') {
            classType = 'undefined';
        }
        return classType;
    }

    /**
     * Removes an object from the beginning of an array.
     * @param {array}   mtx - The array to join elements.
     * @param {object}  obj - The separator character.
     * @return {array}  The array with the object removed.
     */
    this.unshift = function(mtx, obj) {
        return mtx.unshift(obj);
    }

    /**
     * Creates a zero matrix.
     * @param {number}  rows - Number of rows in the matrix.
     * @param {number}  columns - Number of columns in the matrix.
     * @return {array}  A (rows x columns) matrix.
     */
    this.zero = function(rows, columns) {
        return core.matrix(0, rows, columns);
    }

    /*
     * The following functions are used internally by the MaiaScript compiler.
     */

    /**
     * Performs the logical OR operation between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.logicalOR = function(left, right) {
        return left || right;
    }

    /**
     * Performs the logical XOR operation between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.logicalXOR = function(left, right) {
        return left ? !right : right;
    }

    /**
     * Performs the logical AND operation between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.logicalAND = function(left, right) {
        return left && right;
    }

    /**
     * Performs the binary OR operation between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.bitwiseOR = function(left, right) {
        return left | right;
    }

    /**
     * Performs the binary XOR operation between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.bitwiseXOR = function(left, right) {
        return left ^ right;
    }

    /**
     * Performs the binary AND operation between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.bitwiseAND = function(left, right) {
        return left & right;
    }

    /**
     * Returns TRUE if two objects are equal.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.equal = function(left, right) {
        var res;

        Array.prototype.equals = function(array) {
            if (!array) {
                return false;
            }
            if (this.length != array.length) {
                return false;
            }
            for (var i = 0, l = this.length; i < l; i++) {
                if (this[i] instanceof Array && array[i] instanceof Array) {
                    if (!this[i].equals(array[i])) {
                        return false;
                    }
                } else if (this[i] != array[i]) {
                    return false;
                }
            }
            return true;
        }
        Object.defineProperty(Array.prototype, "equals", {
            enumerable: false
        });

        isEquivalent = function(a, b) {
            var aProperties = Object.getOwnPropertyNames(a);
            var aProperties = Object.getOwnPropertyNames(b);
            if (aProperties.length != aProperties.length) {
                return false;
            }
            for (var i = 0; i < aProperties.length; i++) {
                var propertiesName = aProperties[i];
                if (a[propertiesName] !== b[propertiesName]) {
                    return false;
                }
            }
            return true;
        }

        if (Array.isArray(left) && Array.isArray(right)) {
            res = left.equals(right);
        } else {
            if ((typeof left == 'object') && (typeof right == 'object')) {
                res = isEquivalent(left, right);
            } else {
                res = left == right;
            }
        }
        return res;
    }

    /**
     * Returns TRUE if two objects are different.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.different = function(left, right) {
        return !this.equal(left, right);
    }

    /**
     * Returns TRUE if the object on the left is smaller than the object on the right.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.LT = function(left, right) {
        return left < right;
    }

    /**
     * Returns TRUE if the object on the left is less than or equal to the object on the right.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.LE = function(left, right) {
        return left <= right;
    }

    /**
     * Returns TRUE if the object on the left is greater than or equal to the object on the right.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.GE = function(left, right) {
        return left >= right;
    }

    /**
     * Returns TRUE if the object on the left is greater than the object on the right.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.GT = function(left, right) {
        return left > right;
    }

    /**
     * Performs a left shift operation.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.leftShift = function(left, right) {
        return left << right;
    }

    /**
     * Performs a left shift operation.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.rightShift = function(left, right) {
        return left >> right;
    }

    /**
     * Add two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.add = function(left, right) {
        var res;
        if (core.type(left) == 'complex') {
            if (core.type(right) == 'complex') {
                var real = core.toNumber(left.real) + core.toNumber(right.real);
                var img = core.toNumber(left.imaginary) + core.toNumber(right.imaginary);
                res = core.complex(real, img);
            } else if (core.type(right) == 'number') {
                var real = core.toNumber(left.real) + core.toNumber(right);
                var img = core.toNumber(left.imaginary);
                res = core.complex(real, img);
            } else {
                throw new Error('Invalid operand for operator "+", in the expression ' + core.toString(left) + ' + ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'number') {
            if (core.type(right) == 'complex') {
                var real = core.toNumber(left) + core.toNumber(right.real);
                var img = core.toNumber(right.imaginary);
                res = core.complex(real, img);
            } else if (core.type(right) == 'number') {
                res = left + right;
            } else if (core.type(right) == 'string') {
                res = core.toString(left) + right;
            } else {
                throw new Error('Invalid operand for operator "+", in the expression ' + core.toString(left) + ' + ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'matrix') {
            if (core.type(right) == 'matrix') {
                res = [];
                var dimLeft = core.dim(left);
                var dimRight = core.dim(right);
                if ((dimLeft.length > 1) && (dimRight.length > 1)) {
                    if ((dimLeft[0] == dimRight[0]) && (dimLeft[1] == dimRight[1])) {
                        var rows = dimLeft[0];
                        var columns = dimLeft[1];
                        for (var i = 0; i < rows; i++) {
                            var row = [];
                            for (var j = 0; j < columns; j++) {
                                row.push(left[i][j] + right[i][j]);
                            }
                            res.push(row);
                        }
                    } else {
                        throw new Error('Operand invalid for operator "+", in the expression ' + core.toString(left) + ' + ' + core.toString(right) + '. The matrices must have the same dimensions.');
                    }
                } else {
                    if (dimLeft[0] == dimRight[0]) {
                        var columns = dimLeft[0];
                        var row = [];
                        for (var i = 0; i < columns; i++) {
                            row.push(left[i] + right[i]);
                        }
                        res = row;
                    } else {
                        throw new Error('Operand invalid for operator "+", in the expression ' + core.toString(left) + ' + ' + core.toString(right) + '. The matrices must have the same dimensions.');
                    }
                }
            } else {
                throw new Error('Invalid operand for operator "+", in the expression ' + core.toString(left) + ' + ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'string') {
            if (core.type(right) == 'number') {
                res = left + core.toString(right);
            } else if (core.type(right) == 'string') {
                    res = left + right;
            } else {
                throw new Error('Invalid operand for operator "+", in the expression ' + core.toString(left) + ' + ' + core.toString(right) + '.');
            }
        } else {
            res = left + right;
        }
        return res;
    }

    /**
     * Subtracts two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.sub = function(left, right) {
        var res;
        if (core.type(left) == 'complex') {
            if (core.type(right) == 'complex') {
                var real = core.toNumber(left.real) - core.toNumber(right.real);
                var img = core.toNumber(left.imaginary) - core.toNumber(right.imaginary);
                res = core.complex(real, img);
            } else if (core.type(right) == 'number') {
                var real = core.toNumber(left.real) - core.toNumber(right);
                var img = core.toNumber(left.imaginary);
                res = core.complex(real, img);
            } else {
                throw new Error('Invalid operand for operator "-", in the expression ' + core.toString(left) + ' - ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'number') {
            if (core.type(right) == 'complex') {
                var real = core.toNumber(left) - core.toNumber(right.real);
                var img = core.toNumber(right.imaginary);
                res = core.complex(real, img);
            } else if (core.type(right) == 'number') {
                res = left - right;
            } else {
                throw new Error('Invalid operand for operator "-", in the expression ' + core.toString(left) + ' - ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'matrix') {
            if (core.type(right) == 'matrix') {
                res = [];
                var dimLeft = core.dim(left);
                var dimRight = core.dim(right);
                if ((dimLeft.length > 1) && (dimRight.length > 1)) {
                    if ((dimLeft[0] == dimRight[0]) && (dimLeft[1] == dimRight[1])) {
                        var rows = dimLeft[0];
                        var columns = dimLeft[1];
                        for (var i = 0; i < rows; i++) {
                            var row = [];
                            for (var j = 0; j < columns; j++) {
                                row.push(left[i][j] - right[i][j]);
                            }
                            res.push(row);
                        }
                    } else {
                        throw new Error('Operand invalid for operator "-", in the expression ' + core.toString(left) + ' - ' + core.toString(right) + '. The matrices must have the same dimensions.');
                    }
                } else {
                    if (dimLeft[0] == dimRight[0]) {
                        var columns = dimLeft[0];
                        var row = [];
                        for (var i = 0; i < columns; i++) {
                            row.push(left[i] - right[i]);
                        }
                        res = row;
                    } else {
                        throw new Error('Operand invalid for operator "-", in the expression ' + core.toString(left) + ' - ' + core.toString(right) + '. The matrices must have the same dimensions.');
                    }
                }
            } else {
                throw new Error('Invalid operand for operator "-", in the expression ' + core.toString(left) + ' - ' + core.toString(right) + '.');
            }
        } else {
            res = left - right;
        }
        return res;
    }

    /**
     * Performs a power operation between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.power = function(left, right) {
        // r=abs(a+b*i)=sqrt(a*a+b*b)
        // t=arg(a+b*i)=atan(b/a)
        // pow(a+b*i,n)=pow(r,n)*cos(n*t)+i*pow(r,n)*sin(n*t)
        var res;
        if (core.type(left) == 'complex') {
            if (core.type(right) == 'number') {
                var r = Math.sqrt(core.toNumber(left.real) * core.toNumber(left.real) + core.toNumber(left.imaginary) * core.toNumber(left.imaginary));
                var a = Math.asin(core.toNumber(left.imaginary) / r);
                var real = Math.pow(r, right) * Math.cos(a * right);
                var img = Math.pow(r, right) * Math.sin(a * right);
                res = core.complex(real, img);
            } else {
                throw new Error('Invalid operand for operator "^", in the expression ' + core.toString(left) + ' ^ ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'matrix') {
            if (core.type(right) == 'number') {
                var dimLeft = core.dim(left);
                if (right == -1) {
                    res = core.inv(left);
                } else if (right == 0) {
                    res = core.one(dimLeft[0], dimLeft[1]);
                } else if (right == 1) {
                    res = left;
                } else if (right > 1) {
                    res = 1;
                    for (var i = 0; i < right; i++) {
                        res = core.mul(res, left);
                    }
                }
            } else {
                throw new Error('Invalid operand for operator "^", in the expression ' + core.toString(left) + ' ^ ' + core.toString(right) + '.');
            }
        } else {
            res = Math.pow(left, right);
        }
        return res;
    }

    /**
     * Multiplies two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.mul = function(left, right) {
        var res;
        if (core.type(left) == 'complex') {
            if (core.type(right) == 'complex') {
                var real = core.toNumber(left.real) * core.toNumber(right.real) - core.toNumber(left.imaginary) * core.toNumber(right.imaginary);
                var img = core.toNumber(left.real) * core.toNumber(right.imaginary) + core.toNumber(left.imaginary) * core.toNumber(right.real);
                res = core.complex(real, img);
            } else if (core.type(right) == 'number') {
                var real = core.toNumber(left.real) * core.toNumber(right);
                var img = core.toNumber(left.imaginary);
                res = core.complex(real, img);
            } else {
                throw new Error('Invalid operand for operator "*", in the expression ' + core.toString(left) + ' * ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'number') {
            if (core.type(right) == 'complex') {
                var real = core.toNumber(left) * core.toNumber(right.real);
                var img = core.toNumber(right.imaginary);
                res = core.complex(real, img);
            } else if (core.type(right) == 'matrix') {
                var dimRight = core.dim(right);
                res = core.matrix(0, dimRight[0], dimRight[1]);
                for (var i = 0; i < dimRight[0]; i++) {
                    for (var j = 0; j < dimRight[1]; j++) {
                        res[i][j] = left * right[i][j];
                    }
                }
            } else if (core.type(right) == 'number') {
                res = left * right;
            } else {
                throw new Error('Invalid operand for operator "*", in the expression ' + core.toString(left) + ' * ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'matrix') {
            if (core.type(right) == 'matrix') {
                var dimLeft = core.dim(left);
                var dimRight = core.dim(right);
                res = core.matrix(0, dimLeft[0], dimRight[1]);
                if (dimLeft[1] == dimRight[0]) {
                    for (var i = 0; i < dimLeft[0]; i++) {
                        for (var j = 0; j < dimRight[1]; j++) {
                            for (var k = 0; k < dimRight[0]; k++) {
                                res[i][j] = res[i][j] + left[i][k] * right[k][j];
                            }
                        }
                    }
                } else {
                    throw new Error('Operand invalid for operator "*", in the expression ' + core.toString(left) + ' * ' + core.toString(right) + '. The matrices must have compatible dimensions.');
                }
            } else if (core.type(right) == 'number') {
                dimLeft = core.dim(left);
                res = core.matrix(0, dimLeft[0], dimLeft[1]);
                for (var i = 0; i < dimLeft[0]; i++) {
                    for (var j = 0; j < dimLeft[1]; j++) {
                        res[i][j] = left[i][j] * right;
                    }
                }
            } else {
                throw new Error('Invalid operand for operator "*", in the expression ' + core.toString(left) + ' * ' + core.toString(right) + '.');
            }
        } else {
            res = left * right;
        }
        return res;
    }

    /**
     * Divide two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.div = function(left, right) {
        // (a+b*i)/(c+d*i)=(a*c+b*d)/(c*c+d*d)+i*(b*c-a*d)/(c*c+d*d)
        var res;
        if (core.type(left) == 'complex') {
            if (core.type(right) == 'complex') {
                var real = (core.toNumber(left.real) * core.toNumber(right.real) + core.toNumber(left.imaginary) * core.toNumber(right.imaginary)) / (core.toNumber(right.real) * core.toNumber(right.real) + core.toNumber(right.imaginary) * core.toNumber(right.imaginary));
                var img = (core.toNumber(left.imaginary) * core.toNumber(right.real) - core.toNumber(left.real) * core.toNumber(right.imaginary)) / (core.toNumber(right.real) * core.toNumber(right.real) + core.toNumber(right.imaginary) * core.toNumber(right.imaginary));
                res = core.complex(real, img);
            } else if (core.type(right) == 'number') {
                var real = core.toNumber(left.real) / core.toNumber(right);
                var img = core.toNumber(left.imaginary);
                res = core.complex(real, img);
            } else {
                throw new Error('Invalid operand for operator "/", in the expression ' + core.toString(left) + ' / ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'number') {
            if (core.type(right) == 'complex') {
                var real = core.toNumber(left) / core.toNumber(right.real);
                var img = core.toNumber(right.imaginary);
                res = core.complex(real, img);
            } else if (core.type(right) == 'number') {
                res = left / right;
            } else {
                throw new Error('Invalid operand for operator "/", in the expression ' + core.toString(left) + ' / ' + core.toString(right) + '.');
            }
        } else if (core.type(left) == 'matrix') {
            if (core.type(right) == 'matrix') {
                var dimLeft = core.dim(left);
                var dimRight = core.dim(right);
                if (dimLeft[0] == dimRight[1]) {
                    res = core.mul(core.inv(right), left);
                } else {
                    throw new Error('Operand invalid for operator "*", in the expression ' + core.toString(left) + ' * ' + core.toString(right) + '. The matrices must have compatible dimensions.');
                }
            } else if (core.type(right) == 'number') {
                dimLeft = core.dim(left);
                res = core.matrix(0, dimLeft[0], dimLeft[1]);
                for (var i = 0; i < dimLeft[0]; i++) {
                    for (var j = 0; j < dimLeft[1]; j++) {
                        res[i][j] = left[i][j] * right;
                    }
                }
            } else {
                throw new Error('Invalid operand for operator "*", in the expression ' + core.toString(left) + ' * ' + core.toString(right) + '.');
            }
        } else {
            res = left / right;
        }
        return res;
    }

    /**
     * Calculates the rest of the division between two objects.
     * @param {object}   left - The left operand.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.mod = function(left, right) {
        return left % right;
    }

    /**
     * Performs a binary NOT operation.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.bitwiseNot = function(right) {
        return ~right;
    }

    /**
     * Performs a logical NOT operation.
     * @param {object}   right - The right operand.
     * @return {string}  An string represening the result of the operation.
     */
    this.logicalNot = function(right) {
        return !right;
    }
}

core = new Core();/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * MaiaScript system library.
 * @class
 */
function System() {
    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }

    /**
     * Convert Unicode caracters to Latin1.
     * @param {string}   str - Unicode string.
     * @return {string}  The Unicode string converted to Latin1.
     */
    this.base64EncodeUnicode = function(str) {
        // First we escape the string using encodeURIComponent to get the UTF-8 encoding of the characters, 
        // then we convert the percent encodings into raw bytes, and finally feed it to btoa() function.
        utf8Bytes = encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {
            return String.fromCharCode('0x' + p1);
        });
        return btoa(utf8Bytes);
    }

    /**
     * Converts an array to a CSV file, using the character indicated as the column separator.
     * @param {array}    csvData - CSV data.
     * @param {string}   recordSeparator - The separator characters.
     * @param {array}    header - Column descriptors.
     * @return {string}  The CSV file data.
     */
    this.createCSV = function(csvData, recordSeparator, header) {
        if (typeof separator != 'undefined') {
            var separator = ',';
        }
        if (typeof csvData != 'undefined') {
            var fileContents = '';
            if (typeof header != 'undefined') {
                for (var i = 0; i < header.length; i++) {
                    fileContents += '"' + header[i] + '"';
                    if (i < header.length - 1) {
                        fileContents += recordSeparator;
                    }
                }
                fileContents += '\n';
            }
            for (var i = 0; i < csvData.length; i++) {
                record = csvData[i];
                for (var j = 0; j < record.length; j++) {
                    if (typeof record[j] == 'string') {
                        fileContents += '"' + record[j] + '"';
                    } else if (typeof record[j] == 'object') {
                        fileContents += JSON.stringify(record[j]);
                    } else {
                        fileContents += record[j];
                    }
                    if (j < record.length - 1) {
                        fileContents += recordSeparator;
                    }
                }
                fileContents += '\n';
            }
            return fileContents;
        } else {
            throw new Error('Invalid argument for function createCSV. Argument must be an array.');
        }
    }

    /**
     * Download a file.
     * @param {string}  fileName - File name.
     * @param {string}  fileData - Data to save.
     * @param {string}  mimeType - Mime type (default: 'text/plain').
     * @return          The file is downloaded.
     */
    this.downloadFile = function(fileName, fileData, mimeType) {
        if (typeof mimeType == 'undefined') {
            var mimeType = 'text/plain';
        }
        var uri = 'data:' + mimeType + ';charset=utf-8;base64,' + this.base64EncodeUnicode(fileData);
        var downloadLink = document.createElement('a');
        downloadLink.href = uri;
        downloadLink.download = fileName;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
    }

    /**
     * Converts a CSV record to an array, using the character indicated as the column separator.
     * @param {string}   csvData - CSV file data.
     * @param {number}   numberOfHeaderLines - Number of header lines and column descriptors to ignore.
     * @param {string}   recordSeparator - The separator characters.
     * @param {boolean}  allowRepeatChar - The separator character can be repeated (for formatting).
     * @param {boolean}  doEval - Run core.eval before adding the column to the record.
     * @return {array}   The array containing the parts of the CSV or NULL if the CSV record is not well formed.
     */
    this.parseCSV = function(csvData, numberOfHeaderLines, recordSeparator, allowRepeatChar, doEval) {
        if (typeof csvData != 'undefined') {
            var fileLines = core.split(csvData, '\r\n');
            var csvArray = [];
            for (i = numberOfHeaderLines; i < fileLines.length; i++) {
                var record = core.splitCSV(fileLines[i], recordSeparator, allowRepeatChar, doEval);
                csvArray.push(record);
            }
            return csvArray;
        } else {
            throw new Error('Invalid argument for function loadCSV. Argument must be a string.');
        }
    }

    /**
     * Displays a message in the console.
     * @param {string}  text - Text to display.
     */
    this.log = function(text) {
        console.log(text);
    }

    /**
     * Loads a CSV file and converts it to an array, using the character indicated as the column separator.
     * @param {string}   inputFile - CSV file.
     * @param {number}   numberOfHeaderLines - Number of header lines and column descriptors to ignore.
     * @param {string}   recordSeparator - The separator characters.
     * @param {boolean}  allowRepeatChar - The separator character can be repeated (for formatting).
     * @param {boolean}  doEval - Run core.eval before adding the column to the record.
     * @return {array}   The array containing the parts of the CSV or NULL if the CSV record is not well formed.
     */
    this.loadCSV = function(inputFile, numberOfHeaderLines, recordSeparator, allowRepeatChar, doEval) {
        if (typeof process != 'undefined') {
            var fs = require('fs');
            var readTextFile = fs.readFileSync;

            function getXml(data) {
                compiledCode.xml += data;
            }

            function read(input) {
                if (/^{.*}$/.test(input)) {
                    return input.substring(1, input.length - 1);
                } else {
                    var content = readTextFile(input, 'utf-8');
                    return content.length > 0 && content.charCodeAt(0) == 0xFEFF ? content.substring(1) : content;
                }
            }

            if (typeof inputFile != 'undefined') {
                var fileContents = read(String(inputFile));
                return this.parseCSV(fileContents, numberOfHeaderLines, recordSeparator, allowRepeatChar, doEval);
            } else {
                throw new Error('Invalid argument for function parseCSV. Argument must be a string.');
            }
        }
    }
    
    /**
     * Displays a message in the console.
     * @param {string}  text - Text to display.
     */
    this.print = function(text) {
        this.log(text);
    }

   /**
     * Displays a formated string based on format specifiers passed to the function.
     * @param {string}   fmt - A string containing format specifiers.
     * @param {object}   arguments - Objects to be formatted.
     * @return {string}  A formatted string based on format specifiers passed to the function.
     */
    this.printf = function(fmt) {
        this.log(string.sprintFormat(string.sprintfParse(fmt), arguments));
    }

    /**
     * Displays a message on the console and advances the cursor to the next line.
     * @param {string}  text - Text to display.
     */
    this.println = function(text) {
        this.log(text + '\r\n');
    }

    /**
     * Reads data from browser storage.
     * @param {object}  obj - Object to store data: {'key': value, 'key': value, ...}
     * @param {object}  callBack - Callback function to call after access to storage.
     * @return          Data from storage.
     */
    this.readDataFromStorage = function(obj, callBack) {
        for (key in obj) {
            if (typeof localStorage.getItem(key) != 'undefined') {
                obj[key] = localStorage.getItem(key);
            } else {
                obj[key] = {};
            }
        }
        if (typeof callBack != 'undefined') {
            callBack();
        }
    }

    /**
     * Imports a native module.
     * @param {string}   moduleName - Module name.
     * @return {object}  The native module reference.
     */
    this.require = function(moduleName) {
        var moduleReference;
        if (typeof process !== 'undefined') {
            var moduleReference = require(moduleName);
        }
        return moduleReference;
    }
    
    /**
     * Displays a message in a dialog box asking for confirmation.
     * @param {string}   text - Text to display.
     * @return {string}  User choice.
     */
    this.showConfirmDialog = function(text) {
        return confirm(text);
    }

    /**
     * Displays a message in a dialog box asking you to enter text.
     * @param {string}   text - Text to display.
     * @param {string}   defaultText - Default text to display in the text box.
     * @return {string}  User-typed text.
     */
    this.showInputDialog = function(text, defaultText = '') {
        return prompt(text, defaultText);
    }

    /**
     * Displays a message in a dialog box.
     * @param {string}  text - Text to display.
     */
    this.showMessageDialog = function(text) {
        alert(text);
    }

    /**
     * Load a MaiaScript module.
     * @param {string}   inputFile - Module name.
     * @return {object}  The MaiaScript module loaded.
     */
    this.source = function(inputFile) {
        if (typeof process != 'undefined') {
            var fs = require('fs');
            var readTextFile = fs.readFileSync;

            function getXml(data) {
                compiledCode.xml += data;
            }

            function read(input) {
                if (/^{.*}$/.test(input)) {
                    return input.substring(1, input.length - 1);
                } else {
                    var content = readTextFile(input, 'utf-8');
                    return content.length > 0 && content.charCodeAt(0) == 0xFEFF ? content.substring(1) : content;
                }
            }

            if (typeof inputFile != 'undefined') {
                var code = read(String(inputFile));
                core.eval(code, global);
            } else {
                throw new Error('Invalid argument for function source. Argument must be a string.');
            }
        }
    }

    /**
     * Upload a file.
     * @param {object}    fileObject - File data structure.
     * @param {function}  callBack - callback to be called when the file is loaded.
     * @return            The file is uploaded.
     */
    this.uploadFile = function(fileObject, callBack) {
        var input = document.createElement('input');
        input.type = 'file';
        input.onchange = e => { 
            var file = e.target.files[0]; 
            fileObject.fullFileName = file.name;
            fileObject.fileName = fileObject.fullFileName.split('.').shift();
            fileObject.fileExtension = fileObject.fullFileName.split('.').pop();
            var reader = new FileReader();
            reader.readAsText(file,'UTF-8');
            reader.onload = readerEvent => {
                fileObject.fileData = readerEvent.target.result;
                if (typeof callBack != 'undefined') {
                    callBack(fileObject);
                }
            }
        }
        input.click();
    }

    /**
     * Writes data to storage.
     * @param {object}  obj - Object to store data: {'key': value, 'key': value, ...}
     * @param {object}  callBack - Callback function to call after access to storage.
     * @return          Data written to storage.
     */
    this.writeDataToStorage = function(obj, callBack) {
        for (key in obj) {
            if (typeof obj[key] != 'undefined') {
                localStorage.setItem(key, obj[key]);
            } else {
                localStorage.setItem(key, {});
            }
        }
        if (typeof callBack != 'undefined') {
            callBack();
        }
    }
}

system = new System();
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * MaiaScript math library.
 * @class
 */
function Mathematics() {
    this.E       = Math.E;
    this.PI      = Math.PI;
    this.SQRT2   = Math.SQRT2;
    this.SQRT1_2 = Math.SQRT1_2;
    this.LN2     = Math.LN2;
    this.LN10    = Math.LN10;
    this.LOG2E   = Math.LOG2E;
    this.LOG10E  = Math.LOG10E;

    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }

   /*
    * Complex numbers functions:
    *
    * (a+b*i)/(c+d*i)=(a*c+b*d)/(c*c+d*d)+i*(b*c-a*d)/(c*c+d*d)
    *
    * cos(a+b*i)=cos(a)*cosh(b)-i*sin(a)*sinh(b)
    * sin(a+b*i)=sin(a)*cosh(b)+i*cos(a)*sinh(b)
    * tan(a+b*i)=sin(a+b*i)/cos(a+b*i)
    *
    * cosh(a+b*i)=cosh(a)*cos(b)+i*sinh(a)sin(b)
    * sinh(a+b*i)=sinh(a)*cos(b)+i*cosh(a)sin(b)
    * tanh(a+b*i)=sinh(a+b*i)/cosh(a+b*i)
    *
    * r=abs(a+b*i)=sqrt(a*a+b*b)
    * t=arg(a+b*i)=atan(b/a)
    *
    * exp(a+b*i)=exp(a)*cos(b)+i*sin(b)
    * log(a+b*i)=log(r)+i*t
    *
    * pow(a+b*i,n)=pow(r,n)*cos(n*t)+i*pow(r,n)*sin(n*t)
    * sqrt(a+b*i)=sqrt(r)*cos(t/2)+i*sqrt(r)*sin(t/2)
    *
    */

    /**
     * Returns the positive value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The positive value of x.
     */
    this.abs = function(x) {
        var y;
        if (core.type(x) == 'complex') {
            y = Math.sqrt(x.real * x.real + x.imaginary * x.imaginary);
        } else {
            y = Math.abs(x);
        }
        return y;
    }

    /**
     * Returns the arccosine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The arccosine value of x.
     */
    this.acos = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.acos(x);
        }
        return y;
    }

    /**
     * Returns the hyperbolic arccosine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The hyperbolic arccosine value of x.
     */
    this.acosh = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.acosh(x);
        }
        return y;
    }
    /**
     * Returns the complex number argument.
     * @param {object}   x - Value of X.
     * @return {number}  The complex number argument.
     */
    this.arg = function(x) {
        // t=arg(a+b*i)=atan(b/a)
        var y;
        if (core.type(x) == 'complex') {
            y = Math.atan(x.imaginary / x.real);
        }
        return y;
    }

    /**
     * Returns the arcsine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The arcsine value of x.
     */
    this.asin = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.asin(x);
        }
        return y;
    }

    /**
     * Returns the hyperbolic arcsine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The hyperbolic arcsine value of x.
     */
    this.asinh = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.asinh(x);
        }
        return y;
    }

    /**
     * Returns the arctangent value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The arctangent value of x.
     */
    this.atan = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.atan(x);
        }
        return y;
    }

    /**
     * Returns the arctangent of the quotient of x and y.
     * @param {object}   x - Value of X.
     * @param {object}   y - Value of Y.
     * @return {number}  The arctangent value of x.
     */
    this.atan2 = function(x, y) {
        var z;
        if (core.type(x) == 'number') {
            z = Math.atan2(x, y);
        }
        return z;
    }

    /**
     * Returns the hyperbolic arctangent value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The hyperbolic arctangent value of x.
     */
    this.atanh = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.atanh(x);
        }
        return y;
    }

    /**
     * Returns the cubic root of x.
     * @param {object}   x - Value of X.
     * @return {number}  The cubic root of x.
     */
    this.cbrt = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.cbrt(x);
        }
        return y;
    }

    /**
     * Returns the cosine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The cosine value of x.
     */
    this.cos = function(x) {
        // cos(a+b*i)=cos(a)*cosh(b)-i*sin(a)*sinh(b)
        var y;
        if (core.type(x) == 'complex') {
            y = core.complex(Math.cos(x.real) * Math.cosh(x.imaginary), Math.sin(x.real) * Math.sinh(x.imaginary));
        } else {
            y = Math.cos(x);
        }
        return y;
    }

    /**
     * Returns the hyperbolic cosine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The hyperbolic cosine value of x.
     */
    this.cosh = function(x) {
        // cosh(a+b*i)=cosh(a)*cos(b)+i*sinh(a)sin(b)
        var y;
        if (core.type(x) == 'complex') {
            y = core.complex(Math.cosh(x.real) * Math.cos(x.imaginary), Math.sinh(x.real) * Math.sin(x.imaginary));
        } else {
            y = Math.cosh(x);
        }
        return y;
    }

    /**
     * Returns the value of x rounded up.
     * @param {object}   x - Value of X.
     * @return {number}  Value of x rounded up.
     */
    this.ceil = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.ceil(x);
        }
        return y;
    }

    /**
     * Converts radians to decimal degrees.
     * @param {object}   x - Value of X.
     * @return {number}  Value of x in decimal degrees.
     */
    this.deg = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = x * (180 / Math.PI);;
        }
        return y;
    }

    /**
     * Returns the value of E^x
     * @param {object}   x - Value of X.
     * @return {number}  Value of E^x.
     */
    this.exp = function(x) {
        // exp(a+b*i)=exp(a)*cos(b)+i*sin(b)
        var y;
        if (core.type(x) == 'complex') {
            y = core.complex(Math.exp(x.real) * Math.cos(x.imaginary), Math.sin(x.imaginary));
        } else {
            y = Math.exp(x);
        }
        return y;
    }

    /**
     * Returns the value of x rounded down.
     * @param {object}   x - Value of X.
     * @return {number}  Value of x rounded down.
     */
    this.floor = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.floor(x);
        }
        return y;
    }

    /**
     * Returns the value of the natural logarithm of x.
     * @param {object}   x - Value of X.
     * @return {number}  The value of the natural logarithm of x.
     */
    this.log = function(x) {
        // r=abs(a+b*i)=sqrt(a*a+b*b)
        // t=arg(a+b*i)=atan(b/a)
        // log(a+b*i)=log(r)+i*t
        var y;
        if (core.type(x) == 'complex') {
            var r = this.abs(x);
            var t = this.arg(x);
            y = core.complex(Math.log(r), t);
        } else {
            y = Math.log(x);
        }
        return y;
    }

    /**
     * Returns the base 10 logarithm of a number x.
     * @param {object}   x - Value of X.
     * @return {number}  The value of the base 10 logarithm of x.
     */
    this.log10 = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.log10(x);
        }
        return y;
    }

    /**
     * Returns the base 2 logarithm of a number x.
     * @param {object}   x - Value of X.
     * @return {number}  The value of the base 10 logarithm of x.
     */
    this.log2 = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.log2(x);
        }
        return y;
    }
 
    /**
     * Returns the largest value between x and y.
     * @param {object}   x - Value of X.
     * @param {object}   y - Value of y.
     * @return {number}  The largest value between x and y.
     */
    this.max = function(x, y) {
        var y;
        if ((core.type(x) == 'number') && (core.type(y) == 'number')) {
            y = Math.max(x, y);
        }
        return y;
    }

    /**
     * Returns the smallest value between x and y.
     * @param {object}   x - Value of X.
     * @param {object}   y - Value of y.
     * @return {number}  The smallest value between x and y.
     */
    this.min = function(x, y) {
        var y;
        if ((core.type(x) == 'number') && (core.type(y) == 'number')) {
            y = Math.min(x, y);
        }
        return y;
    }

    /**
     * Returns the value of x to the power of y.
     * @param {object}   x - Value of X.
     * @param {object}   y - Value of y.
     * @return {number}  Value of x to the power of y.
     */
    this.pow = function(x, y) {
        var z = core.power(x, y);
        return z;
    }

    /**
     * Converts decimal degrees to radians.
     * @param {object}   x - Value of X.
     * @return {number}  Value of x in radians.
     */
    this.rad = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = x * (Math.PI / 180);;
        }
        return y;
    }

    /**
     * Returns a random number between 0 and 1.
     * @return {number}  A random number.
     */
    this.random = function() {
        var y = Math.random();
        return y;
    }

    /**
     * Returns the value of x rounding to the nearest value.
     * @param {object}   x - Value of X.
     * @return {number}  Value of x rounding to the nearest value.
     */
    this.round = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.round(x);
        }
        return y;
    }

    /**
     * Returns the sign of a number, indicating whether the number is positive, negative, or zero.
     * @param {object}   x - Value of X.
     * @return {number}  Value of the sign of the number.
     */
     this.sign = function(x)
     {
         var y;
         if (core.type(x) == 'number') {
             y = Math.sign(x);
         }
         return y;
     }
 
    /**
     * Returns the sine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The sine value of x.
     */
    this.sin = function(x) {
        // sin(a+b*i)=sin(a)*cosh(b)+i*cos(a)*sinh(b)
        var y;
        if (core.type(x) == 'complex') {
            y = core.complex(Math.sin(x.real) * Math.cosh(x.imaginary), Math.cos(x.real) * Math.sinh(x.imaginary));
        } else {
            y = Math.sin(x);
        }
        return y;
    }

    /**
     * Returns the hyperbolic sine value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The hyperbolic sine value of x.
     */
    this.sinh = function(x) {
        // sinh(a+b*i)=sinh(a)*cos(b)+i*cosh(a)sin(b)
        var y;
        if (core.type(x) == 'complex') {
            y = core.complex(Math.sinh(x.real) * Math.cos(x.imaginary), Math.cosh(x.real) * Math.sin(x.imaginary));
        } else {
            y = Math.sinh(x);
        }
        return y;
    }

    /**
     * Returns the square root of x.
     * @param {object}   x - Value of X.
     * @return {number}  Value of the square root of x.
     */
    this.sqrt = function(x) {
        // r=abs(a+b*i)=sqrt(a*a+b*b)
        // t=arg(a+b*i)=atan(b/a)
        // sqrt(a+b*i)=sqrt(r)*cos(t/2)+i*sqrt(r)*sin(t/2)
        var y;
        if (core.type(x) == 'complex') {
            var r = this.abs(x);
            var t = this.arg(x);
            y = core.complex(Math.sqrt(r) * Math.cos(t / 2), Math.sqrt(r) * Math.sin(t / 2));
        } else {
            y = Math.sqrt(x);
        }
        return y;
    }

    /**
     * Returns the tangent value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The tangent value of x.
     */
    this.tan = function(x) {
        // tan(a+b*i)=sin(a+b*i)/cos(a+b*i)
        var y;
        if (core.type(x) == 'complex') {
            y = core.div(this.sin(x), this.cos(x));
        } else {
            y = Math.tan(x);
        }
        return y;
    }

    /**
     * Returns the hyperbolic tangent value of x.
     * @param {object}   x - Value of X.
     * @return {number}  The hyperbolic tangent value of x.
     */
    this.tanh = function(x) {
        // tanh(a+b*i)=sinh(a+b*i)/cosh(a+b*i)
        var y;
        if (core.type(x) == 'complex') {
            y = core.div(this.sinh(x), this.cosh(x));
        } else {
            y = Math.tanh(x);
        }
        return y;
    }

    /**
     * Returns the integer part of a number.
     * @param {object}   x - Value of X.
     * @return {number}  The integer part of a number
     */
    this.trunc = function(x) {
        var y;
        if (core.type(x) == 'number') {
            y = Math.trunc(x);
        }
        return y;
    }
}

math = new Mathematics();
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * MaiaScript matrix library.
 * @class
 */
function Matrix() {
    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }

    /**
     * Returns the mean and standard deviation of the values contained in a matrix.
     * @param {object}   mtx - The matrix.
     * @param {number}   r1 - First row.
     * @param {number}   c1 - First column.
     * @param {number}   r2 - Last row.
     * @param {number}   c2 - Last column.
     * @return {number}  Mean and standard deviation of the values contained in a matrix.
     */
    this.avg = function(mtx, r1, c1, r2, c2) {
        var res = {
            'avg': 0,
            'dev': 0
        };
        var sx;
        var sx2;
        var n;
        if (core.type(mtx) == 'matrix') {
            dimMatrix = core.dim(mtx);
            if (dimMatrix.length == 2) {
                if (typeof r1 == 'undefined') {
                    r1 = 0;
                }
                if (typeof c1 == 'undefined') {
                    c1 = 0;
                }
                if (typeof r2 == 'undefined') {
                    r2 = dimMatrix[0] - 1;
                }
                if (typeof c2 == 'undefined') {
                    c2 = dimMatrix[1] - 1;
                }
                sx = 0;
                sx2 = 0;
                n = 0;
                for (var i = r1; i <= r2; i++) {
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[i][j]) == 'number') {
                            sx += mtx[i][j];
                            sx2 += mtx[i][j] * mtx[i][j];
                            n++;
                        } else {
                            throw new Error('Invalid element ' + mtx[i][j] + ' in matrix for function avg. All elements must be numeric.');
                        }
                    }
                }
            } else {
                if (dimMatrix.length == 1) {
                    if (typeof c1 == 'undefined') {
                        c1 = 0;
                    }
                    if (typeof c2 == 'undefined') {
                        c2 = dimMatrix[0] - 1;
                    }
                    sx = 0;
                    sx2 = 0;
                    n = 0;
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[j]) == 'number') {
                            sx += mtx[j];
                            sx2 += mtx[j] * mtx[j];
                            n++;
                        } else {
                            throw new Error('Invalid element ' + mtx[j] + ' in matrix for function avg. All elements must be numeric.');
                        }
                    }
                } else {
                    throw new Error('Invalid argument for function avg. The matrix must be one or two-dimensional.');
                }
            }
        } else {
            throw new Error('Invalid argument for function avg. Argument must be a matrix.');
        }
        res.avg = sx / n;
        res.dev = Math.sqrt((sx2 - (sx * sx) / n) / (n - 1));
        return res;
    }

    /**
     * Returns the number of non-zero elements in the matrix.
     * @param {object}   mtx - The matrix.
     * @param {number}   r1 - First row.
     * @param {number}   c1 - First column.
     * @param {number}   r2 - Last row.
     * @param {number}   c2 - Last column.
     * @return {number}  The number of non-zero elements in the matrix.
     */
    this.count = function(mtx, r1, c1, r2, c2) {
        var res;
        if (core.type(mtx) == 'matrix') {
            dimMatrix = core.dim(mtx);
            if (dimMatrix.length == 2) {
                res = 0;
                if (typeof r1 == 'undefined') {
                    r1 = 0;
                }
                if (typeof c1 == 'undefined') {
                    c1 = 0;
                }
                if (typeof r2 == 'undefined') {
                    r2 = dimMatrix[0] - 1;
                }
                if (typeof c2 == 'undefined') {
                    c2 = dimMatrix[1] - 1;
                }
                for (var i = r1; i <= r2; i++) {
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[i][j]) == 'number') {
                            if (mtx[i][j] != 0) {
                                res++;
                            }
                        } else {
                            throw new Error('Invalid element ' + mtx[i][j] + ' in matrix for function count. All elements must be numeric.');
                        }
                    }
                }
            } else {
                if (dimMatrix.length == 1) {
                    res = 0;
                    if (typeof c1 == 'undefined') {
                        c1 = 0;
                    }
                    if (typeof c2 == 'undefined') {
                        c2 = dimMatrix[0] - 1;
                    }
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[j]) == 'number') {
                            if (mtx[j] != 0) {
                                res++;
                            }
                        } else {
                            throw new Error('Invalid element ' + mtx[j] + ' in matrix for function count. All elements must be numeric.');
                        }
                    }
                } else {
                    throw new Error('Invalid argument for function count. The matrix must be one or two-dimensional.');
                }
            }
        } else {
            throw new Error('Invalid argument for function count. Argument must be a matrix.');
        }
        return res;
    }

    /**
     * Calculates the cross product of two vectors A and B.
     * @param {object}  a - The matrix A.
     * @param {object}  b - The matrix B.
     * @return {array}  A (rows x columns) matrix.
     */
    this.cross = function(a, b) {
        var mtx;
        if ((core.type(a) == 'matrix') && (core.type(b) == 'matrix')) {
            var dimA = core.dim(a);
            var dimB = core.dim(b);
            if ((dimA[0] == dimB[0]) && (dimA[1] == dimB[1])) {
                var m = dimA[0];
                var mtx = core.matrix(0, 1, m);
                if (m == 2) {
                    mtx[0] = a[0] * b[1];
                    mtx[1] = a[1] * b[0];
                } else if (m == 3) {
                    mtx[0] = a[1] * b[2] - b[1] * a[2];
                    mtx[1] = a[2] * b[0] - b[2] * a[0];
                    mtx[2] = a[0] * b[1] - b[0] * a[1];
                }
            } else {
                throw new Error('The matrices must have equal dimensions for function cross(), in the expression cross(' + core.toString(a) + "," + core.toString(b) + ').');
            }
        } else {
            throw new Error('The arguments for function cross() must be matrices, in the expression cross(' + core.toString(a) + "," + core.toString(b) + ').');
        }
        return mtx;
    }

    /**
     * Calculates the dot product of two vectors A and B.
     * @param {object}  a - The matrix A.
     * @param {object}  b - The matrix B.
     * @return {array}  A (rows x columns) matrix.
     */
    this.dot = function(a, b) {
        var res;
        if ((core.type(a) == 'matrix') && (core.type(b) == 'matrix')) {
            var dimA = core.dim(a);
            var dimB = core.dim(b);
            if ((dimA[0] == dimB[0]) && (dimA[1] == dimB[1])) {
                var m = dimA[0];
                if (m == 2) {
                    res = a[0] * b[0] + a[1] * b[1];
                } else if (m == 3) {
                    res = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
                }
            } else {
                throw new Error('The matrices must have equal dimensions for function cross(), in the expression cross(' + core.toString(a) + "," + core.toString(b) + ').');
            }
        } else {
            throw new Error('The arguments for function dot() must be matrices, in the expression dot(' + core.toString(a) + "," + core.toString(b) + ').');
        }
        return res;
    }

    /**
     * Returns the largest value in an array.
     * @param {object}   mtx - The matrix.
     * @param {number}   r1 - First row.
     * @param {number}   c1 - First column.
     * @param {number}   r2 - Last row.
     * @param {number}   c2 - Last column.
     * @return {number}  The smallest value in an array.
     */
    this.max = function(mtx, r1, c1, r2, c2) {
        var res;
        if (core.type(mtx) == 'matrix') {
            dimMatrix = core.dim(mtx);
            if (dimMatrix.length == 2) {
                res = 0;
                if (typeof r1 == 'undefined') {
                    r1 = 0;
                }
                if (typeof c1 == 'undefined') {
                    c1 = 0;
                }
                if (typeof r2 == 'undefined') {
                    r2 = dimMatrix[0] - 1;
                }
                if (typeof c2 == 'undefined') {
                    c2 = dimMatrix[1] - 1;
                }
                for (var i = r1; i <= r2; i++) {
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[i][j]) == 'number') {
                            if (typeof res == 'undefined') {
                                res = mtx[i][j];
                            } else {
                                if (mtx[i][j] > res) {
                                    res = mtx[i][j];
                                }
                            }
                        } else {
                            throw new Error('Invalid element ' + mtx[i][j] + ' in matrix for function max. All elements must be numeric.');
                        }
                    }
                }
            } else {
                if (dimMatrix.length == 1) {
                    res = 0;
                    if (typeof c1 == 'undefined') {
                        c1 = 0;
                    }
                    if (typeof c2 == 'undefined') {
                        c2 = dimMatrix[0] - 1;
                    }
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[j]) == 'number') {
                            if (typeof res == 'undefined') {
                                res = mtx[j];
                            } else {
                                if (mtx[j] > res) {
                                    res = mtx[j];
                                }
                            }
                        } else {
                            throw new Error('Invalid element ' + mtx[j] + ' in matrix for function max. All elements must be numeric.');
                        }
                    }
                } else {
                    throw new Error('Invalid argument for function max. The matrix must be one or two-dimensional.');
                }
            }
        } else {
            throw new Error('Invalid argument for function max. Argument must be a matrix.');
        }
        return res;
    }

    /**
     * Returns the smallest value in an array.
     * @param {object}   mtx - The matrix.
     * @param {number}   r1 - First row.
     * @param {number}   c1 - First column.
     * @param {number}   r2 - Last row.
     * @param {number}   c2 - Last column.
     * @return {number}  The smallest value in an array.
     */
    this.min = function(mtx, r1, c1, r2, c2) {
        var res;
        if (core.type(mtx) == 'matrix') {
            dimMatrix = core.dim(mtx);
            if (dimMatrix.length == 2) {
                if (typeof r1 == 'undefined') {
                    r1 = 0;
                }
                if (typeof c1 == 'undefined') {
                    c1 = 0;
                }
                if (typeof r2 == 'undefined') {
                    r2 = dimMatrix[0] - 1;
                }
                if (typeof c2 == 'undefined') {
                    c2 = dimMatrix[1] - 1;
                }
                for (var i = r1; i <= r2; i++) {
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[i][j]) == 'number') {
                            if (typeof res == 'undefined') {
                                res = mtx[i][j];
                            } else {
                                if (mtx[i][j] < res) {
                                    res = mtx[i][j];
                                }
                            }
                        } else {
                            throw new Error('Invalid element ' + mtx[i][j] + ' in matrix for function min. All elements must be numeric.');
                        }
                    }
                }
            } else {
                if (dimMatrix.length == 1) {
                    res = 0;
                    if (typeof c1 == 'undefined') {
                        c1 = 0;
                    }
                    if (typeof c2 == 'undefined') {
                        c2 = dimMatrix[0] - 1;
                    }
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[j]) == 'number') {
                            if (typeof res == 'undefined') {
                                res = mtx[j];
                            } else {
                                if (mtx[j] < res) {
                                    res = mtx[j];
                                }
                            }
                        } else {
                            throw new Error('Invalid element ' + mtx[j] + ' in matrix for function min. All elements must be numeric.');
                        }
                    }
                } else {
                    throw new Error('Invalid argument for function min. The matrix must be one or two-dimensional.');
                }
            }
        } else {
            throw new Error('Invalid argument for function min. Argument must be a matrix.');
        }
        return res;
    }

    /**
     * Calculates the sum of all cells in the matrix.
     * @param {object}   mtx - The matrix.
     * @param {number}   r1 - First row.
     * @param {number}   c1 - First column.
     * @param {number}   r2 - Last row.
     * @param {number}   c2 - Last column.
     * @return {number}  Sum of the values contained in a matrix.
     */
    this.sum = function(mtx, r1, c1, r2, c2) {
        var res;
        var sx;
        if (core.type(mtx) == 'matrix') {
            dimMatrix = core.dim(mtx);
            if (dimMatrix.length == 2) {
                if (typeof r1 == 'undefined') {
                    r1 = 0;
                }
                if (typeof c1 == 'undefined') {
                    c1 = 0;
                }
                if (typeof r2 == 'undefined') {
                    r2 = dimMatrix[0] - 1;
                }
                if (typeof c2 == 'undefined') {
                    c2 = dimMatrix[1] - 1;
                }
                sx = 0;
                for (var i = r1; i <= r2; i++) {
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[i][j]) == 'number') {
                            sx += mtx[i][j];
                        } else {
                            throw new Error('Invalid element ' + mtx[i][j] + ' in matrix for function sum. All elements must be numeric.');
                        }
                    }
                }
            } else {
                if (dimMatrix.length == 1) {
                    if (typeof c1 == 'undefined') {
                        c1 = 0;
                    }
                    if (typeof c2 == 'undefined') {
                        c2 = dimMatrix[0] - 1;
                    }
                    sx = 0;
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[j]) == 'number') {
                            sx += mtx[j];
                        } else {
                            throw new Error('Invalid element ' + mtx[j] + ' in matrix for function sum. All elements must be numeric.');
                        }
                    }
                } else {
                    throw new Error('Invalid argument for function sum. The matrix must be one or two-dimensional.');
                }
            }
        } else {
            throw new Error('Invalid argument for function sum. Argument must be a matrix.');
        }
        res = sx;
        return res;
    }

    /**
     * Calculates the squared sum of all cells in the matrix.
     * @param {object}   mtx - The matrix.
     * @param {number}   r1 - First row.
     * @param {number}   c1 - First column.
     * @param {number}   r2 - Last row.
     * @param {number}   c2 - Last column.
     * @return {number}  Sum of the values contained in a matrix.
     */
    this.sum2 = function(mtx, r1, c1, r2, c2) {
        var res;
        var sx;
        if (core.type(mtx) == 'matrix') {
            dimMatrix = core.dim(mtx);
            if (dimMatrix.length == 2) {
                if (typeof r1 == 'undefined') {
                    r1 = 0;
                }
                if (typeof c1 == 'undefined') {
                    c1 = 0;
                }
                if (typeof r2 == 'undefined') {
                    r2 = dimMatrix[0] - 1;
                }
                if (typeof c2 == 'undefined') {
                    c2 = dimMatrix[1] - 1;
                }
                sx = 0;
                for (var i = r1; i <= r2; i++) {
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[i][j]) == 'number') {
                            sx += mtx[i][j] * mtx[i][j];
                        } else {
                            throw new Error('Invalid element ' + mtx[i][j] + ' in matrix for function sum. All elements must be numeric.');
                        }
                    }
                }
            } else {
                if (dimMatrix.length == 1) {
                    if (typeof c1 == 'undefined') {
                        c1 = 0;
                    }
                    if (typeof c2 == 'undefined') {
                        c2 = dimMatrix[0] - 1;
                    }
                    sx = 0;
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[j]) == 'number') {
                            sx += mtx[j] * mtx[j];
                        } else {
                            throw new Error('Invalid element ' + mtx[j] + ' in matrix for function sum. All elements must be numeric.');
                        }
                    }
                } else {
                    throw new Error('Invalid argument for function sum. The matrix must be one or two-dimensional.');
                }
            }
        } else {
            throw new Error('Invalid argument for function sum. Argument must be a matrix.');
        }
        res = sx;
        return res;
    }

    /**
     * Returns the transpose of an array.
     * @param {object}   mtx - The matrix.
     * @param {number}   r1 - First row.
     * @param {number}   c1 - First column.
     * @param {number}   r2 - Last row.
     * @param {number}   c2 - Last column.
     * @return {number}  The transpose of an array.
     */
    this.trans = function(mtx, r1, c1, r2, c2) {
        var res;
        if (core.type(mtx) == 'matrix') {
            dimMatrix = core.dim(mtx);
            if (dimMatrix.length == 2) {
                res = 0;
                if (typeof r1 == 'undefined') {
                    r1 = 0;
                }
                if (typeof c1 == 'undefined') {
                    c1 = 0;
                }
                if (typeof r2 == 'undefined') {
                    r2 = dimMatrix[0] - 1;
                }
                if (typeof c2 == 'undefined') {
                    c2 = dimMatrix[1] - 1;
                }
                res = core.matrix(0, dimMatrix[0], dimMatrix[1]);
                for (var i = r1; i <= r2; i++) {
                    for (var j = c1; j <= c2; j++) {
                        if (core.type(mtx[i][j]) == 'number') {
                            res[j][i] = mtx[i][j];
                        } else {
                            throw new Error('Invalid element ' + mtx[i][j] + ' in matrix for function trans. All elements must be numeric.');
                        }
                    }
                }
            } else {
                throw new Error('Invalid argument for function trans. The matrix must be two-dimensional.');
            }
        } else {
            throw new Error('Invalid argument for function trans. Argument must be a matrix.');
        }
        return res;
    }

    /**
     * Calculates the triangular equivalent matrix.
     * @param {object}  mtx - The matrix to calculate the triangular equivalent matrix.
     * @return {array}  A (rows x columns) matrix.
     */
    this.triang = function(mtx) {
        if (core.type(mtx) == 'matrix') {
            var dim = core.dim(mtx);
            var m = dim[0];
            var n = dim[1];
            // Convert to the triangular equivalent matrix.
            var cpy = core.copyMatrix(mtx);
            for (k = 0; k < m - 1; k++) {
                for (i = k + 1; i < m; i++) {
                    var scale = -cpy[i][k] / cpy[k][k]
                    for (j = 0; j < n; j++) {
                        cpy[i][j] = cpy[i][j] + scale * cpy[k][j];
                    }
                }
            }
            // Calculates the determinant of the matrix.
            var det = 1;
            for (i = 0; i < m; i++) {
                det = det * cpy[i][i];
            }
            if (det == 0) {
                throw new Error('The matrix is singular, in the expression triang(' + core.toString(mtx) + ').');
            }
        } else {
            throw new Error('The argument for function triang() must be a matrix, in the expression triang(' + core.toString(mtx) + ').');
        }
        return cpy;
    }
}

matrix = new Matrix();/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* 
 * The sprintf function implemented in this library is based on the JavaScript library sprintf-js,
 * distributed under the following license. The original source code can be obtained from the repository:
 * https://github.com/alexei/sprintf.js.git
 * 
 * Copyright (c) 2007-present, Alexandru Mărășteanu <hello@alexei.ro>
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * Neither the name of this software nor the names of its contributors may be
 * used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * MaiaScript string library.
 * @class
 */
function MaiaString() {
    // Regular expressions used by sprintf the parser.
    this.re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
    }

    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }

    /**
     * Convert an string into camel case object name format.
     * @param {string}   str - String to convert.
     * @param {string}   firstCharToUpperCase - Converts the first character to uppercase.
     * @return {string}  The string converted to camel case.
     */
    this.camelize = function(str, firstCharToUpperCase) {
        function matchChars(match, index) {
            if (+match == 0) {
                return "";
            } else {
                return ((index == 0) && !firstCharToUpperCase) ? match.toLowerCase() : match.toUpperCase();
            }
        }
        return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, matchChars);
    }

    /**
     * Formats a string based on format specifiers passed to the function.
     * @param {string}   fmt - A string containing format specifiers.
     * @param {object}   arguments - Objects to be formatted.
     * @return {string}  A formatted string based on format specifiers passed to the function.
     */
    this.sprintf = function(fmt) {
        /*
            * Functions with variable number of arguments, use the variable 'arguments'
            * to contain the arguments passed to the function.
            */
        return this.sprintFormat(this.sprintfParse(fmt), arguments);
    }

    /**
     * Formats a string based on format specifiers passed to the function.
     * @param {string}   fmt - A string containing format specifiers.
     * @param {array}    argv - Array containing objects to be formatted.
     * @return {string}  A formatted string based on format specifiers passed to the function.
     */
    this.vsprintf = function(fmt, argv) {
        return this.sprintf.apply(null, [fmt].concat(argv || []));
    }

    /**
     * Formats a string based on an abstract synthetic tree produced by the format specifier compiler.
     * @param {object}   parseTree - Abstract synthetic tree produced by the format specifier compiler.
     * @param {array}    argv - Array containing objects to be formatted.
     * @return {string}  A formatted string based on format specifiers passed to the function.
     */
    this.sprintFormat = function(parseTree, argv) {
        var cursor = 1, treeLength = parseTree.length, arg, output = '', i, k, ph, pad, padCharacter, padLength, isPositive, sign;
        for (i = 0; i < treeLength; i++) {
            if (typeof parseTree[i] === 'string') {
                output += parseTree[i];
            } else if (typeof parseTree[i] === 'object') {
                ph = parseTree[i]
                if (ph.keys) {
                    arg = argv[cursor]
                    for (k = 0; k < ph.keys.length; k++) {
                        if (arg == undefined) {
                            throw new Error(this.sprintf('Function sprintf cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k-1]))
                        }
                        arg = arg[ph.keys[k]];
                    }
                } else if (ph.param_no) {
                    arg = argv[ph.param_no];
                } else {
                    arg = argv[cursor++];
                }
                if (this.re.not_type.test(ph.type) && this.re.not_primitive.test(ph.type) && arg instanceof Function) {
                    arg = arg();
                }
                if (this.re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {
                    throw new TypeError(this.sprintf('Function sprintf expecting number but found %T', arg));
                }
                if (this.re.number.test(ph.type)) {
                    isPositive = arg >= 0;
                }
                switch (ph.type) {
                    case 'b':
                        arg = parseInt(arg, 10).toString(2);
                        break;
                    case 'c':
                        arg = String.fromCharCode(parseInt(arg, 10));
                        break;
                    case 'd':
                    case 'i':
                        arg = parseInt(arg, 10);
                        break;
                    case 'j':
                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
                        break;
                    case 'e':
                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
                        break;
                    case 'f':
                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
                        break;
                    case 'g':
                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
                        break;
                    case 'o':
                        arg = (parseInt(arg, 10) >>> 0).toString(8);
                        break;
                    case 's':
                        arg = String(arg);
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                        break
                    case 't':
                        arg = String(!!arg);
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                        break
                    case 'T':
                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                        break;
                    case 'u':
                        arg = parseInt(arg, 10) >>> 0;
                        break;
                    case 'v':
                        arg = arg.valueOf();
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                        break;
                    case 'x':
                        arg = (parseInt(arg, 10) >>> 0).toString(16);
                        break;
                    case 'X':
                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                        break;
                }
                if (this.re.json.test(ph.type)) {
                    output += arg;
                } else {
                    if (this.re.number.test(ph.type) && (!isPositive || ph.sign)) {
                        sign = isPositive ? '+' : '-';
                        arg = arg.toString().replace(this.re.sign, '');
                    } else {
                        sign = '';
                    }
                    padCharacter = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';
                    padLength = ph.width - (sign + arg).length;
                    pad = ph.width ? (padLength > 0 ? padCharacter.repeat(padLength) : '') : '';
                    output += ph.align ? sign + arg + pad : (padCharacter === '0' ? sign + pad + arg : pad + sign + arg);
                }
            }
        }
        return output;
    }

    var sprintfCache = Object.create(null);

    /**
     * Compiles a string based on the syntactic rules of the C sprintf function.
     * @param {string}   fmt - A string containing format specifiers.
     * @return {object}  Abstract synthetic tree produced for the format specifier.
     */
    this.sprintfParse = function(fmt) {
        if (sprintfCache[fmt]) {
            return sprintfCache[fmt];
        }
        var formatString = fmt, match, parseTree = [], argNames = 0;
        while (formatString) {
            if ((match = this.re.text.exec(formatString)) !== null) {
                parseTree.push(match[0]);
            } else if ((match = this.re.modulo.exec(formatString)) !== null) {
                parseTree.push('%');
            } else if ((match = this.re.placeholder.exec(formatString)) !== null) {
                if (match[2]) {
                    argNames |= 1;
                    var fieldList = [], replacementField = match[2], fieldMatch = [];
                    if ((fieldMatch = this.re.key.exec(replacementField)) !== null) {
                        fieldList.push(fieldMatch[1]);
                        while ((replacementField = replacementField.substring(fieldMatch[0].length)) !== '') {
                            if ((fieldMatch = this.re.key_access.exec(replacementField)) !== null) {
                                fieldList.push(fieldMatch[1]);
                            } else if ((fieldMatch = this.re.index_access.exec(replacementField)) !== null) {
                                fieldList.push(fieldMatch[1]);
                            } else {
                                throw new SyntaxError('Function sprintf failed to parse named argument key');
                            }
                        }
                    } else {
                        throw new SyntaxError('Function sprintf failed to parse named argument key');
                    }
                    match[2] = fieldList;
                } else {
                    argNames |= 2;
                }
                if (argNames === 3) {
                    throw new Error('Function sprintf mixing positional and named placeholders is not (yet) supported');
                }
                parseTree.push(
                    {
                        placeholder: match[0],
                        param_no:    match[1],
                        keys:        match[2],
                        sign:        match[3],
                        pad_char:    match[4],
                        align:       match[5],
                        width:       match[6],
                        precision:   match[7],
                        type:        match[8]
                    }
                );
            } else {
                throw new SyntaxError('Function sprintf unexpected placeholder');
            }
            formatString = formatString.substring(match[0].length);
        }
        return sprintfCache[fmt] = parseTree;
    }
}

string = new MaiaString();
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at;
 *
 *   http://www.apache.org/licenses/LICENSE-2.0;
 *
 * Unless required by applicable law or agreed to in writing, software;
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eithermath.express or implied.
 * See the License for the specific language governing permissions and;
 * limitations under the License.
 */

/**
 * MaiaScript Artificial Neural Network (ANN) library.
 * @class
 */
function ANN() {
    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }

    /**
     * Creates an untrained artificial neural network.
     * @param {string}   topology - Graph topology. It can be:
     *                              complete, random, small world,
     *                              scale-free, hybrid or mlp.
     * @param {number}   numVertices - Number of vertices.
     * @param {number}   numEdges - Number of edges.
     * @param {number}   edgeProbability - Edge probability.
     * @param {number}   averageDegree - Average degree.
     * @param {number}   ni - Number of input neurons.
     * @param {number}   no - Number of output neurons.
     * @param {number}   nl - Number of layers.
     * @param {number}   nhu - Number of hidden units.
     * @return {object}  A neural network.
     */
    this.createANN = function(topology, numVertices, numEdges, edgeProbability, averageDegree, ni, no, nl, nhu) {
        if (typeof topology == 'undefined') {
            var topology = 'complete';
        }
        if (typeof numVertices != 'undefined') {
            var n = numVertices;
        } else {
            var n = 0;
        }
        if (typeof numEdges != 'undefined') {
            var m = numEdges;
        } else {
            var m = 0;
        }
        if (typeof edgeProbability != 'undefined') {
            var p = edgeProbability;
        } else {
            var p = 0;
        }
        if (typeof averageDegree != 'undefined') {
            var d = averageDegree;
        } else {
            var d = 0;
        }
        if (typeof ni == 'undefined') {
            var ni = 0;
        }
        if (typeof no == 'undefined') {
            var no = 0;
        }
        if (typeof nl == 'undefined') {
            var nl = 0;
        }
        if (typeof nhu == 'undefined') {
            var nhu = 0;
        }
        // Create a Multi-layer Perceptron (MLP)
        if (topology == 'mlp') {
            var n = ni + nl * nhu + no;
        }
        // Create a complete graph.
        if (topology == 'complete') {
            var NN = core.matrix(1, n + 1, n + 1);
        } else {
            var NN = core.matrix(0, n + 1, n + 1);
        }
        dimNN = core.dim(NN);
        // Create a random graph.
        if (topology == 'random') {
            // Calculate the edge probability.
            if (d > 0) {
                p = d / (n - 1);
            }
            // Calculate the number of edge.
            if ((m == 0) && (p > 0)) {
                e = n / 2 * (n - 1) * p;
            } else {
                e = m;
            }
            while (e > 0) {
                i = math.round(math.random() * n);
                j = math.round(math.random() * n);
                if (!((i == j) || (i == 0) || (j == 0))) {
                    if ((NN[i][j] == 0) && (NN[j][i] == 0)) {
                        NN[i][j] = 1;
                        NN[j][i] = 1;
                        e--;
                    }
                }
            }
        // Create a small world network.
        } else if (topology == 'smallworld') {
            // Create the initial random network.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                while (true) {
                    ki = matrix.count(NN, i, 1, i, dimNN[1] - 1);
                    if (ki < d) {
                        j = math.round(math.random() * n);
                        if ((i != j) && (j != 0)) {
                            NN[i][j] = 1;
                            NN[j][i] = 1;
                        }
                    } else {
                        break;
                    }
                }
            }
            // Rewire network with edge probability p.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                for (var j = 1; j < dimNN[1]; j = j + 1) {
                    if (NN[i][j] == 1) {
                        pij = math.random();
                        if (pij < p) {
                            while (true) {
                                k = math.round(math.random() * n);
                                if ((k != 0) && (i != k) && (NN[i][k] == 0)) {
                                    NN[i][j] = 0;
                                    NN[j][i] = 0;
                                    NN[i][k] = 1;
                                    NN[k][i] = 1;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        // Create a scale-free network.
        } else if (topology == 'scalefree') {
            // Create the initial random network.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                while (true) {
                    ki = matrix.count(NN, i, 1, i, dimNN[1] - 1);
                    if (ki == 0) {
                        j = math.round(math.random() * n);
                        if ((j != 0) && (i != j)) {
                            NN[i][j] = 1;
                            NN[j][i] = 1;
                            break;
                        }
                    } else {
                        break;
                    }
                }
            }
            // Add new edges with probability p.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                for (var j = 1; j < dimNN[1]; j = j + 1) {
                    if ((i != j) && (NN[i][j] == 0)) {
                        ki = matrix.count(NN, i, 1, i, dimNN[1] - 1);
                        if (ki < d) {
                            sk = matrix.sum(NN, 1, 1, dimNN[0] - 1, dimNN[1] - 1);
                            p = math.random();
                            pi = ki / sk;
                            if (pi < p) {
                                NN[i][j] = 1;
                                NN[j][i] = 1;
                            }
                        } else {
                            break;
                        }
                    }
                }
            }
        // Create an hybrid (scale-free small world) network.
        } else if (topology == 'hybrid') {
            // Create the small world network.
            // Create the initial random network.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                while (true) {
                    ki = matrix.count(NN, i, 1, i, dimNN[1] - 1);
                    if (ki < d) {
                        j = math.round(math.random() * n);
                        if ((j != 0) && (i != j)) {
                            NN[i][j] = 1;
                            NN[j][i] = 1;
                        }
                    } else {
                        break;
                    }
                }
            }
            // Rewire network with edge probability p.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                for (var j = 1; j < dimNN[1]; j = j + 1) {
                    if (ANN[i][j] == 1) {
                        pij = math.random();
                        if (pij < p) {
                            while (true) {
                                k = math.round(math.random() * n);
                                if ((k != 0) && (i != k) && (NN[i][k] == 0)) {
                                    NN[i][j] = 0;
                                    NN[j][i] = 0;
                                    NN[i][k] = 1;
                                    NN[k][i] = 1;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            // Change it to scale-free.
            // Add new edges with probability p.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                for (var j = 1; j < dimNN[1]; j = j + 1) {
                    if ((i != j) && (NN[i][j] == 0)) {
                        ki = matrix.count(NN, i, 1, i, dimNN[1] - 1);
                        if (ki < d) {
                            sk = matrix.sum(NN, 1, 1, dimNN[0] - 1, dimNN[1] - 1);
                            p = math.random();
                            pi = ki / sk;
                            if (pi < p) {
                                NN[i][j] = 1;
                                NN[j][i] = 1;
                            }
                        } else {
                            break;
                        }
                    }
                }
            }
        } else if (topology == 'mlp') {
            var lindex = 0;
            var nindex = 1;
            // Create synapses.
            // Connect inputs to the first layer.
            nindex = ni;
            for (var i = 1; i <= ni; i++) {
                for (var j = 1; j <= nhu; j++) {
                    NN[i][j + nindex] = 1;
                }
            }
            // Connect hidden layers.
            for (var l = 1; l < nl; l++) {
                n1index = ni + (l - 1) * nhu;
                n2index = ni + l * nhu;
                for (var i = 1; i <= nhu; i++) {
                    for (var j = 1; j <= nhu; j++) {
                        NN[i + n1index][j + n2index] = 1;
                    }
                    //NN[i + n1index][i + n1index] = 1;
                }
            }
            // Connect last layer to outputs.
            n1index = ni + (nl - 1) * nhu;
            n2index = ni + nl * nhu;
            for (var i = 1; i <= nhu; i++) {
                for (var j = 1; j <= no; j++) {
                    NN[i + n1index][j + n2index] = 1;
                    //NN[j + n2index][j + n2index] = 1;
                }
                //NN[i + n1index, i + n1index] = 1;
            }
            // Add the neurons labels.
            lindex = 0;
            nindex = 1;
            for (var i = 1; i < dimNN[0]; i++) {
                if (lindex == 0) {
                    label = "i" + nindex;
                    nindex++;
                    if (nindex > ni) {
                        lindex++;
                        nindex = 1;
                    }
                } else if ((lindex > 0) & (lindex <= nl)) {
                    label = "h" + lindex + "," + nindex;
                    nindex++;
                    if (nindex > nhu) {
                        lindex++;
                        nindex = 1;
                    }
                } else {
                    label = "o" + nindex;
                    nindex++;
                }
                NN[0][i] = label;
                NN[i][0] = label;
            }
        }
        // Add loops (for neural networks).
        if (ni > 0) {
            for (var i = ni + 1; i < dimNN[0]; i = i + 1) {
                NN[i][i] = 1;
            }
        } else {
            // Remove loops.
            for (var i = 0; i < dimNN[0]; i = i + 1) {
                NN[i][i] = 0;
            }
        }
        if (topology == 'mlp') {
            // Add the neurons labels.
            lindex = 0;
            nindex = 1;
            for (var i = 1; i < dimNN[0]; i++) {
                if (lindex == 0) {
                    label = "i" + nindex;
                    nindex++;
                    if (nindex > ni) {
                        lindex++;
                        nindex = 1;
                    }
                } else if ((lindex > 0) & (lindex <= nl)) {
                    label = "h" + lindex + "," + nindex;
                    nindex++;
                    if (nindex > nhu) {
                        lindex++;
                        nindex = 1;
                    }
                } else {
                    label = "o" + nindex;
                    nindex++;
                }
                NN[0][i] = label;
                NN[i][0] = label;
            }
        } else {
            // Add the vertices labels.
            for (var i = 1; i < dimNN[0]; i = i + 1) {
                NN[0][i] = 'v' + i;
                NN[i][0] = 'v' + i;
            }
        }
        return NN;
    }

    /**
     * Returns the labels of an adjacency matrix.
     * @param {object}   NN - Adjacency matrix.
     * @return {object}  The labels of an adjacency matrix.
     */
    this.getLabels = function(NN) {
        var dimNN = core.dim(NN);
        var dimI = dimNN[0];
        var labels = [''];
        for (var i = 1; i < dimI; i++) {
            labels.push(NN[i][0]);
        }
        return(labels);
    }

    /**
     * Trains an artificial neural network, represented as an adjacency matrix.
     * @param {object}   NN - Adjacency matrix.
     * @param {object}   inMatrix - Input data for training.
     * @param {object}   outMatrix - Output data for training.
     * @param {number}   ni - Number of input neurons.
     * @param {number}   no - Number of output neurons.
     * @param {number}   lRate - Learning rate.
     * @param {string}   AF - Activation function. It can be:
     *                        linear, logistic or tanh.
     * @param {string}   OAF - Activation function of the last layer. It can be:
     *                         linear, logistic or tanh.
     * @return {object}  Trained neural network.
     */
    this.learn = function(NN, inMatrix, outMatrix, ni, no, lRate, AF, OAF) {
        if (typeof ni == 'undefined') {
            var ni = 0;
        }
        if (typeof no == 'undefined') {
            var no = 0;
        }
        if (typeof lRate == 'undefined') {
            var lRate = 1;
        }
        if (typeof AF == 'undefined') {
            var AF = 'logistic';
        }
        if (typeof OAF == 'undefined') {
            var OAF = 'linear';
        }
        var dimNN = core.dim(NN);
        var dimI = dimNN[0];
        var dimJ = dimNN[1];
        var firstOut = dimJ - 1 - no;
        // Clear inputs and outputs.
        for (var i = 0; i < dimI - 1; i++) {
            NN[0][i] = 0.0;
            NN[i][0] = 0.0;
            NN[i][dimJ - 1] = 0.0;
            NN[dimI - 1][i] = 0.0;
        }
        // Assign inputs.
        for (var j = 0; j < ni; j++) {
            NN[j + 1][0] = inMatrix[j];
        }
        // Calculate the neurons output.
        for (var j = ni + 1; j < (dimJ - 1); j++) {
            NN[0][j] = 0.0;
            // Weighted sums.
            // x = x1 * w1 + x2 * w2 + ...
            for (var i = 1; i < (dimI - 1); i++) {
                if (i < j) {
                    if (NN[i][j] != 0) {
                        NN[0][j] = NN[0][j] + NN[i][j] * NN[i][0];
                    }
                } else if (i == j) {
                    if (NN[i][j] != 0) {
                        NN[0][j] = NN[0][j] + NN[i][j];
                    }
                } else {
                    break;
                };
            }
            // Activation function.
            if (j < firstOut) {
                // Linear: f(x) = x
                //         df(x)/dx = 1
                if (AF == 'linear') {
                    // Calculate y = f(x)
                    NN[j][0] = NN[0, j];
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ - 1] = 1.0;
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                //          df(x)/dx = f(x) * (1 - f(x))
                } else if (AF == 'logistic') {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ - 1] = NN[j][0] * (1.0 - NN[j][0]);
                // Hyperbolic tangent: f(x) = 2 / (1 + e^(-2x)) - 1
                //                     df(x)/dx = 1 - f(x)^2
                } else if (AF == 'tanh') {
                    // Calculate y = f(x)
                    NN[j][0] = 2.0 / (1.0 + math.exp(-2.0 * NN[0][j])) - 1.0;
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ- 1] = 1.0 - NN[j][0] * NN[j][0];
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                //          df(x)/dx = f(x) * (1 - f(x))
                } else {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ - 1] = NN[j][0] * (1.0 - NN[j][0]);
                }
            } else {
                // Linear: f(x) = x
                //         df(x)/dx = 1
                if (OAF == 'linear') {
                    // Calculate y = f(x)
                    NN[j][0] = NN[0][j];
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ - 1] = 1.0;
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                //          df(x)/dx = f(x) * (1 - f(x))
                } else if (OAF == 'logistic') {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ - 1] = NN[j][0] * (1.0 - NN[j][0]);
                // Hyperbolic tangent: f(x) = 2 / (1 + e^(-2x)) - 1
                //                     df(x)/dx = 1 - f(x)^2
                } else if (OAF == 'tanh') {
                    // Calculate y = f(x)
                    NN[j][0] = 2.0 / (1.0 + math.exp(-2.0 * NN[0][j])) - 1.0;
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ - 1] = 1.0 - NN[j][0] * NN[j][0];
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                //          df(x)/dx = f(x) * (1 - f(x))
                } else {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                    // Calculate df(x)/dx for backpropagation.
                    NN[j][dimJ - 1] = NN[j][0] * (1.0 - NN[j][0]);
                }
            }
        }
        // Calculate delta for the output neurons.
        // d = z - y;
        for (var i = 0; i < no; i++) {
            NN[dimI - 1][firstOut + i] = outMatrix[i] - NN[firstOut + i][0];
        }
        // Calculate delta for hidden neurons.
        // d1 = w1 * d2 + w2 * d2 + ...
        for (var j = dimJ - 2; j > ni; j--) {
            for (i = ni + 1; i < (dimI - 1 - no); i++) {
                if (i == j) {
                    break;
                }
                if (NN[i][j] != 0) {
                    NN[dimI - 1][i] = NN[dimI - 1][i] + NN[i][j] * NN[dimI - 1][j];
                }
            }
        }
        // Adjust weights.
        // x = x1 * w1 + x2 * w2 + ...
        // w1 = w1 + n * d * df(x)/dx * x1
        // w2 = w2 + n * d * df(x)/dx * x2
        for (var j = no + 1; j < (dimJ - 1); j++) {
            for (var i = 1; i < (dimI - 1 - no); i++) {
                if (i < j) {
                    if (NN[i][j] != 0) {
                        NN[i][j] = NN[i][j] + lRate * NN[dimI - 1][j] * NN[j][dimJ - 1] * NN[i][0];
                    }
                } else if (i == j) {
                    if (NN[i][j] != 0) {
                        NN[i][j] = NN[i][j] + lRate * NN[dimI - 1][j] * NN[j][dimJ - 1];
                    }
                } else {
                    break;
                }
            }
        }
        return NN;
    }

    /**
     * It prepares a neural network, represented as an adjacency matrix,
     * replacing cells with value one (1), with random real numbers.
     * @param {object}   ANNMatrix - Adjacency matrix.
     * @param {boolean}  randomize - Fill cells with random real numbers.
     * @param {boolean}  allowLoops - Allow loops.
     * @param {boolean}  negativeWeights - Allow negative weights.
     * @return {object}  Matrix filled with random numbers.
     */
    this.prepare = function(ANNMatrix, randomize, allowLoops, negativeWeights) {
        if (typeof randomize == 'undefined') {
            var randomize = false;
        }
        if (typeof allowLoops == 'undefined') {
            var allowLoops = false;
        }
        if (typeof negativeWeights == 'undefined') {
            var negativeWeights = false;
        }
        var dimANN = core.dim(ANNMatrix);
        var dimI = dimANN[0];
        var dimJ = dimANN[1];
        let NN = core.matrix(0.0, dimI + 1, dimJ + 1);
        for (var i = 1; i < dimI; i++) {
            for (var j = 1; j < dimJ; j++) {
                NN[i][j] = ANNMatrix[i][j];
            }
        }
        var dimNN = core.dim(NN);
        var dimI = dimNN[0];
        var dimJ = dimNN[1];
        // Clear inputs and outputs.
        for (var i = 0; i < dimI; i++) {
            NN[0][i] = 0.0;
            NN[i][0] = 0.0;
            if (!allowLoops) {
                NN[i][i] = 0.0;
            }
            NN[i][dimJ - 1] = 0.0;
            NN[dimI - 1][i] = 0.0;
        }
        // Clear the lower triangular matrix.
        for (var i = 1; i < dimI; i++) {
            for (var j = 1; j < dimJ; j++) {
                if (i > j) {
                    NN[i][j] = 0.0;
                }
            }
        }
        // Set random weights.
        if (randomize) {
            for (var i = 1; i < (dimI - 1); i++) {
                for (var j = 1; j < (dimJ - 1); j++) {
                    if (NN[i][j] == 1) {
                        if (negativeWeights) {
                            NN[i][j] = 2.0 * math.random() - 1.0;
                        } else {
                            NN[i][j] = math.random();
                        }
                    }
                }
            }
        }
        return NN;
    }

    /**
     * Remove the last row and last column from the matrix.
     * @param {object}   ANNMatrix - Adjacency matrix.
     * @return {object}  The matrix without the last row and last column.
     */
     this.reduce = function(ANNMatrix) {
        var dimANN = core.dim(ANNMatrix);
        var dimI = dimANN[0];
        var dimJ = dimANN[1];
        var NN = core.matrix(0.0, dimI - 1, dimJ - 1);
        for (var i = 1; i < (dimI - 1); i++) {
            for (var j = 1; j < (dimJ - 1); j++) {
                NN[i][j] = ANNMatrix[i][j];
            }
        }
        return(NN);
    }

    /**
     * Sets the labels of an adjacency matrix.
     * @param {object}   NN - Adjacency matrix.
     * @param {object}   labels - Matrix labels.
     * @return {object}  The adjacency matrix.
     */
    this.setLabels = function(NN, labels) {
        var dimNN = core.dim(NN);
        var dimI = dimNN[0];
        for (var i = 1; i < dimI; i++) {
            NN[i][0] = labels[i];
            NN[0][i] = labels[i];
        }
        return(labels);
    }

    /**
     * It processes incoming data using a trained neural network.
     * @param {object}   NN - adjacency matrix.
     * @param {object}   inMatrix - Input data for training.
     * @param {number}   ni - Number of input neurons.
     * @param {number}   no - Number of output neurons.
     * @param {string}   AF - Activation function. It can be:
     *                        linear, logistic or tanh.
     * @param {string}   OAF - Activation function of the last layer. It can be:
     *                         linear, logistic or tanh.
     * @param {string}   OF - Output function. It can be:
     *                        linear, step, or none.
     * @param {object}   OFC - Output function coefficients.
     * @return {object}  Trained neural network.
     */
    this.think = function(NN, inMatrix, ni, no, AF, OAF, OF, OFC) {
        if (typeof ni == 'undefined') {
            var ni = 0;
        }
        if (typeof no == 'undefined') {
            var no = 0;
        }
        if (typeof AF == 'undefined') {
            var AF = 'logistic';
        }
        if (typeof OAF == 'undefined') {
            var OAF = 'linear';
        }
        if (typeof OF == 'undefined') {
            var OF = 'none';
        }
        if (typeof OFC == 'undefined') {
            var OFC = [1, 0];
        }
        var output = core.matrix(0.0, 1, no);
        var dimNN = core.dim(NN);
        var dimI = dimNN[0];
        var dimJ = dimNN[1];
        var firstOut = dimJ - 1 - no;
        // Clear inputs and outputs.
        for (var i = 0; i < dimI - 1; i++) {
            NN[0][i] = 0.0;
            NN[i][0] = 0.0;
            NN[i][dimJ - 1] = 0.0;
            NN[dimI - 1][i] = 0.0;
        }
        // Assign inputs.
        for (var j = 0; j < ni; j++) {
            NN[j + 1][0] = inMatrix[j];
        }
        // Calculate the neurons output.
        for (var j = ni + 1; j < (dimJ - 1); j++) {
            NN[0][j] = 0.0;
            // Weighted sums.
            // x = x1 * w1 + x2 * w2 + ...
            for (var i = 1; i < (dimI - 1); i++) {
                if (i < j) {
                    if (NN[i][j] != 0) {
                        NN[0][j] = NN[0][j] + NN[i][j] * NN[i][0];
                    }
                } else if (i == j) {
                    if (NN[i][j] != 0) {
                        NN[0][j] = NN[0][j] + NN[i][j];
                    }
                } else {
                    break;
                }
            }
            // Activation function.
            if (j < firstOut) {
                // Linear: f(x) = x
                if (AF == 'linear') {
                    // Calculate y = f(x)
                    NN[j][0] = NN[0][j];
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                } else if (AF == 'logistic') {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                // Hyperbolic tangent: f(x) = 2 / (1 + e^(-2x)) - 1
                } else if (AF == 'tanh') {
                    // Calculate y = f(x)
                    NN[j][0] = 2.0 / (1.0 + math.exp(-2.0 * NN[0][j])) - 1.0;
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                } else {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                }
            } else {
                // Linear: f(x) = x
                if (OAF == 'linear') {
                    // Calculate y = f(x)
                    NN[j][0] = NN[0][j];
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                } else if (OAF == 'logistic') {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                // Hyperbolic tangent: f(x) = 2 / (1 + e^(-2x)) - 1
                } else if (OAF == 'tanh') {
                    // Calculate y = f(x)
                    NN[j][0] = 2.0 / (1.0 + math.exp(-2.0 * NN[0][j])) - 1.0;
                // Logistic: f(x) = 1.0 / (1.0 + e^(-x))
                } else {
                    // Calculate y = f(x)
                    NN[j][0] = 1.0 / (1.0 + math.exp(-1.0 * NN[0][j]));
                }
            }
        }
        // Set the output matrix.
        for (var i = 0; i < no; i++) {
            if (OF == 'linear') {
                output[i] = OFC[0] * NN[firstOut + i][0] + OFC[1];
            } else if (OF == 'step') {
                if (OAF == 'linear') {
                    if (NN[firstOut + i][0] >= 0.0) {
                        output[i] = 1;
                    } else {
                        output[i] = 0;
                    }
                } else if (OAF == 'logistic') {
                    if (NN[firstOut + i][0] >= 0.5) {
                        output[i] = 1;
                    } else {
                        output[i] = 0;
                    }
                } else if (OAF == 'tanh') {
                    if (NN[firstOut + i][0] >= 0.0) {
                        output[i] = 1;
                    } else {
                        output[i] = 0;
                    }
                } else {
                    if (NN[firstOut + i][0] >= 0.0) {
                        output[i] = 1;
                    } else {
                        output[i] = 0;
                    }
                }
            } else if (OF == 'none') {
                output[i] = NN[firstOut + i][0];
            } else {
                output[i] = NN[firstOut + i][0];
            }
        }
        return output;
    }

    /**
     * Train an artificial neural network, represented as an adjacency matrix.
     * @param {object}    NN - Adjacency matrix.
     * @param {object}    inMatrix - Input data for training.
     * @param {object}    outMatrix - Output data for training.
     * @param {number}    lRate - Learning rate.
     * @param {string}    AF - Activation function. It can be:
     *                         linear, logistic or tanh.
     * @param {string}    OAF - Activation function of the last layer. It can be:
     *                          linear, logistic or tanh.
     * @param {string}    OF - Output function. It can be:
     *                         linear, step or none.
     * @param {string}    OFC - Output function coefficients.
     * @param {number}    maxEpochs - Maximum number of epochs.
     * @param {number}    minimumCorrectness - Minimum correctness.
     * @param {function}  callback - Callback function.
     * @param {number}    interval - Interval between calls from the callback function.
     * @return {object}   Trained neural network.
     */
    this.training = function(NN, inMatrix, outMatrix, lRate, AF, OAF, OF, OFC, maxEpochs, minimumCorrectness, callback, interval) {
        if (typeof lRate == 'undefined') {
            var lRate = 1;
        }
        if (typeof AF == 'undefined') {
            var AF = 'logistic';
        }
        if (typeof OAF == 'undefined') {
            var OAF = 'linear';
        }
        if (typeof OF == 'undefined') {
            var OF = 'none';
        }
        if (typeof OFC == 'undefined') {
            var OFC = [1, 0];
        }
        if (typeof maxEpochs == 'undefined') {
            var maxEpochs = 1;
        }
        if (typeof minimumCorrectness == 'undefined') {
            var minimumCorrectness = 1;
        }
        if (typeof correctnessMatrix == 'undefined') {
            var correctnessMatrix = [];
        }
        if (typeof interval == 'undefined') {
            var interval = 0;
        }
        var dimIn = core.dim(inMatrix);
        var dimOut = core.dim(outMatrix);
        var input = core.matrix(0.0, 1, dimIn[1]);
        var output = core.matrix(0.0, 1, dimOut[1]);
        var NNOut = core.matrix(0.0, 1, dimOut[1]);
        var epochs = 0;
        var epochsCounter = 0;
        var date = core.date();
        var ETL1 = date.getTime();
        var ETL2 = date.getTime();
        var squaredError = core.matrix(0.0, 1, dimIn[0]);
        var ERR = [];
        var SE = 0;
        var RSS = 0;
        var correctness = 0;
        var correctnessMatrix = core.matrix(0.0, maxEpochs + 1, 2);
        while (epochs < maxEpochs) {
            var hits = 0;
            epochs++;
            // Verify learning.
            for (var i = 0; i < dimIn[0]; i++) {
                // Assign inputs and outputs.
                for (var j = 0; j < dimIn[1]; j++) {
                    input[j] = inMatrix[i][j];
                }
                for (var j = 0; j < dimOut[1]; j++) {
                    output[j] = outMatrix[i][j];
                }
                // Verify learning.
                if (OFC != []) {
                    NNOut = this.think(NN, input, dimIn[1], dimOut[1], AF, OAF, OF, OFC);
                } else {
                    NNOut = this.think(NN, input, dimIn[1], dimOut[1], AF, OAF, OF);
                }
                if (output == NNOut) {
                    hits++;
                }
                ERR = core.sub(output, NNOut);
                if (typeof ERR == 'number') {
                    ERR = [ERR];
                }
                SE = matrix.sum2(ERR) / 2.0;
                squaredError[i] = SE;
                RSS = matrix.sum(squaredError);
                correctness = hits / dimIn[0];
                correctnessMatrix[epochs][0] = RSS;
                correctnessMatrix[epochs][1] = correctness;
                if (hits == dimIn[0]) {
                    result = [epochs, RSS, correctnessMatrix];
                    return result;
                }
                if (correctness >= minimumCorrectness) {
                    result = [epochs, RSS, correctnessMatrix];
                    return result;
                }
            }
            // Learn this set.
            for (var i = 0; i < dimIn[0]; i++) {
                // Assign inputs and outputs.
                input = inMatrix[i];
                output = outMatrix[i];
                // Learn this set.
                this.learn(NN, input, output, dimIn[1], dimOut[1], lRate, AF, OAF);
            }
            epochsCounter++;
            if (interval != 0) {
                if (typeof callback != 'undefined') {
                    if (epochsCounter >= interval) {
                        ETL2 = date.getTime();
                        var ETL = ETL2 - ETL1;
                        if (typeof callback != 'undefined') {
                            callback(epochs, RSS, correctness, ETL);
                        }
                        epochsCounter = 0;
                        ETL1 = date.getTime();
                    }
                }
            }
        }
        result = [epochs, RSS, correctnessMatrix];
        return result;
    }
}

ann = new ANN();/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
  * MaiaScript Computer Algebra System library.
  * @class 
  */
function CAS() {
    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }

    /**
     * Evaluates expressions using the Algebrite CAS.
     * For complete reference, see the Algebrite documentation
     * at http://algebrite.org
     * @param {string}   expr - Algebraic expression.
     * @return {object}  Result of the expression.
     */
    this.eval = function(expr) {
        var casExpr = core.replace(expr, "**", "^")
        var res;
        if (typeof Algebrite != 'undefined') {
            res = core.replace(Algebrite.run(casExpr), "^", "**");
        } else {
            throw new Error("The Algebrite CAS was not loaded");
        }
        return res;
    }
}

cas = new CAS();

if (typeof process !== 'undefined') {
    try {
        var Algebrite = require('algebrite');
    } catch (e) {
        console.error(e.message);
    }
}
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * MaiaScript GPU compute library.
 * @class
 */
function MaiaGPU() {
    init();
    
    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }
    
    /**
     * Tests whether GPU is supported.
     * @return {boolean}  Returns true if supported and false otherwise.
     */
    this.isSupported = function() {
        var res = false;
        if (typeof(GPU) != "undefined") {
            res = true;
        }
        return res;
    }

    /**
     * Creates a new GPU object.
     * @return {object}  An object to interact with the GPU device.
     */
    this.new = function() {
        var device;
        if (typeof(GPU) != "undefined") {
            device = new GPU();
        }
        return device;
    }
}

gpu = new MaiaGPU();

if (typeof process !== 'undefined') {
    try {
        var {GPU} = require('gpu.js');
    } catch (e) {
        console.error(e.message);
    }
}
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * MaiaScript multi-task library.
 * @class
 */
function Task() {
    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
    }
    
    /**
     * Tests whether multi-tasking is supported in the browser.
     * @return {boolean}  Returns true if supported and false otherwise.
     */
    this.isSupported = function() {
        var res = false;
        if (typeof(Worker) != "undefined") {
            res = true;
        }
        return res;
    }

    /**
     * Creates a new parallel task.
     * The thread will be created in a new scope.
     * For communication with the master thread, the postMessage function (method) and onmessage event must be used.
     * To finish executing the thread, the terminate method must be executed.
     * To import a script from within the thread, you can use the importScripts function.
     * @param {object}   func - Function that will be executed on a new thread.
     * @return {object}  An object to interact with the created thread.
     */
    this.new = function(func) {
        var worker;
        if (typeof(Worker) != "undefined") {
            var script = func.toString().match(/^\s*function\s*\(\s*\)\s*\{(([\s\S](?!\}$))*[\s\S])/)[1];
            var blob = new Blob([script], {type:'text/javascript'});
            if (typeof(window) != "undefined") {
                var blobURL = window.URL.createObjectURL(blob);
            } else {
                var blobURL = 'data:,' + script;
            }
            worker = new Worker(blobURL);
        }
        return worker;
    }
}

task = new Task();

if (typeof process !== 'undefined') {
    try {
        var Worker = require('web-worker');
    } catch (e) {
        console.error(e.message);
    }
    try {
        var Blob = require('cross-blob');
    } catch (e) {
        console.error(e.message);
    }
}
/**
 * @license
 * Copyright 2020 Roberto Luiz Souza Monteiro,
 *                Renata Souza Barreto,
 *                Hernane Borges de Barros Pereira.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * MaiaScript virtual machine.
 * @class
 */
function MaiaVM() {
    init();

    /**
     * Creates the attributes of the class.
     */
    function init() {
        // Class attributes goes here.
        compiledCode = {
            'xml': '',
            'mil': '',
            'js': ''
        }
    }

    /**
     * Compiles MaiaScript code, contained in <script> tags for JavaScript
     * and inserts the compiled code in a new <script> tag in the <body> tag
     * of the document.
     * 
     * MaiaScript codes must be in <script> tags of type 'text/maiascript',
     * as in the following example:
     * 
     * <script type='text/maiascript'> ... </script>
     * 
     * This method must be called from the onLoad event of the document's
     * <body> tag, as in the following example:
     * 
     * <body onload='maiavm.compile()'> ... </body>
     */
    this.compile = function() {
        var scripts = document.querySelectorAll('script[type="text/maiascript"]');
        for (index in scripts) {
            if (typeof scripts[index].getAttribute != 'undefined') {
                var fileName = scripts[index].getAttribute('src');
                if (typeof fileName != 'undefined') {
                    if (fileName) {
                        compiledCode.maia = '';
                        fetch(fileName)
                            .then(response => response.text())
                            .then(data => {
                                var code = data;
                                if (typeof code != 'undefined') {
                                    if (typeof code == 'string') {
                                        compiledCode.xml = '';

                                        function getXml(data) {
                                            compiledCode.xml += data;
                                        }
                                        var s = new MaiaScript.XmlSerializer(getXml, true);
                                        var maiaScriptParser = new MaiaScript(code, s);
                                        try {
                                            maiaScriptParser.parse_Program();
                                        } catch (pe) {
                                            if (!(pe instanceof maiaScriptParser.ParseException)) {
                                                throw pe;
                                            } else {
                                                var parserError = maiaScriptParser.getErrorMessage(pe);
                                                system.log(parserError);
                                                throw parserError;
                                            }
                                        }
                                        var parser = new DOMParser();
                                        var xml = parser.parseFromString(compiledCode.xml, 'text/xml');
                                        var compiler = new MaiaCompiler();
                                        compiledCode.js = compiler.compile(xml, false, indentationLength);
                                        try {
                                            var script = document.createElement('script');
                                            script.type = 'text/javascript';
                                            script.text = compiledCode.js;
                                            document.body.appendChild(script);
                                        } catch (se) {
                                            var scriptError = se.message;
                                            system.log(scriptError);
                                            throw scriptError;
                                        }
                                    }
                                }
                            });
                    }
                }
            }
            var code = scripts[index].innerHTML;
            if (typeof code != 'undefined') {
                if (typeof code == 'string') {
                    compiledCode.xml = '';

                    function getXml(data) {
                        compiledCode.xml += data;
                    }
                    var s = new MaiaScript.XmlSerializer(getXml, true);
                    var maiaScriptParser = new MaiaScript(code, s);
                    try {
                        maiaScriptParser.parse_Program();
                    } catch (pe) {
                        if (!(pe instanceof maiaScriptParser.ParseException)) {
                            throw pe;
                        } else {
                            var parserError = maiaScriptParser.getErrorMessage(pe);
                            system.log(parserError);
                            throw parserError;
                        }
                    }
                    var parser = new DOMParser();
                    var xml = parser.parseFromString(compiledCode.xml, 'text/xml');
                    var compiler = new MaiaCompiler();
                    compiledCode.js = compiler.compile(xml, false, indentationLength);
                    try {
                        var script = document.createElement('script');
                        script.type = 'text/javascript';
                        script.text = compiledCode.js;
                        document.body.appendChild(script);
                    } catch (se) {
                        var scriptError = se.message;
                        system.log(scriptError);
                        throw scriptError;
                    }
                }
            }
        }
    }

    /**
     * Compiles the MaiaScript code passed as a command line argument
     * and executes the code in the JavaScript interpreter from which
     * this method was invoked.
     */
    this.run = function() {
        // Supports only the Node.js interpreter.
        if (typeof process !== 'undefined') {
            var command = 'node';
            var argv = process.argv.slice();
            compiledCode.xml = '';
            var fs = require('fs');
            var readTextFile = fs.readFileSync;

            function getXml(data) {
                compiledCode.xml += data;
            }

            function read(input) {
                if (/^{.*}$/.test(input)) {
                    return input.substring(1, input.length - 1);
                } else {
                    var content = readTextFile(input, 'utf-8');
                    return content.length > 0 && content.charCodeAt(0) == 0xFEFF ? content.substring(1) : content;
                }
            }

            system.argv = argv.slice();
            system.argc = argv.length;
            var inputFile;
            var outputFile;
            var justCompile = false;
            var indentCode = false;
            var indentationLength = 4;
            var outputFileType = 'js';
            var outputContents = '';
            if (argv.length > 2) {
                var i = 2;
                while (i < argv.length) {
                    if ((argv[i] == '-h') || (argv[i] == '--help')) {
                        system.log('MaiaScript Command Line Interface (CLI)');
                        system.log('Usage: maiascript [options] [script.maia] [--] [arguments]');
                        system.log('Options:');
                        system.log('-h     --help               Displays this help message.');
                        system.log('-o     <script.js>          Output file name.');
                        system.log('       --indent             Indent the output code.');
                        system.log('       --spaces             Number of spaces in the indentation.');
                        system.log('-c                          Just compile to JS, don\'t run the script.');
                        system.log('       --json               Just compile to JSON, don\'t run the script.');
                        system.log('-m                          Just compile to MIL, don\'t run the script.');
                        system.log('-x                          Just compile to XML, don\'t run the script.');
                        system.log('       --                   End of compiler options.\n');
                    } else if (argv[i] == '-o') {
                        i++;
                        outputFile = argv[i];
                    } else if (argv[i] == '--indent') {
                        indentCode = true;
                    } else if (argv[i] == '--spaces') {
                        i++;
                        indentationLength = core.toNumber(argv[i]);
                    } else if (argv[i] == '-c') {
                        justCompile = true;
                        outputFileType = 'js';
                    } else if (argv[i] == '--json') {
                        justCompile = true;
                        outputFileType = 'json';
                    } else if (argv[i] == '-m') {
                        justCompile = true;
                        outputFileType = 'mil';
                    } else if (argv[i] == '-x') {
                        justCompile = true;
                        outputFileType = 'xml';
                    } else if (argv[i] == '--') {
                        break;
                    } else {
                        inputFile = argv[i];
                        break;
                    }
                    i++;
                }
                system.argv = argv.slice(i);
                system.argc = system.argv.length;
                if (typeof inputFile != 'undefined') {
                    var code = read(String(inputFile));
                    var s = new MaiaScript.XmlSerializer(getXml, false);
                    var maiaScriptParser = new MaiaScript(code, s);
                    try {
                        maiaScriptParser.parse_Program();
                    } catch (pe) {
                        if (!(pe instanceof maiaScriptParser.ParseException)) {
                            throw pe;
                        } else {
                            var parserError = maiaScriptParser.getErrorMessage(pe);
                            system.log(parserError);
                            throw parserError;
                        }
                    }
                    var parser = new DOMParser();
                    var xml = parser.parseFromString(compiledCode.xml, 'text/xml');
                    var compiler = new MaiaCompiler();
                    compiledCode.mil = compiler.xmlToMil(xml);
                    compiledCode.js = compiler.compile(xml, indentCode, indentationLength);
                    if (justCompile) {
                        if (typeof outputFile == 'undefined') {
                            var fileName = inputFile.split('.').shift();
                            if (outputFileType == 'js') {
                                outputFile = fileName + '.js';
                                outputContents = compiledCode.js;
                            } else if (outputFileType == 'json') {
                                outputFile = fileName + '.json';
                                if (indentCode) {
                                    outputContents = JSON.stringify(compiledCode.mil, null, indentationLength);
                                } else {
                                    outputContents = JSON.stringify(compiledCode.mil);
                                }
                            } else if (outputFileType == 'mil') {
                                outputFile = fileName + '.mil';
                                if (indentCode) {
                                    outputContents = JSON.stringify(compiledCode.mil, null, indentationLength);
                                } else {
                                    outputContents = JSON.stringify(compiledCode.mil);
                                }
                            } else if (outputFileType == 'xml') {
                                outputFile = fileName + '.xml';
                                outputContents = compiledCode.xml;
                            } else {
                                outputFile = fileName + '.js';
                                outputContents = compiledCode.js;
                            }
                        } else {
                            outputContents = compiledCode.js;
                        }
                        fs.writeFile(outputFile, outputContents, function(err) {
                            if (err) {
                                throw err;
                            }
                        });
                    } else {
                        try {
                            const vm = require('vm');
                            const script = new vm.Script(compiledCode.js);
                            script.runInThisContext();
                        } catch (e) {
                            var evalError = e.message;
                            system.log(evalError);
                        }
                    }
                } else {
                    system.log('MaiaScript Command Line Interface (CLI)');
                    system.log('Usage: maiascript [options] [script.maia] [--] [arguments]');
                }
            } else {
                var options = {
                    input: process.stdin,
                    output: process.stdout
                }

                // Command prompt.
                const readline = require('readline');
                const rl = readline.createInterface(options);

                rl.setPrompt(': ');
                rl.prompt();

                function runCommand(commandLine) {
                    var res;
                    if (commandLine.trim() == 'exit') {
                        process.exit(0);
                    }
                    try {
                        res = core.eval(commandLine);
                    } catch (e) {
                        var evalError = e.message;
                        system.log(evalError);
                        system.showMessageDialog(evalError);
                    }
                    if (typeof res != 'undefined') {
                        system.log(res);
                    }
                    rl.prompt();
                }

                rl.on('line', runCommand);
            }
        }
    }
}

maiavm = new MaiaVM();

/*
 * Run MaiaScript code if this script has been invoked
 * from the command line.
 */
if (typeof process !== 'undefined') {
    // Emulate DOM.
    const jsdom = require("jsdom");
    const {JSDOM} = jsdom;
    var doc = new JSDOM();
    var DOMParser = doc.window.DOMParser;

    // Emulate Web SQL.
    try {
        const openDatabase = require('websql');
    } catch (e) {
        console.error(e.message);
    }

    var alert = system.log;

    maiavm.run();
}