// An in-line function.
f(x) = 2 * x ** 2 + x - 1

// A simple function.
g(n) {
    if (n == 0 || n == 1) {
        return 1
    }
    return n * g(n - 1)
}

// An asynchronous function.
f1(x) ?= {
    return x
}

// A parallel function.
f2(x) #= {
    return x
}

// An object constructor.
f3(x) := {
    y = x
    return this.y
}

// A function in MaiaC.
i32 f4(i32 a, i32 b) {
    return a + b;
}

// A function in JavaScript.
f5(x) /{
    y = x + 1;
    return y;
}/

// A function in WebAssembly.
i32 f6(i32 a, i32 b) /{
    (i32.add
      (get_local $a)
      (get_local $b)
    )
}/

// A synchronous function call.
//a ?= f1(2)
// A parallel function runs synchronously if a thread is not created for it.
b = f2(2)
// Creating an object.
c := f3(2)
// Calling an MaiaC function.
d = f4(1, 2)
// Calling a JavaScript function.
e = f5(2)
// Calling an WebAssembly function.
f = f6(1, 2)

system.println(f(2));
system.println(g(5));
//system.println(a);
system.println(b);
system.println(JSON.stringify(c));
system.println(d);
system.println(e);
system.println(f);
